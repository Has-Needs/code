'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var transform = function (_a) {
    var _b;
    var current = _a.current, previous = _a.previous, value = _a.value;
    if (current[0] !== current[1])
        return null;
    if (typeof current[0] !== 'number')
        return null;
    if (typeof current[1] !== 'number')
        return null;
    var start = current[0], end = current[1];
    if (start > 0 && previous[0] === start && previous[1] === start + 1) {
        return [start - 1, end];
    }
    if ((_b = value[start]) === null || _b === void 0 ? void 0 : _b.length) {
        return [start, end + 1];
    }
    // TODO: add switch prop for this behaviour
    // if (eq(current, [input.maxLength, input.maxLength])) {
    //  return [input.maxLength -1, input.maxLength]
    // }
    return null;
};
var getSelectionState = function (input) {
    return [+input.selectionStart, +input.selectionEnd];
};
var ZERO = [0, 0];
var eq = function (a, b) {
    return a[0] === b[0] && a[1] === b[1];
};
var useCodeInputHandler = function (_a) {
    var inputRef = _a.inputRef, previousRef = _a.previousRef, setSelection = _a.setSelection;
    return react.useCallback(function (_a) {
        var type = _a.type;
        var input = inputRef.current;
        var previous = previousRef.current;
        if (!previous || !input)
            return;
        var direction = input.selectionDirection, value = input.value;
        var current = getSelectionState(input);
        var save = function (selection) {
            if (eq(selection, previous)) {
                if (eq(selection, ZERO))
                    return;
                if (eq(selection, getSelectionState(input)))
                    return;
            }
            previousRef.current = selection;
            setSelection(function (state) { return (eq(state, selection) ? state : selection); });
            input.setSelectionRange.apply(input, __spreadArray(__spreadArray([], selection, false), [direction || undefined], false));
        };
        if (type === 'selectionchange' && document.activeElement !== input) {
            return save([value.length, value.length]);
        }
        save(transform({ previous: previous, current: current, direction: direction, value: value }) || current);
    }, [inputRef, previousRef, setSelection]);
};
var useCodeInputEffect = function (_a) {
    var inputRef = _a.inputRef, previousRef = _a.previousRef, handler = _a.handler;
    react.useLayoutEffect(function () {
        var input = inputRef.current;
        if (previousRef.current === undefined && input) {
            previousRef.current = getSelectionState(input);
        }
        var handlerRef = handler; // closure ref to added handler
        input === null || input === void 0 ? void 0 : input.addEventListener('input', handlerRef);
        document.addEventListener('selectionchange', handlerRef);
        return function () {
            input === null || input === void 0 ? void 0 : input.removeEventListener('input', handlerRef);
            document.removeEventListener('selectionchange', handlerRef);
        };
    }, [inputRef, handler, previousRef]);
};
var useCodeInput = function (inputRef) {
    var _a = react.useState(ZERO), selection = _a[0], setSelection = _a[1];
    var previousRef = react.useRef();
    var handler = useCodeInputHandler({ inputRef: inputRef, previousRef: previousRef, setSelection: setSelection });
    useCodeInputEffect({ inputRef: inputRef, previousRef: previousRef, handler: handler });
    return selection;
};

exports.useCodeInput = useCodeInput;
//# sourceMappingURL=index.js.map
