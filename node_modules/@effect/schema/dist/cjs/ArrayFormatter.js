"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatIssueSync = exports.formatIssue = exports.formatErrorSync = exports.formatError = void 0;
var Arr = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Array"));
var Effect = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Effect"));
var TreeFormatter = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./TreeFormatter.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @since 0.67.0
 */

/**
 * @category formatting
 * @since 0.67.0
 */
const formatIssue = issue => go(issue);
/**
 * @category formatting
 * @since 0.67.0
 */
exports.formatIssue = formatIssue;
const formatIssueSync = issue => Effect.runSync(formatIssue(issue));
/**
 * @category formatting
 * @since 0.67.0
 */
exports.formatIssueSync = formatIssueSync;
const formatError = error => formatIssue(error.error);
/**
 * @category formatting
 * @since 0.67.0
 */
exports.formatError = formatError;
const formatErrorSync = error => formatIssueSync(error.error);
exports.formatErrorSync = formatErrorSync;
const succeed = issue => Effect.succeed([issue]);
const getArray = (issue, path, onFailure) => Effect.matchEffect(TreeFormatter.getMessage(issue), {
  onFailure,
  onSuccess: message => succeed({
    _tag: issue._tag,
    path,
    message
  })
});
const flatten = eff => Effect.map(eff, Arr.flatten);
const go = (e, path = []) => {
  const _tag = e._tag;
  switch (_tag) {
    case "Type":
      return Effect.map(TreeFormatter.formatTypeMessage(e), message => [{
        _tag,
        path,
        message
      }]);
    case "Forbidden":
      return succeed({
        _tag,
        path,
        message: TreeFormatter.formatForbiddenMessage(e)
      });
    case "Unexpected":
      return succeed({
        _tag,
        path,
        message: `is unexpected, expected ${e.ast.toString(true)}`
      });
    case "Missing":
      return succeed({
        _tag,
        path,
        message: "is missing"
      });
    case "Union":
      return getArray(e, path, () => flatten(Effect.forEach(e.errors, e => {
        switch (e._tag) {
          case "Member":
            return go(e.error, path);
          default:
            return go(e, path);
        }
      })));
    case "TupleType":
      return getArray(e, path, () => flatten(Effect.forEach(e.errors, index => go(index.error, path.concat(index.index)))));
    case "TypeLiteral":
      return getArray(e, path, () => flatten(Effect.forEach(e.errors, key => go(key.error, path.concat(key.key)))));
    case "Declaration":
    case "Refinement":
    case "Transformation":
      return getArray(e, path, () => go(e.error, path));
  }
};
//# sourceMappingURL=ArrayFormatter.js.map