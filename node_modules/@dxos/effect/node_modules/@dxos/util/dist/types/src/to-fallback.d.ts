import { type PublicKey } from '@dxos/keys';
export declare const idEmoji: string[];
export declare const idHue: ("green" | "purple" | "red" | "violet" | "amber" | "lime" | "emerald" | "teal" | "cyan" | "fuchsia" | "pink" | "rose")[];
export declare const keyToEmoji: (key: PublicKey) => string;
export declare const hexToEmoji: (hex: string) => string;
export declare const toEmoji: (hash: number) => string;
export declare const keyToHue: (key: PublicKey) => "green" | "purple" | "red" | "violet" | "amber" | "lime" | "emerald" | "teal" | "cyan" | "fuchsia" | "pink" | "rose";
export declare const hexToHue: (hex: string) => "green" | "purple" | "red" | "violet" | "amber" | "lime" | "emerald" | "teal" | "cyan" | "fuchsia" | "pink" | "rose";
export declare const toHue: (hash: number) => "green" | "purple" | "red" | "violet" | "amber" | "lime" | "emerald" | "teal" | "cyan" | "fuchsia" | "pink" | "rose";
export type FallbackValue = {
    emoji: string;
    hue: (typeof idHue)[number];
};
export declare const keyToFallback: (key: PublicKey) => FallbackValue;
export declare const hexToFallback: (hex: string) => FallbackValue;
export declare const toFallback: (hash: number) => FallbackValue;
//# sourceMappingURL=to-fallback.d.ts.map