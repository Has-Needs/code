import { SchemaAST, type Schema, Option } from 'effect';
type ParamKeyAnnotationValue = {
    key: string;
};
export declare const getParamKeyAnnotation: (annotated: SchemaAST.Annotated) => Option.Option<ParamKeyAnnotationValue>;
export declare const ParamKeyAnnotation: (value: ParamKeyAnnotationValue) => <S extends Schema.Annotable.All>(self: S) => Schema.Annotable.Self<S>;
/**
 * HTTP params parser.
 * Supports custom key serialization.
 */
export declare class UrlParser<T extends Record<string, any>> {
    private readonly _schema;
    constructor(_schema: Schema.Struct<T>);
    /**
     * Parse URL params.
     */
    parse(_url: string): T;
    /**
     * Return URL with encoded params.
     */
    create(_url: string, params: T): URL;
}
export {};
//# sourceMappingURL=url.d.ts.map