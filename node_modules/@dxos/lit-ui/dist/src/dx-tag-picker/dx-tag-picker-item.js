//
// Copyright 2025 DXOS.org
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { makeId } from '@dxos/react-hooks';
export class DxTagPickerItemClick extends Event {
    constructor(props) {
        super('dx-tag-picker-item-click');
        this.itemId = props.itemId;
        this.action = props.action;
    }
}
let DxTagPickerItem = class DxTagPickerItem extends LitElement {
    constructor() {
        super(...arguments);
        // TODO(thure): Get Hue type used in theme.
        this.hue = 'neutral';
        this.itemId = makeId('dx-tag-picker-item');
        this.label = 'never';
        this.rootClassName = undefined;
        this.removeLabel = undefined;
    }
    handleClickActivate() {
        this.dispatchEvent(new DxTagPickerItemClick({ itemId: this.itemId, action: 'activate' }));
    }
    handleClickRemove() {
        this.dispatchEvent(new DxTagPickerItemClick({ itemId: this.itemId, action: 'remove' }));
    }
    render() {
        const className = `dx-tag dx-tag-picker-item${this.rootClassName ? ` ${this.rootClassName}` : ''}`;
        return html `<span class=${className} data-remove=${!!this.removeLabel} data-hue=${this.hue} id=${this.id}
      ><button class="dx-focus-ring" @click=${this.handleClickActivate}>${this.label}</button>${this.removeLabel &&
            html `<button class="dx-focus-ring" aria-label=${this.removeLabel} @click=${this.handleClickRemove}>
        <dx-icon icon="ph--x--regular" />
      </button>`}</span
    >`;
    }
    createRenderRoot() {
        return this;
    }
};
__decorate([
    property({ type: String })
], DxTagPickerItem.prototype, "hue", void 0);
__decorate([
    property({ type: String })
], DxTagPickerItem.prototype, "itemId", void 0);
__decorate([
    property({ type: String })
], DxTagPickerItem.prototype, "label", void 0);
__decorate([
    property({ type: String })
], DxTagPickerItem.prototype, "rootClassName", void 0);
__decorate([
    property({ type: String })
], DxTagPickerItem.prototype, "removeLabel", void 0);
DxTagPickerItem = __decorate([
    customElement('dx-tag-picker-item')
], DxTagPickerItem);
export { DxTagPickerItem };
//# sourceMappingURL=dx-tag-picker-item.js.map