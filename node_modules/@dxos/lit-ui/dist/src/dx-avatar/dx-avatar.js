//
// Copyright 2025 DXOS.org
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, svg, LitElement } from 'lit';
import { customElement, state, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { makeId } from '@dxos/react-hooks';
const rx = '0.125rem';
let DxAvatar = class DxAvatar extends LitElement {
    constructor() {
        super();
        this.fallback = 'never';
        this.imgSrc = undefined;
        this.imgCrossOrigin = undefined;
        this.imgReferrerPolicy = undefined;
        this.variant = 'circle';
        this.status = undefined;
        this.animation = 'none';
        this.hue = undefined;
        this.hueVariant = 'fill';
        this.size = 10;
        this.icon = undefined;
        this.rootClassName = undefined;
        this.loadingStaus = 'idle';
        this.maskId = makeId('avatar__mask');
    }
    connectedCallback() {
        super.connectedCallback();
        this.role = 'img';
        this.loadingStaus = this.imgSrc ? 'loading' : 'idle';
    }
    willUpdate(changedProperties) {
        if (changedProperties.has('imgSrc')) {
            this.loadingStaus = changedProperties.get('imgSrc') ? 'loading' : 'idle';
        }
    }
    handleLoad() {
        this.loadingStaus = 'loaded';
    }
    handleError() {
        this.loadingStaus = 'error';
    }
    render() {
        const numericSize = this.size === 'px' ? 1 : Number(this.size);
        const sizePx = numericSize * 4;
        const ringWidth = this.status ? (numericSize > 4 ? 2 : numericSize > 3 ? 1 : 1) : 0;
        const ringGap = this.status ? (numericSize > 12 ? 3 : numericSize > 4 ? 2 : numericSize > 3 ? 1 : 0) : 0;
        const r = sizePx / 2 - ringGap - ringWidth;
        const isTextOnly = Boolean(this.fallback && /[0-9a-zA-Z]+/.test(this.fallback));
        const fontScale = (isTextOnly ? 3 : 3.6) * (1 / 1.612);
        const bg = this.hue
            ? this.hueVariant === 'surface'
                ? `var(--dx-${this.hue}Surface)`
                : `var(--dx-${this.hue}Fill)`
            : 'var(--surface-bg)';
        const fg = this.hue && this.hueVariant === 'surface' ? `var(--dx-${this.hue}SurfaceText)` : 'var(--dx-accentSurfaceText)';
        return html `<span
      role="none"
      class=${`dx-avatar${this.rootClassName ? ` ${this.rootClassName}` : ''}`}
      data-size=${this.size}
      data-variant=${this.variant}
      data-status=${this.status}
      data-animation=${this.animation}
      data-state-loading-status=${this.loadingStaus}
      >${svg `<svg
        viewBox=${`0 0 ${sizePx} ${sizePx}`}
        width=${sizePx}
        height=${sizePx}
        class="dx-avatar__frame"
      >
        <defs>
          <mask id=${this.maskId}>
            ${this.variant === 'circle'
            ? svg `<circle fill="white" cx="50%" cy="50%" r=${r} />`
            : svg `<rect
                  fill="white"
                  width=${2 * r}
                  height=${2 * r}
                  x=${ringGap + ringWidth}
                  y=${ringGap + ringWidth}
                  rx=${rx}
                />`}
          </mask>
        </defs>
        ${this.variant === 'circle'
            ? svg ` <circle
              cx="50%"
              cy="50%"
              r=${r}
              fill=${bg}
            />`
            : svg ` <rect
              fill=${bg}
              x=${ringGap + ringWidth}
              y=${ringGap + ringWidth}
              width=${2 * r}
              height=${2 * r}
              rx=${rx}
            />`}
        ${this.icon
            ? svg `<use
                class="dx-avatar__icon"
                href=${this.icon}
                x=${sizePx / 5}
                y=${sizePx / 5}
                width=${(3 * sizePx) / 5}
                height=${(3 * sizePx) / 5} />`
            : svg `<text
                x="50%"
                y="50%"
                class="dx-avatar__fallback-text"
                fill=${fg}
                text-anchor="middle"
                alignment-baseline="central"
                font-size=${this.size === 'px' ? '200%' : this.size * fontScale}
                mask=${`url(#${this.maskId})`}
              >
                ${this.fallback}
              </text>`}
        ${this.imgSrc &&
            svg `<image
              width="100%"
              height="100%"
              preserveAspectRatio="xMidYMid slice"
              href=${this.imgSrc}
              mask=${`url(#${this.maskId})`}
              crossorigin=${this.imgCrossOrigin}
              @load=${this.handleLoad}
              @error=${this.handleError}
            />`}
      </svg>`}<span role="none" class="dx-avatar__ring" style=${styleMap({ borderWidth: ringWidth + 'px' })}
    /></span>`;
    }
    createRenderRoot() {
        return this;
    }
};
__decorate([
    property({ type: String })
], DxAvatar.prototype, "fallback", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "imgSrc", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "imgCrossOrigin", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "imgReferrerPolicy", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "variant", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "status", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "animation", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "hue", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "hueVariant", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "size", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "icon", void 0);
__decorate([
    property({ type: String })
], DxAvatar.prototype, "rootClassName", void 0);
__decorate([
    state()
], DxAvatar.prototype, "loadingStaus", void 0);
DxAvatar = __decorate([
    customElement('dx-avatar')
], DxAvatar);
export { DxAvatar };
//# sourceMappingURL=dx-avatar.js.map