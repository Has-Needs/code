import { LitElement } from 'lit';
import { type Size } from '../defs';
export type ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';
export type AvatarVariant = 'square' | 'circle';
export type AvatarStatus = 'active' | 'inactive' | 'current' | 'error' | 'warning' | 'internal';
export type AvatarAnimation = 'pulse' | 'none';
export type DxAvatarProps = Partial<Pick<DxAvatar, 'fallback' | 'imgSrc' | 'imgCrossOrigin' | 'imgReferrerPolicy' | 'variant' | 'status' | 'animation' | 'hue' | 'hueVariant' | 'size' | 'icon' | 'rootClassName'>>;
export declare class DxAvatar extends LitElement {
    private maskId;
    constructor();
    fallback: string;
    imgSrc: string | undefined;
    imgCrossOrigin: NonNullable<HTMLImageElement['crossOrigin']> | undefined;
    imgReferrerPolicy: HTMLImageElement['referrerPolicy'] | undefined;
    variant: AvatarVariant;
    status: AvatarStatus | undefined;
    animation: AvatarAnimation;
    hue: string | undefined;
    hueVariant: 'fill' | 'surface';
    size: Size;
    icon: string | undefined;
    rootClassName: string | undefined;
    loadingStaus: ImageLoadingStatus;
    connectedCallback(): void;
    willUpdate(changedProperties: Map<string, any>): void;
    private handleLoad;
    private handleError;
    render(): import("lit").TemplateResult<1>;
    createRenderRoot(): this;
}
//# sourceMappingURL=dx-avatar.d.ts.map