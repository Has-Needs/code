//
// Copyright 2025 DXOS.org
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// TODO(thure): Find a way to instruct ESLint & Prettier to treat any whitespace between tags rendered in the `html` template function as significant.
/* eslint-disable */
import { LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { makeId } from '@dxos/react-hooks';
export class DxRefTagActivate extends Event {
    constructor(props) {
        super('dx-ref-tag-activate');
        this.refId = props.refId;
        this.label = props.label;
        this.trigger = props.trigger;
    }
}
let DxRefTag = class DxRefTag extends LitElement {
    constructor() {
        // TODO(thure): There is a case (in)sensitivity issue here which is pernicious:
        //   Only refactoring the properties here to all-lowercase fixes the binding in `RefField.tsx`, but that
        //   should be unnecessary, and it isn’t an issue for `DxAvatar` or `DxGrid`. What’s going on?
        super(...arguments);
        this.refid = makeId('dx-ref-tag');
        this.rootclassname = undefined;
    }
    connectedCallback() {
        super.connectedCallback();
        this.tabIndex = 0;
        this.classList.add('dx-focus-ring');
        if (this.rootclassname) {
            this.classList.add(this.rootclassname);
        }
        this.setAttribute('role', 'button');
        if (this.getAttribute('data-auto-trigger') === 'true') {
            this.handleActivate({ type: 'auto-trigger' });
        }
        else {
            this.addEventListener('click', this.handleActivate);
        }
    }
    handleActivate(event) {
        var _a;
        this.dispatchEvent(new DxRefTagActivate({ refId: this.refid, label: (_a = this.textContent) !== null && _a !== void 0 ? _a : '', trigger: this }));
    }
    createRenderRoot() {
        return this;
    }
};
__decorate([
    property({ type: String })
], DxRefTag.prototype, "refid", void 0);
__decorate([
    property({ type: String })
], DxRefTag.prototype, "rootclassname", void 0);
DxRefTag = __decorate([
    customElement('dx-ref-tag')
], DxRefTag);
export { DxRefTag };
//# sourceMappingURL=dx-ref-tag.js.map