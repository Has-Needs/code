export type UntilCallback<T> = (resolve: (value: T) => void, reject: (error: Error) => void) => Promise<T> | void;
/**
 * Awaits promise.
 */
export declare const until: <T = void>(cb: UntilCallback<T>, timeout?: number) => Promise<T>;
/**
 * Wait until promise resolves.
 */
export declare const untilPromise: <T = void>(cb: () => Promise<T>) => Promise<T>;
/**
 * Wait until error is thrown.
 */
export declare const untilError: (cb: () => Promise<any>) => Promise<unknown>;
//# sourceMappingURL=until.d.ts.map