import { type Context } from '@dxos/context';
export type UpdateSchedulerOptions = {
    /**
     * Maximum frequency of updates. If not specified, updates will be scheduled on every change.
     */
    maxFrequency?: number;
};
export declare class UpdateScheduler {
    private readonly _ctx;
    private readonly _callback;
    private readonly _params;
    /**
     * Promise that resolves when the callback is done.
     * Never rejects.
     */
    private _promise;
    private _scheduled;
    private _lastUpdateTime;
    constructor(_ctx: Context, _callback: () => Promise<void>, _params?: UpdateSchedulerOptions);
    trigger(): void;
    forceTrigger(): void;
    /**
     * Waits for the current task to finish if it is running.
     * Does not schedule a new task.
     */
    join(): Promise<void>;
    /**
     * Force schedule the task to run and wait for it to finish.
     */
    runBlocking(): Promise<void>;
}
//# sourceMappingURL=update-scheduler.d.ts.map