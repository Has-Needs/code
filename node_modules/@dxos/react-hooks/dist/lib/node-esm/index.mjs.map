{
  "version": 3,
  "sources": ["../../../src/useAsyncEffect.ts", "../../../src/useAsyncState.ts", "../../../src/useControlledState.ts", "../../../src/useDebugReactDeps.ts", "../../../src/useDefaultValue.ts", "../../../src/useDynamicRef.ts", "../../../src/useFileDownload.ts", "../../../src/useForwardedRef.ts", "../../../src/useId.ts", "../../../src/useIsFocused.ts", "../../../src/useMediaQuery.ts", "../../../src/useMulticastObservable.ts", "../../../src/useRefCallback.ts", "../../../src/useResize.ts", "../../../src/useTrackProps.ts", "../../../src/useTransitions.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport { useEffect } from 'react';\n\nimport { log } from '@dxos/log';\n\n/**\n * Process async event with optional non-async destructor.\n * Inspired by: https://github.com/rauldeheer/use-async-effect/blob/master/index.js\n *\n * ```tsx\n * useAsyncEffect(async () => {\n *   await test();\n * }, []);\n * ```\n *\n * The callback may check of the component is still mounted before doing state updates.\n *\n * ```tsx\n * const [value, setValue] = useState<string>();\n * useAsyncEffect<string>(async (isMounted) => {\n *   const value = await test();\n *   if (!isMounted()) {\n *     setValue(value);\n *   }\n * }, () => console.log('Unmounted'), []);\n * ```\n *\n * @param callback Receives a getter function that determines if the component is still mounted.\n * @param destructor Receives the value returned from the callback.\n * @param deps\n *\n * NOTE: This effect does not cancel the async operation if the component is unmounted.\n *\n * @deprecated\n */\nexport const useAsyncEffect = <T>(\n  callback: (isMounted: () => boolean) => Promise<T> | undefined,\n  destructor?: ((value?: T) => void) | any[],\n  deps?: any[],\n) => {\n  const [effectDestructor, effectDeps] =\n    typeof destructor === 'function' ? [destructor, deps] : [undefined, destructor];\n\n  useEffect(() => {\n    let mounted = true;\n    let value: T | undefined;\n    const asyncResult = callback(() => mounted);\n    void Promise.resolve(asyncResult)\n      .then((result) => {\n        value = result;\n      })\n      .catch(log.catch);\n\n    return () => {\n      mounted = false;\n      effectDestructor?.(value);\n    };\n  }, effectDeps);\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Dispatch, type SetStateAction, useEffect, useState } from 'react';\n\n/**\n * NOTE: Use with care and when necessary to be able to cancel an async operation when unmounting.\n */\nexport const useAsyncState = <T>(\n  cb: () => Promise<T | undefined>,\n  deps: any[] = [],\n): [T | undefined, Dispatch<SetStateAction<T | undefined>>] => {\n  const [value, setValue] = useState<T | undefined>();\n  useEffect(() => {\n    let disposed = false;\n    queueMicrotask(async () => {\n      const data = await cb();\n      if (!disposed) {\n        setValue(data);\n      }\n    });\n\n    return () => {\n      disposed = true;\n    };\n  }, deps);\n\n  return [value, setValue];\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type Dispatch, type SetStateAction, useEffect, useState } from 'react';\n\n/**\n * A stateful hook with a controlled value.\n */\nexport const useControlledState = <T>(controlledValue: T, ...deps: any[]): [T, Dispatch<SetStateAction<T>>] => {\n  const [value, setValue] = useState<T>(controlledValue);\n  useEffect(() => {\n    if (controlledValue !== undefined) {\n      setValue(controlledValue);\n    }\n  }, [controlledValue, ...deps]);\n\n  return [value, setValue];\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\n/* eslint-disable no-console */\n\nimport { type DependencyList, useEffect, useRef } from 'react';\n\n/**\n * Util to log deps that have changed.\n */\n// TODO(burdon): Move to react-hooks.\nexport const useDebugReactDeps = (deps: DependencyList = []) => {\n  const lastDeps = useRef<DependencyList>([]);\n  useEffect(() => {\n    console.group('deps changed', { old: lastDeps.current.length, new: deps.length });\n    for (let i = 0; i < Math.max(lastDeps.current.length ?? 0, deps.length ?? 0); i++) {\n      console.log(i, lastDeps.current[i] === deps[i] ? 'SAME' : 'CHANGED', {\n        previous: lastDeps.current[i],\n        current: deps[i],\n      });\n    }\n\n    console.groupEnd();\n    lastDeps.current = deps;\n  }, deps);\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { useEffect, useState, useMemo } from 'react';\n\n/**\n * A custom React hook that provides a stable default value for a potentially undefined reactive value.\n * The defaultValue is memoized upon component mount and remains unchanged until the component unmounts,\n * ensuring stability across all re-renders, even if the defaultValue prop changes.\n *\n * Note: The defaultValue is not reactive. It retains the same value from the component's mount to unmount.\n *\n * @param reactiveValue - The value that may change over time.\n * @param defaultValue - The initial value used when the reactiveValue is undefined. This value is not reactive.\n * @returns - The reactiveValue if it's defined, otherwise the defaultValue.\n */\nexport const useDefaultValue = <T>(reactiveValue: T | undefined | null, getDefaultValue: () => T): T => {\n  // Memoize defaultValue with an empty dependency array.\n  // This ensures that the defaultValue instance remains stable across all re-renders,\n  // regardless of whether the defaultValue changes.\n  const stableDefaultValue = useMemo(getDefaultValue, []);\n  const [value, setValue] = useState(reactiveValue ?? stableDefaultValue);\n\n  useEffect(() => {\n    setValue(reactiveValue ?? stableDefaultValue);\n  }, [reactiveValue, stableDefaultValue]);\n\n  return value;\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { useEffect, useRef } from 'react';\n\n/**\n * Ref that is updated by a dependency.\n */\nexport const useDynamicRef = <T>(value: T) => {\n  const ref = useRef<T>(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useMemo } from 'react';\n\n/**\n * File download anchor.\n *\n * ```\n * const download = useDownload();\n * const handleDownload = (data: string) => {\n *   download(new Blob([data], { type: 'text/plain' }), 'test.txt');\n * };\n * ```\n */\nexport const useFileDownload = (): ((data: Blob | string, filename: string) => void) => {\n  return useMemo(\n    () => (data: Blob | string, filename: string) => {\n      const url = typeof data === 'string' ? data : URL.createObjectURL(data);\n      const element = document.createElement('a');\n      element.setAttribute('href', url);\n      element.setAttribute('download', filename);\n      element.setAttribute('target', 'download');\n      element.click();\n    },\n    [],\n  );\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { type ForwardedRef, useRef, useEffect } from 'react';\n\n/**\n * Combines a possibly undefined forwarded ref with a locally defined ref.\n * See also: react-merge-refs\n */\nexport const useForwardedRef = <T>(ref: ForwardedRef<T>) => {\n  const innerRef = useRef<T>(null);\n  useEffect(() => {\n    if (!ref) {\n      return;\n    }\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current);\n    } else {\n      ref.current = innerRef.current;\n    }\n  });\n\n  return innerRef;\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport alea from 'alea';\nimport { useMemo } from 'react';\n\ninterface PrngFactory {\n  new (seed?: string): () => number;\n}\n\nconst Alea: PrngFactory = alea as unknown as PrngFactory;\n\nconst prng = new Alea('@dxos/react-hooks');\n\n// TODO(burdon): Replace with PublicKey.random().\nexport const randomString = (n = 4) =>\n  prng()\n    .toString(16)\n    .slice(2, n + 2);\n\nexport const useId = (namespace: string, propsId?: string, opts?: Partial<{ n: number }>) =>\n  useMemo(() => makeId(namespace, propsId, opts), [propsId]);\n\nexport const makeId = (namespace: string, propsId?: string, opts?: Partial<{ n: number }>) =>\n  propsId ?? `${namespace}-${randomString(opts?.n ?? 4)}`;\n", "//\n// Copyright 2022 DXOS.org\n//\n\n// Based upon the useIsFocused hook which is part of the `rci` project:\n/// https://github.com/leonardodino/rci/blob/main/packages/use-is-focused\n\nimport { useEffect, useRef, useState, type RefObject } from 'react';\n\nexport const useIsFocused = (inputRef: RefObject<HTMLInputElement>) => {\n  const [isFocused, setIsFocused] = useState<boolean | undefined>(undefined);\n  const isFocusedRef = useRef<boolean | undefined>(isFocused);\n\n  isFocusedRef.current = isFocused;\n\n  useEffect(() => {\n    const input = inputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const onFocus = () => setIsFocused(true);\n    const onBlur = () => setIsFocused(false);\n    input.addEventListener('focus', onFocus);\n    input.addEventListener('blur', onBlur);\n\n    if (isFocusedRef.current === undefined) {\n      setIsFocused(document.activeElement === input);\n    }\n\n    return () => {\n      input.removeEventListener('focus', onFocus);\n      input.removeEventListener('blur', onBlur);\n    };\n  }, [inputRef, setIsFocused]);\n\n  return isFocused;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\n// This hook is based on Chakra UIâ€™s `useMediaQuery`: https://github.com/chakra-ui/chakra-ui/blob/main/packages/components/media-query/src/use-media-query.ts\n\nimport { useEffect, useState } from 'react';\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[];\n  ssr?: boolean;\n};\n\n// TODO(thure): This should be derived from the same source of truth as the Tailwind theme config\nconst breakpointMediaQueries: Record<string, string> = {\n  sm: '(min-width: 640px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 1024px)',\n  xl: '(min-width: 1280px)',\n  '2xl': '(min-width: 1536px)',\n};\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match, or a recognized breakpoint token\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport const useMediaQuery = (query: string | string[], options: UseMediaQueryOptions = {}): boolean[] => {\n  // TODO(wittjosiah): Why is the default here true?\n  const { ssr = true, fallback } = options;\n\n  const queries = (Array.isArray(query) ? query : [query]).map((query) =>\n    query in breakpointMediaQueries ? breakpointMediaQueries[query] : query,\n  );\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[];\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr ? !!fallbackValues[index] : document.defaultView?.matchMedia(query).matches,\n    }));\n  });\n\n  useEffect(() => {\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: document.defaultView?.matchMedia(query).matches,\n      })),\n    );\n\n    const mql = queries.map((query) => document.defaultView?.matchMedia(query));\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) {\n            return { ...item, matches: evt.matches };\n          }\n          return item;\n        });\n      });\n    };\n\n    mql.forEach((mql) => {\n      if (typeof mql?.addListener === 'function') {\n        mql?.addListener(handler);\n      } else {\n        mql?.addEventListener('change', handler);\n      }\n    });\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql?.removeListener === 'function') {\n          mql?.removeListener(handler);\n        } else {\n          mql?.removeEventListener('change', handler);\n        }\n      });\n    };\n  }, [document.defaultView]);\n\n  return value.map((item) => !!item.matches);\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useMemo, useSyncExternalStore } from 'react';\n\nimport { type MulticastObservable } from '@dxos/async';\n\n/**\n * Subscribe to a MulticastObservable and return the latest value.\n * @param observable the observable to subscribe to. Will resubscribe if the observable changes.\n */\n// TODO(burdon): Move to react-hooks.\nexport const useMulticastObservable = <T>(observable: MulticastObservable<T>): T => {\n  // Make sure useSyncExternalStore is stable in respect to the observable.\n  const subscribeFn = useMemo(\n    () => (listener: () => void) => {\n      const subscription = observable.subscribe(listener);\n      return () => subscription.unsubscribe();\n    },\n    [observable],\n  );\n\n  // useSyncExternalStore will resubscribe to the observable and update the value if the subscribeFn changes.\n  return useSyncExternalStore(subscribeFn, () => observable.get());\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type RefCallback, useState } from 'react';\n\n/**\n * Custom React Hook that creates a ref callback and a state variable.\n * The ref callback sets the state variable when the ref changes.\n *\n * @returns An object containing the ref callback and the current value of the ref.\n */\nexport const useRefCallback = <T = any>(): { refCallback: RefCallback<T>; value: T | null } => {\n  const [value, setValue] = useState<T | null>(null);\n  return { refCallback: (value: T) => setValue(value), value };\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { useLayoutEffect, useMemo } from 'react';\n\nexport const useResize = (\n  handler: (event?: Event) => void,\n  deps: Parameters<typeof useLayoutEffect>[1] = [],\n  delay: number = 800,\n) => {\n  const debouncedHandler = useMemo(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    return (event?: Event) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        handler(event);\n      }, delay);\n    };\n  }, [handler, delay]);\n\n  return useLayoutEffect(() => {\n    window.visualViewport?.addEventListener('resize', debouncedHandler);\n    debouncedHandler();\n    return () => window.visualViewport?.removeEventListener('resize', debouncedHandler);\n  }, [debouncedHandler, ...deps]);\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { useRef, useEffect } from 'react';\n\nimport { log } from '@dxos/log';\n\n/**\n * Use to debug which props have changed to trigger re-renders in a React component.\n */\nexport const useTrackProps = <T extends Record<string, unknown>>(\n  props: T,\n  componentName = 'Component',\n  active = true,\n) => {\n  const prevProps = useRef<T>(props);\n  useEffect(() => {\n    const changes = Object.entries(props).filter(([key]) => props[key] !== prevProps.current[key]);\n    if (changes.length > 0) {\n      if (active) {\n        log.info('props changed', {\n          componentName,\n          keys: changes.map(([key]) => key).join(','),\n          props: Object.fromEntries(\n            changes.map(([key]) => [\n              key,\n              {\n                from: prevProps.current[key],\n                to: props[key],\n              },\n            ]),\n          ),\n        });\n      }\n    }\n\n    prevProps.current = props;\n  });\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { useRef, useEffect, useState } from 'react';\n\nconst isFunction = <T>(functionToCheck: any): functionToCheck is (value: T) => boolean => {\n  return functionToCheck instanceof Function;\n};\n\n/**\n * This is an internal custom hook that checks if a value has transitioned from a specified 'from' value to a 'to' value.\n *\n * @param currentValue - The value that is being monitored for transitions.\n * @param fromValue - The *from* value or a predicate function that determines the start of the transition.\n * @param toValue - The *to* value or a predicate function that determines the end of the transition.\n * @returns A boolean indicating whether the transition from *fromValue* to *toValue* has occurred.\n *\n * @internal Consider using `useOnTransition` for handling transitions instead of this hook.\n */\nexport const useDidTransition = <T>(\n  currentValue: T,\n  fromValue: T | ((value: T) => boolean),\n  toValue: T | ((value: T) => boolean),\n) => {\n  const [hasTransitioned, setHasTransitioned] = useState(false);\n  const previousValue = useRef<T>(currentValue);\n\n  useEffect(() => {\n    const toValueValid = isFunction<T>(toValue) ? toValue(currentValue) : toValue === currentValue;\n    const fromValueValid = isFunction<T>(fromValue)\n      ? fromValue(previousValue.current)\n      : fromValue === previousValue.current;\n\n    if (fromValueValid && toValueValid && !hasTransitioned) {\n      setHasTransitioned(true);\n    } else if ((!fromValueValid || !toValueValid) && hasTransitioned) {\n      setHasTransitioned(false);\n    }\n\n    previousValue.current = currentValue;\n  }, [currentValue, fromValue, toValue, hasTransitioned]);\n\n  return hasTransitioned;\n};\n\n/**\n * Executes a callback function when a specified transition occurs in a value.\n *\n * This function utilizes the `useDidTransition` hook to monitor changes in `currentValue`.\n * When `currentValue` transitions from `fromValue` to `toValue`, the provided `callback` function is executed. */\nexport const useOnTransition = <T>(\n  currentValue: T,\n  fromValue: T | ((value: T) => boolean),\n  toValue: T | ((value: T) => boolean),\n  callback: () => void,\n) => {\n  const dirty = useRef(false);\n  const hasTransitioned = useDidTransition(currentValue, fromValue, toValue);\n\n  useEffect(() => {\n    dirty.current = false;\n  }, [currentValue, dirty]);\n\n  useEffect(() => {\n    if (hasTransitioned && !dirty.current) {\n      callback();\n      dirty.current = true;\n    }\n  }, [hasTransitioned, dirty, callback]);\n};\n"],
  "mappings": "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",
  "names": ["useEffect", "log", "useAsyncEffect", "callback", "destructor", "deps", "effectDestructor", "effectDeps", "undefined", "useEffect", "mounted", "value", "asyncResult", "Promise", "resolve", "then", "result", "catch", "log", "useEffect", "useState", "useAsyncState", "cb", "deps", "value", "setValue", "useState", "useEffect", "disposed", "queueMicrotask", "data", "useEffect", "useState", "useControlledState", "controlledValue", "deps", "value", "setValue", "useState", "useEffect", "undefined", "useEffect", "useRef", "useDebugReactDeps", "deps", "lastDeps", "useRef", "useEffect", "console", "group", "old", "current", "length", "new", "i", "Math", "max", "log", "previous", "groupEnd", "useEffect", "useState", "useMemo", "useDefaultValue", "reactiveValue", "getDefaultValue", "stableDefaultValue", "useMemo", "value", "setValue", "useState", "useEffect", "useEffect", "useRef", "useDynamicRef", "value", "ref", "useRef", "useEffect", "current", "useMemo", "useFileDownload", "useMemo", "data", "filename", "url", "URL", "createObjectURL", "element", "document", "createElement", "setAttribute", "click", "useRef", "useEffect", "useForwardedRef", "ref", "innerRef", "useRef", "useEffect", "current", "alea", "useMemo", "Alea", "alea", "prng", "randomString", "n", "toString", "slice", "useId", "namespace", "propsId", "opts", "useMemo", "makeId", "useEffect", "useRef", "useState", "useIsFocused", "inputRef", "isFocused", "setIsFocused", "useState", "undefined", "isFocusedRef", "useRef", "current", "useEffect", "input", "onFocus", "onBlur", "addEventListener", "document", "activeElement", "removeEventListener", "useEffect", "useState", "breakpointMediaQueries", "sm", "md", "lg", "xl", "useMediaQuery", "query", "options", "ssr", "fallback", "queries", "Array", "isArray", "map", "fallbackValues", "filter", "v", "value", "setValue", "useState", "index", "media", "matches", "document", "defaultView", "matchMedia", "useEffect", "mql", "handler", "evt", "prev", "slice", "item", "forEach", "addListener", "addEventListener", "removeListener", "removeEventListener", "useMemo", "useSyncExternalStore", "useMulticastObservable", "observable", "subscribeFn", "useMemo", "listener", "subscription", "subscribe", "unsubscribe", "useSyncExternalStore", "get", "useState", "useRefCallback", "value", "setValue", "useState", "refCallback", "useLayoutEffect", "useMemo", "useResize", "handler", "deps", "delay", "debouncedHandler", "useMemo", "timeout", "event", "clearTimeout", "setTimeout", "useLayoutEffect", "window", "visualViewport", "addEventListener", "removeEventListener", "useRef", "useEffect", "log", "useTrackProps", "props", "componentName", "active", "prevProps", "changes", "Object", "entries", "filter", "key", "current", "length", "info", "keys", "map", "join", "fromEntries", "from", "to", "useRef", "useEffect", "useState", "isFunction", "functionToCheck", "Function", "useDidTransition", "currentValue", "fromValue", "toValue", "hasTransitioned", "setHasTransitioned", "useState", "previousValue", "useRef", "useEffect", "toValueValid", "fromValueValid", "current", "useOnTransition", "callback", "dirty"]
}
