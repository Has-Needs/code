import { Schema } from 'effect';
import type { inspect, InspectOptionsStylized } from 'node:util';
import { devtoolsFormatter, type DevtoolsFormatter, inspectCustom } from '@dxos/debug';
import { ObjectId } from './object-id';
import { SpaceId } from './space-id';
/**
 * Tags for ECHO DXNs that should resolve the object ID in the local space.
 */
export declare const LOCAL_SPACE_TAG = "@";
export declare const QueueSubspaceTags: Readonly<{
    DATA: "data";
    TRACE: "trace";
}>;
export type QueueSubspaceTag = (typeof QueueSubspaceTags)[keyof typeof QueueSubspaceTags];
/**
 * DXN unambiguously names a resource like an ECHO object, schema definition, plugin, etc.
 * Each DXN starts with a dxn prefix, followed by a resource kind.
 * Colon Symbol : is used a delimiter between parts.
 * DXNs may contain slashes.
 * '@' in the place of the space id is used to denote that the DXN should be resolved in the local space.
 *
 * @example
 * ```
 * dxn:echo:<space key>:<echo id>
 * dxn:echo:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6
 * dxn:echo:@:01J00J9B45YHYSGZQTQMSKMGJ6
 * dxn:type:dxos.org/type/Calendar
 * dxn:plugin:dxos.org/agent/plugin/functions
 * ```
 */
export declare class DXN {
    #private;
    static Schema: Schema.refine<string, typeof Schema.NonEmptyString>;
    static hash(dxn: DXN): string;
    /**
     * Kind constants.
     */
    static kind: Readonly<{
        /**
         * dxn:type:<type name>[:<version>]
         */
        TYPE: "type";
        /**
         * dxn:echo:<space id>:<echo id>
         * dxn:echo:@:<echo id>
         */
        ECHO: "echo";
        /**
         * The subspace tag enables us to partition queues by usage within the context of a space.
         * dxn:queue:<subspace_tag>:<space_id>:<queue_id>[:object_id]
         * dxn:queue:data:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6
         * dxn:queue:trace:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6
         */
        QUEUE: "queue";
    }>;
    get kind(): string;
    static equals(a: DXN, b: DXN): boolean;
    static isDXNString(dxn: string): boolean;
    static parse(dxn: string): DXN;
    static tryParse(dxn: string): DXN | undefined;
    /**
     * @example `dxn:type:example.com/type/Contact`
     */
    static fromTypename(typename: string): DXN;
    /**
     * @example `dxn:type:example.com/type/Contact:0.1.0`
     */
    static fromTypenameAndVersion(typename: string, version: string): DXN;
    /**
     * @example `dxn:echo:@:01J00J9B45YHYSGZQTQMSKMGJ6`
     */
    static fromLocalObjectId(id: string): DXN;
    static fromQueue(subspaceTag: QueueSubspaceTag, spaceId: SpaceId, queueId: ObjectId, objectId?: ObjectId): DXN;
    constructor(kind: string, parts: string[]);
    get parts(): string[];
    get typename(): string;
    hasTypenameOf(typename: string): boolean;
    isLocalObjectId(): boolean;
    asTypeDXN(): DXN.TypeDXN | undefined;
    asEchoDXN(): DXN.EchoDXN | undefined;
    asQueueDXN(): DXN.QueueDXN | undefined;
    toString(): DXN.String;
    /**
     * Used by Node.js to get textual representation of this object when it's printed with a `console.log` statement.
     */
    [inspectCustom](depth: number, options: InspectOptionsStylized, inspectFn: typeof inspect): string;
    get [devtoolsFormatter](): DevtoolsFormatter;
}
export declare namespace DXN {
    type TypeDXN = {
        type: string;
        version?: string;
    };
    type EchoDXN = {
        spaceId?: SpaceId;
        echoId: string;
    };
    type QueueDXN = {
        subspaceTag: string;
        spaceId: SpaceId;
        queueId: string;
        objectId?: string;
    };
    /**
     * DXN represented as a javascript string.
     */
    type String = string & {
        __DXNString: never;
    };
}
//# sourceMappingURL=dxn.d.ts.map