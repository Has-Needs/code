"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var esbuild_plugin_exports = {};
__export(esbuild_plugin_exports, {
  ThemePlugins: () => ThemePlugins
});
module.exports = __toCommonJS(esbuild_plugin_exports);
var import_chunk_QA5KMUXP = require("../chunk-QA5KMUXP.cjs");
var import_chunk_3IKFINB6 = require("../chunk-3IKFINB6.cjs");
var import_autoprefixer = __toESM(require("autoprefixer"));
var import_esbuild_style_plugin = __toESM(require("esbuild-style-plugin"));
var import_promises = require("node:fs/promises");
var import_node_path = require("node:path");
var import_tailwindcss = __toESM(require("tailwindcss"));
var ThemePlugins = async (options) => {
  const resolvedContent = options.root ? await (0, import_chunk_QA5KMUXP.resolveKnownPeers)(options.content, options.root) : options.content;
  return [
    // TODO(thure): This really shouldn’t be this way, but after hours of searching for a reasonable way to do this I came up empty. The prior art I found was mainly this thread, though it’s only tangentially related: https://github.com/evanw/esbuild/issues/800#issuecomment-786151076
    {
      name: "esbuild-plugin-dxos-ui-theme-resolvers",
      setup: async (build) => {
        const fontsDir = (0, import_node_path.join)(options.outdir, "node_modules/@dxos/react-ui-theme/fonts");
        try {
          await (0, import_promises.mkdir)(fontsDir);
        } catch (_err) {
        }
        build.onResolve({
          filter: /\.woff2$/
        }, async (args) => {
          const depPath = (0, import_node_path.resolve)(args.resolveDir, args.path);
          const destPath = (0, import_node_path.join)(fontsDir, (0, import_node_path.basename)(args.path));
          try {
            await (0, import_promises.cp)(depPath, destPath);
          } catch (_err) {
          }
          return {
            path: `./${(0, import_node_path.relative)(options.outdir, (0, import_node_path.join)("fonts", (0, import_node_path.basename)(args.path)))}`,
            external: true
          };
        });
      }
    },
    // TODO(thure): theme.css must be part of entryPoints in order to be processed with `stylePlugin`, but this should not be necessary. ESBuild would not load theme.css using stylePlugin if referenced within index.ts(x) as with the Vite plugin.
    // TODO(thure): Note also that because it is an entryPoint, the developer has to reference the built theme.css from `index.html`, which is inflexible and possibly inconvenient.
    // TODO(zhenyasav): autoprefixer version misalignment with esbuild-style-plugin requires the `as any`
    (0, import_esbuild_style_plugin.default)({
      postcss: {
        plugins: [
          (0, import_tailwindcss.default)((0, import_chunk_3IKFINB6.tailwindConfig)({
            env: process.env.NODE_ENV,
            content: resolvedContent,
            extensions: options.extensions
          })),
          import_autoprefixer.default
        ]
      }
    })
  ];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThemePlugins
});
//# sourceMappingURL=esbuild-plugin.cjs.map
