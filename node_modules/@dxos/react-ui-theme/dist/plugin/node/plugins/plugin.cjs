"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var plugin_exports = {};
__export(plugin_exports, {
  ThemePlugin: () => ThemePlugin
});
module.exports = __toCommonJS(plugin_exports);
var import_chunk_QA5KMUXP = require("../chunk-QA5KMUXP.cjs");
var import_chunk_3IKFINB6 = require("../chunk-3IKFINB6.cjs");
var import_tokens = __toESM(require("@ch-ui/tokens"));
var import_autoprefixer = __toESM(require("autoprefixer"));
var import_promises = require("node:fs/promises");
var import_node_path = require("node:path");
var import_postcss = __toESM(require("postcss"));
var import_postcss_import = __toESM(require("postcss-import"));
var import_tailwindcss = __toESM(require("tailwindcss"));
var import_nesting = __toESM(require("tailwindcss/nesting"));
var environment;
var createPostCSSPipeline = (environment2, config) => [
  // Handles @import statements in CSS.
  (0, import_postcss_import.default)(),
  // Processes CSS nesting syntax.
  import_nesting.default,
  // Processes custom design tokens.
  (0, import_tokens.default)({
    config: () => import_chunk_3IKFINB6.tokenSet
  }),
  // Processes Tailwind directives and utilities.
  (0, import_tailwindcss.default)((0, import_chunk_3IKFINB6.tailwindConfig)({
    env: environment2,
    content: config.content,
    extensions: config.extensions
  })),
  // Adds vendor prefixes.
  import_autoprefixer.default
];
var ThemePlugin = (options) => {
  const config = {
    jit: true,
    cssPath: (0, import_node_path.resolve)(__dirname, "../theme.css"),
    srcCssPath: (0, import_node_path.resolve)(__dirname, "../../../../src/theme.css"),
    virtualFileId: "@dxos-theme",
    ...options
  };
  if (process.env.DEBUG) {
    console.log("ThemePlugin config:\n", JSON.stringify(config, null, 2));
  }
  return {
    name: "vite-plugin-dxos-ui-theme",
    config: async ({ root }, env) => {
      environment = env.mode;
      const content = root ? await (0, import_chunk_QA5KMUXP.resolveKnownPeers)(config.content ?? [], root) : config.content;
      if (options.verbose) {
        console.log("content", content);
      }
      return {
        css: {
          postcss: {
            plugins: createPostCSSPipeline(environment, config)
          }
        }
      };
    },
    resolveId: (id) => {
      if (id === config.virtualFileId) {
        return config.cssPath;
      }
    },
    handleHotUpdate: async ({ file, server }) => {
      if (file.endsWith(".css") && file !== config.cssPath) {
        try {
          const module2 = server.moduleGraph.getModuleById(config.cssPath);
          if (module2) {
            const css = await (0, import_promises.readFile)(config.srcCssPath, "utf8");
            const processor = (0, import_postcss.default)(createPostCSSPipeline(environment, config));
            console.log("[theme-plugin] Reprocessing CSS with PostCSS.");
            const result = await processor.process(css, {
              from: config.srcCssPath,
              to: config.cssPath
            });
            if (result.css) {
              await (0, import_promises.writeFile)(config.cssPath, result.css);
              return [];
            }
          }
        } catch (err) {
          console.error("[theme-plugin] Error:", err);
        }
      }
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThemePlugin
});
//# sourceMappingURL=plugin.cjs.map
