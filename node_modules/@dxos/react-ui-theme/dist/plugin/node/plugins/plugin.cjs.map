{
  "version": 3,
  "sources": ["../../../../src/plugins/plugin.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\n/* eslint-disable no-console */\n\nimport chTokens from '@ch-ui/tokens';\nimport autoprefixer from 'autoprefixer';\nimport { readFile, writeFile } from 'node:fs/promises';\nimport { resolve } from 'node:path';\nimport postcss from 'postcss';\nimport postcssImport from 'postcss-import';\nimport tailwindcss from 'tailwindcss';\nimport nesting from 'tailwindcss/nesting';\nimport { type ThemeConfig } from 'tailwindcss/types/config';\nimport { type UserConfig, type Plugin } from 'vite';\n\nimport { resolveKnownPeers } from './resolveContent';\nimport { tailwindConfig, tokenSet } from '../config';\n\nexport type ThemePluginOptions = {\n  jit?: boolean;\n  cssPath?: string;\n  srcCssPath?: string;\n  virtualFileId?: string;\n  content?: string[];\n  root?: string;\n  verbose?: boolean;\n  extensions?: Partial<ThemeConfig>[];\n};\n\nlet environment!: string;\n\n/**\n * Configures PostCSS pipeline for theme.css processing.\n * @param environment - The current environment (development/production).\n * @param config - Theme plugin configuration options.\n * @returns Array of PostCSS plugins.\n */\nconst createPostCSSPipeline = (environment: string, config: ThemePluginOptions): postcss.Transformer[] => [\n  // Handles @import statements in CSS.\n  postcssImport(),\n  // Processes CSS nesting syntax.\n  nesting,\n  // Processes custom design tokens.\n  chTokens({ config: () => tokenSet }),\n  // Processes Tailwind directives and utilities.\n  tailwindcss(\n    tailwindConfig({\n      env: environment,\n      content: config.content,\n      extensions: config.extensions,\n    }),\n  ),\n  // Adds vendor prefixes.\n  autoprefixer as any,\n];\n\n/**\n * Vite plugin to configure theme.\n */\nexport const ThemePlugin = (options: ThemePluginOptions): Plugin => {\n  const config: ThemePluginOptions = {\n    jit: true,\n    cssPath: resolve(__dirname, '../theme.css'),\n    srcCssPath: resolve(__dirname, '../../../../src/theme.css'),\n    virtualFileId: '@dxos-theme',\n    ...options,\n  };\n\n  if (process.env.DEBUG) {\n    console.log('ThemePlugin config:\\n', JSON.stringify(config, null, 2));\n  }\n\n  return {\n    name: 'vite-plugin-dxos-ui-theme',\n    config: async ({ root }, env): Promise<UserConfig> => {\n      environment = env.mode;\n      const content = root ? await resolveKnownPeers(config.content ?? [], root) : config.content;\n      if (options.verbose) {\n        console.log('content', content);\n      }\n\n      return {\n        css: {\n          postcss: {\n            plugins: createPostCSSPipeline(environment, config),\n          },\n        },\n      };\n    },\n    resolveId: (id) => {\n      if (id === config.virtualFileId) {\n        return config.cssPath;\n      }\n    },\n    handleHotUpdate: async ({ file, server }) => {\n      // NOTE(ZaymonFC): Changes to *any* CSS file triggers this step. We might want to refine this.\n      //   Ignore the output file to prevent infinite loops.\n      if (file.endsWith('.css') && file !== config.cssPath) {\n        try {\n          // Get reference to the theme virtual module.\n          const module = server.moduleGraph.getModuleById(config.cssPath!);\n\n          if (module) {\n            // Read the source theme file that imports all other CSS files.\n            const css = await readFile(config.srcCssPath!, 'utf8');\n            const processor = postcss(createPostCSSPipeline(environment, config));\n            console.log('[theme-plugin] Reprocessing CSS with PostCSS.');\n            const result = await processor.process(css, {\n              from: config.srcCssPath,\n              to: config.cssPath,\n            });\n\n            if (result.css) {\n              await writeFile(config.cssPath!, result.css);\n              // Return the module to trigger HMR update.\n              return [];\n            }\n          }\n        } catch (err) {\n          console.error('[theme-plugin] Error:', err);\n        }\n      }\n    },\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,oBAAqB;AACrB,0BAAyB;AACzB,sBAAoC;AACpC,uBAAwB;AACxB,qBAAoB;AACpB,4BAA0B;AAC1B,yBAAwB;AACxB,qBAAoB;AAkBpB,IAAIA;AAQJ,IAAMC,wBAAwB,CAACD,cAAqBE,WAAsD;;MAExGC,sBAAAA,SAAAA;;EAEAC,eAAAA;;MAEAC,cAAAA,SAAS;IAAEH,QAAQ,MAAMI;EAAS,CAAA;;MAElCC,mBAAAA,aACEC,sCAAe;IACbC,KAAKT;IACLU,SAASR,OAAOQ;IAChBC,YAAYT,OAAOS;EACrB,CAAA,CAAA;;EAGFC,oBAAAA;;AAMK,IAAMC,cAAc,CAACC,YAAAA;AAC1B,QAAMZ,SAA6B;IACjCa,KAAK;IACLC,aAASC,0BAAQC,WAAW,cAAA;IAC5BC,gBAAYF,0BAAQC,WAAW,2BAAA;IAC/BE,eAAe;IACf,GAAGN;EACL;AAEA,MAAIO,QAAQZ,IAAIa,OAAO;AACrBC,YAAQC,IAAI,yBAAyBC,KAAKC,UAAUxB,QAAQ,MAAM,CAAA,CAAA;EACpE;AAEA,SAAO;IACLyB,MAAM;IACNzB,QAAQ,OAAO,EAAE0B,KAAI,GAAInB,QAAAA;AACvBT,oBAAcS,IAAIoB;AAClB,YAAMnB,UAAUkB,OAAO,UAAME,yCAAkB5B,OAAOQ,WAAW,CAAA,GAAIkB,IAAAA,IAAQ1B,OAAOQ;AACpF,UAAII,QAAQiB,SAAS;AACnBR,gBAAQC,IAAI,WAAWd,OAAAA;MACzB;AAEA,aAAO;QACLsB,KAAK;UACHC,SAAS;YACPC,SAASjC,sBAAsBD,aAAaE,MAAAA;UAC9C;QACF;MACF;IACF;IACAiC,WAAW,CAACC,OAAAA;AACV,UAAIA,OAAOlC,OAAOkB,eAAe;AAC/B,eAAOlB,OAAOc;MAChB;IACF;IACAqB,iBAAiB,OAAO,EAAEC,MAAMC,OAAM,MAAE;AAGtC,UAAID,KAAKE,SAAS,MAAA,KAAWF,SAASpC,OAAOc,SAAS;AACpD,YAAI;AAEF,gBAAMyB,UAASF,OAAOG,YAAYC,cAAczC,OAAOc,OAAO;AAE9D,cAAIyB,SAAQ;AAEV,kBAAMT,MAAM,UAAMY,0BAAS1C,OAAOiB,YAAa,MAAA;AAC/C,kBAAM0B,gBAAYZ,eAAAA,SAAQhC,sBAAsBD,aAAaE,MAAAA,CAAAA;AAC7DqB,oBAAQC,IAAI,+CAAA;AACZ,kBAAMsB,SAAS,MAAMD,UAAUxB,QAAQW,KAAK;cAC1Ce,MAAM7C,OAAOiB;cACb6B,IAAI9C,OAAOc;YACb,CAAA;AAEA,gBAAI8B,OAAOd,KAAK;AACd,wBAAMiB,2BAAU/C,OAAOc,SAAU8B,OAAOd,GAAG;AAE3C,qBAAO,CAAA;YACT;UACF;QACF,SAASkB,KAAK;AACZ3B,kBAAQ4B,MAAM,yBAAyBD,GAAAA;QACzC;MACF;IACF;EACF;AACF;",
  "names": ["environment", "createPostCSSPipeline", "config", "postcssImport", "nesting", "chTokens", "tokenSet", "tailwindcss", "tailwindConfig", "env", "content", "extensions", "autoprefixer", "ThemePlugin", "options", "jit", "cssPath", "resolve", "__dirname", "srcCssPath", "virtualFileId", "process", "DEBUG", "console", "log", "JSON", "stringify", "name", "root", "mode", "resolveKnownPeers", "verbose", "css", "postcss", "plugins", "resolveId", "id", "handleHotUpdate", "file", "server", "endsWith", "module", "moduleGraph", "getModuleById", "readFile", "processor", "result", "from", "to", "writeFile", "err", "error"]
}
