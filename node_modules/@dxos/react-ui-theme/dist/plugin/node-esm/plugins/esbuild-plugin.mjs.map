{
  "version": 3,
  "sources": ["../../../../src/plugins/esbuild-plugin.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport autoprefixer from 'autoprefixer';\nimport type { Plugin } from 'esbuild';\nimport stylePlugin from 'esbuild-style-plugin';\nimport { mkdir, cp } from 'node:fs/promises';\nimport { resolve, relative, join, basename } from 'node:path';\nimport tailwindcss from 'tailwindcss';\nimport type { ThemeConfig } from 'tailwindcss/types/config';\n\nimport { resolveKnownPeers } from './resolveContent';\nimport { tailwindConfig } from '../config';\n\nexport const ThemePlugins = async (options: {\n  content: string[];\n  root?: string;\n  outdir: string;\n  extensions?: Partial<ThemeConfig>[];\n}): Promise<Plugin[]> => {\n  const resolvedContent = options.root ? await resolveKnownPeers(options.content, options.root) : options.content;\n  return [\n    // TODO(thure): This really shouldn’t be this way, but after hours of searching for a reasonable way to do this I came up empty. The prior art I found was mainly this thread, though it’s only tangentially related: https://github.com/evanw/esbuild/issues/800#issuecomment-786151076\n    {\n      name: 'esbuild-plugin-dxos-ui-theme-resolvers',\n      setup: async (build) => {\n        const fontsDir = join(options.outdir, 'node_modules/@dxos/react-ui-theme/fonts');\n        try {\n          await mkdir(fontsDir);\n        } catch (_err) {}\n        build.onResolve({ filter: /\\.woff2$/ }, async (args) => {\n          const depPath = resolve(args.resolveDir, args.path);\n          const destPath = join(fontsDir, basename(args.path));\n          try {\n            await cp(depPath, destPath);\n          } catch (_err) {}\n          return { path: `./${relative(options.outdir, join('fonts', basename(args.path)))}`, external: true };\n        });\n      },\n    },\n    // TODO(thure): theme.css must be part of entryPoints in order to be processed with `stylePlugin`, but this should not be necessary. ESBuild would not load theme.css using stylePlugin if referenced within index.ts(x) as with the Vite plugin.\n    // TODO(thure): Note also that because it is an entryPoint, the developer has to reference the built theme.css from `index.html`, which is inflexible and possibly inconvenient.\n    // TODO(zhenyasav): autoprefixer version misalignment with esbuild-style-plugin requires the `as any`\n    stylePlugin({\n      postcss: {\n        plugins: [\n          tailwindcss(\n            tailwindConfig({\n              env: process.env.NODE_ENV,\n              content: resolvedContent,\n              extensions: options.extensions,\n            }),\n          ),\n          autoprefixer as any,\n        ],\n      },\n    }),\n  ];\n};\n"],
  "mappings": ";;;;;;;;;AAIA,OAAOA,kBAAkB;AAEzB,OAAOC,iBAAiB;AACxB,SAASC,OAAOC,UAAU;AAC1B,SAASC,SAASC,UAAUC,MAAMC,gBAAgB;AAClD,OAAOC,iBAAiB;AAMjB,IAAMC,eAAe,OAAOC,YAAAA;AAMjC,QAAMC,kBAAkBD,QAAQE,OAAO,MAAMC,kBAAkBH,QAAQI,SAASJ,QAAQE,IAAI,IAAIF,QAAQI;AACxG,SAAO;;IAEL;MACEC,MAAM;MACNC,OAAO,OAAOC,UAAAA;AACZ,cAAMC,WAAWC,KAAKT,QAAQU,QAAQ,yCAAA;AACtC,YAAI;AACF,gBAAMC,MAAMH,QAAAA;QACd,SAASI,MAAM;QAAC;AAChBL,cAAMM,UAAU;UAAEC,QAAQ;QAAW,GAAG,OAAOC,SAAAA;AAC7C,gBAAMC,UAAUC,QAAQF,KAAKG,YAAYH,KAAKI,IAAI;AAClD,gBAAMC,WAAWX,KAAKD,UAAUa,SAASN,KAAKI,IAAI,CAAA;AAClD,cAAI;AACF,kBAAMG,GAAGN,SAASI,QAAAA;UACpB,SAASR,MAAM;UAAC;AAChB,iBAAO;YAAEO,MAAM,KAAKI,SAASvB,QAAQU,QAAQD,KAAK,SAASY,SAASN,KAAKI,IAAI,CAAA,CAAA,CAAA;YAAOK,UAAU;UAAK;QACrG,CAAA;MACF;IACF;;;;IAIAC,YAAY;MACVC,SAAS;QACPC,SAAS;UACPC,YACEC,eAAe;YACbC,KAAKC,QAAQD,IAAIE;YACjB5B,SAASH;YACTgC,YAAYjC,QAAQiC;UACtB,CAAA,CAAA;UAEFC;;MAEJ;IACF,CAAA;;AAEJ;",
  "names": ["autoprefixer", "stylePlugin", "mkdir", "cp", "resolve", "relative", "join", "basename", "tailwindcss", "ThemePlugins", "options", "resolvedContent", "root", "resolveKnownPeers", "content", "name", "setup", "build", "fontsDir", "join", "outdir", "mkdir", "_err", "onResolve", "filter", "args", "depPath", "resolve", "resolveDir", "path", "destPath", "basename", "cp", "relative", "external", "stylePlugin", "postcss", "plugins", "tailwindcss", "tailwindConfig", "env", "process", "NODE_ENV", "extensions", "autoprefixer"]
}
