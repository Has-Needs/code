import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  resolveKnownPeers
} from "../chunk-TFKSVC5U.mjs";
import {
  tailwindConfig,
  tokenSet
} from "../chunk-LNTZCFPD.mjs";

// packages/ui/react-ui-theme/src/plugins/plugin.ts
import chTokens from "@ch-ui/tokens";
import autoprefixer from "autoprefixer";
import { readFile, writeFile } from "node:fs/promises";
import { resolve } from "node:path";
import postcss from "postcss";
import postcssImport from "postcss-import";
import tailwindcss from "tailwindcss";
import nesting from "tailwindcss/nesting";
var environment;
var createPostCSSPipeline = (environment2, config) => [
  // Handles @import statements in CSS.
  postcssImport(),
  // Processes CSS nesting syntax.
  nesting,
  // Processes custom design tokens.
  chTokens({
    config: () => tokenSet
  }),
  // Processes Tailwind directives and utilities.
  tailwindcss(tailwindConfig({
    env: environment2,
    content: config.content,
    extensions: config.extensions
  })),
  // Adds vendor prefixes.
  autoprefixer
];
var ThemePlugin = (options) => {
  const config = {
    jit: true,
    cssPath: resolve(__dirname, "../theme.css"),
    srcCssPath: resolve(__dirname, "../../../../src/theme.css"),
    virtualFileId: "@dxos-theme",
    ...options
  };
  if (process.env.DEBUG) {
    console.log("ThemePlugin config:\n", JSON.stringify(config, null, 2));
  }
  return {
    name: "vite-plugin-dxos-ui-theme",
    config: async ({ root }, env) => {
      environment = env.mode;
      const content = root ? await resolveKnownPeers(config.content ?? [], root) : config.content;
      if (options.verbose) {
        console.log("content", content);
      }
      return {
        css: {
          postcss: {
            plugins: createPostCSSPipeline(environment, config)
          }
        }
      };
    },
    resolveId: (id) => {
      if (id === config.virtualFileId) {
        return config.cssPath;
      }
    },
    handleHotUpdate: async ({ file, server }) => {
      if (file.endsWith(".css") && file !== config.cssPath) {
        try {
          const module = server.moduleGraph.getModuleById(config.cssPath);
          if (module) {
            const css = await readFile(config.srcCssPath, "utf8");
            const processor = postcss(createPostCSSPipeline(environment, config));
            console.log("[theme-plugin] Reprocessing CSS with PostCSS.");
            const result = await processor.process(css, {
              from: config.srcCssPath,
              to: config.cssPath
            });
            if (result.css) {
              await writeFile(config.cssPath, result.css);
              return [];
            }
          }
        } catch (err) {
          console.error("[theme-plugin] Error:", err);
        }
      }
    }
  };
};
export {
  ThemePlugin
};
//# sourceMappingURL=plugin.mjs.map
