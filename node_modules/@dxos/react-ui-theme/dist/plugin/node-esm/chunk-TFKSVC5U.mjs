import { createRequire } from 'node:module';const require = createRequire(import.meta.url);

// packages/ui/react-ui-theme/src/plugins/resolveContent.ts
import { glob as globCb } from "glob";
import { promisify } from "node:util";
var glob = promisify(globCb);
var knownIndirectPeers = [
  "@dxos/gem-*",
  "@dxos/react-*",
  "@dxos/react-ui-*",
  "@dxos/devtools",
  "@dxos/shell",
  // TODO(thure): glob v7 runs out of memory if we do a `**` search, and this is (hopefully) the only L3 content package; find a better solution.
  "@dxos/react-ui-table/node_modules/@dxos/react-ui-searchlist"
];
var knownDirectPeers = [
  "@dxos/plugin-*",
  ...knownIndirectPeers
];
var packageNamePattern = /.*node_modules\/(.+?)$/;
var packageName = (path) => path.match(packageNamePattern)?.[1];
var flatten = (acc, group) => [
  ...acc,
  ...group
];
var dedupe = (acc, path) => {
  const name = packageName(path);
  if (name && !acc[name]) {
    acc[name] = path;
  }
  return acc;
};
var resolveKnownPeers = async (content, cwd) => {
  const globOptions = {
    cwd,
    absolute: true
  };
  const directPeers = await Promise.all(knownDirectPeers.map((peer) => glob(`./node_modules/${peer}`, globOptions)));
  const indirectPeers = await Promise.all(knownIndirectPeers.map((peer) => glob(`./node_modules/@dxos/plugin-*/node_modules/${peer}`, globOptions)));
  const knownPeerContent = Object.values(indirectPeers.reduce(flatten, []).reduce(dedupe, directPeers.reduce(flatten, []).reduce(dedupe, {}))).map((value) => `${value}/dist/lib/**/*.mjs`);
  return [
    ...content,
    ...knownPeerContent
  ];
};

export {
  resolveKnownPeers
};
//# sourceMappingURL=chunk-TFKSVC5U.mjs.map
