export declare const semanticColors: {
    conditions: {
        light: string[];
        dark: string[];
    };
    sememes: {
        baseSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        groupSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        modalSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        textInputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        textInputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        textInputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        inputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        inputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        inputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        hoverSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        hoverSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        hoverSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        separatorBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        separatorGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        separatorModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        subduedSeparator: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        unAccent: {
            light: [string, number];
            dark: [string, number];
        };
        unAccentHover: {
            light: [string, number];
            dark: [string, number];
        };
        hoverOverlay: {
            light: [string, string];
            dark: [string, string];
        };
        scrimSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
        focusSurface: {
            light: [string, number];
            dark: [string, number];
        };
        inverseSurface: {
            light: [string, number];
            dark: [string, number];
        };
        accentSurfaceRelated: {
            light: [string, string];
            dark: [string, string];
        };
        accentSurfaceHover: {
            light: [string, number];
            dark: [string, number];
        };
        accentSurface: {
            light: [string, number];
            dark: [string, number];
        };
        baseText: {
            light: [string, number];
            dark: [string, number];
        };
        inverseSurfaceText: {
            light: [string, number];
            dark: [string, number];
        };
        description: {
            light: [string, number];
            dark: [string, number];
        };
        subdued: {
            light: [string, number];
            dark: [string, number];
        };
        accentText: {
            light: [string, number];
            dark: [string, number];
        };
        accentTextHover: {
            light: [string, number];
            dark: [string, number];
        };
        neutralFocusIndicator: {
            light: [string, number];
            dark: [string, number];
        };
        accentFocusIndicator: {
            light: [string, number];
            dark: [string, number];
        };
        accentSurfaceText: {
            light: [string, number];
            dark: [string, number];
        };
        axisSurface: {
            light: [string, number];
            dark: [string, number];
        };
        axisText: {
            light: [string, number];
            dark: [string, number];
        };
        axisSelectedSurface: {
            light: [string, number];
            dark: [string, number];
        };
        axisSelectedText: {
            light: [string, number];
            dark: [string, number];
        };
        gridCell: {
            light: [string, string];
            dark: [string, number];
        };
        gridCellSelected: {
            light: [string, number];
            dark: [string, number];
        };
        gridOverlay: {
            light: [string, string];
            dark: [string, string];
        };
        gridSelectionOverlay: {
            light: [string, string];
            dark: [string, string];
        };
        gridHighlight: {
            light: [string, string];
            dark: [string, string];
        };
        gridCommented: {
            light: [string, number];
            dark: [string, number];
        };
        gridCommentedActive: {
            light: [string, string];
            dark: [string, string];
        };
        cmCodeblock: {
            light: [string, string];
            dark: [string, string];
        };
        cmActiveLine: {
            light: [string, string];
            dark: [string, string];
        };
        cmSeparator: {
            light: [string, number];
            dark: [string, number];
        };
        cmCursor: {
            light: [string, number];
            dark: [string, number];
        };
        cmSelection: {
            light: [string, string];
            dark: [string, string];
        };
        cmFocusedSelection: {
            light: [string, number];
            dark: [string, number];
        };
        cmHighlight: {
            light: [string, number];
            dark: [string, number];
        };
        cmHighlightSurface: {
            light: [string, number];
            dark: [string, number];
        };
        cmComment: {
            light: [string, number];
            dark: [string, number];
        };
        cmCommentSurface: {
            light: [string, number];
            dark: [string, number];
        };
    };
    namespace: string;
};
//# sourceMappingURL=semantic-colors.d.ts.map