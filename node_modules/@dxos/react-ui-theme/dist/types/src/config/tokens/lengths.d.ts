export declare const lengthsFacet: {
    physical: {
        namespace: string;
        conditions: {
            root: string[];
        };
        series: {
            line: {
                root: {
                    unit: string;
                    initial: number;
                    slope: number;
                };
            };
            lacuna: {
                root: {
                    unit: string;
                    initial: number;
                    slope: number;
                };
            };
        };
    };
    semantic: {
        namespace: string;
        conditions: {
            root: string[];
        };
        sememes: {
            noLine: {
                root: [string, number];
            };
            hairLine: {
                root: [string, number];
            };
            thickLine: {
                root: [string, number];
            };
            trimXs: {
                root: [string, number];
            };
            trimSm: {
                root: [string, number];
            };
            trimMd: {
                root: [string, number];
            };
            trimLg: {
                root: [string, number];
            };
        };
    };
    alias: {
        namespace: string;
        conditions: {
            fine: string[];
            coarse: string[];
            flush: string[];
        };
        aliases: {
            noLine: {
                fine: string[];
            };
            hairLine: {
                fine: string[];
            };
            thickLine: {
                fine: string[];
            };
            trimXs: {
                fine: string[];
            };
            trimSm: {
                fine: string[];
            };
            trimMd: {
                coarse: string[];
            };
        };
    };
};
export declare const maxSizesFacet: {
    physical: {
        namespace: string;
        conditions: {
            root: string[];
        };
        series: {
            size: {
                root: {
                    unit: string;
                    initial: number;
                    slope: number;
                };
            };
        };
    };
    semantic: {
        namespace: string;
        conditions: {
            root: string[];
        };
        sememes: {
            prose: {
                root: [string, number];
            };
            containerMaxWidth: {
                root: [string, number];
            };
            popoverMaxWidth: {
                root: [string, number];
            };
        };
    };
};
//# sourceMappingURL=lengths.d.ts.map