export declare const tokenSet: {
    colors: {
        physical: import("@ch-ui/tokens").ColorsPhysicalLayer;
        semantic: {
            conditions: {
                light: string[];
                dark: string[];
            };
            sememes: {
                baseSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                groupSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                modalSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                subduedSeparator: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                unAccent: {
                    light: [string, number];
                    dark: [string, number];
                };
                unAccentHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                hoverOverlay: {
                    light: [string, string];
                    dark: [string, string];
                };
                scrimSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                focusSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                inverseSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurfaceRelated: {
                    light: [string, string];
                    dark: [string, string];
                };
                accentSurfaceHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                baseText: {
                    light: [string, number];
                    dark: [string, number];
                };
                inverseSurfaceText: {
                    light: [string, number];
                    dark: [string, number];
                };
                description: {
                    light: [string, number];
                    dark: [string, number];
                };
                subdued: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentText: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentTextHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                neutralFocusIndicator: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentFocusIndicator: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurfaceText: {
                    light: [string, number];
                    dark: [string, number];
                };
                axisSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                axisText: {
                    light: [string, number];
                    dark: [string, number];
                };
                axisSelectedSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                axisSelectedText: {
                    light: [string, number];
                    dark: [string, number];
                };
                gridCell: {
                    light: [string, string];
                    dark: [string, number];
                };
                gridCellSelected: {
                    light: [string, number];
                    dark: [string, number];
                };
                gridOverlay: {
                    light: [string, string];
                    dark: [string, string];
                };
                gridSelectionOverlay: {
                    light: [string, string];
                    dark: [string, string];
                };
                gridHighlight: {
                    light: [string, string];
                    dark: [string, string];
                };
                gridCommented: {
                    light: [string, number];
                    dark: [string, number];
                };
                gridCommentedActive: {
                    light: [string, string];
                    dark: [string, string];
                };
                cmCodeblock: {
                    light: [string, string];
                    dark: [string, string];
                };
                cmActiveLine: {
                    light: [string, string];
                    dark: [string, string];
                };
                cmSeparator: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmCursor: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmSelection: {
                    light: [string, string];
                    dark: [string, string];
                };
                cmFocusedSelection: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmHighlight: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmHighlightSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmComment: {
                    light: [string, number];
                    dark: [string, number];
                };
                cmCommentSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
            };
            namespace: string;
        };
        alias: {
            conditions: {
                root: string[];
                group: string[];
                modal: string[];
            };
            aliases: {
                activeSurface: {
                    root: string[];
                };
            };
            namespace: string;
        };
    };
    lengths: {
        physical: {
            namespace: string;
            conditions: {
                root: string[];
            };
            series: {
                line: {
                    root: {
                        unit: string;
                        initial: number;
                        slope: number;
                    };
                };
                lacuna: {
                    root: {
                        unit: string;
                        initial: number;
                        slope: number;
                    };
                };
            };
        };
        semantic: {
            namespace: string;
            conditions: {
                root: string[];
            };
            sememes: {
                noLine: {
                    root: [string, number];
                };
                hairLine: {
                    root: [string, number];
                };
                thickLine: {
                    root: [string, number];
                };
                trimXs: {
                    root: [string, number];
                };
                trimSm: {
                    root: [string, number];
                };
                trimMd: {
                    root: [string, number];
                };
                trimLg: {
                    root: [string, number];
                };
            };
        };
        alias: {
            namespace: string;
            conditions: {
                fine: string[];
                coarse: string[];
                flush: string[];
            };
            aliases: {
                noLine: {
                    fine: string[];
                };
                hairLine: {
                    fine: string[];
                };
                thickLine: {
                    fine: string[];
                };
                trimXs: {
                    fine: string[];
                };
                trimSm: {
                    fine: string[];
                };
                trimMd: {
                    coarse: string[];
                };
            };
        };
    };
    maxSizes: {
        physical: {
            namespace: string;
            conditions: {
                root: string[];
            };
            series: {
                size: {
                    root: {
                        unit: string;
                        initial: number;
                        slope: number;
                    };
                };
            };
        };
        semantic: {
            namespace: string;
            conditions: {
                root: string[];
            };
            sememes: {
                prose: {
                    root: [string, number];
                };
                containerMaxWidth: {
                    root: [string, number];
                };
                popoverMaxWidth: {
                    root: [string, number];
                };
            };
        };
    };
};
export declare const hues: string[];
export declare const userDefaultTokenSet: {
    colors: {
        physical: {
            definitions: {
                series: {
                    neutral: import("@ch-ui/tokens").HelicalArcSeries;
                    primary: import("@ch-ui/tokens").HelicalArcSeries;
                };
                accompanyingSeries: Record<string, any> | undefined;
            };
            conditions: Partial<Record<import("@ch-ui/colors").Gamut, import("@ch-ui/tokens").Statements>>;
            series: {
                neutral: Partial<Partial<Record<import("@ch-ui/colors").Gamut, import("@ch-ui/tokens").HelicalArcSeries>>>;
                primary: Partial<Partial<Record<import("@ch-ui/colors").Gamut, import("@ch-ui/tokens").HelicalArcSeries>>>;
            };
            namespace: string | undefined;
        };
        semantic: {
            conditions: {
                light: string[];
                dark: string[];
            };
            sememes: {
                baseSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                groupSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                modalSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                textInputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                inputSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                hoverSurfaceModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorBase: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorGroup: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                separatorModal: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                subduedSeparator: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                unAccent: {
                    light: [string, number];
                    dark: [string, number];
                };
                unAccentHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                hoverOverlay: {
                    light: [string, string];
                    dark: [string, string];
                };
                scrimSurface: Partial<Record<string, [string, import("@ch-ui/colors").AlphaLuminosity]>>;
                focusSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                inverseSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurfaceRelated: {
                    light: [string, string];
                    dark: [string, string];
                };
                accentSurfaceHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurface: {
                    light: [string, number];
                    dark: [string, number];
                };
                baseText: {
                    light: [string, number];
                    dark: [string, number];
                };
                inverseSurfaceText: {
                    light: [string, number];
                    dark: [string, number];
                };
                description: {
                    light: [string, number];
                    dark: [string, number];
                };
                subdued: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentText: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentTextHover: {
                    light: [string, number];
                    dark: [string, number];
                };
                neutralFocusIndicator: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentFocusIndicator: {
                    light: [string, number];
                    dark: [string, number];
                };
                accentSurfaceText: {
                    light: [string, number];
                    dark: [string, number];
                };
            };
            namespace: string;
        };
        alias: {
            conditions: {
                root: string[];
                group: string[];
                modal: string[];
            };
            aliases: Record<string, Record<string, string[]>>;
            namespace: string;
        };
    };
};
export declare const tokensTailwindConfig: Partial<import("tailwindcss/types/config").CustomThemeConfig & {
    extend: Partial<import("tailwindcss/types/config").CustomThemeConfig>;
}>;
//# sourceMappingURL=index.d.ts.map