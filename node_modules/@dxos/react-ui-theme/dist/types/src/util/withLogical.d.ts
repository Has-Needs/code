import { type Config } from 'tailwind-merge';
declare const classGroupsConfig: {
    float: {
        float: string[];
    }[];
    clear: {
        clear: string[];
    }[];
    resize: {
        resize: string[];
    }[];
    'text-alignment': {
        text: string[];
    }[];
    'logical.overscroll-b': {
        'overscroll-b': string[];
    }[];
    'logical.overscroll-i': {
        'overscroll-b': string[];
    }[];
    'logical.bs': {
        bs: readonly [(value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.min-bs': {
        'min-bs': readonly [() => boolean];
    }[];
    'logical.max-bs': {
        'max-bs': readonly [() => boolean];
    }[];
    'logical.is': {
        is: readonly [(value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.min-is': {
        'min-is': readonly [() => boolean];
    }[];
    'logical.max-is': {
        'max-is': readonly [() => boolean];
    }[];
    'logical.mlb': {
        mlb: readonly [() => boolean];
    }[];
    'logical.mli': {
        mli: readonly [() => boolean];
    }[];
    'logical.mbs': {
        mbs: readonly [() => boolean];
    }[];
    'logical.mbe': {
        mbe: readonly [() => boolean];
    }[];
    'logical.mis': {
        mis: readonly [() => boolean];
    }[];
    'logical.mie': {
        mie: readonly [() => boolean];
    }[];
    'logical.plb': {
        plb: readonly [() => boolean];
    }[];
    'logical.pli': {
        pli: readonly [() => boolean];
    }[];
    'logical.pbs': {
        pbs: readonly [() => boolean];
    }[];
    'logical.pbe': {
        pbe: readonly [() => boolean];
    }[];
    'logical.pis': {
        pis: readonly [() => boolean];
    }[];
    'logical.pie': {
        pie: readonly [() => boolean];
    }[];
    'logical.space-b': {
        'space-b': readonly [(value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.space-i': {
        'space-i': readonly [(value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.inset-block': {
        'inset-block': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.inset-inline': {
        'inset-inline': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.block-start': {
        'block-start': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.block-end': {
        'block-end': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.inline-start': {
        'inline-start': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.inline-end': {
        'inline-end': readonly ["auto", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-li': {
        'border-li': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-lb': {
        'border-lb': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-bs': {
        'border-bs': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-be': {
        'border-be': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-is': {
        'border-is': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-ie': {
        'border-ie': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.border-color-bs': {
        'border-bs': readonly [() => boolean];
    }[];
    'logical.border-color-be': {
        'border-be': readonly [() => boolean];
    }[];
    'logical.border-color-is': {
        'border-is': readonly [() => boolean];
    }[];
    'logical.border-color-ie': {
        'border-ie': readonly [() => boolean];
    }[];
    'logical.rounded-bs': {
        'rounded-bs': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-be': {
        'rounded-be': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-is': {
        'rounded-is': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-ie': {
        'rounded-ie': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-ss': {
        'rounded-ss': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-se': {
        'rounded-se': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-es': {
        'rounded-es': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.rounded-ee': {
        'rounded-ee': readonly ["none", "", (value: string) => boolean, "full", (value: string) => boolean];
    }[];
    'logical.divide-b': {
        'divide-b': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
    'logical.divide-i': {
        'divide-i': readonly ["", (value: string) => boolean, (value: string) => boolean];
    }[];
};
export type WithLogicalClassGroups = keyof typeof classGroupsConfig;
type WithLogicalConfig = Config<WithLogicalClassGroups, string>;
export declare const withLogical: (prevConfig: WithLogicalConfig) => WithLogicalConfig;
export {};
//# sourceMappingURL=withLogical.d.ts.map