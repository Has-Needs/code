import { type ComponentFunction, type Density, type Elevation, type MessageValence, type Size } from '@dxos/react-ui-types';
export type InputStyleProps = Partial<{
    variant: 'default' | 'subdued' | 'static';
    density: Density;
    disabled: boolean;
    elevation: Elevation;
    focused: boolean;
    validationValence: MessageValence;
    size: Size;
    checked: boolean;
}>;
export type InputMetaStyleProps = Partial<{
    srOnly: boolean;
    validationValence: MessageValence;
}>;
export declare const neutralInputValence = "";
export declare const successInputValence = "shadow-emerald-500/50 dark:shadow-emerald-600/50";
export declare const infoInputValence = "shadow-cyan-500/50 dark:shadow-cyan-600/50";
export declare const warningInputValence = "shadow-amber-500/50 dark:shadow-amber-600/50";
export declare const errorInputValence = "shadow-rose-500/50 dark:shadow-rose-600/50";
export declare const inputTextLabel = "text-xs font-medium mbs-inputSpacingBlock mbe-labelSpacingBlock first:mbs-0";
export declare const inputValence: (valence?: MessageValence) => "shadow-emerald-500/50 dark:shadow-emerald-600/50" | "shadow-cyan-500/50 dark:shadow-cyan-600/50" | "shadow-amber-500/50 dark:shadow-amber-600/50" | "shadow-rose-500/50 dark:shadow-rose-600/50" | null;
export declare const inputInput: ComponentFunction<InputStyleProps>;
export declare const inputCheckbox: ComponentFunction<InputStyleProps>;
export declare const inputCheckboxIndicator: ComponentFunction<InputStyleProps>;
export declare const inputSwitch: ComponentFunction<InputStyleProps>;
export declare const inputSwitchThumb: ComponentFunction<InputStyleProps>;
export declare const inputWithSegmentsInput: ComponentFunction<InputStyleProps>;
export declare const inputLabel: ComponentFunction<InputMetaStyleProps>;
export declare const inputDescription: ComponentFunction<InputMetaStyleProps>;
export declare const inputDescriptionAndValidation: ComponentFunction<InputMetaStyleProps>;
export declare const inputValidation: ComponentFunction<InputMetaStyleProps>;
export declare const inputTheme: {
    input: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    inputWithSegments: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    checkbox: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    checkboxIndicator: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    label: ComponentFunction<Partial<{
        srOnly: boolean;
        validationValence: MessageValence;
    }>>;
    description: ComponentFunction<Partial<{
        srOnly: boolean;
        validationValence: MessageValence;
    }>>;
    validation: ComponentFunction<Partial<{
        srOnly: boolean;
        validationValence: MessageValence;
    }>>;
    switch: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    switchThumb: ComponentFunction<Partial<{
        variant: "default" | "subdued" | "static";
        density: Density;
        disabled: boolean;
        elevation: Elevation;
        focused: boolean;
        validationValence: MessageValence;
        size: Size;
        checked: boolean;
    }>>;
    descriptionAndValidation: ComponentFunction<Partial<{
        srOnly: boolean;
        validationValence: MessageValence;
    }>>;
};
//# sourceMappingURL=input.d.ts.map