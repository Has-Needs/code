import { QRCodeSVG } from 'qrcode.react';
import { ReactHTMLElement, ComponentProps } from 'react';
import { Size } from '../../props';
import { ButtonProps } from '../Button';
import { TooltipContentProps } from '../Tooltip';
interface SharedQrCodeProps extends Pick<ButtonProps, 'density' | 'elevation'> {
    value: string;
}
interface FullQrCodeSlots {
    tooltipContent?: Omit<TooltipContentProps, 'ref' | 'children'>;
    button?: Omit<ComponentProps<'button'>, 'ref' | 'children'>;
    qrSvg?: ComponentProps<typeof QRCodeSVG>;
}
export interface FullQrCodeProps extends SharedQrCodeProps {
    label: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
    size?: Size;
    slots?: FullQrCodeSlots;
}
export declare type QrCodeProps = FullQrCodeProps;
interface CompactQrCodeSlots {
    qrTooltipContent?: Omit<TooltipContentProps, 'children'>;
    qrButton?: Omit<ComponentProps<'button'>, 'ref' | 'children'>;
    copyTooltipContent?: Omit<TooltipContentProps, 'children'>;
    copyButton?: Omit<ComponentProps<'button'>, 'ref' | 'children'>;
    qrSvg?: ComponentProps<typeof QRCodeSVG>;
}
export interface CompactQrCodeProps extends SharedQrCodeProps {
    displayQrLabel: undefined | string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
    copyLabel: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
    slots?: CompactQrCodeSlots;
}
export declare const FullQrCode: ({ value, label, size, density, elevation, slots }: FullQrCodeProps) => JSX.Element;
export declare const CompactQrCode: ({ value, displayQrLabel, copyLabel, density, elevation, slots }: CompactQrCodeProps) => JSX.Element;
export declare const QrCode: ({ value, label, size, density, elevation, slots }: FullQrCodeProps) => JSX.Element;
export {};
//# sourceMappingURL=QrCode.d.ts.map