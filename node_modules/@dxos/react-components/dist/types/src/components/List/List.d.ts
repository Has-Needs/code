import { DndContext } from '@dnd-kit/core';
import { SortableContext } from '@dnd-kit/sortable';
import { CaretDown, DotsSixVertical } from '@phosphor-icons/react';
import * as Collapsible from '@radix-ui/react-collapsible';
import { Scope } from '@radix-ui/react-context';
import React, { ComponentProps, ComponentPropsWithoutRef, ComponentPropsWithRef, ReactHTMLElement, ReactNode } from 'react';
import { Density } from '../../props';
import { CheckboxProps } from '../Checkbox';
declare const LIST_NAME = "List";
declare const LIST_ITEM_NAME = "ListItem";
declare type ListScopedProps<P> = P & {
    __listScope?: Scope;
};
declare type ListVariant = 'ordered' | 'unordered' | 'ordered-draggable';
interface SharedListSlots {
    root?: ComponentPropsWithoutRef<'ul' | 'ol'>;
}
interface DraggableListSlots extends SharedListSlots {
    dndContext?: Omit<ComponentProps<typeof DndContext>, 'onDragEnd'>;
    sortableContext?: Omit<ComponentProps<typeof SortableContext>, 'items'>;
}
interface SharedListProps {
    labelId: string;
    children?: ReactNode;
    selectable?: boolean;
    collapsible?: boolean;
    variant?: ListVariant;
    onDragEnd?: ComponentPropsWithoutRef<typeof DndContext>['onDragEnd'];
    listItemIds?: string[];
    slots?: SharedListSlots;
    density?: Density;
    toggleOpenLabel?: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
}
interface DraggableListProps extends Omit<SharedListProps, 'onDragEnd' | 'listItemIds' | 'variant' | 'slots' | 'density'> {
    onDragEnd: Exclude<SharedListProps['onDragEnd'], undefined>;
    listItemIds: Exclude<SharedListProps['listItemIds'], undefined>;
    variant: 'ordered-draggable';
    slots?: DraggableListSlots;
}
declare type ListProps = SharedListProps | DraggableListProps;
interface ListItemData {
    id: string;
    selected?: CheckboxProps['checked'];
}
interface ListItemSlots {
    root?: Omit<ComponentPropsWithRef<'li'>, 'id' | 'children'>;
    dragHandle?: ComponentPropsWithoutRef<typeof ListItemDragHandle>;
    dragHandleIcon?: ComponentPropsWithoutRef<typeof DotsSixVertical>;
    openTrigger?: ComponentPropsWithoutRef<typeof ListItemOpenTrigger>;
    openTriggerIcon?: ComponentPropsWithoutRef<typeof CaretDown>;
    mainContent?: ComponentPropsWithoutRef<'div'>;
    selectableCheckbox?: Omit<CheckboxProps, 'default' | 'checked' | 'onCheckedChange'>;
    selectableEndcap?: Omit<ListItemEndcapProps, 'children'>;
}
interface NonCollapsibleListItemProps extends Omit<ListItemData, 'id'> {
    children?: ReactNode;
    onSelectedChange?: CheckboxProps['onCheckedChange'];
    defaultSelected?: CheckboxProps['defaultChecked'];
    slots?: ListItemSlots;
    id?: string;
    collapsible?: false;
}
interface CollapsibleListItemProps extends Omit<NonCollapsibleListItemProps, 'collapsible'> {
    collapsible: true;
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?: (nextOpen: boolean) => void;
}
declare type ListItemProps = NonCollapsibleListItemProps | CollapsibleListItemProps;
declare const createListScope: import("@radix-ui/react-context").CreateScope;
declare type ListContextValue = Pick<ListProps, 'selectable' | 'collapsible' | 'variant' | 'toggleOpenLabel'>;
declare const useListContext: (consumerName: string, scope: Scope<ListContextValue | undefined>) => ListContextValue;
declare const useListDensity: ({ density, variant }: Pick<SharedListProps, 'density' | 'variant'>) => Density;
declare const List: React.ForwardRefExoticComponent<ListProps & React.RefAttributes<HTMLOListElement>>;
declare const createListItemScope: import("@radix-ui/react-context").CreateScope;
declare type ListItemContextValue = {
    headingId: string;
    open: boolean;
};
declare const useListItemContext: (consumerName: string, scope: Scope<ListItemContextValue | undefined>) => ListItemContextValue;
declare type ListItemEndcapProps = ComponentPropsWithoutRef<'div'> & {
    asChild?: boolean;
};
declare const ListItemEndcap: ({ children, className, asChild, ...props }: ListItemEndcapProps) => JSX.Element;
declare type ListItemHeadingProps = ListScopedProps<ComponentPropsWithoutRef<'p'>> & {
    asChild?: boolean;
};
declare const ListItemHeading: ({ children, className, asChild, __listScope, ...props }: ListItemHeadingProps) => JSX.Element;
declare type ListItemDragHandleProps = Omit<ComponentPropsWithoutRef<'div'>, 'children'> & {
    dragHandleIconSlot?: ListItemSlots['dragHandleIcon'];
};
declare const ListItemDragHandle: ({ className, dragHandleIconSlot, ...props }: ListItemDragHandleProps) => JSX.Element;
declare type ListItemOpenTriggerProps = ListScopedProps<Omit<ComponentPropsWithoutRef<'button'>, 'children'>> & {
    openTriggerIconSlot?: ListItemSlots['dragHandleIcon'];
};
declare const ListItemOpenTrigger: React.ForwardRefExoticComponent<Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>>, "children"> & {
    __listScope?: Scope;
} & {
    openTriggerIconSlot?: ListItemSlots['dragHandleIcon'];
} & React.RefAttributes<HTMLButtonElement>>;
declare type ListItemCollapsibleContentProps = ComponentProps<typeof Collapsible.Content>;
declare const ListItemCollapsibleContent: React.ForwardRefExoticComponent<Collapsible.CollapsibleContentProps & React.RefAttributes<HTMLDivElement>>;
declare const ListItem: React.ForwardRefExoticComponent<ListItemProps & React.RefAttributes<HTMLLIElement>>;
export { List, createListScope, useListDensity, useListContext, LIST_NAME, ListItem, ListItemHeading, ListItemCollapsibleContent, ListItemEndcap, ListItemDragHandle, ListItemOpenTrigger, createListItemScope, useListItemContext, LIST_ITEM_NAME };
export type { ListProps, ListVariant, ListItemProps, ListItemHeadingProps, ListItemCollapsibleContentProps, ListItemEndcapProps, ListItemDragHandleProps, ListItemOpenTriggerProps, ListScopedProps };
//# sourceMappingURL=List.d.ts.map