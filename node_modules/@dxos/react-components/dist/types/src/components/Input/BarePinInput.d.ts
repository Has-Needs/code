import { CodeInput } from 'rci';
import React, { ComponentPropsWithoutRef } from 'react';
import { InputProps } from './InputProps';
export declare type BarePinInputProps = Omit<ComponentPropsWithoutRef<typeof CodeInput>, 'inputRef' | 'renderSegment' | 'spellCheck'> & Pick<InputProps, 'validationMessage' | 'validationValence' | 'variant' | 'elevation' | 'density'>;
export declare const BarePinInput: React.ForwardRefExoticComponent<Omit<Pick<{
    prefix?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    translate?: "yes" | "no" | undefined;
    value?: string | number | readonly string[] | undefined;
    is?: string | undefined;
    form?: string | undefined;
    slot?: string | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    pattern?: string | undefined;
    ref?: React.RefObject<HTMLInputElement> | ((instance: HTMLInputElement | null) => void) | null | undefined;
    key?: React.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    className?: string | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: React.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "copy" | "link" | "none" | "execute" | "move" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onInput?: React.FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onReset?: React.FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: React.FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: React.FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onError?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: React.DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: React.UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: React.WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement> | undefined;
    max?: string | number | undefined;
    min?: string | number | undefined;
    name?: string | undefined;
    type?: React.HTMLInputTypeAttribute | undefined;
    crossOrigin?: string | undefined;
    size?: number | undefined;
    list?: string | undefined;
    step?: string | number | undefined;
    disabled?: boolean | undefined;
    accept?: string | undefined;
    alt?: string | undefined;
    autoComplete?: string | undefined;
    autoFocus?: boolean | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    checked?: boolean | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    src?: string | undefined;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | undefined;
} & {
    inputRef: React.RefObject<HTMLInputElement>;
    renderSegment: (segmentProps: import("rci").SegmentProps) => React.ReactNode;
    length?: number | undefined;
    fontFamily?: string | undefined;
    fontSize?: string | undefined;
    padding?: string | undefined;
    paddingY?: string | undefined;
    paddingX?: string | undefined;
    spacing?: string | undefined;
    characterWidth?: string | undefined;
    segmentWidth?: string | undefined;
    inputWidth?: string | undefined;
    inputClassName?: string | undefined;
    inputStyle?: React.CSSProperties | undefined;
}, "prefix" | "spacing" | "height" | "width" | "translate" | "padding" | "fontFamily" | "fontSize" | "value" | "length" | "is" | "form" | "slot" | "style" | "title" | "pattern" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "max" | "min" | "name" | "type" | "crossOrigin" | "size" | "list" | "step" | "disabled" | "accept" | "alt" | "autoComplete" | "autoFocus" | "capture" | "checked" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "minLength" | "multiple" | "readOnly" | "required" | "src" | "enterKeyHint" | "inputRef" | "renderSegment" | "paddingY" | "paddingX" | "characterWidth" | "segmentWidth" | "inputWidth" | "inputClassName" | "inputStyle">, "spellCheck" | "inputRef" | "renderSegment"> & Pick<InputProps, "density" | "elevation" | "variant" | "validationValence" | "validationMessage"> & React.RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=BarePinInput.d.ts.map