import { ToastProviderProps, ToastViewportProps } from '@radix-ui/react-toast';
import { TooltipProviderProps } from '@radix-ui/react-tooltip';
import React, { PropsWithChildren } from 'react';
import { Density, Elevation } from '../../props';
import { TranslationsProviderProps } from './TranslationsProvider';
export declare type ThemeVariant = 'app' | 'os';
export declare type ThemeMode = 'light' | 'dark';
export interface ThemeContextValue {
    themeVariant: ThemeVariant;
    themeMode?: ThemeMode;
    hasIosKeyboard?: boolean;
}
export declare type ThemeProviderProps = PropsWithChildren<{
    tooltipProviderProps?: Omit<TooltipProviderProps, 'children'>;
    toastProviderProps?: Omit<ToastProviderProps, 'children'>;
    toastViewportProps?: Omit<ToastViewportProps, 'children'>;
    rootElevation?: Elevation;
    rootDensity?: Density;
}> & Omit<TranslationsProviderProps, 'children'> & Partial<ThemeContextValue>;
export declare const ThemeContext: React.Context<ThemeContextValue>;
export declare const ThemeProvider: ({ children, tooltipProviderProps, toastProviderProps, toastViewportProps, fallback, resourceExtensions, appNs, themeVariant, themeMode, rootElevation, rootDensity }: ThemeProviderProps) => JSX.Element;
//# sourceMappingURL=ThemeProvider.d.ts.map