import * as AvatarPrimitive from '@radix-ui/react-avatar';
import React, { ComponentProps, ReactHTMLElement, ReactNode } from 'react';
import { Size } from '../../props';
export interface AvatarSlots {
    root?: Omit<ComponentProps<typeof AvatarPrimitive.Root>, 'children'>;
    image?: ComponentProps<'image'>;
    fallback?: Omit<ComponentProps<typeof AvatarPrimitive.Fallback>, 'children'>;
    labels?: Omit<ComponentProps<'div'>, 'children'>;
}
interface SharedAvatarProps {
    fallbackValue: string;
    label?: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
    description?: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
    labelId?: string;
    descriptionId?: string;
    size?: Size;
    variant?: 'square' | 'circle';
    status?: 'active' | 'inactive';
    mediaSrc?: string;
    mediaAlt?: string;
    children?: ReactNode;
    slots?: AvatarSlots;
}
interface DirectlyLabeledAvatarProps extends Omit<SharedAvatarProps, 'label'> {
    label: string | Omit<ReactHTMLElement<HTMLElement>, 'ref'>;
}
interface IdLabeledAvatarProps extends Omit<SharedAvatarProps, 'labelId'> {
    labelId: string;
}
export declare type AvatarProps = DirectlyLabeledAvatarProps | IdLabeledAvatarProps;
export declare const Avatar: React.ForwardRefExoticComponent<React.PropsWithChildren<AvatarProps> & React.RefAttributes<HTMLSpanElement>>;
export {};
//# sourceMappingURL=Avatar.d.ts.map