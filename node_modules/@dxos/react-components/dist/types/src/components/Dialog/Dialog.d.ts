import { X } from '@phosphor-icons/react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { ComponentProps, ComponentPropsWithoutRef, ReactNode } from 'react';
export interface DialogSlots {
    overlay?: Pick<ComponentProps<typeof DialogPrimitive.Overlay>, 'className'>;
    content?: Omit<ComponentProps<typeof DialogPrimitive.Content>, 'children'>;
    title?: Omit<ComponentProps<typeof DialogPrimitive.Content>, 'children'>;
    description?: Omit<ComponentProps<typeof DialogPrimitive.Description>, 'children'>;
    close?: Pick<ComponentProps<typeof DialogPrimitive.Close>, 'className'>;
    closeIcon?: ComponentProps<typeof X>;
    closeTriggers?: Omit<ComponentProps<'div'>, 'children'>;
}
export interface DialogProps extends Pick<ComponentPropsWithoutRef<typeof DialogPrimitive.Root>, 'open' | 'defaultOpen' | 'onOpenChange'> {
    title: ReactNode;
    openTrigger?: ReactNode;
    closeTriggers?: [ReactNode, ...ReactNode[]];
    titleVisuallyHidden?: boolean;
    description?: ReactNode;
    children?: ReactNode;
    closeLabel?: string;
    mountAsSibling?: boolean;
    slots?: DialogSlots;
}
export declare const Dialog: ({ title, titleVisuallyHidden, description, openTrigger, closeTriggers, children, closeLabel, mountAsSibling, open: propsOpen, defaultOpen: propsDefaultOpen, onOpenChange: propsOnOpenChange, slots }: DialogProps) => JSX.Element;
//# sourceMappingURL=Dialog.d.ts.map