// packages/common/react-components/src/index.ts
import { useTranslation, Trans } from "react-i18next";

// packages/common/react-components/src/components/Alert/Alert.tsx
import React3 from "react";

// packages/common/react-components/src/hooks/useId.ts
import alea from "alea";
import { useMemo } from "react";
var Alea = alea;
var prng = new Alea("@dxos/react-components");
var randomString = (n = 4) => prng().toString(16).slice(2, n + 2);
var useId = (namespace, n) => useMemo(() => `${namespace}-${randomString(n)}`, []);

// packages/common/react-components/src/hooks/useDensityContext.ts
import { useContext } from "react";
var useDensityContext = (propsDensity) => {
  const { density } = useContext(DensityContext);
  return propsDensity != null ? propsDensity : density;
};

// packages/common/react-components/src/hooks/useForwardedRef.ts
import { useRef, useEffect } from "react";
var useForwardedRef = (ref) => {
  const innerRef = useRef(null);
  useEffect(() => {
    if (!ref) {
      return;
    }
    if (typeof ref === "function") {
      ref(innerRef.current);
    } else {
      ref.current = innerRef.current;
    }
  });
  return innerRef;
};

// packages/common/react-components/src/hooks/useElevationContext.ts
import { useContext as useContext3 } from "react";

// packages/common/react-components/src/hooks/useThemeContext.ts
import { useContext as useContext2 } from "react";
var useThemeContext = () => useContext2(ThemeContext);

// packages/common/react-components/src/hooks/useElevationContext.ts
var useElevationContext = () => useContext3(ElevationContext);
var useButtonShadow = (propsElevation) => {
  const { elevation } = useElevationContext();
  const { themeVariant } = useThemeContext();
  const resolvedElevation = propsElevation != null ? propsElevation : elevation;
  return themeVariant === "os" ? "shadow-none" : resolvedElevation === "group" ? "shadow" : resolvedElevation === "chrome" ? "shadow-none" : "shadow-md";
};

// packages/common/react-components/src/hooks/useIsFocused.ts
import { useEffect as useEffect2, useRef as useRef2, useState } from "react";
var useIsFocused = (inputRef) => {
  const [isFocused, setIsFocused] = useState(void 0);
  const isFocusedRef = useRef2(isFocused);
  isFocusedRef.current = isFocused;
  useEffect2(() => {
    const input = inputRef.current;
    if (!input) {
      return;
    }
    const onFocus = () => setIsFocused(true);
    const onBlur = () => setIsFocused(false);
    input.addEventListener("focus", onFocus);
    input.addEventListener("blur", onBlur);
    if (isFocusedRef.current === void 0) {
      setIsFocused(document.activeElement === input);
    }
    return () => {
      input.removeEventListener("focus", onFocus);
      input.removeEventListener("blur", onBlur);
    };
  }, [
    inputRef,
    setIsFocused
  ]);
  return isFocused;
};

// packages/common/react-components/src/hooks/useMediaQuery.ts
import { useEffect as useEffect3, useState as useState2 } from "react";
var breakpointMediaQueries = {
  sm: "(min-width: 640px)",
  md: "(min-width: 768px)",
  lg: "(min-width: 1024px)",
  xl: "(min-width: 1280px)",
  "2xl": "(min-width: 1536px)"
};
var useMediaQuery = (query, options = {}) => {
  const { ssr = true, fallback } = options;
  const queries = (Array.isArray(query) ? query : [
    query
  ]).map((query2) => query2 in breakpointMediaQueries ? breakpointMediaQueries[query2] : query2);
  let fallbackValues = Array.isArray(fallback) ? fallback : [
    fallback
  ];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = useState2(() => {
    return queries.map((query2, index) => {
      var _a;
      return {
        media: query2,
        matches: ssr ? !!fallbackValues[index] : (_a = document.defaultView) == null ? void 0 : _a.matchMedia(query2).matches
      };
    });
  });
  useEffect3(() => {
    setValue(queries.map((query2) => {
      var _a;
      return {
        media: query2,
        matches: (_a = document.defaultView) == null ? void 0 : _a.matchMedia(query2).matches
      };
    }));
    const mql = queries.map((query2) => {
      var _a;
      return (_a = document.defaultView) == null ? void 0 : _a.matchMedia(query2);
    });
    const handler = (evt) => {
      setValue((prev) => {
        return prev.slice().map((item) => {
          if (item.media === evt.media) {
            return {
              ...item,
              matches: evt.matches
            };
          }
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof (mql2 == null ? void 0 : mql2.addListener) === "function") {
        mql2 == null ? void 0 : mql2.addListener(handler);
      } else {
        mql2 == null ? void 0 : mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof (mql2 == null ? void 0 : mql2.removeListener) === "function") {
          mql2 == null ? void 0 : mql2.removeListener(handler);
        } else {
          mql2 == null ? void 0 : mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [
    document.defaultView
  ]);
  return value.map((item) => !!item.matches);
};

// packages/common/react-components/src/hooks/useTranslationsContext.ts
import { useContext as useContext4 } from "react";

// packages/common/react-components/src/components/ThemeProvider/TranslationsProvider.tsx
import i18Next from "i18next";
import React2, { useEffect as useEffect4, createContext, useState as useState3, Suspense } from "react";
import { initReactI18next } from "react-i18next";

// packages/common/react-components/src/components/Loading/Loading.tsx
import React from "react";

// packages/common/react-components/src/util/mx.ts
import { extendTailwindMerge, validators as validators2 } from "tailwind-merge";

// packages/common/react-components/src/util/withLogical.ts
import { mergeConfigs, validators } from "tailwind-merge";
var withLogical = (prevConfig) => {
  const getLength = () => [
    validators.isLength
  ];
  const getLengthWithAuto = () => [
    "auto",
    validators.isLength
  ];
  const getLengthWithEmpty = () => [
    "",
    validators.isLength
  ];
  const getAny = () => [
    validators.isAny
  ];
  const getRounded = () => [
    "none",
    "",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl",
    "3xl",
    "full",
    validators.isArbitraryLength
  ];
  return mergeConfigs(prevConfig, {
    classGroups: {
      float: [
        {
          float: [
            "start",
            "end"
          ]
        }
      ],
      clear: [
        {
          clear: [
            "start",
            "end"
          ]
        }
      ],
      resize: [
        {
          resize: [
            "block ",
            "inline"
          ]
        }
      ],
      "text-alignment": [
        {
          text: [
            "start",
            "end"
          ]
        }
      ],
      "logical.overscroll-b": [
        {
          "overscroll-b": [
            "auto ",
            "contain",
            "auto"
          ]
        }
      ],
      "logical.overscroll-i": [
        {
          "overscroll-b": [
            "auto ",
            "contain",
            "auto"
          ]
        }
      ],
      "logical.bs": [
        {
          bs: getLength()
        }
      ],
      "logical.min-bs": [
        {
          "min-bs": getLength()
        }
      ],
      "logical.max-bs": [
        {
          "max-bs": getLength()
        }
      ],
      "logical.is": [
        {
          is: getLength()
        }
      ],
      "logical.min-is": [
        {
          "min-is": getLength()
        }
      ],
      "logical.max-is": [
        {
          "max-is": getLength()
        }
      ],
      "logical.mlb": [
        {
          mlb: getLength()
        }
      ],
      "logical.mli": [
        {
          mli: getLength()
        }
      ],
      "logical.mbs": [
        {
          mbs: getLength()
        }
      ],
      "logical.mbe": [
        {
          mbe: getLength()
        }
      ],
      "logical.mis": [
        {
          mis: getLength()
        }
      ],
      "logical.mie": [
        {
          mie: getLength()
        }
      ],
      "logical.plb": [
        {
          plb: getLength()
        }
      ],
      "logical.pli": [
        {
          pli: getLength()
        }
      ],
      "logical.pbs": [
        {
          pbs: getLength()
        }
      ],
      "logical.pbe": [
        {
          pbe: getLength()
        }
      ],
      "logical.pis": [
        {
          pis: getLength()
        }
      ],
      "logical.pie": [
        {
          pie: getLength()
        }
      ],
      "logical.space-b": [
        {
          "space-b": getLength()
        }
      ],
      "logical.space-i": [
        {
          "space-i": getLength()
        }
      ],
      "logical.inset-block": [
        {
          "inset-block": getLengthWithAuto()
        }
      ],
      "logical.inset-inline": [
        {
          "inset-inline": getLengthWithAuto()
        }
      ],
      "logical.block-start": [
        {
          "block-start": getLengthWithAuto()
        }
      ],
      "logical.block-end": [
        {
          "block-end": getLengthWithAuto()
        }
      ],
      "logical.inline-start": [
        {
          "inline-start": getLengthWithAuto()
        }
      ],
      "logical.inline-end": [
        {
          "inline-end": getLengthWithAuto()
        }
      ],
      "logical.border-bs": [
        {
          "border-bs": getLengthWithEmpty()
        }
      ],
      "logical.border-be": [
        {
          "border-be": getLengthWithEmpty()
        }
      ],
      "logical.border-is": [
        {
          "border-is": getLengthWithEmpty()
        }
      ],
      "logical.border-ie": [
        {
          "border-ie": getLengthWithEmpty()
        }
      ],
      "logical.border-color-bs": [
        {
          "border-bs": getAny()
        }
      ],
      "logical.border-color-be": [
        {
          "border-be": getAny()
        }
      ],
      "logical.border-color-is": [
        {
          "border-is": getAny()
        }
      ],
      "logical.border-color-ie": [
        {
          "border-ie": getAny()
        }
      ],
      "logical.rounded-bs": [
        {
          "rounded-bs": getRounded()
        }
      ],
      "logical.rounded-be": [
        {
          "rounded-be": getRounded()
        }
      ],
      "logical.rounded-is": [
        {
          "rounded-is": getRounded()
        }
      ],
      "logical.rounded-ie": [
        {
          "rounded-ie": getRounded()
        }
      ],
      "logical.rounded-ss": [
        {
          "rounded-ss": getRounded()
        }
      ],
      "logical.rounded-se": [
        {
          "rounded-se": getRounded()
        }
      ],
      "logical.rounded-es": [
        {
          "rounded-es": getRounded()
        }
      ],
      "logical.rounded-ee": [
        {
          "rounded-ee": getRounded()
        }
      ],
      "logical.divide-b": [
        {
          "divide-b": getLengthWithEmpty()
        }
      ],
      "logical.divide-i": [
        {
          "divide-i": getLengthWithEmpty()
        }
      ]
    },
    conflictingClassGroups: {
      "inset-block": [
        "logical.block-start",
        "logical.block-end"
      ],
      "inset-inline": [
        "logical.inline-start",
        "logical.inline-end"
      ],
      p: [
        "logical.plb",
        "logical.pli",
        "logical.pbs",
        "logical.pbe",
        "logical.pis",
        "logical.pie"
      ],
      pli: [
        "logical.pis",
        "logical.pie"
      ],
      plb: [
        "logical.pbs",
        "logical.pbe"
      ],
      m: [
        "logical.mlb",
        "logical.mli",
        "logical.mbs",
        "logical.mbe",
        "logical.mis",
        "logical.mie"
      ],
      mli: [
        "logical.mis",
        "logical.mie"
      ],
      mlb: [
        "logical.mbs",
        "logical.mbe"
      ],
      overscroll: [
        "overscroll-i",
        "overscroll-b"
      ],
      rounded: [
        "logical.rounded-bs",
        "logical.rounded-be",
        "logical.rounded-is",
        "logical.rounded-ie",
        "logical.rounded-ss",
        "logical.rounded-se",
        "logical.rounded-es",
        "logical.rounded-ee"
      ],
      "logical.rounded-bs": [
        "logical.rounded-ss",
        "logical.rounded-se"
      ],
      "logical.rounded-be": [
        "logical.rounded-es",
        "logical.rounded-ee"
      ],
      "logical.rounded-is": [
        "logical.rounded-ss",
        "logical.rounded-es"
      ],
      "logical.rounded-ie": [
        "logical.rounded-ee",
        "logical.rounded-se"
      ],
      "border-color": [
        "logical.border-color-bs",
        "logical.border-color-be",
        "logical.border-color-is",
        "logical.border-color-ie"
      ],
      border: [
        "logical.border-bs",
        "logical.border-be",
        "logical.border-is",
        "logical.border-ie"
      ]
    }
  });
};

// packages/common/react-components/src/util/mx.ts
var mx = extendTailwindMerge({
  classGroups: {
    fontFamily: [
      "font-body",
      "font-display",
      "font-mono"
    ],
    fontWeight: [
      // App weights
      "font-thin",
      "font-extralight",
      "font-light",
      "font-normal",
      "font-medium",
      "font-semibold",
      "font-bold",
      "font-extrabold",
      "font-black",
      // OS weights
      "font-system-thin",
      "font-system-extralight",
      "font-system-light",
      "font-system-normal",
      "font-system-medium",
      "font-system-semibold",
      "font-system-bold",
      "font-system-extrabold",
      "font-system-black",
      // Arbitrary numbers
      validators2.isArbitraryNumber
    ]
  }
}, withLogical);

// packages/common/react-components/src/util/hasIosKeyboard.ts
var hasIosKeyboard = () => {
  return !!navigator.userAgent.match(/iP(ad|od|hone).+Safari/);
};

// packages/common/react-components/src/util/dnd.ts
import { arrayMove, arraySwap } from "@dnd-kit/sortable";

// packages/common/react-components/src/components/Loading/Loading.tsx
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var sizeMap = /* @__PURE__ */ new Map([
  [
    "sm",
    "w-4 h-4"
  ],
  [
    "md",
    "w-8 h-8"
  ],
  [
    "lg",
    "w-12 h-12"
  ],
  [
    "xl",
    "w-16 h-16"
  ]
]);
var Loading = ({ size, color, label, slots = {} }) => {
  var _a, _b;
  const labelId = useId("loading-label");
  const sizeClassName = sizeMap.get(size != null ? size : "md");
  return /* @__PURE__ */ React.createElement("div", _extends({}, slots.root, {
    className: mx("flex justify-center p-4", (_a = slots.root) == null ? void 0 : _a.className),
    role: "status",
    "aria-labelledby": labelId
  }), /* @__PURE__ */ React.createElement("svg", {
    role: "none",
    className: mx(sizeClassName, "text-neutral-200/50 animate-spin dark:text-neutral-600/50", color === "neutral" ? "fill-neutral-400" : "fill-primary-400", (_b = slots.svg) == null ? void 0 : _b.className),
    viewBox: "0 0 100 101",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z",
    fill: "currentColor"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z",
    fill: "currentFill"
  })), /* @__PURE__ */ React.createElement("span", {
    className: "sr-only",
    id: labelId
  }, label));
};

// packages/common/react-components/src/components/ThemeProvider/TranslationsProvider.tsx
var initialLng = "en-US";
var initialNs = "dxos-common";
var resources = {
  [initialLng]: {
    [initialNs]: {
      "loading translations": "Loading translations\u2026"
    }
  }
};
void i18Next.use(initReactI18next).init({
  resources,
  lng: initialLng,
  defaultNS: initialNs,
  interpolation: {
    escapeValue: false
  }
});
var TranslationsContext = /* @__PURE__ */ createContext({
  appNs: initialNs
});
var TranslationsProvider = ({ fallback = /* @__PURE__ */ React2.createElement(Loading, {
  label: resources[initialLng][initialNs]["loading translations"]
}), resourceExtensions, children, appNs }) => {
  const [loaded, setLoaded] = useState3(false);
  useEffect4(() => {
    setLoaded(false);
    if (resourceExtensions && resourceExtensions.length) {
      resourceExtensions.forEach((resource) => {
        Object.keys(resource).forEach((language) => {
          Object.keys(resource[language]).forEach((ns) => {
            i18Next.addResourceBundle(language, ns, resource[language][ns]);
          });
        });
      });
    }
    setLoaded(true);
  }, [
    resourceExtensions
  ]);
  return /* @__PURE__ */ React2.createElement(TranslationsContext.Provider, {
    value: {
      appNs: appNs != null ? appNs : initialNs
    }
  }, /* @__PURE__ */ React2.createElement(Suspense, {
    fallback
  }, loaded ? children : fallback));
};

// packages/common/react-components/src/hooks/useTranslationsContext.ts
var useTranslationsContext = () => useContext4(TranslationsContext);

// packages/common/react-components/src/styles/active.ts
var defaultActive = mx("radix-state-open:outline-2 radix-state-open:outline-offset-1 radix-state-open:outline-primary-300 radix-state-open:outline-offset-transparent dark:radix-state-open:outline-primary-400 dark:radix-state-open:outline-offset-transparent", "radix-state-on:outline-2 radix-state-on:outline-offset-1 radix-state-on:outline-primary-300 radix-state-on:outline-offset-transparent dark:radix-state-on:outline-primary-400 dark:radix-state-on:outline-offset-transparent", "radix-state-instant-open:outline-2 radix-state-instant-open:outline-offset-1 radix-state-instant-open:outline-primary-300 radix-state-instant-open:outline-offset-transparent dark:radix-state-instant-open:outline-primary-400 dark:radix-state-instant-open:outline-offset-transparent");
var sideInset = {
  be: "after:rounded-be after:bs-[2px] after:block-end-0 after:inline-start-0 after:inline-end-0"
};
var osActive = (side) => mx('relative after:content-[""] after:absolute after:bg-current after:opacity-0 after:transition-opacity after:duration-100 after:linear overflow-hidden', sideInset[side], "radix-state-open:after:opacity-100");

// packages/common/react-components/src/styles/density.ts
var coarseBlockSize = "min-bs-[40px]";
var coarseTextPadding = "pli-3";
var coarseButtonPadding = "pli-4";
var defaultCoarse = `${coarseBlockSize} ${coarseTextPadding}`;
var buttonCoarse = `${coarseBlockSize} ${coarseButtonPadding}`;
var fineBlockSize = "min-bs-[32px]";
var fineTextPadding = "pli-2";
var fineButtonPadding = "pli-2.5";
var defaultFine = `${fineBlockSize} ${fineTextPadding}`;
var buttonFine = `${fineBlockSize} ${fineButtonPadding}`;
var densityBlockSize = (density = "coarse") => density === "fine" ? fineBlockSize : coarseBlockSize;

// packages/common/react-components/src/styles/disabled.ts
var defaultDisabled = "opacity-40 cursor-not-allowed shadow-none";
var dataDisabled = "data-[disabled]:opacity-40 data-[disabled]:cursor-not-allowed";

// packages/common/react-components/src/styles/focus.ts
var defaultFocus = "focus:outline-none focus-visible:z-[1] focus-visible:hover:outline-none dark:focus-visible:hover:outline-none focus-visible:ring-2 focus-visible:ring-offset-0 focus-visible:ring-primary-350 focus-visible:ring-offset-white dark:focus-visible:ring-primary-450 dark:focus-visible:ring-offset-black";
var subduedFocus = "focus:outline-none focus-visible:outline-none";
var osFocus = "focus:outline-none focus-visible:z-[1] focus-visible:hover:outline-none dark:focus-visible:hover:outline-none focus-visible:ring-2 focus-visible:ring-offset-0 focus-visible:ring-primary-350 focus-visible:ring-offset-white dark:focus-visible:ring-primary-450 dark:focus-visible:ring-offset-black";
var themeVariantFocus = (themeVariant) => themeVariant === "os" ? osFocus : defaultFocus;
var themeVariantSubduedFocus = (_themeVariant) => subduedFocus;
var focus = ({ variant, disabled } = {}, themeVariant = "app") => {
  return disabled ? "" : variant === "static" ? staticFocus : variant === "subdued" ? themeVariantSubduedFocus(themeVariant) : themeVariantFocus(themeVariant);
};
var staticFocus = "ring-2 ring-offset-0 ring-primary-350 ring-offset-white dark:ring-primary-450 dark:ring-offset-black";

// packages/common/react-components/src/styles/group.ts
var elevationClassNameMap = /* @__PURE__ */ new Map([
  [
    "base",
    "shadow-none"
  ],
  [
    "group",
    "shadow-md"
  ],
  [
    "chrome",
    "shadow-xl"
  ]
]);
var defaultGroup = ({ elevation, rounding, spacing }) => {
  return mx(rounding != null ? rounding : "rounded-lg", spacing != null ? spacing : "p-4", elevation === "base" ? "bg-transparent border border-neutral-200 dark:border-neutral-700" : "bg-white dark:bg-neutral-800", elevationClassNameMap.get(elevation));
};

// packages/common/react-components/src/styles/hover.ts
var hover = ({ disabled } = {}, themeVariant = "app") => {
  return !disabled && (themeVariant === "os" ? "transition-colors duration-100 linear hover:bg-white/75 dark:hover:bg-neutral-750/75" : "transition-colors duration-100 linear hover:text-black dark:hover:text-white hover:bg-neutral-25 dark:hover:bg-neutral-750");
};

// packages/common/react-components/src/styles/ornament.ts
var defaultInlineSeparator = "border-is border-neutral-300 dark:border-neutral-700";
var defaultBlockSeparator = "border-bs border-neutral-300 dark:border-neutral-700";

// packages/common/react-components/src/styles/shimmer.ts
var defaultShimmer = "relative before:absolute before:inset-0 before:-translate-x-full before:animate-shimmer before:bg-gradient-to-r before:from-transparent before:via-neutral-100/10 before:to-transparent isolate overflow-hidden";
var strongShimmer = "relative before:absolute before:inset-0 before:-translate-x-full before:animate-shimmer before:bg-gradient-to-r before:from-transparent before:via-primary-100/80 before:to-transparent isolate overflow-hidden";

// packages/common/react-components/src/styles/size.ts
var sizeWidthMap = /* @__PURE__ */ new Map([
  [
    0,
    "w-0"
  ],
  [
    "px",
    "w-px"
  ],
  [
    0.5,
    "w-0.5"
  ],
  [
    1,
    "w-1"
  ],
  [
    1.5,
    "w-1.5"
  ],
  [
    2,
    "w-2"
  ],
  [
    2.5,
    "w-2.5"
  ],
  [
    3,
    "w-3"
  ],
  [
    3.5,
    "w-3.5"
  ],
  [
    4,
    "w-4"
  ],
  [
    5,
    "w-5"
  ],
  [
    6,
    "w-6"
  ],
  [
    7,
    "w-7"
  ],
  [
    8,
    "w-8"
  ],
  [
    9,
    "w-9"
  ],
  [
    10,
    "w-10"
  ],
  [
    11,
    "w-11"
  ],
  [
    12,
    "w-12"
  ],
  [
    14,
    "w-14"
  ],
  [
    16,
    "w-16"
  ],
  [
    20,
    "w-20"
  ],
  [
    24,
    "w-24"
  ],
  [
    28,
    "w-28"
  ],
  [
    32,
    "w-32"
  ],
  [
    36,
    "w-36"
  ],
  [
    40,
    "w-40"
  ],
  [
    44,
    "w-44"
  ],
  [
    48,
    "w-48"
  ],
  [
    52,
    "w-52"
  ],
  [
    56,
    "w-56"
  ],
  [
    60,
    "w-60"
  ],
  [
    64,
    "w-64"
  ],
  [
    72,
    "w-72"
  ],
  [
    80,
    "w-80"
  ],
  [
    96,
    "w-96"
  ]
]);
var sizeHeightMap = /* @__PURE__ */ new Map([
  [
    0,
    "h-0"
  ],
  [
    "px",
    "h-px"
  ],
  [
    0.5,
    "h-0.5"
  ],
  [
    1,
    "h-1"
  ],
  [
    1.5,
    "h-1.5"
  ],
  [
    2,
    "h-2"
  ],
  [
    2.5,
    "h-2.5"
  ],
  [
    3,
    "h-3"
  ],
  [
    3.5,
    "h-3.5"
  ],
  [
    4,
    "h-4"
  ],
  [
    5,
    "h-5"
  ],
  [
    6,
    "h-6"
  ],
  [
    7,
    "h-7"
  ],
  [
    8,
    "h-8"
  ],
  [
    9,
    "h-9"
  ],
  [
    10,
    "h-10"
  ],
  [
    11,
    "h-11"
  ],
  [
    12,
    "h-12"
  ],
  [
    14,
    "h-14"
  ],
  [
    16,
    "h-16"
  ],
  [
    20,
    "h-20"
  ],
  [
    24,
    "h-24"
  ],
  [
    28,
    "h-28"
  ],
  [
    32,
    "h-32"
  ],
  [
    36,
    "h-36"
  ],
  [
    40,
    "h-40"
  ],
  [
    44,
    "h-44"
  ],
  [
    48,
    "h-48"
  ],
  [
    52,
    "h-52"
  ],
  [
    56,
    "h-56"
  ],
  [
    60,
    "h-60"
  ],
  [
    64,
    "h-64"
  ],
  [
    72,
    "h-72"
  ],
  [
    80,
    "h-80"
  ],
  [
    96,
    "h-96"
  ]
]);
var getSizeHeight = sizeHeightMap.get.bind(sizeHeightMap);
var getSizeWidth = sizeWidthMap.get.bind(sizeWidthMap);
var getSize = (size) => mx(getSizeHeight(size), getSizeWidth(size));

// packages/common/react-components/src/styles/text.ts
var defaultPlaceholder = "placeholder-neutral-500 dark:placeholder-neutral-400";
var defaultDescription = "text-xs leading-3 font-normal text-neutral-650 dark:text-neutral-300";
var primaryDescription = "text-xs font-normal text-white/90";
var defaultTooltip = "text-xs font-normal text-neutral-900 dark:text-neutral-50";

// packages/common/react-components/src/styles/valence.ts
var successText = "text-xs font-medium text-success-550 dark:text-success-300";
var infoText = "text-xs font-medium text-info-550 dark:text-info-300";
var warningText = "text-xs font-medium text-warning-550 dark:text-warning-300";
var errorText = "text-xs font-medium text-error-550 dark:text-error-300";
var valenceColorText = (valence) => {
  switch (valence) {
    case "success":
      return successText;
    case "info":
      return infoText;
    case "warning":
      return warningText;
    case "error":
      return errorText;
    default:
      return void 0;
  }
};
var neutralInputValence = "";
var successInputValence = "shadow-success-500/50 dark:shadow-success-600/50";
var infoInputValence = "shadow-info-500/50 dark:shadow-info-600/50";
var warningInputValence = "shadow-warning-500/50 dark:shadow-warning-600/50";
var errorInputValence = "shadow-error-500/50 dark:shadow-error-600/50";
var inputValence = (valence, themeVariant = "app") => {
  switch (valence) {
    case "success":
      return successInputValence;
    case "info":
      return infoInputValence;
    case "warning":
      return warningInputValence;
    case "error":
      return errorInputValence;
    default:
      return themeVariant === "os" ? "border-transparent focus-visible:border-transparent dark:focus-visible:border-transparent" : neutralInputValence;
  }
};
var neutralAlertColors = "";
var successAlertColors = "shadow-success-500/50 dark:shadow-success-500/50 text-success-600 dark:text-success-100 bg-success-50 dark:bg-success-900";
var infoAlertColors = "shadow-info-500/50 dark:shadow-info-500/50 text-info-600 dark:text-info-100 bg-info-50 dark:bg-info-900";
var warningAlertColors = "shadow-warning-500/50 dark:shadow-warning-500/50 text-warning-600 dark:text-warning-100 bg-warning-50 dark:bg-warning-900";
var errorAlertColors = "shadow-error-500/50 dark:shadow-error-500/50 text-error-600 dark:text-error-100 bg-error-50 dark:bg-error-900";
var alertValence = (valence) => {
  switch (valence) {
    case "success":
      return successAlertColors;
    case "info":
      return infoAlertColors;
    case "warning":
      return warningAlertColors;
    case "error":
      return errorAlertColors;
    default:
      return neutralAlertColors;
  }
};

// packages/common/react-components/src/styles/input.ts
var defaultInput = (props = {}, themeVariant = "app") => {
  const { disabled, validationValence } = props;
  return mx("text-neutral-900 dark:text-white", themeVariant === "os" ? "rounded-sm text-sm bg-white/50 dark:bg-neutral-750/50" : "rounded text-base bg-white/50 focus-visible:bg-white/50 dark:bg-neutral-700/50 dark:focus-visible:bg-neutral-700/50", props.density === "fine" ? defaultFine : defaultCoarse, focus({
    ...props,
    variant: "default"
  }, themeVariant), defaultPlaceholder, hover({
    disabled
  }, themeVariant), inputValence(validationValence, themeVariant), disabled && defaultDisabled);
};
var subduedInput = (props = {}, themeVariant = "app") => {
  return mx("bg-transparent text-current", props.density === "fine" ? fineBlockSize : coarseBlockSize, focus({
    ...props,
    variant: "subdued"
  }, themeVariant), defaultPlaceholder);
};
var staticInput = ({ disabled, focused, validationValence }) => {
  return mx(defaultPlaceholder, "text-base rounded bg-white/50 text-neutral-900 dark:bg-neutral-700/50 dark:text-white", inputValence(validationValence), disabled && defaultDisabled, focused && staticFocus);
};

// packages/common/react-components/src/components/Alert/Alert.tsx
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var Alert = ({ title, children, assertive, valence, slots = {} }) => {
  var _a, _b;
  const labelId = useId("alertLabel");
  const shadow = useButtonShadow();
  return /* @__PURE__ */ React3.createElement("div", _extends2({}, slots.root, {
    role: assertive ? "alert" : "group",
    "aria-labelledby": labelId,
    className: mx("p-3 rounded-md max-is-full overflow-auto", shadow, alertValence(valence), (_a = slots.root) == null ? void 0 : _a.className)
  }), /* @__PURE__ */ React3.createElement("p", _extends2({}, slots.title, {
    id: labelId,
    className: mx("font-medium mb-2", (_b = slots.title) == null ? void 0 : _b.className)
  }), title), children);
};

// packages/common/react-components/src/components/Avatar/Avatar.tsx
import { Circle, Moon } from "@phosphor-icons/react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import * as PortalPrimitive from "@radix-ui/react-portal";
import { toSvg } from "jdenticon";
import React4, { cloneElement, forwardRef, useMemo as useMemo2 } from "react";
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var Avatar = /* @__PURE__ */ forwardRef(({ mediaSrc, mediaAlt, fallbackValue, label, labelId: propsLabelId, descriptionId: propsDescriptionId, description, variant = "square", status, size = 10, slots = {} }, ref) => {
  var _a, _b;
  const labelId = propsLabelId != null ? propsLabelId : useId("avatarLabel");
  const descriptionId = propsDescriptionId != null ? propsDescriptionId : useId("avatarDescription");
  const maskId = useId("mask");
  const svgId = useId("mask");
  const fallbackSrc = useMemo2(() => `data:image/svg+xml;utf8,${encodeURIComponent(toSvg(fallbackValue, size === "px" ? 1 : size * 4, {
    padding: 0
  }))}`, [
    fallbackValue
  ]);
  const imageSizeNumber = size === "px" ? 1 : size * 4;
  const statusIconSize = size > 9 ? 4 : size < 6 ? 2 : 3;
  const maskSize = statusIconSize * 4 + 2;
  const maskCenter = imageSizeNumber - statusIconSize * 4 / 2;
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(AvatarPrimitive.Root, _extends3({}, slots.root, {
    className: mx("relative inline-flex", getSize(size), (_a = slots.root) == null ? void 0 : _a.className),
    "aria-labelledby": labelId
  }, (description || propsDescriptionId) && {
    "aria-describedby": descriptionId
  }, {
    ref
  }), /* @__PURE__ */ React4.createElement("svg", {
    viewBox: `0 0 ${imageSizeNumber} ${imageSizeNumber}`,
    width: imageSizeNumber,
    height: imageSizeNumber,
    id: svgId,
    className: "is-full bs-full"
  }, /* @__PURE__ */ React4.createElement("defs", null, /* @__PURE__ */ React4.createElement("mask", {
    id: maskId
  }, variant === "circle" ? /* @__PURE__ */ React4.createElement("circle", {
    fill: "white",
    cx: "50%",
    cy: "50%",
    r: "50%"
  }) : /* @__PURE__ */ React4.createElement("rect", {
    fill: "white",
    width: "100%",
    height: "100%"
  }), status && /* @__PURE__ */ React4.createElement("circle", {
    fill: "black",
    cx: `${100 * maskCenter / imageSizeNumber}%`,
    cy: `${100 * maskCenter / imageSizeNumber}%`,
    r: `${50 * maskSize / imageSizeNumber}%`
  }))), mediaSrc && /* @__PURE__ */ React4.createElement(AvatarPrimitive.Image, {
    asChild: true
  }, /* @__PURE__ */ React4.createElement("image", _extends3({
    href: mediaSrc,
    width: "100%",
    height: "100%"
  }, slots.image, {
    mask: `url(#${maskId})`
  }))), /* @__PURE__ */ React4.createElement(AvatarPrimitive.Fallback, _extends3({
    delayMs: 0
  }, slots.fallback, {
    asChild: true
  }), /* @__PURE__ */ React4.createElement("image", {
    href: fallbackSrc,
    width: "100%",
    height: "100%",
    mask: `url(#${maskId})`
  }))), status === "active" && /* @__PURE__ */ React4.createElement(Circle, {
    className: mx(getSize(statusIconSize), "absolute block-end-0 inline-end-0 text-success-500 dark:text-success-400"),
    weight: "fill"
  }), status === "inactive" && /* @__PURE__ */ React4.createElement(Moon, {
    mirrored: true,
    className: mx(getSize(statusIconSize), "absolute block-end-0 inline-end-0 text-warning-500 dark:text-warning-400"),
    weight: "fill"
  })), /* @__PURE__ */ React4.createElement("div", _extends3({
    role: "none"
  }, slots.labels, {
    className: mx("contents", (_b = slots == null ? void 0 : slots.labels) == null ? void 0 : _b.className)
  }), !propsLabelId && label && (typeof label === "string" ? /* @__PURE__ */ React4.createElement(PortalPrimitive.Root, {
    asChild: true
  }, /* @__PURE__ */ React4.createElement("span", {
    id: labelId,
    className: "sr-only"
  }, label)) : /* @__PURE__ */ cloneElement(label, {
    id: labelId
  })), !propsDescriptionId && description && (typeof description === "string" ? /* @__PURE__ */ React4.createElement("span", {
    id: descriptionId
  }, description) : /* @__PURE__ */ cloneElement(description, {
    id: descriptionId
  }))));
});

// packages/common/react-components/src/components/Button/Button.tsx
import React5, { forwardRef as forwardRef2 } from "react";

// packages/common/react-components/src/components/Button/buttonStyles.ts
var primaryAppButtonColors = "bg-primary-550 dark:bg-primary-550 text-white hover:bg-primary-600 dark:hover:bg-primary-600 hover:text-white dark:hover:text-white";
var defaultAppButtonColors = "bg-white text-neutral-800 dark:bg-neutral-800 dark:text-neutral-50";
var defaultOsButtonColors = "bg-white/50 text-neutral-900 dark:bg-neutral-750/50 dark:text-neutral-50";
var ghostAppButtonColors = "hover:bg-transparent dark:hover:bg-transparent hover:text-primary-500 dark:hover:text-primary-300";
var buttonStyles = (props = {}, themeVariant = "app") => {
  var _a;
  const isOsTheme = themeVariant === "os";
  const resolvedVariant = (_a = props.variant) != null ? _a : "default";
  return mx(
    "inline-flex select-none items-center justify-center transition-color duration-100",
    props.density === "fine" ? buttonFine : buttonCoarse,
    isOsTheme ? "rounded font-system-medium text-xs" : "rounded-md font-medium text-sm",
    hover(props, themeVariant),
    !isOsTheme && resolvedVariant !== "outline" && " hover:border-transparent dark:hover:border-transparent",
    resolvedVariant === "default" && (isOsTheme ? defaultOsButtonColors : defaultAppButtonColors),
    !props.disabled && resolvedVariant === "ghost" && ghostAppButtonColors,
    resolvedVariant === "primary" && primaryAppButtonColors,
    resolvedVariant === "outline" && "text-neutral-700 border border-neutral-600 dark:border-neutral-300 dark:text-neutral-150",
    focus({
      disabled: props.disabled
    }, themeVariant),
    props.disabled && defaultDisabled,
    // Register all radix states
    "group",
    isOsTheme ? osActive("be") : defaultActive
  );
};

// packages/common/react-components/src/components/Button/Button.tsx
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
var Button = /* @__PURE__ */ forwardRef2(({ children, density: propsDensity, elevation, variant = "default", ...rootSlot }, ref) => {
  const { themeVariant } = useThemeContext();
  const shadow = useButtonShadow();
  const density = useDensityContext(propsDensity);
  return /* @__PURE__ */ React5.createElement("button", _extends4({
    ref
  }, rootSlot, {
    className: mx(buttonStyles({
      density,
      variant,
      disabled: rootSlot.disabled
    }, themeVariant), !rootSlot.disabled && (variant === "default" || variant === "primary") && shadow, rootSlot.className)
  }, rootSlot.disabled && {
    disabled: true
  }), children);
});

// packages/common/react-components/src/components/Button/ButtonGroup.tsx
import React7 from "react";

// packages/common/react-components/src/components/ElevationProvider/ElevationProvider.tsx
import React6, { createContext as createContext2 } from "react";
var ElevationContext = /* @__PURE__ */ createContext2({
  elevation: "base"
});
var ElevationProvider = ({ elevation, children }) => /* @__PURE__ */ React6.createElement(ElevationContext.Provider, {
  value: {
    elevation
  }
}, children);

// packages/common/react-components/src/components/Button/ButtonGroup.tsx
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var ButtonGroup = ({ children, ...divProps }) => {
  const shadow = useButtonShadow();
  return /* @__PURE__ */ React7.createElement("div", _extends5({
    role: "none"
  }, divProps, {
    className: mx(shadow, "rounded-md", divProps.className)
  }), /* @__PURE__ */ React7.createElement(ElevationProvider, {
    elevation: "chrome"
  }, children));
};

// packages/common/react-components/src/components/Checkbox/Checkbox.tsx
import { Check } from "@phosphor-icons/react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import React8 from "react";
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var Checkbox = (props) => {
  const { themeVariant } = useThemeContext();
  const { defaultChecked, checked, onCheckedChange, className } = props;
  return /* @__PURE__ */ React8.createElement(CheckboxPrimitive.Root, _extends6({}, "id" in props && {
    id: props.id
  }, "labelId" in props && {
    "aria-labelledby": props.labelId
  }, {
    defaultChecked,
    checked,
    onCheckedChange
  }, {
    className: mx(getSize(5), "flex items-center justify-center rounded text-white", "radix-state-checked:bg-primary-600 radix-state-unchecked:bg-neutral-200 dark:radix-state-unchecked:bg-neutral-700", themeVariantFocus(themeVariant), className)
  }), /* @__PURE__ */ React8.createElement(CheckboxPrimitive.Indicator, null, /* @__PURE__ */ React8.createElement(Check, {
    weight: "bold",
    className: getSize(4)
  })));
};

// packages/common/react-components/src/components/CompoundButton/CompoundButton.tsx
import React9 from "react";
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
var CompoundButton = ({ children, description, before, after, variant = "default", elevation, slots = {}, ...buttonProps }) => {
  var _a, _b, _c, _d;
  const labelId = useId("compoundButton-label");
  const descriptionId = useId("compoundButton-description");
  const { themeVariant } = useThemeContext();
  const shadow = useButtonShadow(elevation);
  return /* @__PURE__ */ React9.createElement("button", _extends7({}, buttonProps, slots.root, {
    className: mx(buttonStyles({
      ...buttonProps,
      variant
    }, themeVariant), shadow, "flex items-center gap-4 plb-2.5", (_a = slots.root) == null ? void 0 : _a.className),
    "aria-labelledby": labelId
  }, description && {
    "aria-describedby": descriptionId
  }), before && /* @__PURE__ */ React9.createElement("div", {
    role: "none",
    className: "grow-0"
  }, before), /* @__PURE__ */ React9.createElement("div", _extends7({
    role: "none"
  }, slots.middle, {
    className: mx("grow flex flex-col gap-1 text-left", (_b = slots.middle) == null ? void 0 : _b.className)
  }), /* @__PURE__ */ React9.createElement("p", _extends7({}, slots.label, {
    id: labelId,
    className: mx((_c = slots.label) == null ? void 0 : _c.className)
  }), children), description && /* @__PURE__ */ React9.createElement("p", _extends7({
    id: descriptionId
  }, slots.description, {
    className: mx("text-xs mbe-1", variant === "primary" ? primaryDescription : defaultDescription, themeVariant === "os" ? "font-system-normal" : "font-normal", (_d = slots.description) == null ? void 0 : _d.className)
  }), description)), after && /* @__PURE__ */ React9.createElement("div", {
    role: "none",
    className: "grow-0"
  }, after));
};

// packages/common/react-components/src/components/DensityProvider/DensityProvider.tsx
import React10, { createContext as createContext3 } from "react";
var DensityContext = /* @__PURE__ */ createContext3({
  density: "coarse"
});
var DensityProvider = ({ density, children }) => /* @__PURE__ */ React10.createElement(DensityContext.Provider, {
  value: {
    density
  }
}, children);

// packages/common/react-components/src/components/Dialog/Dialog.tsx
import { Transition } from "@headlessui/react";
import { X } from "@phosphor-icons/react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { useControllableState } from "@radix-ui/react-use-controllable-state";
import React12, { Fragment } from "react";

// packages/common/react-components/src/components/Tooltip/Tooltip.tsx
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import React11, { forwardRef as forwardRef3 } from "react";
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
var TooltipRoot = TooltipPrimitive.Root;
var TooltipContent = /* @__PURE__ */ forwardRef3(({ children, className, ...props }, forwardedRef) => {
  return /* @__PURE__ */ React11.createElement(TooltipPrimitive.Portal, null, /* @__PURE__ */ React11.createElement(TooltipPrimitive.Content, _extends8({
    forceMount: true
  }, props, {
    className: mx("inline-flex items-center rounded-md plb-2 pli-3", "shadow-lg bg-white dark:bg-neutral-800", defaultTooltip, className),
    ref: forwardedRef
  }), /* @__PURE__ */ React11.createElement(TooltipPrimitive.Arrow, {
    className: "fill-white dark:fill-neutral-800"
  }), children));
});
var TooltipTrigger = TooltipPrimitive.Trigger;

// packages/common/react-components/src/components/Dialog/dialogStyles.ts
var defaultOverlay = "fixed inset-0 z-20 bg-transparent";

// packages/common/react-components/src/components/Dialog/Dialog.tsx
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var Dialog = ({ title, titleVisuallyHidden, description, openTrigger, closeTriggers, children, closeLabel, mountAsSibling, open: propsOpen, defaultOpen: propsDefaultOpen, onOpenChange: propsOnOpenChange, slots = {} }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const [open = false, setOpen] = useControllableState({
    prop: propsOpen,
    defaultProp: propsDefaultOpen,
    onChange: propsOnOpenChange
  });
  const dialogOverlayAndContent = /* @__PURE__ */ React12.createElement(Transition.Root, {
    show: open
  }, /* @__PURE__ */ React12.createElement(Transition.Child, {
    as: Fragment,
    enter: "linear duration-300",
    enterFrom: "opacity-0",
    enterTo: "opacity-100",
    leave: "linear duration-200",
    leaveFrom: "opacity-100",
    leaveTo: "opacity-0"
  }, /* @__PURE__ */ React12.createElement(DialogPrimitive.Overlay, _extends9({
    forceMount: true
  }, slots.overlay, {
    className: mx(defaultOverlay, (_a = slots.overlay) == null ? void 0 : _a.className)
  }))), /* @__PURE__ */ React12.createElement(Transition.Child, {
    as: Fragment,
    enter: "ease-out duration-300",
    enterFrom: "opacity-0 scale-95",
    enterTo: "opacity-100 scale-100",
    leave: "ease-in duration-200",
    leaveFrom: "opacity-100 scale-100",
    leaveTo: "opacity-0 scale-95"
  }, /* @__PURE__ */ React12.createElement(DialogPrimitive.Content, _extends9({
    forceMount: true,
    onOpenAutoFocus: (event) => event.preventDefault(),
    onCloseAutoFocus: (event) => event.preventDefault()
  }, slots.content, {
    className: mx("flex flex-col", "fixed z-50", "w-[95vw] max-w-md rounded-xl p-4 md:w-full", "top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%]", "shadow-2xl bg-white dark:bg-neutral-800 elevated-buttons", defaultFocus, (_b = slots.content) == null ? void 0 : _b.className)
  }), /* @__PURE__ */ React12.createElement(ElevationProvider, {
    elevation: "chrome"
  }, /* @__PURE__ */ React12.createElement(DialogPrimitive.Title, _extends9({}, slots.title, {
    className: mx("shrink-0", "text-xl font-system-medium text-neutral-900 dark:text-neutral-100 rounded-md", titleVisuallyHidden && "sr-only", defaultFocus, (_c = slots == null ? void 0 : slots.title) == null ? void 0 : _c.className),
    tabIndex: 0
  }), title), description && /* @__PURE__ */ React12.createElement(DialogPrimitive.Description, _extends9({}, slots.description, {
    className: mx("mt-2", defaultDescription, (_d = slots.description) == null ? void 0 : _d.className)
  }), description), children, closeLabel && /* @__PURE__ */ React12.createElement(TooltipRoot, null, /* @__PURE__ */ React12.createElement(TooltipContent, {
    className: "z-[51]"
  }, closeLabel), /* @__PURE__ */ React12.createElement(TooltipTrigger, {
    asChild: true
  }, /* @__PURE__ */ React12.createElement(DialogPrimitive.Close, {
    className: mx("absolute top-3.5 right-3.5 inline-flex items-center justify-center rounded-sm p-1", defaultFocus, hover(), (_e = slots.close) == null ? void 0 : _e.className)
  }, /* @__PURE__ */ React12.createElement(X, {
    className: mx(getSize(4), "text-neutral-500 hover:text-neutral-700 dark:text-neutral-500 dark:hover:text-neutral-400", (_f = slots.closeIcon) == null ? void 0 : _f.className)
  })))), closeTriggers && /* @__PURE__ */ React12.createElement("div", _extends9({}, slots.closeTriggers, {
    className: mx("flex flex-wrap justify-end gap-4", (_g = slots.closeTriggers) == null ? void 0 : _g.className)
  }), closeTriggers.map((closeTrigger, key) => /* @__PURE__ */ React12.createElement(DialogPrimitive.Close, {
    key,
    asChild: true
  }, closeTrigger)))))));
  return /* @__PURE__ */ React12.createElement(DialogPrimitive.Root, {
    open,
    onOpenChange: setOpen
  }, openTrigger && /* @__PURE__ */ React12.createElement(DialogPrimitive.Trigger, {
    asChild: true
  }, openTrigger), mountAsSibling ? dialogOverlayAndContent : /* @__PURE__ */ React12.createElement(DialogPrimitive.Portal, {
    forceMount: true
  }, dialogOverlayAndContent));
};

// packages/common/react-components/src/components/DropdownMenu/DropdownMenu.tsx
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import React13, { forwardRef as forwardRef4 } from "react";

// packages/common/react-components/src/components/DropdownMenu/dropdownMenuStyles.ts
var defaultDropdownMenuItem = (themeVariant) => {
  return mx("flex cursor-pointer select-none items-center rounded-md px-2 py-2 text-sm", "text-neutral-900 data-[highlighted]:bg-neutral-50 dark:text-neutral-100 dark:data-[highlighted]:bg-neutral-900", themeVariantSubduedFocus(themeVariant));
};

// packages/common/react-components/src/components/DropdownMenu/DropdownMenu.tsx
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
var DropdownMenuItem = /* @__PURE__ */ forwardRef4(({ className, ...props }, forwardedRef) => {
  const { themeVariant } = useThemeContext();
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Item, _extends10({
    ref: forwardedRef
  }, props, {
    className: mx(defaultDropdownMenuItem(themeVariant), dataDisabled, className)
  }));
});
var DropdownMenuSeparator = ({ className, ...props }) => {
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Separator, _extends10({}, props, {
    className: mx("my-1 h-px bg-neutral-200 dark:bg-neutral-700", className)
  }));
};
var DropdownMenuLabel = ({ className, ...props }) => {
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Label, _extends10({}, props, {
    className: mx("select-none px-2 py-2 text-sm text-neutral-900 dark:text-neutral-100", className)
  }));
};
var DropdownMenuCheckboxItem = /* @__PURE__ */ forwardRef4(({ className, ...props }, forwardedRef) => {
  const { themeVariant } = useThemeContext();
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.CheckboxItem, _extends10({
    ref: forwardedRef
  }, props, {
    className: mx(defaultDropdownMenuItem(themeVariant), className)
  }));
});
var DropdownMenuSubTrigger = ({ className, ...props }) => {
  const { themeVariant } = useThemeContext();
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.SubTrigger, _extends10({}, props, {
    className: mx(defaultDropdownMenuItem(themeVariant), className)
  }));
};
var DropdownMenuSubContent = /* @__PURE__ */ forwardRef4(({ className, ...props }, forwardedRef) => {
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Portal, null, /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.SubContent, _extends10({
    ref: forwardedRef
  }, props, {
    className: mx("origin-radix-dropdown-menu radix-side-right:animate-scale-in", "w-full rounded-md px-1 py-1 text-sm shadow-md", "bg-white dark:bg-neutral-800", className)
  })));
});
var DropdownMenuItemIndicator = DropdownMenuPrimitive.ItemIndicator;
var DropdownMenuSub = DropdownMenuPrimitive.Sub;
var DropdownMenu = ({ trigger, children, slots = {} }) => {
  var _a;
  return /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Root, _extends10({}, slots.root), /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Trigger, _extends10({
    asChild: true
  }, slots.trigger), trigger), /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Portal, null, /* @__PURE__ */ React13.createElement(DropdownMenuPrimitive.Content, _extends10({
    align: "end",
    sideOffset: 4
  }, slots.content, {
    className: mx("radix-side-top:animate-slide-up radix-side-bottom:animate-slide-down", "w-48 rounded-lg p-1 shadow-md md:w-56", "bg-white dark:bg-neutral-800", (_a = slots.content) == null ? void 0 : _a.className)
  }), children)));
};

// packages/common/react-components/src/components/Group/Group.tsx
import React15 from "react";

// packages/common/react-components/src/components/Heading/Heading.tsx
import { createElement } from "react";
var levelClassNameMap = /* @__PURE__ */ new Map([
  [
    1,
    "text-5xl"
  ],
  [
    2,
    "text-4xl"
  ],
  [
    3,
    "text-3xl"
  ],
  [
    4,
    "text-2xl"
  ],
  [
    5,
    "text-xl"
  ],
  [
    6,
    "text-lg"
  ]
]);
var Heading = ({ level, ...rootSlot }) => {
  const resolvedLevel = level || 1;
  return /* @__PURE__ */ createElement(`h${resolvedLevel}`, {
    ...rootSlot,
    className: mx("font-bold font-display", levelClassNameMap.get(resolvedLevel), rootSlot.className)
  });
};

// packages/common/react-components/src/components/Group/Group.tsx
function _extends11() {
  _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
var Group = ({ elevation = "group", children, label, labelVisuallyHidden, ...rootSlot }) => {
  const labelId = useId("groupLabel");
  return /* @__PURE__ */ React15.createElement("div", _extends11({
    role: "group",
    "aria-labelledby": labelId
  }, rootSlot, {
    className: mx(defaultGroup({
      elevation
    }), rootSlot == null ? void 0 : rootSlot.className)
  }), /* @__PURE__ */ React15.createElement(Heading, _extends11({}, label, {
    id: labelId,
    className: mx(labelVisuallyHidden && "sr-only", "mb-2", label == null ? void 0 : label.className)
  })), /* @__PURE__ */ React15.createElement(ElevationProvider, {
    elevation
  }, children));
};

// packages/common/react-components/src/components/List/List.tsx
import { DndContext } from "@dnd-kit/core";
import { restrictToVerticalAxis } from "@dnd-kit/modifiers";
import { SortableContext, useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { CaretDown, CaretRight, DotsSixVertical } from "@phosphor-icons/react";
import * as Collapsible from "@radix-ui/react-collapsible";
import { useComposedRefs } from "@radix-ui/react-compose-refs";
import { createContextScope } from "@radix-ui/react-context";
import { Primitive } from "@radix-ui/react-primitive";
import { Slot } from "@radix-ui/react-slot";
import { useControllableState as useControllableState2 } from "@radix-ui/react-use-controllable-state";
import React16, { forwardRef as forwardRef5 } from "react";

// packages/common/react-components/src/components/List/listStyles.ts
var defaultListItemEndcap = ({ density = "coarse" }) => mx(density === "fine" ? getSize(8) : getSize(10), "shrink-0 flex items-start justify-center");
var defaultListItemHeading = ({ density = "coarse" }) => densityBlockSize(density);
var defaultListItemMainContent = ({ collapsible = false }) => mx("flex-1 min-bs-0", !collapsible && "flex");

// packages/common/react-components/src/components/List/List.tsx
function _extends12() {
  _extends12 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
var LIST_NAME = "List";
var LIST_ITEM_NAME = "ListItem";
var [createListContext, createListScope] = createContextScope(LIST_NAME, []);
var [ListProvider, useListContext] = createListContext(LIST_NAME);
var useListDensity = ({ density, variant }) => {
  const contextDensity = useDensityContext(density);
  return variant === "ordered-draggable" ? "coarse" : contextDensity != null ? contextDensity : "coarse";
};
var List = /* @__PURE__ */ forwardRef5((props, forwardedRef) => {
  const { __listScope, variant = "ordered", selectable = false, collapsible = false, toggleOpenLabel = "Expand/collapse item", children, slots = {} } = props;
  const ListRoot = variant === "ordered" || variant === "ordered-draggable" ? Primitive.ol : Primitive.ul;
  const density = useListDensity(props);
  return /* @__PURE__ */ React16.createElement(ListRoot, _extends12({}, selectable && {
    role: "listbox",
    "aria-multiselectable": true
  }, slots.root, {
    "aria-labelledby": props.labelId,
    ref: forwardedRef
  }), /* @__PURE__ */ React16.createElement(DensityProvider, {
    density
  }, /* @__PURE__ */ React16.createElement(ListProvider, _extends12({}, {
    scope: __listScope,
    variant,
    collapsible,
    selectable,
    toggleOpenLabel
  }), variant === "ordered-draggable" ? /* @__PURE__ */ React16.createElement(DndContext, {
    onDragEnd: props.onDragEnd,
    modifiers: [
      restrictToVerticalAxis
    ]
  }, /* @__PURE__ */ React16.createElement(SortableContext, {
    items: props.listItemIds
  }, children)) : /* @__PURE__ */ React16.createElement(React16.Fragment, null, children))));
});
List.displayName = LIST_NAME;
var [createListItemContext, createListItemScope] = createContextScope(LIST_ITEM_NAME, []);
var [ListItemProvider, useListItemContext] = createListItemContext(LIST_ITEM_NAME);
var ListItemEndcap = ({ children, className, asChild, ...props }) => {
  const Root12 = asChild ? Slot : "div";
  const density = useDensityContext();
  return /* @__PURE__ */ React16.createElement(Root12, _extends12({}, !asChild && {
    role: "none"
  }, props, {
    className: mx(defaultListItemEndcap({
      density
    }), className)
  }), children);
};
var ListItemHeading = ({ children, className, asChild, __listScope, ...props }) => {
  const { headingId } = useListItemContext(LIST_ITEM_NAME, __listScope);
  const Root12 = asChild ? Slot : "div";
  const density = useDensityContext();
  return /* @__PURE__ */ React16.createElement(Root12, _extends12({}, props, {
    id: headingId,
    className: mx(defaultListItemHeading({
      density
    }), className)
  }), children);
};
var ListItemDragHandle = ({ className, dragHandleIconSlot = {}, ...props }) => {
  const { themeVariant } = useThemeContext();
  return /* @__PURE__ */ React16.createElement("div", _extends12({
    role: "button"
  }, props, {
    className: mx("bs-10 is-5 rounded touch-none", themeVariantFocus(themeVariant), className)
  }), /* @__PURE__ */ React16.createElement(DotsSixVertical, _extends12({}, dragHandleIconSlot, {
    className: mx(getSize(5), "mbs-2.5", dragHandleIconSlot.className)
  })));
};
var ListItemOpenTrigger = /* @__PURE__ */ forwardRef5(({ className, openTriggerIconSlot = {}, __listScope, ...props }, forwardedRef) => {
  const { themeVariant } = useThemeContext();
  const density = useDensityContext();
  const { toggleOpenLabel } = useListContext(LIST_NAME, __listScope);
  const { open } = useListItemContext(LIST_ITEM_NAME, __listScope);
  const iconProps = {
    weight: "bold",
    ...openTriggerIconSlot,
    className: mx(getSize(3.5), openTriggerIconSlot.className)
  };
  const Icon2 = open ? CaretDown : CaretRight;
  return /* @__PURE__ */ React16.createElement(Collapsible.Trigger, _extends12({
    ref: forwardedRef
  }, props, {
    className: mx("is-5 rounded flex justify-center items-center", density === "fine" ? fineBlockSize : coarseBlockSize, themeVariantFocus(themeVariant), className)
  }), typeof toggleOpenLabel === "string" ? /* @__PURE__ */ React16.createElement("span", {
    className: "sr-only"
  }, toggleOpenLabel) : toggleOpenLabel, /* @__PURE__ */ React16.createElement(Icon2, _extends12({}, iconProps)));
});
var PureListItem = /* @__PURE__ */ forwardRef5((props, forwardedRef) => {
  var _a, _b, _c;
  const { __listScope, children, selected: propsSelected, defaultSelected, onSelectedChange, collapsible, id, slots = {} } = props;
  const density = useDensityContext();
  const { variant, selectable, collapsible: listCollapsible } = useListContext(LIST_NAME, __listScope);
  const draggable = variant === "ordered-draggable";
  const [selected = false, setSelected] = useControllableState2({
    prop: propsSelected,
    defaultProp: defaultSelected,
    onChange: onSelectedChange
  });
  const [open = false, setOpen] = useControllableState2({
    prop: props.open,
    defaultProp: props.defaultOpen,
    onChange: props.onOpenChange
  });
  const headingId = useId("listItem__heading");
  const listItem = /* @__PURE__ */ React16.createElement(Primitive.li, _extends12({}, slots.root, {
    id,
    ref: forwardedRef,
    "aria-labelledby": headingId
  }, selectable && {
    role: "option",
    "aria-selected": !!selected
  }, {
    className: mx("flex", (_a = slots.root) == null ? void 0 : _a.className)
  }), draggable && /* @__PURE__ */ React16.createElement(ListItemDragHandle, _extends12({}, slots.dragHandle, {
    dragHandleIconSlot: slots.dragHandleIcon
  })), listCollapsible && /* @__PURE__ */ React16.createElement("div", {
    role: "none",
    className: mx("is-5", density === "fine" ? fineBlockSize : coarseBlockSize)
  }, collapsible && /* @__PURE__ */ React16.createElement(ListItemOpenTrigger, _extends12({}, slots.openTrigger, {
    openTriggerIconSlot: slots.openTriggerIcon
  }))), selectable && /* @__PURE__ */ React16.createElement(ListItemEndcap, _extends12({}, slots.selectableEndcap), /* @__PURE__ */ React16.createElement(Checkbox, _extends12({}, slots.selectableCheckbox, {
    labelId: headingId,
    className: mx(density === "fine" ? "mbs-1.5" : "mbs-2.5", (_b = slots.selectableCheckbox) == null ? void 0 : _b.className)
  }, {
    checked: selected,
    onCheckedChange: setSelected
  }))), /* @__PURE__ */ React16.createElement("div", _extends12({
    role: "none"
  }, slots.mainContent, {
    className: mx(defaultListItemMainContent({
      collapsible: listCollapsible
    }), (_c = slots.mainContent) == null ? void 0 : _c.className)
  }), children));
  return /* @__PURE__ */ React16.createElement(ListItemProvider, {
    scope: __listScope,
    headingId,
    open
  }, collapsible ? /* @__PURE__ */ React16.createElement(Collapsible.Root, {
    asChild: true,
    open,
    onOpenChange: setOpen
  }, listItem) : listItem);
});
var ListItemCollapsibleContent = Collapsible.Content;
var DraggableListItem = /* @__PURE__ */ forwardRef5((props, forwardedRef) => {
  var _a, _b, _c, _d;
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({
    id: props.id
  });
  const ref = useComposedRefs(forwardedRef, setNodeRef);
  return /* @__PURE__ */ React16.createElement(PureListItem, _extends12({}, props, {
    ref,
    slots: {
      ...props.slots,
      root: {
        ...(_a = props.slots) == null ? void 0 : _a.root,
        style: {
          transform: CSS.Transform.toString(transform),
          transition,
          ...(_c = (_b = props.slots) == null ? void 0 : _b.root) == null ? void 0 : _c.style
        }
      },
      dragHandle: {
        ...listeners,
        ...attributes,
        ...(_d = props.slots) == null ? void 0 : _d.dragHandle
      }
    }
  }));
});
var ListItem = /* @__PURE__ */ forwardRef5((props, forwardedRef) => {
  var _a, _b;
  const { variant } = useListContext(LIST_NAME, props.__listScope);
  const listItemId = useId("listItem");
  if (variant === "ordered-draggable") {
    return /* @__PURE__ */ React16.createElement(DraggableListItem, _extends12({}, props, {
      ref: forwardedRef,
      id: (_a = props.id) != null ? _a : listItemId
    }));
  } else {
    return /* @__PURE__ */ React16.createElement(PureListItem, _extends12({}, props, {
      ref: forwardedRef,
      id: (_b = props.id) != null ? _b : listItemId
    }));
  }
});

// packages/common/react-components/src/components/Input/Input.tsx
import React20, { forwardRef as forwardRef9 } from "react";

// packages/common/react-components/src/components/Input/BarePinInput.tsx
import { CodeInput, getSegmentCssWidth } from "rci";
import React17, { forwardRef as forwardRef6, useCallback } from "react";
function _extends13() {
  _extends13 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
var bareInputStyleProps = {
  padding: "8px",
  spacing: "8px",
  fontFamily: ""
};
var BarePinInput = /* @__PURE__ */ forwardRef6(({ validationMessage, validationValence, variant, elevation, density: propsDensity, ...inputSlot }, ref) => {
  const width = getSegmentCssWidth("13px");
  const inputRef = useForwardedRef(ref);
  const inputFocused = useIsFocused(inputRef);
  const shadow = useButtonShadow(elevation);
  const density = useDensityContext(propsDensity);
  const { disabled } = inputSlot;
  const renderSegment = useCallback(({ state, index }) => /* @__PURE__ */ React17.createElement("div", {
    key: index,
    className: mx(staticInput({
      focused: inputFocused && !!state,
      disabled,
      density,
      ...validationMessage && {
        validationValence
      }
    }), !disabled && variant !== "subdued" && shadow),
    "data-state": state,
    style: {
      width,
      height: "100%"
    }
  }), [
    inputFocused,
    validationValence,
    validationMessage,
    disabled
  ]);
  return /* @__PURE__ */ React17.createElement(CodeInput, _extends13({}, {
    spellCheck: false,
    ...bareInputStyleProps,
    ...inputSlot,
    inputRef,
    renderSegment,
    className: mx("font-mono selection:bg-transparent mli-auto", disabled && "cursor-not-allowed", inputSlot == null ? void 0 : inputSlot.className)
  }));
});

// packages/common/react-components/src/components/Input/BareTextInput.tsx
import React18, { forwardRef as forwardRef7 } from "react";
function _extends14() {
  _extends14 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
var sizeMap2 = {
  md: "text-base",
  lg: "text-lg",
  pin: "",
  textarea: ""
};
var BareTextInput = /* @__PURE__ */ forwardRef7(({ validationValence, validationMessage, variant, elevation, density: propsDensity, size, ...inputSlot }, forwardedRef) => {
  const { themeVariant } = useThemeContext();
  const shadow = useButtonShadow(elevation);
  const density = useDensityContext(themeVariant === "os" ? "fine" : propsDensity);
  return /* @__PURE__ */ React18.createElement("input", _extends14({}, inputSlot, {
    ref: forwardedRef,
    className: mx((variant === "subdued" ? subduedInput : defaultInput)({
      density,
      disabled: inputSlot.disabled,
      ...validationMessage && {
        validationValence
      }
    }, themeVariant), sizeMap2[size != null ? size : "md"], "block is-full", !inputSlot.disabled && variant !== "subdued" && shadow, inputSlot == null ? void 0 : inputSlot.className)
  }));
});

// packages/common/react-components/src/components/Input/BareTextareaInput.tsx
import React19, { forwardRef as forwardRef8 } from "react";
function _extends15() {
  _extends15 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
var BareTextareaInput = /* @__PURE__ */ forwardRef8(({ validationValence, validationMessage, elevation, density: propsDensity, variant, ...inputSlot }, forwardedRef) => {
  const { themeVariant } = useThemeContext();
  const shadow = useButtonShadow(elevation);
  const density = useDensityContext(themeVariant === "os" ? "fine" : propsDensity);
  return /* @__PURE__ */ React19.createElement("textarea", _extends15({
    ref: forwardedRef
  }, inputSlot, {
    className: mx((variant === "subdued" ? subduedInput : defaultInput)({
      density,
      disabled: inputSlot.disabled,
      ...validationMessage && {
        validationValence
      }
    }), "block is-full", !inputSlot.disabled && variant !== "subdued" && shadow, inputSlot == null ? void 0 : inputSlot.className)
  }));
});

// packages/common/react-components/src/components/Input/Input.tsx
function _extends16() {
  _extends16 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
var Input = /* @__PURE__ */ forwardRef9(({ label, labelVisuallyHidden, description, descriptionVisuallyHidden, value, defaultValue, onChange, disabled, placeholder, size, length = 6, validationMessage, validationValence, variant = "default", elevation, density, slots = {} }, forwardedRef) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const internalInputId = useId("input");
  const descriptionId = useId("input-description");
  const validationId = useId("input-validation");
  const { hasIosKeyboard: hasIosKeyboard2 } = useThemeContext();
  const inputId = (_b = (_a = slots.input) == null ? void 0 : _a.id) != null ? _b : internalInputId;
  const isInvalid = !!validationMessage && validationValence === "error";
  const { autoFocus, ...inputSlot } = (_c = slots.input) != null ? _c : {};
  const bareInputBaseProps = {
    ...inputSlot,
    id: inputId,
    ...((_d = slots.input) == null ? void 0 : _d.required) && {
      required: true
    },
    ...description && {
      "aria-describedby": descriptionId
    },
    ...isInvalid && {
      "aria-invalid": "true",
      "aria-errormessage": validationId
    },
    ...autoFocus && !hasIosKeyboard2 && {
      autoFocus: true
    },
    disabled,
    placeholder,
    value,
    defaultValue,
    onChange,
    validationMessage,
    validationValence,
    variant,
    elevation,
    density
  };
  const bareInput = size === "pin" ? /* @__PURE__ */ React20.createElement(BarePinInput, _extends16({}, bareInputBaseProps, {
    length,
    ref: forwardedRef
  })) : size === "textarea" ? /* @__PURE__ */ React20.createElement(BareTextareaInput, _extends16({}, bareInputBaseProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ React20.createElement(BareTextInput, _extends16({}, bareInputBaseProps, {
    size,
    ref: forwardedRef
  }));
  return /* @__PURE__ */ React20.createElement("div", {
    role: "none",
    className: (_e = slots.root) == null ? void 0 : _e.className
  }, /* @__PURE__ */ React20.createElement("label", _extends16({}, slots.label, {
    htmlFor: inputId,
    className: mx("block pbe-1 text-sm font-medium text-neutral-900 dark:text-neutral-100", labelVisuallyHidden && "sr-only", (_f = slots.label) == null ? void 0 : _f.className)
  }), label), bareInput, (description || validationMessage) && /* @__PURE__ */ React20.createElement("p", _extends16({}, !isInvalid && {
    id: descriptionId
  }, {
    className: mx(descriptionVisuallyHidden && !isInvalid && "sr-only", (_g = slots.description) == null ? void 0 : _g.className)
  }), validationMessage && /* @__PURE__ */ React20.createElement("span", {
    id: validationId,
    className: mx(valenceColorText(validationValence), (_h = slots.validation) == null ? void 0 : _h.className)
  }, validationMessage, " "), /* @__PURE__ */ React20.createElement("span", _extends16({}, isInvalid && {
    id: descriptionId
  }, {
    className: mx(defaultDescription, descriptionVisuallyHidden && "sr-only")
  }), description)));
});

// packages/common/react-components/src/components/NavMenu/NavMenu.tsx
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import React21, { forwardRef as forwardRef10 } from "react";
function _extends17() {
  _extends17 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
var NavMenuInvokerItem = /* @__PURE__ */ forwardRef10(({ content, children, active }, ref) => {
  return /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Item, {
    ref
  }, /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Trigger, {
    className: mx("px-3 py-2 text-sm rounded-md text-sm font-medium transition-color", active ? primaryAppButtonColors : defaultAppButtonColors, defaultFocus, hover())
  }, children), /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Content, {
    className: mx("absolute w-auto top-0 left-0 rounded-lg", "radix-motion-from-start:animate-enter-from-left", "radix-motion-from-end:animate-enter-from-right", "radix-motion-to-start:animate-exit-to-left", "radix-motion-to-end:animate-exit-to-right")
  }, content));
});
var NavMenuLinkItem = /* @__PURE__ */ forwardRef10(({ triggerLinkProps, children, active }, ref) => /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Item, {
  asChild: true,
  ref
}, /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Link, _extends17({}, triggerLinkProps, {
  active,
  className: mx("px-3 py-2 text-sm rounded-md transition-color", active ? primaryAppButtonColors : defaultAppButtonColors, active ? "font-medium" : "font-normal", defaultFocus, hover(), triggerLinkProps.className)
}), children)));
var NavMenuTooltipLinkItem = /* @__PURE__ */ forwardRef10(({ tooltip, triggerLinkProps, active, children }, ref) => /* @__PURE__ */ React21.createElement(TooltipRoot, null, /* @__PURE__ */ React21.createElement(TooltipContent, _extends17({}, tooltip)), /* @__PURE__ */ React21.createElement(TooltipTrigger, {
  asChild: true
}, /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Item, {
  asChild: true,
  ref
}, /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Link, _extends17({}, triggerLinkProps, {
  active,
  className: mx("px-3 py-2 text-sm rounded-md transition-color", active ? primaryAppButtonColors : defaultAppButtonColors, active ? "font-medium" : "font-normal", defaultFocus, hover(), triggerLinkProps.className)
}), children)))));
var NavMenuLink = NavigationMenuPrimitive.Link;
var NavMenuSeparatorItem = (_props) => {
  return /* @__PURE__ */ React21.createElement("span", {
    role: "none",
    className: mx(defaultInlineSeparator, "bs-5")
  });
};
var isTooltipLinkItem = (o) => "tooltip" in o;
var isLinkItem = (o) => "triggerLinkProps" in o;
var isSeparator = (o) => "separator" in o;
var NavMenu = ({ items, slots = {}, variant = "horizontal" }) => {
  var _a, _b, _c, _d, _e;
  const shadow = useButtonShadow();
  return /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Root, _extends17({}, slots.root, {
    orientation: variant,
    className: mx("rounded-lg bg-white dark:bg-neutral-750", variant === "vertical" ? "max-bs-full overflow-y-auto" : "max-is-full overflow-x-auto", (_a = slots.root) == null ? void 0 : _a.className)
  }), /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.List, _extends17({}, slots.list, {
    className: mx(shadow, "relative flex gap-1 p-1", variant === "vertical" ? "flex-col items-stretch" : "flex-row items-center", (_b = slots.list) == null ? void 0 : _b.className)
  }), items.map((item, i) => {
    return isTooltipLinkItem(item) ? /* @__PURE__ */ React21.createElement(NavMenuTooltipLinkItem, _extends17({
      key: i
    }, item)) : isLinkItem(item) ? /* @__PURE__ */ React21.createElement(NavMenuLinkItem, _extends17({
      key: i
    }, item)) : isSeparator(item) ? /* @__PURE__ */ React21.createElement(NavMenuSeparatorItem, _extends17({
      key: i
    }, item)) : /* @__PURE__ */ React21.createElement(NavMenuInvokerItem, _extends17({
      key: i
    }, item));
  }), /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Indicator, _extends17({}, slots.indicator, {
    className: mx("z-10 top-[100%] flex items-end justify-center h-2 overflow-hidden", "radix-state-visible:animate-fade-in", "radix-state-hidden:animate-fade-out", "transition-[width_transform] duration-[250ms] ease-[ease]", (_c = slots.indicator) == null ? void 0 : _c.className)
  }), /* @__PURE__ */ React21.createElement("div", {
    className: mx("top-1 relative bg-white dark:bg-neutral-750 w-2 h-2 rotate-45", (_d = slots.indicatorIcon) == null ? void 0 : _d.className)
  }))), /* @__PURE__ */ React21.createElement("div", {
    className: mx("absolute flex justify-center", "w-[140%] left-[-20%] top-[100%]"),
    style: {
      perspective: "2000px"
    }
  }, /* @__PURE__ */ React21.createElement(NavigationMenuPrimitive.Viewport, _extends17({}, slots.viewport, {
    className: mx("relative mbs-2 shadow-lg rounded-md bg-white dark:bg-neutral-750 overflow-hidden", "w-radix-navigation-menu-viewport", "h-radix-navigation-menu-viewport", "radix-state-open:animate-scale-in-content", "radix-state-closed:animate-scale-out-content", "origin-[top_center] transition-[width_height] duration-300 ease-[ease]", (_e = slots.viewport) == null ? void 0 : _e.className)
  }))));
};

// packages/common/react-components/src/components/Popover/Popover.tsx
import { X as X2 } from "@phosphor-icons/react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { Button as ToolbarButtonItem } from "@radix-ui/react-toolbar";
import React22, { useCallback as useCallback2, useState as useState4 } from "react";
function _extends18() {
  _extends18 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
var Popover = ({ openTrigger, children, closeLabel, initiallyOpen, mountAsSibling, triggerIsInToolbar, slots = {} }) => {
  var _a, _b, _c, _d, _e, _f;
  const [isOpen, setIsOpen] = useState4(!!initiallyOpen);
  const onKeyUp = useCallback2((e) => {
    var _a2, _b2;
    const keyUpId = document.activeElement.dataset.keyupid;
    if (keyUpId && e.key === " ") {
      setIsOpen(keyUpId === "open");
    }
    (_b2 = (_a2 = slots.trigger) == null ? void 0 : _a2.onKeyUp) == null ? void 0 : _b2.call(_a2, e);
  }, [
    (_a = slots.trigger) == null ? void 0 : _a.onKeyUp
  ]);
  const popoverContent = /* @__PURE__ */ React22.createElement(PopoverPrimitive.Content, _extends18({
    align: "center"
  }, slots.content, {
    className: mx("radix-side-top:animate-slide-up radix-side-bottom:animate-slide-down", "rounded-lg p-4 shadow-xl elevated-buttons", "bg-white dark:bg-neutral-800", defaultFocus, (_b = slots.content) == null ? void 0 : _b.className)
  }), /* @__PURE__ */ React22.createElement(PopoverPrimitive.Arrow, {
    className: mx("fill-current text-white dark:text-neutral-800", (_c = slots.arrow) == null ? void 0 : _c.className)
  }), children, closeLabel && /* @__PURE__ */ React22.createElement(PopoverPrimitive.Close, _extends18({}, slots.close, {
    className: mx("absolute top-3.5 right-3.5 inline-flex items-center justify-center rounded-sm p-1", defaultFocus, hover(), (_d = slots.close) == null ? void 0 : _d.className),
    "aria-label": closeLabel,
    "data-keyupid": "close"
  }), /* @__PURE__ */ React22.createElement(X2, _extends18({}, slots.closeIcon, {
    className: mx(getSize(4), "text-neutral-500 hover:text-neutral-700 dark:text-neutral-500 dark:hover:text-neutral-400", (_e = slots.closeIcon) == null ? void 0 : _e.className)
  }))));
  const trigger = /* @__PURE__ */ React22.createElement(PopoverPrimitive.Trigger, _extends18({}, slots.trigger, {
    onKeyUp,
    "data-keyupid": "open",
    className: mx(hover(), defaultFocus, defaultActive, (_f = slots.trigger) == null ? void 0 : _f.className)
  }), openTrigger);
  return /* @__PURE__ */ React22.createElement(PopoverPrimitive.Root, {
    open: isOpen,
    onOpenChange: setIsOpen
  }, triggerIsInToolbar ? /* @__PURE__ */ React22.createElement(ToolbarButtonItem, {
    asChild: true
  }, trigger) : trigger, mountAsSibling ? popoverContent : /* @__PURE__ */ React22.createElement(PopoverPrimitive.Portal, null, popoverContent));
};

// packages/common/react-components/src/components/QrCode/QrCode.tsx
import { QrCode as QrCodeIcon, CopySimple } from "@phosphor-icons/react";
import { QRCodeSVG } from "qrcode.react";
import React23, { useCallback as useCallback3 } from "react";
function _extends19() {
  _extends19 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
var FullQrCode = ({ value, label, size, density, elevation, slots = {} }) => {
  var _a, _b;
  const labelId = useId("qr-label");
  const copyValue = useCallback3(() => {
    void navigator.clipboard.writeText(value);
  }, [
    value
  ]);
  return /* @__PURE__ */ React23.createElement(TooltipRoot, null, /* @__PURE__ */ React23.createElement(TooltipContent, _extends19({}, slots.tooltipContent), label), /* @__PURE__ */ React23.createElement(TooltipTrigger, {
    asChild: true
  }, /* @__PURE__ */ React23.createElement(Button, _extends19({}, {
    density,
    elevation
  }, slots.button, {
    className: mx("overflow-hidden p-0", getSize(size != null ? size : 32), (_a = slots.button) == null ? void 0 : _a.className),
    onClick: copyValue
  }), /* @__PURE__ */ React23.createElement(QRCodeSVG, _extends19({
    includeMargin: true,
    role: "none"
  }, slots.qrSvg, {
    value,
    className: mx("w-full h-auto", (_b = slots.qrSvg) == null ? void 0 : _b.className)
  })), /* @__PURE__ */ React23.createElement("div", {
    id: labelId,
    className: "sr-only"
  }, label))));
};
var CompactQrCode = ({ value, displayQrLabel, copyLabel, density, elevation, slots = {} }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const labelId = useId("qr-label");
  const copyValue = useCallback3(() => {
    void navigator.clipboard.writeText(value);
  }, [
    value
  ]);
  return /* @__PURE__ */ React23.createElement(React23.Fragment, null, /* @__PURE__ */ React23.createElement(ButtonGroup, {
    className: "inline-flex grow md:hidden"
  }, displayQrLabel && /* @__PURE__ */ React23.createElement("span", {
    className: "sr-only",
    id: labelId
  }, displayQrLabel), /* @__PURE__ */ React23.createElement(Popover, {
    openTrigger: /* @__PURE__ */ React23.createElement(Button, _extends19({}, {
      density,
      elevation
    }, slots.qrButton, {
      className: mx("border-ie-0 grow rounded-ie-none rounded-is-md", (_a = slots.qrButton) == null ? void 0 : _a.className),
      "aria-labelledby": labelId
    }), /* @__PURE__ */ React23.createElement(QrCodeIcon, {
      className: getSize(5)
    })),
    slots: {
      content: {
        className: "p-0",
        ...slots.qrTooltipContent,
        side: (_c = (_b = slots == null ? void 0 : slots.qrTooltipContent) == null ? void 0 : _b.side) != null ? _c : "bottom"
      },
      trigger: {
        asChild: true
      }
    }
  }, /* @__PURE__ */ React23.createElement("div", {
    role: "none",
    className: "overflow-hidden rounded-md"
  }, /* @__PURE__ */ React23.createElement(QRCodeSVG, _extends19({
    includeMargin: true,
    role: "none"
  }, slots.qrSvg, {
    value,
    className: mx(getSize(64), (_d = slots.qrSvg) == null ? void 0 : _d.className)
  })))), /* @__PURE__ */ React23.createElement(TooltipRoot, null, /* @__PURE__ */ React23.createElement(TooltipContent, _extends19({}, slots.qrTooltipContent), copyLabel), /* @__PURE__ */ React23.createElement(TooltipTrigger, {
    asChild: true
  }, /* @__PURE__ */ React23.createElement(Button, _extends19({}, {
    density,
    elevation
  }, slots.copyButton, {
    className: mx("rounded-is-none rounded-ie-md grow", (_e = slots.copyButton) == null ? void 0 : _e.className),
    onClick: copyValue
  }), /* @__PURE__ */ React23.createElement(CopySimple, {
    className: getSize(5)
  }))))), /* @__PURE__ */ React23.createElement(ButtonGroup, {
    className: "hidden md:inline-flex"
  }, /* @__PURE__ */ React23.createElement(Popover, {
    openTrigger: /* @__PURE__ */ React23.createElement(Button, _extends19({}, {
      density,
      elevation
    }, slots.qrButton, {
      className: mx("border-ie-0 flex gap-1 rounded-ie-none rounded-is-md", (_f = slots.qrButton) == null ? void 0 : _f.className)
    }), /* @__PURE__ */ React23.createElement(QrCodeIcon, {
      className: getSize(5)
    }), displayQrLabel),
    slots: {
      content: {
        className: "p-0",
        ...slots.qrTooltipContent,
        side: (_h = (_g = slots == null ? void 0 : slots.qrTooltipContent) == null ? void 0 : _g.side) != null ? _h : "left"
      },
      trigger: {
        asChild: true
      }
    }
  }, /* @__PURE__ */ React23.createElement("div", {
    role: "none",
    className: "overflow-hidden rounded-md"
  }, /* @__PURE__ */ React23.createElement(QRCodeSVG, _extends19({
    includeMargin: true,
    role: "none"
  }, slots.qrSvg, {
    value,
    className: mx(getSize(64), (_i = slots.qrSvg) == null ? void 0 : _i.className)
  })))), /* @__PURE__ */ React23.createElement(Button, _extends19({}, {
    density,
    elevation
  }, slots.copyButton, {
    className: mx("flex gap-1 rounded-ie-md rounded-is-none", (_j = slots.copyButton) == null ? void 0 : _j.className),
    onClick: copyValue
  }), /* @__PURE__ */ React23.createElement(CopySimple, {
    className: getSize(5)
  }), copyLabel)));
};
var QrCode = FullQrCode;

// packages/common/react-components/src/components/Tag/Tag.tsx
import React24 from "react";
function _extends20() {
  _extends20 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
var valenceColorMap = {
  neutral: "bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300",
  success: "bg-success-100 text-success-800 dark:bg-success-700 dark:text-success-300",
  info: "bg-info-100 text-info-800 dark:bg-info-700 dark:text-info-300",
  warning: "bg-warning-100 text-warning-800 dark:bg-warning-700 dark:text-warning-300",
  error: "bg-error-100 text-error-800 dark:bg-error-700 dark:text-error-300"
};
var Tag = ({ children, valence = "neutral", ...rootSlot }) => {
  return /* @__PURE__ */ React24.createElement("span", _extends20({}, rootSlot, {
    className: mx("text-xs font-semibold px-2.5 py-0.5 rounded", valenceColorMap[valence], rootSlot == null ? void 0 : rootSlot.className)
  }), children);
};

// packages/common/react-components/src/components/Toast/Toast.tsx
import * as ToastPrimitive from "@radix-ui/react-toast";
import React25, { cloneElement as cloneElement2, useState as useState5 } from "react";
function _extends21() {
  _extends21 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
var Toast = ({ title, titleVisuallyHidden, description, openTrigger, closeTrigger, actionTriggers, initiallyOpen, slots = {} }) => {
  var _a, _b, _c, _d;
  const [isOpen, setIsOpen] = useState5(!!initiallyOpen);
  return /* @__PURE__ */ React25.createElement(React25.Fragment, null, openTrigger && (typeof openTrigger === "string" ? /* @__PURE__ */ React25.createElement(Button, {
    onClick: () => setIsOpen(true)
  }, openTrigger) : /* @__PURE__ */ cloneElement2(openTrigger, {
    onClick: () => setIsOpen(true)
  })), /* @__PURE__ */ React25.createElement(ToastPrimitive.Root, _extends21({
    open: isOpen,
    onOpenChange: setIsOpen
  }, slots.root, {
    className: mx("shadow-lg rounded-lg elevated-buttons flex", "bg-white dark:bg-neutral-800", "radix-state-open:animate-toast-slide-in-bottom md:radix-state-open:animate-toast-slide-in-right", "radix-state-closed:animate-toast-hide", "radix-swipe-end:animate-toast-swipe-out", "translate-x-radix-toast-swipe-move-x", "radix-swipe-cancel:translate-x-0 radix-swipe-cancel:duration-200 radix-swipe-cancel:ease-[ease]", defaultFocus, (_a = slots.root) == null ? void 0 : _a.className)
  }), /* @__PURE__ */ React25.createElement(ElevationProvider, {
    elevation: "chrome"
  }, /* @__PURE__ */ React25.createElement("div", _extends21({
    role: "none"
  }, slots.heading, {
    className: mx("w-0 flex-1 flex items-center pl-5 py-4 min-h-full", (_b = slots.heading) == null ? void 0 : _b.className)
  }), /* @__PURE__ */ React25.createElement("div", _extends21({
    role: "none"
  }, slots.headingInner, {
    className: mx("w-full radix flex flex-col justify-center min-h-full gap-1", (_c = slots.headingInner) == null ? void 0 : _c.className)
  }), /* @__PURE__ */ React25.createElement(ToastPrimitive.Title, {
    className: mx("text-md font-medium", titleVisuallyHidden && "sr-only")
  }, title), description && /* @__PURE__ */ React25.createElement(ToastPrimitive.Description, {
    className: defaultDescription
  }, description))), /* @__PURE__ */ React25.createElement("div", _extends21({
    role: "none"
  }, slots.actions, {
    className: mx("flex flex-col px-3 py-2 gap-1 items-stretch justify-center min-h-full", (_d = slots.actions) == null ? void 0 : _d.className)
  }), (actionTriggers || []).map(({ altText, trigger }, index) => /* @__PURE__ */ React25.createElement(ToastPrimitive.Action, {
    key: index,
    altText,
    asChild: typeof trigger !== "string"
  }, trigger)), closeTrigger && /* @__PURE__ */ React25.createElement(ToastPrimitive.Close, {
    asChild: typeof closeTrigger !== "string"
  }, closeTrigger)))));
};

// packages/common/react-components/src/components/ThemeProvider/ThemeProvider.tsx
import { Provider as ToastProvider, Viewport as ToastViewport } from "@radix-ui/react-toast";
import { Provider as TooltipProvider } from "@radix-ui/react-tooltip";
import React26, { createContext as createContext4 } from "react";
function _extends22() {
  _extends22 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
var ThemeContext = /* @__PURE__ */ createContext4({
  themeVariant: "app",
  themeMode: "dark",
  hasIosKeyboard: false
});
var ThemeProvider = ({ children, tooltipProviderProps, toastProviderProps, toastViewportProps, fallback = null, resourceExtensions, appNs, themeVariant = "app", themeMode = "dark", rootElevation = "base", rootDensity = "coarse" }) => {
  return /* @__PURE__ */ React26.createElement(ThemeContext.Provider, {
    value: {
      themeVariant,
      themeMode,
      hasIosKeyboard: hasIosKeyboard()
    }
  }, /* @__PURE__ */ React26.createElement(TranslationsProvider, _extends22({}, {
    fallback,
    resourceExtensions,
    appNs
  }), /* @__PURE__ */ React26.createElement(ToastProvider, _extends22({}, toastProviderProps), /* @__PURE__ */ React26.createElement(TooltipProvider, _extends22({
    delayDuration: 100,
    skipDelayDuration: 400
  }, tooltipProviderProps), /* @__PURE__ */ React26.createElement(ElevationProvider, {
    elevation: rootElevation
  }, /* @__PURE__ */ React26.createElement(DensityProvider, {
    density: rootDensity
  }, children))), /* @__PURE__ */ React26.createElement(ToastViewport, _extends22({}, toastViewportProps, {
    className: mx("z-[70] fixed bottom-4 inset-x-4 w-auto md:top-4 md:right-4 md:left-auto md:bottom-auto md:w-full md:max-w-sm rounded-lg flex flex-col gap-2", themeVariantFocus(themeVariant), toastViewportProps == null ? void 0 : toastViewportProps.className)
  })))));
};

// packages/common/react-components/src/components/Tree/JsonTree.tsx
import React28 from "react";

// packages/common/react-components/src/components/Tree/Tree.tsx
import React27, { forwardRef as forwardRef11 } from "react";
function _extends23() {
  _extends23 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
var TreeRoot = (props) => {
  var _a;
  return /* @__PURE__ */ React27.createElement(List, _extends23({}, props, {
    collapsible: true,
    slots: {
      ...props.slots,
      root: {
        ...(_a = props.slots) == null ? void 0 : _a.root,
        role: "tree"
      }
    }
  }));
};
var TreeBranch = /* @__PURE__ */ forwardRef11(({ __listScope, ...props }, forwardedRef) => {
  var _a;
  const { headingId } = useListItemContext(LIST_ITEM_NAME, __listScope);
  return /* @__PURE__ */ React27.createElement(List, _extends23({
    collapsible: true
  }, props, {
    labelId: headingId,
    slots: {
      ...props.slots,
      root: {
        ...(_a = props.slots) == null ? void 0 : _a.root,
        role: "none"
      }
    },
    ref: forwardedRef
  }));
});
var TreeItem = (props) => {
  var _a;
  return /* @__PURE__ */ React27.createElement(ListItem, _extends23({}, props, {
    slots: {
      ...props.slots,
      root: {
        ...(_a = props.slots) == null ? void 0 : _a.root,
        role: "treeitem"
      }
    }
  }));
};
var TreeItemHeading = ListItemHeading;
var TreeItemBody = ListItemCollapsibleContent;

// packages/common/react-components/src/components/Tree/JsonTree.tsx
function _extends24() {
  _extends24 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
var isScalar = (data) => !(typeof data === "object" || Array.isArray(data));
var createKey = (key, prefix) => prefix === void 0 ? key : `${prefix}.${key}`;
var JsonTreeBranch = ({ data, prefix }) => {
  const keys = Array.isArray(data) ? Array.from(data.keys()) : Object.keys(data);
  return /* @__PURE__ */ React28.createElement(React28.Fragment, null, keys.map((key) => {
    const value = data[key];
    const id = createKey(String(key), prefix);
    const valueIsScalar = isScalar(value);
    return /* @__PURE__ */ React28.createElement(TreeItem, {
      key: id,
      id,
      collapsible: !valueIsScalar
    }, valueIsScalar ? /* @__PURE__ */ React28.createElement(TreeItemHeading, {
      className: "flex items-center"
    }, String(value)) : /* @__PURE__ */ React28.createElement(React28.Fragment, null, /* @__PURE__ */ React28.createElement(TreeItemHeading, {
      className: "flex items-center"
    }, key), /* @__PURE__ */ React28.createElement(TreeItemBody, {
      asChild: true
    }, /* @__PURE__ */ React28.createElement(TreeBranch, null, /* @__PURE__ */ React28.createElement(JsonTreeBranch, {
      data: value,
      prefix: id
    })))));
  }));
};
var JsonTree = ({ data, ...props }) => {
  return /* @__PURE__ */ React28.createElement(TreeRoot, _extends24({
    density: "fine"
  }, props), /* @__PURE__ */ React28.createElement(JsonTreeBranch, {
    data
  }));
};

// packages/common/react-components/src/components/TreeView/TreeView.tsx
import { CaretDown as CaretDown2, CaretRight as CaretRight2 } from "@phosphor-icons/react";
import React29, { useState as useState6 } from "react";
var isScalar2 = (data) => !(typeof data === "object" || Array.isArray(data));
var createKey2 = (key, prefix) => prefix === void 0 ? key : `${prefix}.${key}`;
var mapJsonToHierarchy = (data, prefix) => {
  if (Array.isArray(data)) {
    return Object.values(data).map((value, i) => {
      const key = String(i);
      const item = {
        id: createKey2(key, prefix)
      };
      if (isScalar2(value)) {
        item.title = String(value);
      } else {
        item.title = String(i);
        item.items = mapJsonToHierarchy(value, key);
      }
      return item;
    });
  }
  return Object.entries(data).map(([key, value]) => {
    const item = {
      id: createKey2(key, prefix),
      title: key,
      items: isScalar2(value) ? void 0 : mapJsonToHierarchy(value, key)
    };
    if (isScalar2(value)) {
      item.value = value;
    }
    return item;
  });
};
var TreeView = ({ items, slots = {}, onSelect, selected, expanded = [] }) => {
  const [openMap, setOpenMap] = useState6(expanded == null ? void 0 : expanded.reduce((map, id) => ({
    ...map,
    [id]: true
  }), {}));
  const handleToggle = (item) => {
    setOpenMap((map) => {
      if (map[item.id]) {
        delete map[item.id];
      } else {
        map[item.id] = true;
      }
      return {
        ...map
      };
    });
  };
  const handleSelection = (item) => {
    onSelect == null ? void 0 : onSelect(item);
  };
  const Item5 = ({ item, depth = 0 }) => {
    var _a, _b, _c, _d, _e;
    const open = openMap[item.id];
    const sub = item.items && item.items.length > 0;
    const { Element, Icon: Icon2 } = item;
    return /* @__PURE__ */ React29.createElement("div", {
      className: "flex flex-1 flex-col"
    }, /* @__PURE__ */ React29.createElement("div", {
      className: mx("flex select-none cursor-pointer pl-3", (_a = slots.root) == null ? void 0 : _a.className, item.id === selected && ((_b = slots.selected) == null ? void 0 : _b.className)),
      onClick: () => handleSelection(item)
    }, /* @__PURE__ */ React29.createElement("div", {
      className: "flex items-center",
      style: {
        marginLeft: depth * 16
      }
    }, /* @__PURE__ */ React29.createElement("div", {
      style: {
        width: 20
      },
      onClick: () => handleToggle(item)
    }, sub && (open ? /* @__PURE__ */ React29.createElement(CaretDown2, {
      className: getSize(3)
    }) : /* @__PURE__ */ React29.createElement(CaretRight2, {
      className: getSize(3)
    }))), Icon2 && /* @__PURE__ */ React29.createElement("div", {
      className: "pr-1"
    }, /* @__PURE__ */ React29.createElement(Icon2, null)), Element || /* @__PURE__ */ React29.createElement("div", {
      className: "flex flex-nowrap",
      style: {
        lineHeight: 1.6
      }
    }, /* @__PURE__ */ React29.createElement("span", {
      className: (_c = slots.title) == null ? void 0 : _c.className
    }, item.title), !item.items && item.value !== void 0 && // eslint-disable-next-line no-octal-escape
    /* @__PURE__ */ React29.createElement("span", {
      className: (_e = (_d = slots.value) == null ? void 0 : _d.className) != null ? _e : 'pl-2 empty:after:content-["\0a0"]'
    }, String(item.value))))), item.items && open && /* @__PURE__ */ React29.createElement("div", null, item.items.map((item2) => /* @__PURE__ */ React29.createElement(Item5, {
      key: item2.id,
      item: item2,
      depth: depth + 1
    }))));
  };
  return /* @__PURE__ */ React29.createElement("div", {
    className: "flex flex-1 flex-col"
  }, /* @__PURE__ */ React29.createElement("div", {
    className: "flex flex-col"
  }, items.map((item) => /* @__PURE__ */ React29.createElement(Item5, {
    key: item.id,
    item
  }))));
};

// packages/common/react-components/src/components/Select/Select.tsx
import { CaretDown as CaretDown3, CaretUp, Check as Check2 } from "@phosphor-icons/react";
import * as SelectPrimitive from "@radix-ui/react-select";
import React30 from "react";
function _extends25() {
  _extends25 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
var Item4 = (props) => {
  const { className, children, ...restProps } = {
    ...props
  };
  return /* @__PURE__ */ React30.createElement(SelectPrimitive.Item, _extends25({
    className: mx("relative flex items-center px-8 py-2 rounded-md text-sm text-gray-700 dark:text-gray-300 font-medium focus:bg-gray-100 dark:focus:bg-gray-900", "radix-disabled:opacity-50", "focus:outline-none select-none", className)
  }, restProps), /* @__PURE__ */ React30.createElement(SelectPrimitive.ItemText, null, children), /* @__PURE__ */ React30.createElement(SelectPrimitive.ItemIndicator, {
    className: "absolute left-2 inline-flex items-center"
  }, /* @__PURE__ */ React30.createElement(Check2, null)));
};
var Select = (props) => {
  const { label, className, placeholder, children, ...rest } = {
    ...props
  };
  return /* @__PURE__ */ React30.createElement(SelectPrimitive.Root, _extends25({}, rest), /* @__PURE__ */ React30.createElement(SelectPrimitive.Trigger, {
    className,
    asChild: true,
    "aria-label": label
  }, /* @__PURE__ */ React30.createElement(Button, null, /* @__PURE__ */ React30.createElement(SelectPrimitive.Value, {
    placeholder
  }), /* @__PURE__ */ React30.createElement(SelectPrimitive.Icon, {
    className: "ml-2"
  }, /* @__PURE__ */ React30.createElement(CaretDown3, null)))), /* @__PURE__ */ React30.createElement(SelectPrimitive.Content, {
    className: "z-[50]"
  }, /* @__PURE__ */ React30.createElement(SelectPrimitive.ScrollUpButton, {
    className: "flex items-center justify-center text-gray-700 dark:text-gray-300"
  }, /* @__PURE__ */ React30.createElement("div", {
    className: ""
  }, /* @__PURE__ */ React30.createElement(CaretUp, null))), /* @__PURE__ */ React30.createElement(SelectPrimitive.Viewport, {
    className: "bg-white dark:bg-gray-800 p-2 rounded-lg shadow-lg"
  }, children), /* @__PURE__ */ React30.createElement(SelectPrimitive.ScrollDownButton, {
    className: "flex items-center justify-center text-gray-700 dark:text-gray-300"
  }, /* @__PURE__ */ React30.createElement(CaretDown3, null))));
};
Select.Group = SelectPrimitive.Group;
Select.Item = Item4;

// packages/common/react-components/src/components/Searchbar/Searchbar.tsx
import { X as X3 } from "@phosphor-icons/react";
import React31, { useState as useState7 } from "react";
var Searchbar = ({ slots = {}, onSearch }) => {
  var _a, _b, _c, _d, _e, _f;
  const [text, setText] = useState7("");
  const handleChange = (text2) => {
    setText(text2);
    onSearch == null ? void 0 : onSearch(text2);
  };
  const handleReset = () => {
    handleChange("");
  };
  return /* @__PURE__ */ React31.createElement("div", {
    className: mx("flex w-full items-center", (_a = slots.root) == null ? void 0 : _a.className)
  }, /* @__PURE__ */ React31.createElement(Input, {
    label: "Search",
    labelVisuallyHidden: true,
    placeholder: (_c = (_b = slots.root) == null ? void 0 : _b.placeholder) != null ? _c : "Search...",
    variant: (_e = (_d = slots.root) == null ? void 0 : _d.variant) != null ? _e : "default",
    slots: {
      root: {
        className: "w-full"
      },
      input: {
        onKeyDown: ({ key }) => key === "Escape" && handleReset(),
        spellCheck: false,
        ...slots.input
      }
    },
    value: text,
    onChange: ({ target }) => handleChange(target.value)
  }), /* @__PURE__ */ React31.createElement("button", {
    className: mx("p-1", (_f = slots.button) == null ? void 0 : _f.className),
    onClick: handleReset
  }, /* @__PURE__ */ React31.createElement(X3, null)));
};

// packages/common/react-components/src/config/tailwind.ts
import tailwindcssForms from "@tailwindcss/forms";
import merge from "lodash.merge";
import tailwindcssLogical from "tailwindcss-logical";
import tailwindcssRadix from "tailwindcss-radix";
import tailwindColors from "tailwindcss/colors";
import defaultConfig from "tailwindcss/stubs/defaultConfig.stub.js";
var configPalettes = {
  red: {
    50: "#ffedea",
    100: "#ffdad4",
    150: "#ffc7bf",
    200: "#ffb2a9",
    250: "#ff9d94",
    300: "#ff877f",
    350: "#ff6d69",
    400: "#fe4e55",
    450: "#f72d45",
    500: "#ea003a",
    550: "#d20034",
    600: "#bb002e",
    650: "#a50029",
    700: "#8f0023",
    750: "#7a001d",
    800: "#660017",
    850: "#520010",
    900: "#3f0006",
    950: "#280300"
  },
  orange: {
    50: "#ffede3",
    100: "#ffdbc7",
    150: "#ffc8ab",
    200: "#ffb48e",
    250: "#ffa072",
    300: "#ff8954",
    350: "#ff7035",
    400: "#f0612c",
    450: "#e15222",
    500: "#d2441b",
    550: "#c13514",
    600: "#b1270e",
    650: "#9f1a09",
    700: "#8d0c05",
    750: "#7b0101",
    800: "#650300",
    850: "#4f0800",
    900: "#380b00",
    950: "#220800"
  },
  amber: {
    50: "#ffeed7",
    100: "#ffddae",
    150: "#ffca84",
    200: "#ffb758",
    250: "#ffa222",
    300: "#f59209",
    350: "#e78300",
    400: "#d97500",
    450: "#ca6700",
    500: "#bc5a00",
    550: "#ad4d00",
    600: "#9d4000",
    650: "#8e3400",
    700: "#7e2900",
    750: "#6d2000",
    800: "#5a1800",
    850: "#471300",
    900: "#340f00",
    950: "#200a00"
  },
  yellow: {
    50: "#fff1b3",
    100: "#ffe055",
    150: "#fad000",
    200: "#f0bf00",
    250: "#e6af00",
    300: "#dba000",
    350: "#cf9100",
    400: "#c38200",
    450: "#b77400",
    500: "#aa6600",
    550: "#9d5800",
    600: "#904b00",
    650: "#823f00",
    700: "#743300",
    750: "#652800",
    800: "#541f00",
    850: "#431700",
    900: "#311200",
    950: "#1f0b00"
  },
  lime: {
    50: "#e4fb8c",
    100: "#cfef63",
    150: "#bde243",
    200: "#acd528",
    250: "#9cc70a",
    300: "#8fb900",
    350: "#83ab00",
    400: "#779d00",
    450: "#6c8f00",
    500: "#608100",
    550: "#557400",
    600: "#4b6700",
    650: "#405a00",
    700: "#364d00",
    750: "#2d4100",
    800: "#253500",
    850: "#1e2900",
    900: "#171e00",
    950: "#0e1200"
  },
  green: {
    50: "#e0f9c8",
    100: "#c2f09d",
    150: "#a6e67b",
    200: "#8bda5e",
    250: "#72ce45",
    300: "#5bc130",
    350: "#44b41b",
    400: "#2ca704",
    450: "#1b9900",
    500: "#0a8a00",
    550: "#007c04",
    600: "#006e0a",
    650: "#00600c",
    700: "#00530d",
    750: "#00460c",
    800: "#003909",
    850: "#022d07",
    900: "#072005",
    950: "#031402"
  },
  emerald: {
    50: "#c5ffc9",
    100: "#7dfd93",
    150: "#4ff17a",
    200: "#24e469",
    250: "#00d561",
    300: "#00c55b",
    350: "#00b656",
    400: "#00a750",
    450: "#00984a",
    500: "#008a44",
    550: "#007b3e",
    600: "#006d37",
    650: "#005f30",
    700: "#00522a",
    750: "#004523",
    800: "#00391c",
    850: "#002c15",
    900: "#00210e",
    950: "#001507"
  },
  teal: {
    50: "#d4fae1",
    100: "#b2f1ca",
    150: "#95e6b7",
    200: "#7adaa6",
    250: "#61cd98",
    300: "#49c08a",
    350: "#30b37e",
    400: "#0fa573",
    450: "#009769",
    500: "#008860",
    550: "#007a57",
    600: "#006c4e",
    650: "#005e45",
    700: "#00513c",
    750: "#004433",
    800: "#00382a",
    850: "#002c21",
    900: "#002018",
    950: "#00140e"
  },
  cyan: {
    50: "#d4f9f7",
    100: "#b5eeec",
    150: "#9be2e1",
    200: "#84d5d5",
    250: "#6fc8ca",
    300: "#5bbabe",
    350: "#47adb2",
    400: "#34a0a6",
    450: "#1d929a",
    500: "#00858e",
    550: "#007780",
    600: "#006973",
    650: "#005c65",
    700: "#004f58",
    750: "#00424b",
    800: "#00363e",
    850: "#002a31",
    900: "#001f25",
    950: "#001417"
  },
  sky: {
    50: "#e9f2ff",
    100: "#d1e5ff",
    150: "#b9d8ff",
    200: "#9fccff",
    250: "#85bffd",
    300: "#6fb2f4",
    350: "#5aa5ea",
    400: "#4498df",
    450: "#2d8bd3",
    500: "#0d7ec5",
    550: "#0071b3",
    600: "#00649f",
    650: "#00578c",
    700: "#004b79",
    750: "#003f67",
    800: "#003355",
    850: "#002844",
    900: "#001d34",
    950: "#001222"
  },
  blue: {
    50: "#edf1ff",
    100: "#dbe2ff",
    150: "#c9d4ff",
    200: "#b6c6ff",
    250: "#a3b8ff",
    300: "#8faaff",
    350: "#799cff",
    400: "#658efb",
    450: "#5281f2",
    500: "#3e74e7",
    550: "#2967dc",
    600: "#0b5ace",
    650: "#004eb9",
    700: "#0043a3",
    750: "#00378d",
    800: "#002d77",
    850: "#002261",
    900: "#00184c",
    950: "#000d39"
  },
  indigo: {
    50: "#f1f0ff",
    100: "#e3e0ff",
    150: "#d4d1ff",
    200: "#c5c1ff",
    250: "#b5b2ff",
    300: "#a5a3ff",
    350: "#9495ff",
    400: "#8186ff",
    450: "#7079f7",
    500: "#5e6ced",
    550: "#4c5fe2",
    600: "#3953d6",
    650: "#2248c9",
    700: "#003cb9",
    750: "#00329e",
    800: "#002984",
    850: "#001f6b",
    900: "#08174d",
    950: "#0e0d2b"
  },
  violet: {
    50: "#f2efff",
    100: "#e5dfff",
    150: "#d8cfff",
    200: "#cbbfff",
    250: "#beafff",
    300: "#b0a0ff",
    350: "#a391f9",
    400: "#9582f2",
    450: "#8874e9",
    500: "#7a66df",
    550: "#6d59d5",
    600: "#5f4cca",
    650: "#513fbe",
    700: "#4332b1",
    750: "#3425a5",
    800: "#251997",
    850: "#100b8a",
    900: "#0e066a",
    950: "#150638"
  },
  purple: {
    50: "#f7eeff",
    100: "#eedcff",
    150: "#e4cbfe",
    200: "#d9bbfa",
    250: "#cdabf4",
    300: "#c29cee",
    350: "#b58de6",
    400: "#a97ede",
    450: "#9c70d4",
    500: "#8f62cb",
    550: "#8254c0",
    600: "#7547b5",
    650: "#683aa9",
    700: "#5a2d9d",
    750: "#4d2091",
    800: "#3f1384",
    850: "#310477",
    900: "#250656",
    950: "#19072d"
  },
  fuchsia: {
    50: "#fdecff",
    100: "#fad8ff",
    150: "#f6c4ff",
    200: "#efb2fa",
    250: "#e6a1f3",
    300: "#db90eb",
    350: "#d080e1",
    400: "#c570d7",
    450: "#b961cc",
    500: "#ac52c1",
    550: "#9f43b5",
    600: "#9234a9",
    650: "#85249c",
    700: "#77128f",
    750: "#680080",
    800: "#57006a",
    850: "#450056",
    900: "#350042",
    950: "#24002c"
  },
  pink: {
    50: "#ffecf5",
    100: "#ffd8ea",
    150: "#ffc4e0",
    200: "#ffaed5",
    250: "#ff98cc",
    300: "#fc82c1",
    350: "#f170b5",
    400: "#e560a8",
    450: "#d94f9c",
    500: "#cb3e8f",
    550: "#bd2c82",
    600: "#af1776",
    650: "#9f0068",
    700: "#8a005a",
    750: "#75004c",
    800: "#61003e",
    850: "#4e0031",
    900: "#3c0025",
    950: "#290018"
  },
  rose: {
    50: "#ffedee",
    100: "#ffd9dd",
    150: "#ffc5cc",
    200: "#ffb1bb",
    250: "#ff9baa",
    300: "#ff8499",
    350: "#ff6a89",
    400: "#fd4c79",
    450: "#ef396c",
    500: "#e02360",
    550: "#d00054",
    600: "#ba004a",
    650: "#a30040",
    700: "#8e0037",
    750: "#79002d",
    800: "#650024",
    850: "#51001c",
    900: "#3e0013",
    950: "#2b0007"
  },
  neutral: {
    // Key color #707076
    // Hue torsion 0.0º
    // C*CP black 0.80, C*CP white 0.88
    950: "#101012",
    900: "#1b1b1e",
    850: "#252529",
    800: "#303034",
    750: "#3b3b3f",
    700: "#46464b",
    650: "#525257",
    600: "#5e5e64",
    550: "#6a6a70",
    500: "#77767d",
    450: "#838389",
    400: "#909096",
    350: "#9d9da4",
    300: "#ababb1",
    250: "#b8b8be",
    200: "#c6c6cc",
    150: "#d4d4d9",
    100: "#e2e2e7",
    75: "#eaeaee",
    50: "#f1f1f4",
    25: "#f8f8fa"
  },
  primary: {
    // Key color #00e0e0
    // Hue torsion -73.5º
    // C*CP black 1.0, C*CP white 1.0
    950: "#110c2a",
    900: "#101940",
    850: "#0b2453",
    800: "#003164",
    750: "#003e70",
    700: "#004b7c",
    650: "#005887",
    600: "#006693",
    550: "#00749e",
    500: "#0082a9",
    450: "#0091b3",
    400: "#00a0be",
    350: "#00afc7",
    300: "#00bed0",
    250: "#00ced8",
    200: "#00dedf",
    150: "#3cede4",
    100: "#69fae8",
    50: "#b9ffee"
  }
};
var tailwindConfig = ({ env = "production", root = "./", content = [], extensions = [] }) => ({
  darkMode: "class",
  theme: {
    fontFamily: {
      body: [
        "Roboto FlexVariable",
        ...defaultConfig.theme.fontFamily.sans
      ],
      display: [
        "Space GroteskVariable",
        "Roboto FlexVariable",
        ...defaultConfig.theme.fontFamily.sans
      ],
      mono: [
        "Fira CodeVariable",
        ...defaultConfig.theme.fontFamily.mono
      ]
    },
    extend: merge({
      colors: {
        ...configPalettes,
        slate: tailwindColors.slate,
        gray: tailwindColors.gray,
        zinc: tailwindColors.zinc,
        stone: tailwindColors.stone,
        success: configPalettes.emerald,
        warning: configPalettes.amber,
        error: configPalettes.rose,
        info: configPalettes.cyan,
        transparent: "transparent",
        current: "currentColor",
        white: "#ffffff",
        black: "#000000"
      },
      fontSize: {
        // Base size 16px
        // Scale 1.125
        xs: [
          "0.790rem",
          {
            lineHeight: "1rem"
          }
        ],
        sm: [
          "0.889rem",
          {
            lineHeight: "1.25rem"
          }
        ],
        base: [
          "1rem",
          {
            lineHeight: "1.5rem"
          }
        ],
        lg: [
          "1.125rem",
          {
            lineHeight: "1.75rem"
          }
        ],
        xl: [
          "1.266rem",
          {
            lineHeight: "1.75rem"
          }
        ],
        "2xl": [
          "1.424rem",
          {
            lineHeight: "2rem"
          }
        ],
        "3xl": [
          "1.602rem",
          {
            lineHeight: "2.25rem"
          }
        ],
        "4xl": [
          "1.802rem",
          {
            lineHeight: "2.5rem"
          }
        ],
        "5xl": [
          "2.027rem",
          {
            lineHeight: "2.5rem"
          }
        ],
        "6xl": [
          "2.281rem",
          {
            lineHeight: "2.5rem"
          }
        ],
        "7xl": [
          "2.566rem",
          {
            lineHeight: "2.75rem"
          }
        ],
        "8xl": [
          "2.887rem",
          {
            lineHeight: "3rem"
          }
        ],
        "9xl": [
          "3.247rem",
          {
            lineHeight: "3.25rem"
          }
        ]
      },
      outlineWidth: {
        3: "3px"
      },
      boxShadow: {
        slider: "0 0 0 5px rgba(0, 0, 0, 0.3)"
      },
      keyframes: {
        // Dropdown menu
        "scale-in": {
          "0%": {
            opacity: "0",
            transform: "scale(0)"
          },
          "100%": {
            opacity: "1",
            transform: "scale(1)"
          }
        },
        "slide-down": {
          "0%": {
            opacity: "0",
            transform: "translateY(-10px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)"
          }
        },
        "slide-up": {
          "0%": {
            opacity: "0",
            transform: "translateY(10px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)"
          }
        },
        // Tooltip
        "slide-up-fade": {
          "0%": {
            opacity: "0",
            transform: "translateY(2px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)"
          }
        },
        "slide-right-fade": {
          "0%": {
            opacity: "0",
            transform: "translateX(-2px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateX(0)"
          }
        },
        "slide-down-fade": {
          "0%": {
            opacity: "0",
            transform: "translateY(-2px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)"
          }
        },
        "slide-left-fade": {
          "0%": {
            opacity: "0",
            transform: "translateX(2px)"
          },
          "100%": {
            opacity: "1",
            transform: "translateX(0)"
          }
        },
        // Navigation menu
        "enter-from-right": {
          "0%": {
            transform: "translateX(200px)",
            opacity: "0"
          },
          "100%": {
            transform: "translateX(0)",
            opacity: "1"
          }
        },
        "enter-from-left": {
          "0%": {
            transform: "translateX(-200px)",
            opacity: "0"
          },
          "100%": {
            transform: "translateX(0)",
            opacity: "1"
          }
        },
        "exit-to-right": {
          "0%": {
            transform: "translateX(0)",
            opacity: "1"
          },
          "100%": {
            transform: "translateX(200px)",
            opacity: "0"
          }
        },
        "exit-to-left": {
          "0%": {
            transform: "translateX(0)",
            opacity: "1"
          },
          "100%": {
            transform: "translateX(-200px)",
            opacity: "0"
          }
        },
        "scale-in-content": {
          "0%": {
            transform: "rotateX(-30deg) scale(0.9)",
            opacity: "0"
          },
          "100%": {
            transform: "rotateX(0deg) scale(1)",
            opacity: "1"
          }
        },
        "scale-out-content": {
          "0%": {
            transform: "rotateX(0deg) scale(1)",
            opacity: "1"
          },
          "100%": {
            transform: "rotateX(-10deg) scale(0.95)",
            opacity: "0"
          }
        },
        "fade-in": {
          "0%": {
            opacity: "0"
          },
          "100%": {
            opacity: "1"
          }
        },
        "fade-out": {
          "0%": {
            opacity: "1"
          },
          "100%": {
            opacity: "0"
          }
        },
        // Toast
        "toast-hide": {
          "0%": {
            opacity: "1"
          },
          "100%": {
            opacity: "0"
          }
        },
        "toast-slide-in-right": {
          "0%": {
            transform: "translateX(calc(100% + 1rem))"
          },
          "100%": {
            transform: "translateX(0)"
          }
        },
        "toast-slide-in-bottom": {
          "0%": {
            transform: "translateY(calc(100% + 1rem))"
          },
          "100%": {
            transform: "translateY(0)"
          }
        },
        "toast-swipe-out": {
          "0%": {
            transform: "translateX(var(--radix-toast-swipe-end-x))"
          },
          "100%": {
            transform: "translateX(calc(100% + 1rem))"
          }
        },
        // Shimmer
        "shimmer-loop": {
          "100%": {
            transform: "translateX(100%)"
          }
        }
      },
      animation: {
        // Dropdown menu
        "scale-in": "scale-in 0.2s ease-in-out",
        "slide-down": "slide-down 0.6s cubic-bezier(0.16, 1, 0.3, 1)",
        "slide-up": "slide-up 0.6s cubic-bezier(0.16, 1, 0.3, 1)",
        // Tooltip
        "slide-up-fade": "slide-up-fade 0.4s cubic-bezier(0.16, 1, 0.3, 1)",
        "slide-right-fade": "slide-right-fade 0.4s cubic-bezier(0.16, 1, 0.3, 1)",
        "slide-down-fade": "slide-down-fade 0.4s cubic-bezier(0.16, 1, 0.3, 1)",
        "slide-left-fade": "slide-left-fade 0.4s cubic-bezier(0.16, 1, 0.3, 1)",
        // Navigation menu
        "enter-from-right": "enter-from-right 0.25s ease",
        "enter-from-left": "enter-from-left 0.25s ease",
        "exit-to-right": "exit-to-right 0.25s ease",
        "exit-to-left": "exit-to-left 0.25s ease",
        "scale-in-content": "scale-in-content 0.2s ease",
        "scale-out-content": "scale-out-content 0.2s ease",
        "fade-in": "fade-in 0.2s ease",
        "fade-out": "fade-out 0.2s ease",
        // Toast
        "toast-hide": "toast-hide 100ms ease-in forwards",
        "toast-slide-in-right": "toast-slide-in-right 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        "toast-slide-in-bottom": "toast-slide-in-bottom 150ms cubic-bezier(0.16, 1, 0.3, 1)",
        "toast-swipe-out": "toast-swipe-out 100ms ease-out forwards",
        // Shimmer
        shimmer: "shimmer-loop 2s infinite"
      }
    }, ...extensions)
  },
  plugins: [
    tailwindcssLogical,
    tailwindcssForms,
    tailwindcssRadix()
  ],
  ...env === "development" && {
    mode: "jit"
  },
  content,
  future: {
    hoverOnlyWhenSupported: true
  }
});
export {
  Alert,
  Avatar,
  Button,
  ButtonGroup,
  Checkbox,
  CompactQrCode,
  CompoundButton,
  DensityContext,
  DensityProvider,
  Dialog,
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuItem,
  DropdownMenuItemIndicator,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  ElevationContext,
  ElevationProvider,
  FullQrCode,
  Group,
  Heading,
  Input,
  JsonTree,
  LIST_ITEM_NAME,
  LIST_NAME,
  List,
  ListItem,
  ListItemCollapsibleContent,
  ListItemDragHandle,
  ListItemEndcap,
  ListItemHeading,
  ListItemOpenTrigger,
  Loading,
  NavMenu,
  NavMenuLink,
  NavMenuSeparatorItem,
  Popover,
  QrCode,
  Searchbar,
  Select,
  Tag,
  ThemeContext,
  ThemeProvider,
  Toast,
  TooltipContent,
  TooltipRoot,
  TooltipTrigger,
  Trans,
  TreeBranch,
  TreeItem,
  TreeItemBody,
  TreeItemHeading,
  TreeRoot,
  TreeView,
  alertValence,
  arrayMove,
  arraySwap,
  buttonCoarse,
  buttonFine,
  buttonStyles,
  coarseBlockSize,
  coarseButtonPadding,
  coarseTextPadding,
  configPalettes,
  createListItemScope,
  createListScope,
  dataDisabled,
  defaultActive,
  defaultAppButtonColors,
  defaultBlockSeparator,
  defaultCoarse,
  defaultDescription,
  defaultDisabled,
  defaultDropdownMenuItem,
  defaultFine,
  defaultFocus,
  defaultGroup,
  defaultInlineSeparator,
  defaultInput,
  defaultOsButtonColors,
  defaultOverlay,
  defaultPlaceholder,
  defaultShimmer,
  defaultTooltip,
  densityBlockSize,
  errorAlertColors,
  errorInputValence,
  errorText,
  fineBlockSize,
  fineButtonPadding,
  fineTextPadding,
  focus,
  getSize,
  getSizeHeight,
  getSizeWidth,
  ghostAppButtonColors,
  hasIosKeyboard,
  hover,
  infoAlertColors,
  infoInputValence,
  infoText,
  inputValence,
  mapJsonToHierarchy,
  mx,
  neutralAlertColors,
  neutralInputValence,
  osActive,
  osFocus,
  primaryAppButtonColors,
  primaryDescription,
  randomString,
  sizeHeightMap,
  sizeWidthMap,
  staticFocus,
  staticInput,
  strongShimmer,
  subduedFocus,
  subduedInput,
  successAlertColors,
  successInputValence,
  successText,
  tailwindConfig,
  themeVariantFocus,
  themeVariantSubduedFocus,
  useButtonShadow,
  useDensityContext,
  useElevationContext,
  useForwardedRef,
  useId,
  useIsFocused,
  useListContext,
  useListDensity,
  useListItemContext,
  useMediaQuery,
  useThemeContext,
  useTranslation,
  useTranslationsContext,
  valenceColorText,
  warningAlertColors,
  warningInputValence,
  warningText
};
//# sourceMappingURL=index.mjs.map
