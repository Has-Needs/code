// packages/common/errors/src/base.ts
var BaseError = class _BaseError extends Error {
  static extend(code) {
    return class extends _BaseError {
      static {
        this.code = code;
      }
      static is(error) {
        return typeof error === "object" && error !== null && "code" in error && error.code === code;
      }
      constructor(message, options) {
        super(code, message, options);
      }
    };
  }
  #code;
  #context;
  constructor(code, message, options) {
    super(message, options);
    this.#code = code;
    this.#context = options?.context ?? {};
    Object.setPrototypeOf(this, new.target.prototype);
  }
  get name() {
    return this.#code;
  }
  get code() {
    return this.#code;
  }
  get context() {
    return this.#context;
  }
};

// packages/common/errors/src/errors.ts
var TimeoutError = class extends BaseError.extend("TIMEOUT") {
};
var AbortedError = class extends BaseError.extend("ABORTED") {
};
var UnimplementedError = class extends BaseError.extend("UNIMPLEMENTED") {
};
var ApiError = class extends BaseError.extend("API_ERROR") {
};
var SystemError = class extends BaseError.extend("SYSTEM_ERROR") {
};
var InternalError = class extends BaseError.extend("INTERNAL_ERROR") {
};
export {
  AbortedError,
  ApiError,
  BaseError,
  InternalError,
  SystemError,
  TimeoutError,
  UnimplementedError
};
//# sourceMappingURL=index.mjs.map
