export type BaseErrorOptions = {
    /**
     * The cause of the error.
     * An instance of Error.
     */
    cause?: unknown;
    /**
     * Structured details about the error.
     */
    context?: Record<string, unknown>;
};
export declare class BaseError extends Error {
    #private;
    static extend(code: string): {
        new (message: string, options?: BaseErrorOptions): {
            "__#1@#code": string;
            "__#1@#context": Record<string, unknown>;
            readonly name: string;
            readonly code: string;
            readonly context: Record<string, unknown>;
            message: string;
            stack?: string;
            cause?: unknown;
        };
        code: string;
        is(error: unknown): error is BaseError;
        extend(code: string): /*elided*/ any;
        captureStackTrace(targetObject: object, constructorOpt?: Function): void;
        prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
        stackTraceLimit: number;
    };
    constructor(code: string, message: string, options?: BaseErrorOptions);
    get name(): string;
    get code(): string;
    get context(): Record<string, unknown>;
}
//# sourceMappingURL=base.d.ts.map