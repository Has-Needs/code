import { BaseError } from './base';
declare const TimeoutError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class TimeoutError extends TimeoutError_base {
}
declare const AbortedError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class AbortedError extends AbortedError_base {
}
declare const UnimplementedError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class UnimplementedError extends UnimplementedError_base {
}
declare const ApiError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class ApiError extends ApiError_base {
}
declare const SystemError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class SystemError extends SystemError_base {
}
declare const InternalError_base: {
    new (message: string, options?: import("./base").BaseErrorOptions): {
        "__#1@#code": string;
        "__#1@#context": Record<string, unknown>;
        readonly name: string;
        readonly code: string;
        readonly context: Record<string, unknown>;
        message: string;
        stack?: string;
        cause?: unknown;
    };
    code: string;
    is(error: unknown): error is BaseError;
    extend(code: string): /*elided*/ any;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare class InternalError extends InternalError_base {
}
export {};
//# sourceMappingURL=errors.d.ts.map