import type { CheckboxProps } from '@radix-ui/react-checkbox';
import { type CollapsibleContentProps, type CollapsibleTriggerProps } from '@radix-ui/react-collapsible';
import * as Collapsible from '@radix-ui/react-collapsible';
import { type Scope } from '@radix-ui/react-context';
import React, { type ComponentProps, type ComponentPropsWithoutRef, type Dispatch, type ForwardRefExoticComponent, type RefAttributes, type SetStateAction } from 'react';
declare const LIST_ITEM_NAME = "ListItem";
type ListItemScopedProps<P> = P & {
    __listItemScope?: Scope;
};
interface ListItemData {
    id: string;
    labelId?: string;
    selected?: CheckboxProps['checked'];
    open?: boolean;
}
type ListItemProps = Omit<ListItemData, 'id'> & {
    collapsible?: boolean;
} & RefAttributes<HTMLLIElement> & ComponentPropsWithoutRef<'li'> & {
    defaultOpen?: boolean;
    onOpenChange?: (nextOpen: boolean) => void;
} & {
    onSelectedChange?: CheckboxProps['onCheckedChange'];
    defaultSelected?: CheckboxProps['defaultChecked'];
};
declare const createListItemScope: import("@radix-ui/react-context").CreateScope;
type ListItemContextValue = {
    headingId: string;
    open: boolean;
    selected: CheckboxProps['checked'];
    setSelected: Dispatch<SetStateAction<CheckboxProps['checked']>>;
};
declare const useListItemContext: (consumerName: string, scope: Scope<ListItemContextValue | undefined>) => ListItemContextValue;
type ListItemHeadingProps = ListItemScopedProps<Omit<ComponentPropsWithoutRef<'p'>, 'id'>> & RefAttributes<HTMLParagraphElement> & {
    asChild?: boolean;
};
declare const ListItemHeading: React.ForwardRefExoticComponent<Omit<ListItemHeadingProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
type ListItemOpenTriggerProps = ListItemScopedProps<CollapsibleTriggerProps>;
declare const ListItemOpenTrigger: React.ForwardRefExoticComponent<CollapsibleTriggerProps & React.RefAttributes<HTMLButtonElement>>;
type ListItemCollapsibleContentProps = ComponentProps<typeof Collapsible.Content>;
declare const ListItemCollapsibleContent: ForwardRefExoticComponent<CollapsibleContentProps>;
declare const ListItem: React.ForwardRefExoticComponent<Omit<ListItemProps, "ref"> & React.RefAttributes<HTMLLIElement>>;
export { ListItem, ListItemHeading, ListItemCollapsibleContent, ListItemOpenTrigger, createListItemScope, useListItemContext, LIST_ITEM_NAME, };
export type { ListItemProps, ListItemHeadingProps, ListItemCollapsibleContentProps, ListItemOpenTriggerProps, ListItemScopedProps, };
//# sourceMappingURL=ListItem.d.ts.map