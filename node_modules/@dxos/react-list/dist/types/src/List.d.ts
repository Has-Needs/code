import { type Scope } from '@radix-ui/react-context';
import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentPropsWithRef } from 'react';
declare const LIST_NAME = "List";
type ListScopedProps<P> = P & {
    __listScope?: Scope;
};
type ListVariant = 'ordered' | 'unordered';
type ListItemSizes = 'one' | 'many';
type ListProps = ComponentPropsWithRef<typeof Primitive.ol> & {
    selectable?: boolean;
    variant?: ListVariant;
    itemSizes?: ListItemSizes;
};
declare const createListScope: import("@radix-ui/react-context").CreateScope;
type ListContextValue = {
    selectable: Exclude<ListProps['selectable'], undefined>;
    variant: Exclude<ListProps['variant'], undefined>;
    itemSizes?: ListItemSizes;
};
declare const useListContext: (consumerName: string, scope: Scope<ListContextValue | undefined>) => ListContextValue;
declare const List: React.ForwardRefExoticComponent<Omit<ListProps, "ref"> & React.RefAttributes<HTMLOListElement>>;
export { List, createListScope, useListContext, LIST_NAME };
export type { ListProps, ListVariant, ListScopedProps };
//# sourceMappingURL=List.d.ts.map