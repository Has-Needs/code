import { createRequire } from 'node:module';const require = createRequire(import.meta.url);

// packages/ui/primitives/react-list/src/List.tsx
import { useSignals as _useSignals } from "@preact-signals/safe-react/tracking";
import { createContextScope } from "@radix-ui/react-context";
import { Primitive } from "@radix-ui/react-primitive";
import React, { forwardRef } from "react";
var LIST_NAME = "List";
var [createListContext, createListScope] = createContextScope(LIST_NAME, []);
var [ListProvider, useListContext] = createListContext(LIST_NAME);
var List = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
  var _effect = _useSignals();
  try {
    const { __listScope, variant = "ordered", selectable = false, itemSizes, children, ...rootProps } = props;
    const ListRoot = variant === "ordered" ? Primitive.ol : Primitive.ul;
    return /* @__PURE__ */ React.createElement(ListRoot, {
      ...selectable && {
        role: "listbox",
        "aria-multiselectable": true
      },
      ...rootProps,
      ref: forwardedRef
    }, /* @__PURE__ */ React.createElement(ListProvider, {
      scope: __listScope,
      variant,
      selectable,
      itemSizes
    }, children));
  } finally {
    _effect.f();
  }
});
List.displayName = LIST_NAME;

// packages/ui/primitives/react-list/src/ListItem.tsx
import { useSignals as _useSignals2 } from "@preact-signals/safe-react/tracking";
import * as Collapsible from "@radix-ui/react-collapsible";
import { createContextScope as createContextScope2 } from "@radix-ui/react-context";
import { Primitive as Primitive2 } from "@radix-ui/react-primitive";
import { Slot } from "@radix-ui/react-slot";
import { useControllableState } from "@radix-ui/react-use-controllable-state";
import React2, { forwardRef as forwardRef2 } from "react";
import { useId } from "@dxos/react-hooks";
var LIST_ITEM_NAME = "ListItem";
var [createListItemContext, createListItemScope] = createContextScope2(LIST_ITEM_NAME, []);
var [ListItemProvider, useListItemContext] = createListItemContext(LIST_ITEM_NAME);
var ListItemHeading = /* @__PURE__ */ forwardRef2(({ children, asChild, __listItemScope, ...props }, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { headingId } = useListItemContext(LIST_ITEM_NAME, __listItemScope);
    const Root2 = asChild ? Slot : Primitive2.div;
    return /* @__PURE__ */ React2.createElement(Root2, {
      ...props,
      id: headingId,
      ref: forwardedRef
    }, children);
  } finally {
    _effect.f();
  }
});
var ListItemOpenTrigger = Collapsible.Trigger;
var ListItemCollapsibleContent = Collapsible.Content;
var ListItem = /* @__PURE__ */ forwardRef2((props, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const id = useId("listItem", props.id);
    const { __listScope, __listItemScope, children, selected: propsSelected, defaultSelected, onSelectedChange, open: propsOpen, defaultOpen, onOpenChange, collapsible, labelId, ...listItemProps } = props;
    const { selectable } = useListContext(LIST_NAME, __listScope);
    const [selected = false, setSelected] = useControllableState({
      prop: propsSelected,
      defaultProp: defaultSelected,
      onChange: onSelectedChange
    });
    const [open = false, setOpen] = useControllableState({
      prop: propsOpen,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const headingId = useId("listItem__heading", labelId);
    const listItem = /* @__PURE__ */ React2.createElement(Primitive2.li, {
      ...listItemProps,
      id,
      ref: forwardedRef,
      "aria-labelledby": headingId,
      ...selectable && {
        role: "option",
        "aria-selected": !!selected
      },
      ...open && {
        "aria-expanded": true
      }
    }, children);
    return /* @__PURE__ */ React2.createElement(ListItemProvider, {
      scope: __listItemScope,
      headingId,
      open,
      selected,
      setSelected
    }, collapsible ? /* @__PURE__ */ React2.createElement(Collapsible.Root, {
      asChild: true,
      open,
      onOpenChange: setOpen
    }, listItem) : listItem);
  } finally {
    _effect.f();
  }
});
ListItem.displayName = LIST_ITEM_NAME;
export {
  LIST_ITEM_NAME,
  LIST_NAME,
  List,
  ListItem,
  ListItemCollapsibleContent,
  ListItemHeading,
  ListItemOpenTrigger,
  createListItemScope,
  createListScope,
  useListContext,
  useListItemContext
};
//# sourceMappingURL=index.mjs.map
