{
  "version": 3,
  "sources": ["../../../src/List.tsx", "../../../src/ListItem.tsx"],
  "sourcesContent": ["//\n// Copyright 2023 DXOS.org\n//\n\nimport { createContextScope, type Scope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\n// TODO(thure): A lot of the accessible affordances for this kind of thing need to be implemented per https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\n\nconst LIST_NAME = 'List';\n\ntype ListScopedProps<P> = P & { __listScope?: Scope };\n\ntype ListVariant = 'ordered' | 'unordered';\n\ntype ListItemSizes = 'one' | 'many';\n\ntype ListProps = ComponentPropsWithRef<typeof Primitive.ol> & {\n  selectable?: boolean;\n  variant?: ListVariant;\n  itemSizes?: ListItemSizes;\n};\n\nconst [createListContext, createListScope] = createContextScope(LIST_NAME, []);\n\ntype ListContextValue = {\n  selectable: Exclude<ListProps['selectable'], undefined>;\n  variant: Exclude<ListProps['variant'], undefined>;\n  itemSizes?: ListItemSizes;\n};\n\nconst [ListProvider, useListContext] = createListContext<ListContextValue>(LIST_NAME);\n\nconst List = forwardRef<HTMLOListElement, ListProps>((props: ListScopedProps<ListProps>, forwardedRef) => {\n  const { __listScope, variant = 'ordered', selectable = false, itemSizes, children, ...rootProps } = props;\n  const ListRoot = variant === 'ordered' ? Primitive.ol : Primitive.ul;\n  return (\n    <ListRoot {...(selectable && { role: 'listbox', 'aria-multiselectable': true })} {...rootProps} ref={forwardedRef}>\n      <ListProvider\n        {...{\n          scope: __listScope,\n          variant,\n          selectable,\n          itemSizes,\n        }}\n      >\n        {children}\n      </ListProvider>\n    </ListRoot>\n  );\n});\n\nList.displayName = LIST_NAME;\n\nexport { List, createListScope, useListContext, LIST_NAME };\n\nexport type { ListProps, ListVariant, ListScopedProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport type { CheckboxProps } from '@radix-ui/react-checkbox';\nimport { type CollapsibleContentProps, type CollapsibleTriggerProps } from '@radix-ui/react-collapsible';\nimport * as Collapsible from '@radix-ui/react-collapsible';\nimport { createContextScope, type Scope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport React, {\n  type ComponentProps,\n  type ComponentPropsWithoutRef,\n  type Dispatch,\n  type ElementRef,\n  forwardRef,\n  type ForwardRefExoticComponent,\n  type RefAttributes,\n  type SetStateAction,\n} from 'react';\n\nimport { useId } from '@dxos/react-hooks';\n\nimport { LIST_NAME, type ListScopedProps, useListContext } from './List';\n\nconst LIST_ITEM_NAME = 'ListItem';\n\ntype ListItemScopedProps<P> = P & { __listItemScope?: Scope };\n\ninterface ListItemData {\n  id: string;\n  labelId?: string;\n  selected?: CheckboxProps['checked'];\n  open?: boolean;\n}\n\ntype ListItemProps = Omit<ListItemData, 'id'> & { collapsible?: boolean } & RefAttributes<HTMLLIElement> &\n  ComponentPropsWithoutRef<'li'> & {\n    defaultOpen?: boolean;\n    onOpenChange?: (nextOpen: boolean) => void;\n  } & {\n    onSelectedChange?: CheckboxProps['onCheckedChange'];\n    defaultSelected?: CheckboxProps['defaultChecked'];\n  };\n\ntype ListItemElement = ElementRef<'li'>;\n\nconst [createListItemContext, createListItemScope] = createContextScope(LIST_ITEM_NAME, []);\n\ntype ListItemContextValue = {\n  headingId: string;\n  open: boolean;\n  selected: CheckboxProps['checked'];\n  setSelected: Dispatch<SetStateAction<CheckboxProps['checked']>>;\n};\n\nconst [ListItemProvider, useListItemContext] = createListItemContext<ListItemContextValue>(LIST_ITEM_NAME);\n\ntype ListItemHeadingProps = ListItemScopedProps<Omit<ComponentPropsWithoutRef<'p'>, 'id'>> &\n  RefAttributes<HTMLParagraphElement> & {\n    asChild?: boolean;\n  };\n\nconst ListItemHeading = forwardRef<HTMLDivElement, ListItemHeadingProps>(\n  ({ children, asChild, __listItemScope, ...props }, forwardedRef) => {\n    const { headingId } = useListItemContext(LIST_ITEM_NAME, __listItemScope);\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root {...props} id={headingId} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype ListItemOpenTriggerProps = ListItemScopedProps<CollapsibleTriggerProps>;\n\nconst ListItemOpenTrigger = Collapsible.Trigger;\n\ntype ListItemCollapsibleContentProps = ComponentProps<typeof Collapsible.Content>;\n\nconst ListItemCollapsibleContent: ForwardRefExoticComponent<CollapsibleContentProps> = Collapsible.Content;\n\nconst ListItem = forwardRef<ListItemElement, ListItemProps>(\n  (props: ListItemScopedProps<ListScopedProps<ListItemProps>>, forwardedRef) => {\n    const id = useId('listItem', props.id);\n\n    const {\n      __listScope,\n      __listItemScope,\n      children,\n      selected: propsSelected,\n      defaultSelected,\n      onSelectedChange,\n      open: propsOpen,\n      defaultOpen,\n      onOpenChange,\n      collapsible,\n      labelId,\n      ...listItemProps\n    } = props;\n    const { selectable } = useListContext(LIST_NAME, __listScope);\n\n    const [selected = false, setSelected] = useControllableState({\n      prop: propsSelected,\n      defaultProp: defaultSelected,\n      onChange: onSelectedChange,\n    });\n\n    const [open = false, setOpen] = useControllableState({\n      prop: propsOpen,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    const headingId = useId('listItem__heading', labelId);\n\n    const listItem = (\n      <Primitive.li\n        {...listItemProps}\n        id={id}\n        ref={forwardedRef}\n        aria-labelledby={headingId}\n        {...(selectable && { role: 'option', 'aria-selected': !!selected })}\n        {...(open && { 'aria-expanded': true })}\n      >\n        {children}\n      </Primitive.li>\n    );\n\n    return (\n      <ListItemProvider\n        scope={__listItemScope}\n        headingId={headingId}\n        open={open}\n        selected={selected}\n        setSelected={setSelected}\n      >\n        {collapsible ? (\n          <Collapsible.Root asChild open={open} onOpenChange={setOpen}>\n            {listItem}\n          </Collapsible.Root>\n        ) : (\n          listItem\n        )}\n      </ListItemProvider>\n    );\n  },\n);\n\nListItem.displayName = LIST_ITEM_NAME;\n\nexport {\n  ListItem,\n  ListItemHeading,\n  ListItemCollapsibleContent,\n  ListItemOpenTrigger,\n  createListItemScope,\n  useListItemContext,\n  LIST_ITEM_NAME,\n};\n\nexport type {\n  ListItemProps,\n  ListItemHeadingProps,\n  ListItemCollapsibleContentProps,\n  ListItemOpenTriggerProps,\n  ListItemScopedProps,\n};\n"],
  "mappings": "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",
  "names": ["import_react_context", "import_react_primitive", "import_react", "LIST_NAME", "createListContext", "createListScope", "createContextScope", "ListProvider", "useListContext", "List", "forwardRef", "props", "forwardedRef", "__listScope", "variant", "selectable", "itemSizes", "children", "rootProps", "ListRoot", "Primitive", "ol", "ul", "React", "role", "ref", "scope", "displayName", "LIST_ITEM_NAME", "createListItemContext", "createListItemScope", "ListItemProvider", "useListItemContext", "ListItemHeading", "asChild", "__listItemScope", "headingId", "Root", "Slot", "div", "id", "ListItemOpenTrigger", "Trigger", "ListItemCollapsibleContent", "Content", "ListItem", "useId", "selected", "propsSelected", "defaultSelected", "onSelectedChange", "open", "propsOpen", "defaultOpen", "onOpenChange", "collapsible", "labelId", "listItemProps", "setSelected", "useControllableState", "prop", "defaultProp", "onChange", "setOpen", "listItem", "li", "aria-labelledby"]
}
