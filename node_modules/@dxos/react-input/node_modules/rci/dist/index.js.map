{"version":3,"file":"index.js","sources":["../src/components/Context.tsx","../src/utils/getSegmentArray.tsx","../src/components/RCI.tsx","../src/components/CodeInput.tsx","../src/utils/getSegmentCssWidth.ts"],"sourcesContent":["import React, { useContext } from 'react'\nimport { useCodeInput } from 'use-code-input'\n\ntype SelectionValue = ReturnType<typeof useCodeInput>\n\nconst LengthContext = React.createContext<number>(6)\nexport const useLengthContext = () => useContext(LengthContext)\n\nconst SelectionContext = React.createContext<SelectionValue | null>(null)\nexport const useSelectionContext = () => useContext(SelectionContext)\n\ntype ContextProps = {\n  length: number\n  selection: SelectionValue\n  children?: React.ReactNode | undefined\n}\nexport const Context = (props: ContextProps) => (\n  <LengthContext.Provider value={props.length}>\n    <SelectionContext.Provider value={props.selection}>\n      {props.children}\n    </SelectionContext.Provider>\n  </LengthContext.Provider>\n)\n","import { SegmentProps } from '../types/SegmentProps'\n\nconst getSegmentState = (\n  index: number,\n  [start, end]: SegmentProps['selection'],\n): SegmentProps['state'] => {\n  if (typeof start !== 'number') return null\n  if (typeof end !== 'number') return null\n  if (start === end && start === index) return 'cursor'\n  if (index >= start && index < end) return 'selected'\n  return null\n}\n\nconst getSegmentPosition = (\n  index: number,\n  [start, end]: SegmentProps['selection'],\n): SegmentProps['position'] => {\n  return index < start! ? -1 : index >= end! ? 1 : 0\n}\n\nexport const getSegmentArray = (\n  size: number,\n  selection: SegmentProps['selection'],\n) => {\n  const array = Array(size).fill(null)\n  return array.map((_, index) => ({\n    state: getSegmentState(index, selection),\n    position: getSegmentPosition(index, selection),\n  }))\n}\n","import React from 'react'\nimport { RenderSegmentFn } from '../types/RenderSegmentFn'\nimport { getSegmentArray } from '../utils/getSegmentArray'\nimport { useLengthContext, useSelectionContext } from './Context'\nexport { Context } from './Context'\n\nexport const Absolute = (props: React.ComponentPropsWithoutRef<'div'>) => (\n  <div\n    {...props}\n    aria-hidden={true}\n    style={{\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      display: 'flex',\n      justifyContent: 'space-between',\n      zIndex: -1,\n      ...props.style,\n    }}\n  />\n)\n\nconst handleScroll = (event: React.UIEvent) => {\n  event.preventDefault()\n  event.stopPropagation()\n  event.currentTarget.scrollTop = 0\n  event.currentTarget.scrollLeft = 0\n}\ntype CodeInputInputScrollWrapperProps = React.ComponentProps<'div'>\nexport const InputScrollWrapper = (props: CodeInputInputScrollWrapperProps) => {\n  return (\n    <div\n      {...props}\n      onScroll={handleScroll}\n      style={{\n        ...props.style,\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    />\n  )\n}\n\nexport type InputProps = Omit<\n  React.ComponentPropsWithRef<'input'>,\n  'maxLength' | 'children' | 'value'\n>\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (props, ref) => {\n    const length = useLengthContext()\n    return (\n      <input\n        {...props}\n        width={undefined}\n        minLength={length}\n        maxLength={length}\n        ref={ref}\n        style={{\n          ...props.style,\n          font: 'inherit',\n          letterSpacing: 'inherit',\n          textIndent: 'inherit',\n          background: 'transparent',\n          appearance: 'none',\n          display: 'block',\n          width: props.width || '200%',\n          padding: '0',\n          margin: '0',\n          border: '0 solid transparent',\n          outline: 'none',\n        }}\n      />\n    )\n  },\n)\n\nexport const SegmentRenderer = (props: { children: RenderSegmentFn }) => {\n  const selection = useSelectionContext()\n  const length = useLengthContext()\n  // TODO: fix non-null assertion\n  const _selection = selection!\n  const segmentArray = getSegmentArray(length, _selection)\n\n  const content = segmentArray.map(({ state, position }, index) => {\n    return props.children({ index, state, position, selection: _selection })\n  })\n\n  return <>{content}</>\n}\n","import React from 'react'\nimport { useCodeInput } from 'use-code-input'\nimport type { RenderSegmentFn } from '../types/RenderSegmentFn'\nimport * as RCI from './RCI'\n\nexport type CodeInputProps = RCI.InputProps & {\n  inputRef: React.RefObject<HTMLInputElement>\n  renderSegment: RenderSegmentFn\n\n  length?: number\n\n  fontFamily?: string\n  fontSize?: string\n\n  padding?: string\n  paddingY?: string\n  paddingX?: string\n  spacing?: string\n\n  /** advanced: for browsers which don't support \"ch\" unit */\n  characterWidth?: string\n\n  /** advanced: very few valid reasons to override this for CodeInput */\n  segmentWidth?: string\n\n  /** advanced: can be used if input needs to be larger (example: auto-fill buttons are overlapping input) */\n  inputWidth?: string\n\n  inputClassName?: RCI.InputProps['className']\n  inputStyle?: RCI.InputProps['style']\n\n  scrollWrapperClassName?: string\n  segmentWrapperClassName?: string\n\n  rootProps?: Omit<React.ComponentPropsWithRef<'div'>, 'style' | 'className'>\n}\n\nexport const CodeInput = ({\n  renderSegment,\n  length = 6,\n  fontFamily = \"'SF Mono', SFMono-Regular, ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono', 'Roboto Mono', monospace\",\n  fontSize = '2rem',\n  padding = '0.25rem',\n  paddingY = padding,\n  paddingX = padding,\n  spacing = '0.5rem',\n  characterWidth = '1ch',\n  style,\n  className,\n  inputClassName,\n  inputStyle,\n  segmentWidth = `calc(${characterWidth} + ${paddingX} * 2)`,\n  inputWidth = `calc(100% + ${segmentWidth} + ${spacing})`,\n  inputRef,\n  scrollWrapperClassName,\n  segmentWrapperClassName,\n  rootProps,\n  ...rest\n}: CodeInputProps) => {\n  const selection = useCodeInput(inputRef)\n\n  const rootStyle = {\n    ...style,\n    position: 'relative',\n    width: `calc(${segmentWidth} * ${length} + ${spacing} * ${length - 1})`,\n    fontFamily,\n    fontSize,\n    textIndent: paddingX,\n    letterSpacing: `calc(${paddingX} * 2 + ${spacing})`,\n    lineHeight: `calc(${fontSize} + ${paddingY} * 2)`,\n    zIndex: 0,\n  } as const\n\n  const inputProps = {\n    className: inputClassName,\n    style: inputStyle,\n    ref: inputRef,\n  }\n\n  return (\n    <RCI.Context length={length} selection={selection}>\n      <div {...rootProps} className={className} style={rootStyle}>\n        <RCI.Absolute className={segmentWrapperClassName}>\n          <RCI.SegmentRenderer children={renderSegment} />\n        </RCI.Absolute>\n        <RCI.InputScrollWrapper\n          className={scrollWrapperClassName}\n          onMouseDownCapture={(event) => {\n            if (event.button !== 0 || event.ctrlKey) return\n            if (event.shiftKey || event.metaKey) return\n            if (!(event.currentTarget instanceof HTMLElement)) return\n            if (!(inputRef.current instanceof HTMLInputElement)) return\n            event.stopPropagation()\n            event.preventDefault()\n            const { left, width } = event.currentTarget.getBoundingClientRect()\n            const eventX = event.clientX - left\n            const index = Math.floor((eventX / width) * length)\n            if (document.activeElement !== inputRef.current) {\n              inputRef.current?.focus()\n            }\n            inputRef.current?.setSelectionRange(index, index + 1)\n          }}\n          onDoubleClickCapture={() => {\n            inputRef.current?.setSelectionRange(0, length)\n          }}\n        >\n          <RCI.Input width={inputWidth} {...rest} {...inputProps} />\n        </RCI.InputScrollWrapper>\n      </div>\n    </RCI.Context>\n  )\n}\n","/** paddingX must be a valid [CSS length](https://developer.mozilla.org/en-US/docs/Web/CSS/length). */\nexport const getSegmentCssWidth = (paddingX: string) => {\n  return `calc(1ch + ${paddingX} * 2)`\n}\n"],"names":["_jsx","_Fragment","RCI.Context","_jsxs","RCI.Absolute","RCI.SegmentRenderer","RCI.InputScrollWrapper","RCI.Input"],"mappings":"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"}