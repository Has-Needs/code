import React from "react";
import { useCodeInput, SelectionState } from "use-code-input";
type SelectionValue = ReturnType<typeof useCodeInput>;
declare const useLengthContext: () => number;
declare const useSelectionContext: () => import("use-code-input").SelectionState | null;
type ContextProps = {
    length: number;
    selection: SelectionValue;
    children?: React.ReactNode | undefined;
};
type SegmentStateValue = "cursor" | "selected" | null;
type SegmentPositionValue = -1 | 0 | 1;
/** @public */
type SegmentProps = {
    index: number;
    state: SegmentStateValue;
    position: SegmentPositionValue;
    selection: SelectionState;
};
type RenderSegmentFn = (segmentProps: SegmentProps) => React.ReactNode;
declare namespace RCI {
    type SegmentStateValue = "cursor" | "selected" | null;
    type SegmentPositionValue = -1 | 0 | 1;
    /** @public */
    type SegmentProps = {
        index: number;
        state: SegmentStateValue;
        position: SegmentPositionValue;
        selection: SelectionState;
    };
    type RenderSegmentFn = (segmentProps: SegmentProps) => React.ReactNode;
    type SelectionValue = ReturnType<typeof useCodeInput>;
    const useLengthContext: () => number;
    const useSelectionContext: () => import("use-code-input").SelectionState | null;
    type ContextProps = {
        length: number;
        selection: SelectionValue;
        children?: React.ReactNode | undefined;
    };
    const Context: (props: ContextProps) => JSX.Element;
    const Absolute: (props: React.ComponentPropsWithoutRef<"div">) => JSX.Element;
    type CodeInputInputScrollWrapperProps = React.ComponentProps<"div">;
    const InputScrollWrapper: (props: CodeInputInputScrollWrapperProps) => JSX.Element;
    type InputProps = Omit<React.ComponentPropsWithRef<"input">, "maxLength" | "children" | "value">;
    const Input: React.ForwardRefExoticComponent<Omit<InputProps, "ref"> & React.RefAttributes<HTMLInputElement>>;
    const SegmentRenderer: (props: {
        children: RenderSegmentFn;
    }) => JSX.Element;
}
type CodeInputProps = RCI.InputProps & {
    inputRef: React.RefObject<HTMLInputElement>;
    renderSegment: RenderSegmentFn;
    length?: number;
    fontFamily?: string;
    fontSize?: string;
    padding?: string;
    paddingY?: string;
    paddingX?: string;
    spacing?: string;
    /** advanced: for browsers which don't support "ch" unit */
    characterWidth?: string;
    /** advanced: very few valid reasons to override this for CodeInput */
    segmentWidth?: string;
    /** advanced: can be used if input needs to be larger (example: auto-fill buttons are overlapping input) */
    inputWidth?: string;
    inputClassName?: RCI.InputProps["className"];
    inputStyle?: RCI.InputProps["style"];
    scrollWrapperClassName?: string;
    segmentWrapperClassName?: string;
    rootProps?: Omit<React.ComponentPropsWithRef<"div">, "style" | "className">;
};
declare const CodeInput: ({ renderSegment, length, fontFamily, fontSize, padding, paddingY, paddingX, spacing, characterWidth, style, className, inputClassName, inputStyle, segmentWidth, inputWidth, inputRef, scrollWrapperClassName, segmentWrapperClassName, rootProps, ...rest }: CodeInputProps) => JSX.Element;
/** paddingX must be a valid [CSS length](https://developer.mozilla.org/en-US/docs/Web/CSS/length). */
declare const getSegmentCssWidth: (paddingX: string) => string;
export { useCodeInput } from 'use-code-input';
export { useLengthContext, useSelectionContext, CodeInput, RCI, getSegmentCssWidth };
export type { SegmentProps };
