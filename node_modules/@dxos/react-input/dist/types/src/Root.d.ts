import { type Scope } from '@radix-ui/react-context';
import React, { type PropsWithChildren } from 'react';
declare const INPUT_NAME = "Input";
type Valence = 'success' | 'info' | 'warning' | 'error' | 'neutral';
type InputScopedProps<P> = P & {
    __inputScope?: Scope;
};
type InputRootProps = PropsWithChildren<{
    id?: string;
    validationValence?: Valence;
    descriptionId?: string;
    errorMessageId?: string;
}>;
declare const createInputScope: import("@radix-ui/react-context").CreateScope;
type InputContextValue = {
    id: string;
    descriptionId: string;
    errorMessageId: string;
    validationValence: Valence;
};
declare const useInputContext: (consumerName: string, scope: Scope<InputContextValue | undefined>) => InputContextValue;
declare const InputRoot: {
    ({ __inputScope, id: propsId, descriptionId: propsDescriptionId, errorMessageId: propsErrorMessageId, validationValence, children, }: InputScopedProps<InputRootProps>): React.JSX.Element;
    displayName: string;
};
export { InputRoot, InputRoot as Root, createInputScope, useInputContext, INPUT_NAME };
export type { Valence, InputRootProps, InputScopedProps };
//# sourceMappingURL=Root.d.ts.map