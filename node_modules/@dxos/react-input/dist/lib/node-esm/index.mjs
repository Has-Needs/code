import { createRequire } from 'node:module';const require = createRequire(import.meta.url);

// packages/ui/primitives/react-input/src/InputMeta.tsx
import { useSignals as _useSignals2 } from "@preact-signals/safe-react/tracking";
import { Primitive } from "@radix-ui/react-primitive";
import { Slot } from "@radix-ui/react-slot";
import React2, { forwardRef } from "react";

// packages/ui/primitives/react-input/src/Root.tsx
import { useSignals as _useSignals } from "@preact-signals/safe-react/tracking";
import { createContextScope } from "@radix-ui/react-context";
import React from "react";
import { useId } from "@dxos/react-hooks";
var INPUT_NAME = "Input";
var [createInputContext, createInputScope] = createContextScope(INPUT_NAME, []);
var [InputProvider, useInputContext] = createInputContext(INPUT_NAME);
var InputRoot = ({ __inputScope, id: propsId, descriptionId: propsDescriptionId, errorMessageId: propsErrorMessageId, validationValence = "neutral", children }) => {
  var _effect = _useSignals();
  try {
    const id = useId("input", propsId);
    const descriptionId = useId("input__description", propsDescriptionId);
    const errorMessageId = useId("input__error-message", propsErrorMessageId);
    return /* @__PURE__ */ React.createElement(InputProvider, {
      id,
      descriptionId,
      errorMessageId,
      validationValence,
      scope: __inputScope
    }, children);
  } finally {
    _effect.f();
  }
};
InputRoot.displayName = INPUT_NAME;

// packages/ui/primitives/react-input/src/InputMeta.tsx
var Label = /* @__PURE__ */ forwardRef(({ __inputScope, asChild, children, ...props }, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { id } = useInputContext(INPUT_NAME, __inputScope);
    const Root = asChild ? Slot : Primitive.label;
    return /* @__PURE__ */ React2.createElement(Root, {
      ...props,
      htmlFor: id,
      ref: forwardedRef
    }, children);
  } finally {
    _effect.f();
  }
});
var Description = /* @__PURE__ */ forwardRef(({ __inputScope, asChild, children, ...props }, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { descriptionId, validationValence } = useInputContext(INPUT_NAME, __inputScope);
    const Root = asChild ? Slot : Primitive.span;
    return /* @__PURE__ */ React2.createElement(Root, {
      ...props,
      ...validationValence === "error" && {
        id: descriptionId
      },
      ref: forwardedRef
    }, children);
  } finally {
    _effect.f();
  }
});
var ErrorMessage = /* @__PURE__ */ forwardRef(({ __inputScope, asChild, children, ...props }, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { errorMessageId } = useInputContext(INPUT_NAME, __inputScope);
    const Root = asChild ? Slot : Primitive.span;
    return /* @__PURE__ */ React2.createElement(Root, {
      ...props,
      id: errorMessageId,
      ref: forwardedRef
    }, children);
  } finally {
    _effect.f();
  }
});
var Validation = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { __inputScope, asChild, children, ...otherProps } = props;
    const { validationValence } = useInputContext(INPUT_NAME, __inputScope);
    if (validationValence === "error") {
      return /* @__PURE__ */ React2.createElement(ErrorMessage, {
        ...props,
        ref: forwardedRef
      });
    } else {
      const Root = asChild ? Slot : Primitive.span;
      return /* @__PURE__ */ React2.createElement(Root, {
        ...otherProps,
        ref: forwardedRef
      }, children);
    }
  } finally {
    _effect.f();
  }
});
var DescriptionAndValidation = /* @__PURE__ */ forwardRef(({ __inputScope, asChild, children, ...props }, forwardedRef) => {
  var _effect = _useSignals2();
  try {
    const { descriptionId, validationValence } = useInputContext(INPUT_NAME, __inputScope);
    const Root = asChild ? Slot : Primitive.p;
    return /* @__PURE__ */ React2.createElement(Root, {
      ...props,
      ...validationValence !== "error" && {
        id: descriptionId
      },
      ref: forwardedRef
    }, children);
  } finally {
    _effect.f();
  }
});

// packages/ui/primitives/react-input/src/PinInput.tsx
import { useSignals as _useSignals3 } from "@preact-signals/safe-react/tracking";
import { CodeInput, getSegmentCssWidth } from "rci";
import React3, { forwardRef as forwardRef2, useCallback } from "react";
import { useForwardedRef, useIsFocused } from "@dxos/react-hooks";
var PinInput = /* @__PURE__ */ forwardRef2(({ __inputScope, segmentClassName, inputClassName, segmentPadding = "8px", segmentHeight = "100%", ...props }, forwardedRef) => {
  var _effect = _useSignals3();
  try {
    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);
    const width = getSegmentCssWidth(segmentPadding);
    const inputRef = useForwardedRef(forwardedRef);
    const inputFocused = useIsFocused(inputRef);
    const renderSegment = useCallback(({ state, index }) => /* @__PURE__ */ React3.createElement("div", {
      key: index,
      className: segmentClassName?.({
        focused: !!(inputFocused && state),
        validationValence
      }),
      "data-state": state,
      style: {
        width,
        height: segmentHeight
      }
    }), [
      segmentClassName,
      inputFocused,
      validationValence
    ]);
    return /* @__PURE__ */ React3.createElement(CodeInput, {
      padding: "8px",
      spacing: "8px",
      fontFamily: "",
      spellCheck: false,
      length: 6,
      ...props,
      id,
      "aria-describedby": descriptionId,
      ...validationValence === "error" && {
        "aria-invalid": "true",
        "aria-errormessage": errorMessageId
      },
      inputRef,
      renderSegment,
      className: inputClassName
    });
  } finally {
    _effect.f();
  }
});

// packages/ui/primitives/react-input/src/TextInput.tsx
import { useSignals as _useSignals4 } from "@preact-signals/safe-react/tracking";
import { Primitive as Primitive2 } from "@radix-ui/react-primitive";
import React4, { forwardRef as forwardRef3 } from "react";
var TextInput = /* @__PURE__ */ forwardRef3(({ __inputScope, ...props }, forwardedRef) => {
  var _effect = _useSignals4();
  try {
    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);
    return /* @__PURE__ */ React4.createElement(Primitive2.input, {
      ...props,
      id,
      "aria-describedby": descriptionId,
      ...validationValence === "error" && {
        "aria-invalid": "true",
        "aria-errormessage": errorMessageId
      },
      ref: forwardedRef
    });
  } finally {
    _effect.f();
  }
});

// packages/ui/primitives/react-input/src/TextArea.tsx
import { useSignals as _useSignals5 } from "@preact-signals/safe-react/tracking";
import React5, { forwardRef as forwardRef4 } from "react";
var TextArea = /* @__PURE__ */ forwardRef4(({ __inputScope, ...props }, forwardedRef) => {
  var _effect = _useSignals5();
  try {
    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);
    return /* @__PURE__ */ React5.createElement("textarea", {
      ...props,
      id,
      "aria-describedby": descriptionId,
      ...validationValence === "error" && {
        "aria-invalid": "true",
        "aria-errormessage": errorMessageId
      },
      ref: forwardedRef
    });
  } finally {
    _effect.f();
  }
});
export {
  Description,
  DescriptionAndValidation,
  ErrorMessage,
  INPUT_NAME,
  InputRoot,
  Label,
  PinInput,
  InputRoot as Root,
  TextArea,
  TextInput,
  Validation,
  createInputScope,
  useInputContext
};
//# sourceMappingURL=index.mjs.map
