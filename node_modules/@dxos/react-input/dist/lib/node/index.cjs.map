{
  "version": 3,
  "sources": ["../../../src/InputMeta.tsx", "../../../src/Root.tsx", "../../../src/PinInput.tsx", "../../../src/TextInput.tsx", "../../../src/TextArea.tsx"],
  "sourcesContent": ["//\n// Copyright 2023 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { INPUT_NAME, type InputScopedProps, useInputContext } from './Root';\n\ntype LabelProps = ComponentPropsWithRef<typeof Primitive.label> & { asChild?: boolean };\n\nconst Label = forwardRef<HTMLLabelElement, LabelProps>(\n  ({ __inputScope, asChild, children, ...props }: InputScopedProps<LabelProps>, forwardedRef) => {\n    const { id } = useInputContext(INPUT_NAME, __inputScope);\n    const Root = asChild ? Slot : Primitive.label;\n    return (\n      <Root {...props} htmlFor={id} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype DescriptionProps = Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'> & { asChild?: boolean };\n\nconst Description = forwardRef<HTMLSpanElement, DescriptionProps>(\n  ({ __inputScope, asChild, children, ...props }: InputScopedProps<DescriptionProps>, forwardedRef) => {\n    const { descriptionId, validationValence } = useInputContext(INPUT_NAME, __inputScope);\n    const Root = asChild ? Slot : Primitive.span;\n    return (\n      <Root {...props} {...(validationValence === 'error' && { id: descriptionId })} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype ErrorMessageProps = Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'> & { asChild?: boolean };\n\nconst ErrorMessage = forwardRef<HTMLSpanElement, ErrorMessageProps>(\n  ({ __inputScope, asChild, children, ...props }: InputScopedProps<ErrorMessageProps>, forwardedRef) => {\n    const { errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n    const Root = asChild ? Slot : Primitive.span;\n    return (\n      <Root {...props} id={errorMessageId} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype ValidationProps = Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'> & { asChild?: boolean };\n\nconst Validation = forwardRef<HTMLSpanElement, ValidationProps>(\n  (props: InputScopedProps<ValidationProps>, forwardedRef) => {\n    const { __inputScope, asChild, children, ...otherProps } = props;\n    const { validationValence } = useInputContext(INPUT_NAME, __inputScope);\n    if (validationValence === 'error') {\n      return <ErrorMessage {...props} ref={forwardedRef} />;\n    } else {\n      const Root = asChild ? Slot : Primitive.span;\n      return (\n        <Root {...otherProps} ref={forwardedRef}>\n          {children}\n        </Root>\n      );\n    }\n  },\n);\n\ntype DescriptionAndValidationProps = ComponentPropsWithRef<typeof Primitive.p> & { asChild?: boolean };\n\nconst DescriptionAndValidation = forwardRef<HTMLParagraphElement, DescriptionAndValidationProps>(\n  ({ __inputScope, asChild, children, ...props }: InputScopedProps<DescriptionAndValidationProps>, forwardedRef) => {\n    const { descriptionId, validationValence } = useInputContext(INPUT_NAME, __inputScope);\n    const Root = asChild ? Slot : Primitive.p;\n    return (\n      <Root {...props} {...(validationValence !== 'error' && { id: descriptionId })} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\nexport { Label, Validation, Description, DescriptionAndValidation, ErrorMessage };\n\nexport type { LabelProps, ValidationProps, DescriptionProps, DescriptionAndValidationProps, ErrorMessageProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { createContextScope, type Scope } from '@radix-ui/react-context';\nimport React, { type PropsWithChildren } from 'react';\n\nimport { useId } from '@dxos/react-hooks';\n\nconst INPUT_NAME = 'Input';\n\ntype Valence = 'success' | 'info' | 'warning' | 'error' | 'neutral';\n\ntype InputScopedProps<P> = P & { __inputScope?: Scope };\n\ntype InputRootProps = PropsWithChildren<{\n  id?: string;\n  validationValence?: Valence;\n  descriptionId?: string;\n  errorMessageId?: string;\n}>;\n\nconst [createInputContext, createInputScope] = createContextScope(INPUT_NAME, []);\n\ntype InputContextValue = {\n  id: string;\n  descriptionId: string;\n  errorMessageId: string;\n  validationValence: Valence;\n};\n\nconst [InputProvider, useInputContext] = createInputContext<InputContextValue>(INPUT_NAME);\n\nconst InputRoot = ({\n  __inputScope,\n  id: propsId,\n  descriptionId: propsDescriptionId,\n  errorMessageId: propsErrorMessageId,\n  validationValence = 'neutral',\n  children,\n}: InputScopedProps<InputRootProps>) => {\n  const id = useId('input', propsId);\n  const descriptionId = useId('input__description', propsDescriptionId);\n  const errorMessageId = useId('input__error-message', propsErrorMessageId);\n  return (\n    <InputProvider {...{ id, descriptionId, errorMessageId, validationValence }} scope={__inputScope}>\n      {children}\n    </InputProvider>\n  );\n};\n\nInputRoot.displayName = INPUT_NAME;\n\nexport { InputRoot, InputRoot as Root, createInputScope, useInputContext, INPUT_NAME };\n\nexport type { Valence, InputRootProps, InputScopedProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { CodeInput, getSegmentCssWidth } from 'rci';\nimport React, { type ComponentProps, type ComponentPropsWithRef, forwardRef, useCallback } from 'react';\n\nimport { useForwardedRef, useIsFocused } from '@dxos/react-hooks';\n\nimport { INPUT_NAME, type InputScopedProps, useInputContext, type Valence } from './Root';\n\ntype PinInputProps = Omit<\n  ComponentPropsWithRef<typeof CodeInput>,\n  'id' | 'className' | 'inputRef' | 'renderSegment'\n> & {\n  inputClassName?: string;\n  segmentClassName?: (styleProps: { focused: boolean; validationValence: Valence }) => string;\n  segmentPadding?: string;\n  segmentHeight?: string;\n};\n\nconst PinInput = forwardRef<HTMLInputElement, PinInputProps>(\n  (\n    {\n      __inputScope,\n      segmentClassName,\n      inputClassName,\n      segmentPadding = '8px',\n      segmentHeight = '100%',\n      ...props\n    }: InputScopedProps<PinInputProps>,\n    forwardedRef,\n  ) => {\n    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n    const width = getSegmentCssWidth(segmentPadding);\n    const inputRef = useForwardedRef(forwardedRef);\n    const inputFocused = useIsFocused(inputRef);\n\n    const renderSegment = useCallback<ComponentProps<typeof CodeInput>['renderSegment']>(\n      ({ state, index }) => (\n        <div\n          key={index}\n          className={segmentClassName?.({\n            focused: !!(inputFocused && state),\n            validationValence,\n          })}\n          data-state={state}\n          style={{ width, height: segmentHeight }}\n        />\n      ),\n      [segmentClassName, inputFocused, validationValence],\n    );\n\n    return (\n      <CodeInput\n        {...{\n          padding: '8px',\n          spacing: '8px',\n          fontFamily: '',\n          spellCheck: false,\n          length: 6,\n          ...props,\n          id,\n          'aria-describedby': descriptionId,\n          ...(validationValence === 'error' && {\n            'aria-invalid': 'true' as const,\n            'aria-errormessage': errorMessageId,\n          }),\n          inputRef,\n          renderSegment,\n          className: inputClassName,\n        }}\n      />\n    );\n  },\n);\n\nexport { PinInput };\n\nexport type { PinInputProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { INPUT_NAME, type InputScopedProps, useInputContext } from './Root';\n\ntype TextInputProps = Omit<ComponentPropsWithRef<typeof Primitive.input>, 'id'>;\n\nconst TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  ({ __inputScope, ...props }: InputScopedProps<TextInputProps>, forwardedRef) => {\n    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n    return (\n      <Primitive.input\n        {...{\n          ...props,\n          id,\n          'aria-describedby': descriptionId,\n          ...(validationValence === 'error' && {\n            'aria-invalid': 'true' as const,\n            'aria-errormessage': errorMessageId,\n          }),\n          ref: forwardedRef,\n        }}\n      />\n    );\n  },\n);\n\nexport { TextInput };\n\nexport type { TextInputProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { INPUT_NAME, type InputScopedProps, useInputContext } from './Root';\n\ntype TextAreaProps = Omit<ComponentPropsWithRef<'textarea'>, 'id'>;\n\nconst TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  ({ __inputScope, ...props }: InputScopedProps<TextAreaProps>, forwardedRef) => {\n    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n    return (\n      <textarea\n        {...{\n          ...props,\n          id,\n          'aria-describedby': descriptionId,\n          ...(validationValence === 'error' && {\n            'aria-invalid': 'true' as const,\n            'aria-errormessage': errorMessageId,\n          }),\n          ref: forwardedRef,\n        }}\n      />\n    );\n  },\n);\n\nexport { TextArea };\n\nexport type { TextAreaProps };\n"],
  "mappings": "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",
  "names": ["import_react", "import_react_hooks", "import_react_primitive", "INPUT_NAME", "createInputContext", "createInputScope", "createContextScope", "InputProvider", "useInputContext", "InputRoot", "__inputScope", "id", "propsId", "descriptionId", "propsDescriptionId", "errorMessageId", "propsErrorMessageId", "validationValence", "children", "useId", "React", "scope", "displayName", "Label", "forwardRef", "asChild", "props", "forwardedRef", "Root", "Slot", "Primitive", "label", "htmlFor", "ref", "Description", "span", "ErrorMessage", "Validation", "otherProps", "DescriptionAndValidation", "p", "PinInput", "segmentClassName", "inputClassName", "segmentPadding", "segmentHeight", "width", "getSegmentCssWidth", "inputRef", "useForwardedRef", "inputFocused", "useIsFocused", "renderSegment", "useCallback", "state", "index", "div", "key", "className", "focused", "data-state", "style", "height", "CodeInput", "padding", "spacing", "fontFamily", "spellCheck", "length", "TextInput", "input", "TextArea", "textarea"]
}
