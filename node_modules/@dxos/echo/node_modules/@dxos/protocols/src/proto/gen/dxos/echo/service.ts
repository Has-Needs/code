import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_agent_dashboard from "../agent/dashboard.js";
import * as dxos_agent_echoproxy from "../agent/echoproxy.js";
import * as dxos_agent_epoch from "../agent/epoch.js";
import * as dxos_agent_functions from "../agent/functions.js";
import * as dxos_bot from "../bot.js";
import * as dxos_client_services from "../client/services.js";
import * as dxos_config from "../config.js";
import * as dxos_devtools_host from "../devtools/host.js";
import * as dxos_devtools_swarm from "../devtools/swarm.js";
import * as dxos_echo_blob from "./blob.js";
import * as dxos_echo_feed from "./feed.js";
import * as dxos_echo_filter from "./filter.js";
import * as dxos_echo_indexing from "./indexing.js";
import * as dxos_echo_metadata from "./metadata.js";
import * as dxos_echo_model_document from "./model/document.js";
import * as dxos_echo_model_messenger from "./model/messenger.js";
import * as dxos_echo_model_text from "./model/text.js";
import * as dxos_echo_object from "./object.js";
import * as dxos_echo_query from "./query.js";
import * as dxos_echo_snapshot from "./snapshot.js";
import * as dxos_echo_timeframe from "./timeframe.js";
import * as dxos_edge_calls from "../edge/calls.js";
import * as dxos_edge_messenger from "../edge/messenger.js";
import * as dxos_edge_signal from "../edge/signal.js";
import * as dxos_error from "../error.js";
import * as dxos_gravity from "../gravity.js";
import * as dxos_halo_credentials from "../halo/credentials.js";
import * as dxos_halo_credentials_auth from "../halo/credentials/auth.js";
import * as dxos_halo_credentials_greet from "../halo/credentials/greet.js";
import * as dxos_halo_credentials_identity from "../halo/credentials/identity.js";
import * as dxos_halo_invitations from "../halo/invitations.js";
import * as dxos_halo_keyring from "../halo/keyring.js";
import * as dxos_halo_keys from "../halo/keys.js";
import * as dxos_halo_signed from "../halo/signed.js";
import * as dxos_iframe from "../iframe.js";
import * as dxos_keys from "../keys.js";
import * as dxos_mesh_bridge from "../mesh/bridge.js";
import * as dxos_mesh_broadcast from "../mesh/broadcast.js";
import * as dxos_mesh_messaging from "../mesh/messaging.js";
import * as dxos_mesh_muxer from "../mesh/muxer.js";
import * as dxos_mesh_presence from "../mesh/presence.js";
import * as dxos_mesh_protocol from "../mesh/protocol.js";
import * as dxos_mesh_replicator from "../mesh/replicator.js";
import * as dxos_mesh_signal from "../mesh/signal.js";
import * as dxos_mesh_swarm from "../mesh/swarm.js";
import * as dxos_mesh_teleport from "../mesh/teleport.js";
import * as dxos_mesh_teleport_auth from "../mesh/teleport/auth.js";
import * as dxos_mesh_teleport_automerge from "../mesh/teleport/automerge.js";
import * as dxos_mesh_teleport_blobsync from "../mesh/teleport/blobsync.js";
import * as dxos_mesh_teleport_control from "../mesh/teleport/control.js";
import * as dxos_mesh_teleport_gossip from "../mesh/teleport/gossip.js";
import * as dxos_mesh_teleport_notarization from "../mesh/teleport/notarization.js";
import * as dxos_mesh_teleport_replicator from "../mesh/teleport/replicator.js";
import * as dxos_registry from "../registry.js";
import * as dxos_rpc from "../rpc.js";
import * as dxos_service_agentmanager from "../service/agentmanager.js";
import * as dxos_service_publisher from "../service/publisher.js";
import * as dxos_service_supervisor from "../service/supervisor.js";
import * as dxos_service_tunnel from "../service/tunnel.js";
import * as dxos_tracing from "../tracing.js";
import * as dxos_type from "../type.js";
import * as dxos_value from "../value.js";
import * as example_testing_data from "../../example/testing/data.js";
import * as example_testing_rpc from "../../example/testing/rpc.js";
import * as google_protobuf from "../../google/protobuf.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface SubscribeRequest {
    subscriptionId: string;
    spaceId: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface BatchedDocumentUpdates {
    updates?: DocumentUpdate[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface UpdateRequest {
    subscriptionId: string;
    updates?: DocumentUpdate[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface UpdateSubscriptionRequest {
    /**
     * Id of the subscription to update.
     * Subscription id is returned by `Subscribe` rpc.
     */
    subscriptionId: string;
    /**
     * Automerge document ids to subscribe for updates.
     * Used for already existing documents.
     * To add new document use `write` rpc.
     */
    addIds?: string[];
    /**
     * Automerge document ids to unsubscribe from.
     */
    removeIds?: string[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface FlushRequest {
    /**
     * Automerge specific document ids to wait to flush.
     */
    documentIds?: string[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface DocumentUpdate {
    /**
     * Automerge document id.
     */
    documentId: string;
    /**
     * Automerge document incremental update.
     * Value returned by `Automerge.saveSince()`.
     */
    mutation: Uint8Array;
    /**
     * Set to true for init mutation of document.
     * default: undefined.
     *
     * Options:
     *   - proto3_optional = true
     */
    isNew?: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface DocHeadsList {
    entries?: DocHeadsList.Entry[];
}
export namespace DocHeadsList {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/echo/service.proto}
     */
    export interface Entry {
        documentId: string;
        heads?: string[];
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface GetDocumentHeadsRequest {
    documentIds?: string[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface GetDocumentHeadsResponse {
    heads: DocHeadsList;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface WaitUntilHeadsReplicatedRequest {
    heads: DocHeadsList;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface ReIndexHeadsRequest {
    documentIds?: string[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface GetSpaceSyncStateRequest {
    spaceId: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface SpaceSyncState {
    peers?: SpaceSyncState.PeerState[];
}
export namespace SpaceSyncState {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/echo/service.proto}
     */
    export interface PeerState {
        peerId: string;
        /**
         * Documents that are present locally but not on the remote peer.
         */
        missingOnRemote: number;
        /**
         * Documents that are present on the remote peer but not locally.
         */
        missingOnLocal: number;
        /**
         * Documents that are present on both peers but have different heads.
         */
        differentDocuments: number;
        /**
         * Total number of documents locally.
         */
        localDocumentCount: number;
        /**
         * Total number of documents on the remote peer.
         */
        remoteDocumentCount: number;
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/service.proto}
 */
export interface DataService {
    /**
     * Subscribe to incremental updates of multiple automerge socuments.
     * Which documents are subscribed to is defined in the `UpdateSubscription`.
     * Used to propagate changes from services to client.
     */
    subscribe: (request: SubscribeRequest, options?: RequestOptions) => Stream<BatchedDocumentUpdates>;
    /**
     * Change which documents are subscribed to for specific subscription.
     */
    updateSubscription: (request: UpdateSubscriptionRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Write incremental updates to multiple automerge documents.
     * Used to propagate changes from client to services.
     */
    update: (request: UpdateRequest, options?: RequestOptions) => Promise<void>;
    flush: (request: FlushRequest, options?: RequestOptions) => Promise<void>;
    getDocumentHeads: (request: GetDocumentHeadsRequest, options?: RequestOptions) => Promise<GetDocumentHeadsResponse>;
    /**
     * Wait until the we have the specified changes on the worker locally. Does not take into account the index or client.
     */
    waitUntilHeadsReplicated: (request: WaitUntilHeadsReplicatedRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Update heads index for selected docuemnts.
     */
    reIndexHeads: (request: ReIndexHeadsRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Wait for any pending index updates.
     */
    updateIndexes: (request: void, options?: RequestOptions) => Promise<void>;
    subscribeSpaceSyncState: (request: GetSpaceSyncStateRequest, options?: RequestOptions) => Stream<SpaceSyncState>;
}
