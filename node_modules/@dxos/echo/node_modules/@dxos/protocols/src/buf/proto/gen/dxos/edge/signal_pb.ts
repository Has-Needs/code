//
// Copyright 2024 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/edge/signal.proto (package dxos.edge.signal, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import { file_dxos_keys } from "../keys_pb.js";
import type { Peer } from "./messenger_pb.js";
import { file_dxos_edge_messenger } from "./messenger_pb.js";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/edge/signal.proto.
 */
export const file_dxos_edge_signal: GenFile = /*@__PURE__*/
  fileDesc("ChZkeG9zL2VkZ2Uvc2lnbmFsLnByb3RvEhBkeG9zLmVkZ2Uuc2lnbmFsIlsKC0pvaW5SZXF1ZXN0EiMKBXRvcGljGAEgASgLMhQuZHhvcy5rZXlzLlB1YmxpY0tleRInCgRwZWVyGAIgASgLMhkuZHhvcy5lZGdlLm1lc3Nlbmdlci5QZWVyIlwKDExlYXZlUmVxdWVzdBIjCgV0b3BpYxgBIAEoCzIULmR4b3Mua2V5cy5QdWJsaWNLZXkSJwoEcGVlchgCIAEoCzIZLmR4b3MuZWRnZS5tZXNzZW5nZXIuUGVlciIzCgxRdWVyeVJlcXVlc3QSIwoFdG9waWMYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5IokBCgdNZXNzYWdlEikKBmF1dGhvchgBIAEoCzIZLmR4b3MuZWRnZS5tZXNzZW5nZXIuUGVlchIsCglyZWNpcGllbnQYAiABKAsyGS5keG9zLmVkZ2UubWVzc2VuZ2VyLlBlZXISJQoHcGF5bG9hZBgDIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkizwMKClN3YXJtRXZlbnQSIwoFdG9waWMYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5EkQKDnBlZXJfYXZhaWxhYmxlGAIgASgLMiouZHhvcy5lZGdlLnNpZ25hbC5Td2FybUV2ZW50LlBlZXJBdmFpbGFibGVIABI6CglwZWVyX2xlZnQYAyABKAsyJS5keG9zLmVkZ2Uuc2lnbmFsLlN3YXJtRXZlbnQuUGVlckxlZnRIABrbAQoNUGVlckF2YWlsYWJsZRInCgRwZWVyGAEgASgLMhkuZHhvcy5lZGdlLm1lc3Nlbmdlci5QZWVyEikKBXNpbmNlGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgV1bnRpbBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARIiChVhbm5vdW5jZV9iYWNrX3RvX2hvc3QYBCABKAxIAYgBAUIICgZfdW50aWxCGAoWX2Fubm91bmNlX2JhY2tfdG9faG9zdBozCghQZWVyTGVmdBInCgRwZWVyGAEgASgLMhkuZHhvcy5lZGdlLm1lc3Nlbmdlci5QZWVyQgcKBWV2ZW50YgZwcm90bzM", [file_google_protobuf_any, file_google_protobuf_timestamp, file_dxos_keys, file_dxos_edge_messenger]);

/**
 * @generated from message dxos.edge.signal.JoinRequest
 */
export type JoinRequest = Message$1<"dxos.edge.signal.JoinRequest"> & {
  /**
   * @generated from field: dxos.keys.PublicKey topic = 1;
   */
  topic?: PublicKey;

  /**
   * @generated from field: dxos.edge.messenger.Peer peer = 2;
   */
  peer?: Peer;
};

/**
 * Describes the message dxos.edge.signal.JoinRequest.
 * Use `create(JoinRequestSchema)` to create a new message.
 */
export const JoinRequestSchema: GenMessage<JoinRequest> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 0);

/**
 * @generated from message dxos.edge.signal.LeaveRequest
 */
export type LeaveRequest = Message$1<"dxos.edge.signal.LeaveRequest"> & {
  /**
   * @generated from field: dxos.keys.PublicKey topic = 1;
   */
  topic?: PublicKey;

  /**
   * @generated from field: dxos.edge.messenger.Peer peer = 2;
   */
  peer?: Peer;
};

/**
 * Describes the message dxos.edge.signal.LeaveRequest.
 * Use `create(LeaveRequestSchema)` to create a new message.
 */
export const LeaveRequestSchema: GenMessage<LeaveRequest> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 1);

/**
 * @generated from message dxos.edge.signal.QueryRequest
 */
export type QueryRequest = Message$1<"dxos.edge.signal.QueryRequest"> & {
  /**
   * @generated from field: dxos.keys.PublicKey topic = 1;
   */
  topic?: PublicKey;
};

/**
 * Describes the message dxos.edge.signal.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export const QueryRequestSchema: GenMessage<QueryRequest> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 2);

/**
 * @generated from message dxos.edge.signal.Message
 */
export type Message = Message$1<"dxos.edge.signal.Message"> & {
  /**
   * @generated from field: dxos.edge.messenger.Peer author = 1;
   */
  author?: Peer;

  /**
   * @generated from field: dxos.edge.messenger.Peer recipient = 2;
   */
  recipient?: Peer;

  /**
   * @generated from field: google.protobuf.Any payload = 3;
   */
  payload?: Any;
};

/**
 * Describes the message dxos.edge.signal.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 3);

/**
 * / Goes on Pub/Sub swarm topic and as a Join stream in RPC.
 *
 * @generated from message dxos.edge.signal.SwarmEvent
 */
export type SwarmEvent = Message$1<"dxos.edge.signal.SwarmEvent"> & {
  /**
   * @generated from field: dxos.keys.PublicKey topic = 1;
   */
  topic?: PublicKey;

  /**
   * @generated from oneof dxos.edge.signal.SwarmEvent.event
   */
  event: {
    /**
     * / The peer was announced as available on the swarm.
     *
     * @generated from field: dxos.edge.signal.SwarmEvent.PeerAvailable peer_available = 2;
     */
    value: SwarmEvent_PeerAvailable;
    case: "peerAvailable";
  } | {
    /**
     * / The peer left, or their announcement timed out.
     *
     * @generated from field: dxos.edge.signal.SwarmEvent.PeerLeft peer_left = 3;
     */
    value: SwarmEvent_PeerLeft;
    case: "peerLeft";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.edge.signal.SwarmEvent.
 * Use `create(SwarmEventSchema)` to create a new message.
 */
export const SwarmEventSchema: GenMessage<SwarmEvent> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 4);

/**
 * Announce peer available on swarm.
 *
 * @generated from message dxos.edge.signal.SwarmEvent.PeerAvailable
 */
export type SwarmEvent_PeerAvailable = Message$1<"dxos.edge.signal.SwarmEvent.PeerAvailable"> & {
  /**
   * @generated from field: dxos.edge.messenger.Peer peer = 1;
   */
  peer?: Peer;

  /**
   * @generated from field: google.protobuf.Timestamp since = 2;
   */
  since?: Timestamp;

  /**
   * When, if at all (handle the default value as not), this availability would expires were it not re-announced, like
   * periodically in Pub/Sub with some margin such that Pub/Sub network partitions lead to offline statuses.
   *
   * @generated from field: optional google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  /**
   * / Only relevant in Pub/Sub. Optional, the host topic to eagerly send PeerAvailable messages back to.
   *
   * @generated from field: optional bytes announce_back_to_host = 4;
   */
  announceBackToHost?: Uint8Array;
};

/**
 * Describes the message dxos.edge.signal.SwarmEvent.PeerAvailable.
 * Use `create(SwarmEvent_PeerAvailableSchema)` to create a new message.
 */
export const SwarmEvent_PeerAvailableSchema: GenMessage<SwarmEvent_PeerAvailable> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 4, 0);

/**
 * @generated from message dxos.edge.signal.SwarmEvent.PeerLeft
 */
export type SwarmEvent_PeerLeft = Message$1<"dxos.edge.signal.SwarmEvent.PeerLeft"> & {
  /**
   * @generated from field: dxos.edge.messenger.Peer peer = 1;
   */
  peer?: Peer;
};

/**
 * Describes the message dxos.edge.signal.SwarmEvent.PeerLeft.
 * Use `create(SwarmEvent_PeerLeftSchema)` to create a new message.
 */
export const SwarmEvent_PeerLeftSchema: GenMessage<SwarmEvent_PeerLeft> = /*@__PURE__*/
  messageDesc(file_dxos_edge_signal, 4, 1);

