//
// Copyright 2022 DXOS.org
//
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import { file_dxos_keys } from "../../keys_pb.js";
/**
 * Describes the file dxos/mesh/teleport/replicator.proto.
 */
export const file_dxos_mesh_teleport_replicator = /*@__PURE__*/ fileDesc("CiNkeG9zL21lc2gvdGVsZXBvcnQvcmVwbGljYXRvci5wcm90bxIdZHhvcy5tZXNoLnRlbGVwb3J0LnJlcGxpY2F0b3IiVAoIRmVlZEluZm8SJgoIZmVlZF9rZXkYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5EhAKCGRvd25sb2FkGAIgASgIEg4KBnVwbG9hZBgDIAEoCCJMChJVcGRhdGVGZWVkc1JlcXVlc3QSNgoFZmVlZHMYASADKAsyJy5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5GZWVkSW5mbyJQChdTdGFydFJlcGxpY2F0aW9uUmVxdWVzdBI1CgRpbmZvGAEgASgLMicuZHhvcy5tZXNoLnRlbGVwb3J0LnJlcGxpY2F0b3IuRmVlZEluZm8iQgoYU3RhcnRSZXBsaWNhdGlvblJlc3BvbnNlEhcKCnN0cmVhbV90YWcYASABKAlIAIgBAUINCgtfc3RyZWFtX3RhZyJPChZTdG9wUmVwbGljYXRpb25SZXF1ZXN0EjUKBGluZm8YASABKAsyJy5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5GZWVkSW5mbzLVAgoRUmVwbGljYXRvclNlcnZpY2USWAoLVXBkYXRlRmVlZHMSMS5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5VcGRhdGVGZWVkc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSgwEKEFN0YXJ0UmVwbGljYXRpb24SNi5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5TdGFydFJlcGxpY2F0aW9uUmVxdWVzdBo3LmR4b3MubWVzaC50ZWxlcG9ydC5yZXBsaWNhdG9yLlN0YXJ0UmVwbGljYXRpb25SZXNwb25zZRJgCg9TdG9wUmVwbGljYXRpb24SNS5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5TdG9wUmVwbGljYXRpb25SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5YgZwcm90bzM", [file_google_protobuf_empty, file_dxos_keys]);
/**
 * Describes the message dxos.mesh.teleport.replicator.FeedInfo.
 * Use `create(FeedInfoSchema)` to create a new message.
 */
export const FeedInfoSchema = /*@__PURE__*/ messageDesc(file_dxos_mesh_teleport_replicator, 0);
/**
 * Describes the message dxos.mesh.teleport.replicator.UpdateFeedsRequest.
 * Use `create(UpdateFeedsRequestSchema)` to create a new message.
 */
export const UpdateFeedsRequestSchema = /*@__PURE__*/ messageDesc(file_dxos_mesh_teleport_replicator, 1);
/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationRequest.
 * Use `create(StartReplicationRequestSchema)` to create a new message.
 */
export const StartReplicationRequestSchema = /*@__PURE__*/ messageDesc(file_dxos_mesh_teleport_replicator, 2);
/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationResponse.
 * Use `create(StartReplicationResponseSchema)` to create a new message.
 */
export const StartReplicationResponseSchema = /*@__PURE__*/ messageDesc(file_dxos_mesh_teleport_replicator, 3);
/**
 * Describes the message dxos.mesh.teleport.replicator.StopReplicationRequest.
 * Use `create(StopReplicationRequestSchema)` to create a new message.
 */
export const StopReplicationRequestSchema = /*@__PURE__*/ messageDesc(file_dxos_mesh_teleport_replicator, 4);
/**
 * *
 * RPC verbs for replication teleport extension.
 * Assumes one peer is designated an initiator.
 * The initiator will start and stop replication streams.
 * The other peer will send updates using the UpdateFeeds method.
 *
 * @generated from service dxos.mesh.teleport.replicator.ReplicatorService
 */
export const ReplicatorService = /*@__PURE__*/ serviceDesc(file_dxos_mesh_teleport_replicator, 0);
//# sourceMappingURL=replicator_pb.js.map