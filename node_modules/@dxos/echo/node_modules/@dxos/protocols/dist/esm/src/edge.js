//
// Copyright 2024 DXOS.org
//
import { Schema } from 'effect';
import { SpaceId } from '@dxos/keys';
// TODO(burdon): Rename EdgerRouterEndpoint?
export var EdgeService;
(function (EdgeService) {
    EdgeService["AUTOMERGE_REPLICATOR"] = "automerge-replicator";
    EdgeService["FEED_REPLICATOR"] = "feed-replicator";
    EdgeService["SWARM"] = "swarm";
    EdgeService["SIGNAL"] = "signal";
})(EdgeService || (EdgeService = {}));
export var EdgeAgentStatus;
(function (EdgeAgentStatus) {
    EdgeAgentStatus["ACTIVE"] = "active";
    EdgeAgentStatus["INACTIVE"] = "inactive";
    EdgeAgentStatus["NOT_FOUND"] = "not_found";
})(EdgeAgentStatus || (EdgeAgentStatus = {}));
export var OAuthProvider;
(function (OAuthProvider) {
    OAuthProvider["GOOGLE"] = "google";
    OAuthProvider["BLUESKY"] = "bluesky";
})(OAuthProvider || (OAuthProvider = {}));
export const InitiateOAuthFlowRequestSchema = Schema.Struct({
    provider: Schema.Enums(OAuthProvider),
    spaceId: Schema.String.pipe(Schema.filter(SpaceId.isValid)), // TODO(burdon): Use SpaceId.
    accessTokenId: Schema.String,
    scopes: Schema.mutable(Schema.Array(Schema.String)),
    // Set to true if we don't want periodic token refreshes in background, for cases like account connect
    noRefresh: Schema.optional(Schema.Boolean),
    // Provider-specific (user handle or did for bluesky) hint for auth server resolution
    loginHint: Schema.optional(Schema.String),
});
export var EdgeWebsocketProtocol;
(function (EdgeWebsocketProtocol) {
    EdgeWebsocketProtocol["V0"] = "edge-ws-v0";
    /**
     * Enables message framing and muxing by service-id.
     */
    EdgeWebsocketProtocol["V1"] = "edge-ws-v1";
})(EdgeWebsocketProtocol || (EdgeWebsocketProtocol = {}));
//# sourceMappingURL=edge.js.map