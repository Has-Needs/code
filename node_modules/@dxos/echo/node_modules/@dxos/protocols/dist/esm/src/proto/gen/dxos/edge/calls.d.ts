import substitutions from "../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/calls.proto}
 */
export interface Tracks {
    /**
     * Options:
     *   - proto3_optional = true
     */
    audio?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    audioEnabled?: boolean;
    /**
     * Options:
     *   - proto3_optional = true
     */
    video?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    videoEnabled?: boolean;
    /**
     * Options:
     *   - proto3_optional = true
     */
    screenshare?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    screenshareEnabled?: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/calls.proto}
 */
export interface UserState {
    id: string;
    name: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    transceiverSessionId?: string;
    raisedHand: boolean;
    speaking: boolean;
    joined: boolean;
    tracks: Tracks;
    activities?: Partial<Record<string, Activity>>;
}
/**
 * Activity state.
 * It will be merged across all users in the room based on the Lamport timestamp (last one wins).
 *
 * Defined in:
 *   {@link file://./../../../dxos/edge/calls.proto}
 */
export interface Activity {
    lamportTimestamp: LamportTimestamp;
    payload: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
}
/**
 * Meeting state.
 *
 * Used to encode/decode the Any payload of a call activity for the meeting plugin.
 *
 * Defined in:
 *   {@link file://./../../../dxos/edge/calls.proto}
 */
export interface MeetingPayload {
    meetingId: string;
    transcriptDxn: string;
    transcriptionEnabled: boolean;
}
/**
 * Lamport Timestamp.
 * @see https://en.wikipedia.org/wiki/Lamport_timestamp
 *
 * Defined in:
 *   {@link file://./../../../dxos/edge/calls.proto}
 */
export interface LamportTimestamp {
    version: number;
    id: string;
}
//# sourceMappingURL=calls.d.ts.map