import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_mesh_swarm from "./swarm.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface BridgeService {
    open: (request: ConnectionRequest, options?: RequestOptions) => Stream<BridgeEvent>;
    sendSignal: (request: SignalRequest, options?: RequestOptions) => Promise<void>;
    sendData: (request: DataRequest, options?: RequestOptions) => Promise<void>;
    close: (request: CloseRequest, options?: RequestOptions) => Promise<void>;
    getDetails: (request: DetailsRequest, options?: RequestOptions) => Promise<DetailsResponse>;
    getStats: (request: StatsRequest, options?: RequestOptions) => Promise<StatsResponse>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export declare enum ConnectionState {
    INVALID = 0,
    CONNECTING = 1,
    CONNECTED = 2,
    CLOSED = 3
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface BridgeEvent {
    connection?: BridgeEvent.ConnectionEvent;
    signal?: BridgeEvent.SignalEvent;
    data?: BridgeEvent.DataEvent;
}
export declare namespace BridgeEvent {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/mesh/bridge.proto}
     */
    interface ConnectionEvent {
        state: ConnectionState;
        /**
         * Options:
         *   - proto3_optional = true
         */
        error?: string;
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/mesh/bridge.proto}
     */
    interface SignalEvent {
        payload: dxos_mesh_swarm.Signal;
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/mesh/bridge.proto}
     */
    interface DataEvent {
        payload: Uint8Array;
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface ConnectionRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    initiator: boolean;
    remotePeerKey: string;
    ownPeerKey: string;
    topic: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface SignalRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    signal: dxos_mesh_swarm.Signal;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface DataRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    payload: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface CloseRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface DetailsRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface DetailsResponse {
    details: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface StatsRequest {
    proxyId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/bridge.proto}
 */
export interface StatsResponse {
    stats: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
}
//# sourceMappingURL=bridge.d.ts.map