import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { PublicKey } from "../keys_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/filter.proto.
 */
export declare const file_dxos_echo_filter: GenFile;
/**
 * @generated from message dxos.echo.filter.QueryOptions
 */
export type QueryOptions = Message<"dxos.echo.filter.QueryOptions"> & {
    /**
     * *
     * Query only in specific spaces.
     *
     * @generated from field: repeated string spaceIds = 5;
     */
    spaceIds: string[];
    /**
     * / Controls how deleted items are filtered.
     *
     * @generated from field: optional dxos.echo.filter.QueryOptions.ShowDeletedOption deleted = 1;
     */
    deleted?: QueryOptions_ShowDeletedOption;
    /**
     * *
     * Query only local spaces, or remote on agent.
     * @default `QueryOptions.DataLocation.LOCAL`
     *
     * @generated from field: optional dxos.echo.filter.QueryOptions.DataLocation data_location = 4;
     */
    dataLocation?: QueryOptions_DataLocation;
    /**
     * / References to inline when querying.
     *
     * @generated from field: optional google.protobuf.Struct include = 3;
     */
    include?: JsonObject;
    /**
     * / Return only first `limit` results.
     *
     * @generated from field: optional int32 limit = 7;
     */
    limit?: number;
    /**
     * *
     * Query only in specific spaces.
     * @deprecated Use `spaceIds` instead.
     *
     * @generated from field: repeated dxos.keys.PublicKey spaces = 6;
     */
    spaces: PublicKey[];
    /**
     * *
     * Filter by model.
     * @default * Only DocumentModel.
     * To querty all models, use `models: ["*"]`.
     * @deprecated
     *
     * @generated from field: repeated string models = 2;
     */
    models: string[];
};
/**
 * Describes the message dxos.echo.filter.QueryOptions.
 * Use `create(QueryOptionsSchema)` to create a new message.
 */
export declare const QueryOptionsSchema: GenMessage<QueryOptions>;
/**
 * @generated from enum dxos.echo.filter.QueryOptions.ShowDeletedOption
 */
export declare enum QueryOptions_ShowDeletedOption {
    /**
     * / Do not return deleted items. Default behaviour.
     *
     * @generated from enum value: HIDE_DELETED = 0;
     */
    HIDE_DELETED = 0,
    /**
     * / Return deleted and regular items.
     *
     * @generated from enum value: SHOW_DELETED = 1;
     */
    SHOW_DELETED = 1,
    /**
     * / Return only deleted items.
     *
     * @generated from enum value: SHOW_DELETED_ONLY = 2;
     */
    SHOW_DELETED_ONLY = 2
}
/**
 * Describes the enum dxos.echo.filter.QueryOptions.ShowDeletedOption.
 */
export declare const QueryOptions_ShowDeletedOptionSchema: GenEnum<QueryOptions_ShowDeletedOption>;
/**
 * @generated from enum dxos.echo.filter.QueryOptions.DataLocation
 */
export declare enum QueryOptions_DataLocation {
    /**
     * @generated from enum value: ALL = 0;
     */
    ALL = 0,
    /**
     * @generated from enum value: LOCAL = 1;
     */
    LOCAL = 1,
    /**
     * @generated from enum value: REMOTE = 2;
     */
    REMOTE = 2
}
/**
 * Describes the enum dxos.echo.filter.QueryOptions.DataLocation.
 */
export declare const QueryOptions_DataLocationSchema: GenEnum<QueryOptions_DataLocation>;
/**
 * *
 * Protocol for ephemeral Filter serialization.
 *
 * @generated from message dxos.echo.filter.Filter
 */
export type Filter = Message<"dxos.echo.filter.Filter"> & {
    /**
     * @generated from field: optional google.protobuf.Struct properties = 1;
     */
    properties?: JsonObject;
    /**
     * DXN for the type of the filter.
     *
     * @generated from field: repeated string type = 2;
     */
    type: string[];
    /**
     * @generated from field: repeated string object_ids = 8;
     */
    objectIds: string[];
    /**
     * @generated from field: optional string text = 3;
     */
    text?: string;
    /**
     * @generated from field: optional bool not = 4;
     */
    not?: boolean;
    /**
     * @generated from field: repeated dxos.echo.filter.Filter and = 5;
     */
    and: Filter[];
    /**
     * @generated from field: repeated dxos.echo.filter.Filter or = 6;
     */
    or: Filter[];
    /**
     * @generated from field: optional dxos.echo.filter.QueryOptions options = 7;
     */
    options?: QueryOptions;
};
/**
 * Describes the message dxos.echo.filter.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export declare const FilterSchema: GenMessage<Filter>;
//# sourceMappingURL=filter_pb.d.ts.map