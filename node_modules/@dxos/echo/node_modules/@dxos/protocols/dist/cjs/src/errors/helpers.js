"use strict";
//
// Copyright 2023 DXOS.org
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromCode = exports.registerErrorMessageContext = exports.registerErrorNoArgs = exports.registerError = exports.reconstructError = void 0;
const invariant_1 = require("@dxos/invariant");
const base_errors_js_1 = require("./base-errors.js");
const reconstructError = (error) => {
    const { name, message, context } = error;
    return (0, exports.errorFromCode)(name, message, context);
};
exports.reconstructError = reconstructError;
const errorRegistry = new Map();
const registerError = (code, make) => {
    (0, invariant_1.invariant)(!errorRegistry.has(code), `Error code already registered: ${code}`);
    errorRegistry.set(code, make);
};
exports.registerError = registerError;
const registerErrorNoArgs = (code, Constructor) => {
    (0, exports.registerError)(code, () => new Constructor());
};
exports.registerErrorNoArgs = registerErrorNoArgs;
const registerErrorMessageContext = (code, Constructor) => {
    (0, exports.registerError)(code, (message, context) => new Constructor(message, context));
};
exports.registerErrorMessageContext = registerErrorMessageContext;
const errorFromCode = (code, message, context) => {
    if (code && errorRegistry.has(code)) {
        return errorRegistry.get(code)(message, context);
    }
    else {
        return new base_errors_js_1.SystemError(code !== null && code !== void 0 ? code : 'Error', message, context);
    }
};
exports.errorFromCode = errorFromCode;
//# sourceMappingURL=helpers.js.map