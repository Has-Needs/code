import type { RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_client_services from "../client/services.js";
import * as dxos_halo_credentials from "./credentials.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface InvitationOptions {
    /**
     * Role of the peer.
     */
    role: InvitationOptions.Role;
}
export declare namespace InvitationOptions {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/halo/invitations.proto}
     */
    enum Role {
        GUEST = 0,
        HOST = 1
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface IntroductionRequest {
    /**
     * Guest's profile.
     *
     * Options:
     *   - proto3_optional = true
     */
    profile?: dxos_halo_credentials.ProfileDocument;
    /**
     * Options:
     *   - proto3_optional = true
     */
    invitationId?: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface IntroductionResponse {
    authMethod: dxos_client_services.Invitation.AuthMethod;
    /**
     * Present when auth_method is KNOWN_PUBLIC_KEY.
     *
     * Options:
     *   - proto3_optional = true
     */
    challenge?: Uint8Array;
    /**
     * Only present for testing invitation types.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface AuthenticationRequest {
    /**
     * Present when auth_method is SHARED_SECRET.
     *
     * Options:
     *   - proto3_optional = true
     */
    authCode?: string;
    /**
     * Present when auth_method is KNOWN_PUBLIC_KEY.
     *
     * Options:
     *   - proto3_optional = true
     */
    signedChallenge?: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface AuthenticationResponse {
    /**
     * Options:
     *   - proto3_optional = true
     */
    status?: AuthenticationResponse.Status;
}
export declare namespace AuthenticationResponse {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/halo/invitations.proto}
     */
    enum Status {
        OK = 0,
        INVALID_OTP = 1,
        INVALID_OPT_ATTEMPTS = 2,
        INTERNAL_ERROR = 3,
        INVALID_SIGNATURE = 4
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface DeviceAdmissionRequest {
    deviceKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    controlFeedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    dataFeedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    profile?: dxos_halo_credentials.DeviceProfileDocument;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface SpaceAdmissionRequest {
    identityKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    deviceKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    controlFeedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    dataFeedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface DelegateSpaceInvitation {
    invitationId: string;
    authMethod: dxos_client_services.Invitation.AuthMethod;
    swarmKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    role: dxos_halo_credentials.SpaceMember.Role;
    /**
     * Present for AuthMethod.KNOWN_PUBLIC_KEY, where guess needs to prove possession of a corresponding private key
     *
     * Options:
     *   - proto3_optional = true
     */
    guestKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    expiresOn?: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
    multiUse: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface CancelDelegatedInvitation {
    credentialId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface AdmissionRequest {
    device?: DeviceAdmissionRequest;
    space?: SpaceAdmissionRequest;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface DeviceAdmissionCredentials {
    identityKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    haloSpaceKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    genesisFeedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    controlTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
    /**
     * Credential of type `AuthorizedDevice` that allows guest device to act as the identity it was added to.
     */
    credential: dxos_halo_credentials.Credential;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface SpaceAdmissionCredentials {
    /**
     * Credential of type `SpaceMember` that grants Guest's identity access to the space.
     */
    credential: dxos_halo_credentials.Credential;
    /**
     * Hint to the guest about the current control timeframe.
     *
     * Options:
     *   - proto3_optional = true
     */
    controlTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
    /**
     * Hint to the guest about the current data timeframe.
     *
     * Options:
     *   - proto3_optional = true
     */
    dataTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface AdmissionResponse {
    device?: DeviceAdmissionCredentials;
    space?: SpaceAdmissionCredentials;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/invitations.proto}
 */
export interface InvitationHostService {
    /**
     * Both peers must call this method before any other.
     */
    options: (request: InvitationOptions, options?: RequestOptions) => Promise<void>;
    /**
     * Introduce guest to the host. Only on the host.
     */
    introduce: (request: IntroductionRequest, options?: RequestOptions) => Promise<IntroductionResponse>;
    /**
     * Authenticate request. Only on the host.
     */
    authenticate: (request: AuthenticationRequest, options?: RequestOptions) => Promise<AuthenticationResponse>;
    /**
     * Process admission credentials. Only on the host.
     */
    admit: (request: AdmissionRequest, options?: RequestOptions) => Promise<AdmissionResponse>;
}
//# sourceMappingURL=invitations.d.ts.map