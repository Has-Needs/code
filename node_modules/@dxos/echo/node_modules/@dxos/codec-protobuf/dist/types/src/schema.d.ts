import pb from 'protobufjs';
import { ProtoCodec } from './codec';
import { type Substitutions } from './common';
import { ServiceDescriptor } from './service';
export declare class Schema<T, S extends {} = {}> {
    private _typesRoot;
    static fromJson<T extends Record<string, any>, S extends Record<string, any> = {}>(schema: any, substitutions?: Substitutions): Schema<T, S>;
    private readonly _mapping;
    private readonly _codecCache;
    constructor(_typesRoot: pb.Root, substitutions: Substitutions);
    getCodecForType<K extends keyof T & string>(typeName: K): ProtoCodec<T[K]>;
    hasType(typeName: string): boolean;
    tryGetCodecForType(typeName: string): ProtoCodec;
    getService<K extends keyof S & string>(name: K): ServiceDescriptor<S[K]>;
    /**
     * Dynamically add new definitions to this schema.
     */
    addJson(schema: any): void;
}
//# sourceMappingURL=schema.d.ts.map