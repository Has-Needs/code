declare const Ref: unique symbol;
interface Ref {
    [Ref]: true;
    value: any;
}
/**
 * Pass a JS value by reference rather then parsing it as code.
 *
 * Usage example:
 *
 * ```typescript
 * const double = x => x * 2;;
 * codegen('add', ['a', 'b'], c => {
 *   c`const c = a + b;`;
 *   c`return ${ref(double)}(c)`;
 * });
 * ```
 *
 * would generate a function:
 *
 * ```typescript
 * const double = x => x * 2;;
 * function add(a, b) {
 *   const c = a + b;
 *   return double(c);
 * }
 * ```
 */
export declare const ref: (value: any) => Ref;
/**
 * DSL for runtime code generation.
 *
 * Example:
 *
 * ```typescript
 * const multiplier = 5;
 * codegen('add', ['a', 'b'], c => {
 *   c`const c = a + b;`;
 *   c`return c * ${multiplier};`;
 * });
 * ```
 *
 * would generate a function:
 *
 * ```typescript
 * function add(a, b) {
 *   const c = a + b;
 *   return c * 5;
 * }
 * ```
 *
 * @param name Function name. Will appear in stack traces.
 * @param args Names of function arguments.
 * @param gen Closure that builds the function source.
 * @param ctx Optional record with context variables that will appear in function's scope.
 */
export declare const codegen: (name: string, args: string[], gen: (c: (parts: TemplateStringsArray, ...args: any[]) => void) => void, ctx?: Record<string, any>) => ((...args: any[]) => any);
export {};
//# sourceMappingURL=codegen.d.ts.map