import { Schema, type Types } from 'effect';
import { type RelationSourceTargetRefs } from './relation';
import { type TypeMeta } from '../ast';
import { type HasId, type ToMutable } from '../types';
/**
 * Pipeable function to add ECHO object annotations to a schema.
 */
export declare const EchoObject: {
    (meta: TypeMeta): <Self extends Schema.Schema.Any>(self: Self) => EchoTypeSchema<Self>;
};
export type EchoRelationOptions<TSource extends Schema.Schema.AnyNoContext, TTarget extends Schema.Schema.AnyNoContext> = {
    typename: string;
    version: string;
    source: TSource;
    target: TTarget;
};
export declare const EchoRelation: <Source extends Schema.Schema.AnyNoContext, Target extends Schema.Schema.AnyNoContext>(options: EchoRelationOptions<Source, Target>) => <Self extends Schema.Schema.Any>(self: Self) => EchoTypeSchema<Self, RelationSourceTargetRefs<Schema.Schema.Type<Source>, Schema.Schema.Type<Target>>>;
type EchoTypeSchemaProps<T, ExtraFields = {}> = Types.Simplify<HasId & ToMutable<T> & ExtraFields>;
export interface EchoTypeSchema<Self extends Schema.Schema.Any, ExtraFields = {}> extends TypeMeta, Schema.AnnotableClass<EchoTypeSchema<Self, ExtraFields>, EchoTypeSchemaProps<Schema.Schema.Type<Self>, ExtraFields>, EchoTypeSchemaProps<Schema.Schema.Encoded<Self>, ExtraFields>, Schema.Schema.Context<Self>> {
    instanceOf(value: unknown): boolean;
}
export {};
//# sourceMappingURL=entity.d.ts.map