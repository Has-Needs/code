import { Schema } from 'effect';
import { type TypedObjectFields, type TypedObjectOptions } from './common';
import { type RelationSourceTargetRefs } from './relation';
import { type TypeMeta } from '../ast';
import { type HasId } from '../types';
/**
 * Definition for an object type that can be stored in an ECHO database.
 * Implements effect schema to define object properties.
 * Has a typename and version.
 *
 * In contrast to {@link EchoSchema} this definition is not recorded in the database.
 */
export interface TypedRelation<A = any, I = any> extends TypeMeta, Schema.Schema<A, I> {
}
/**
 * Typed object that could be used as a prototype in class definitions.
 * This is an internal API type.
 * Use {@link TypedRelation} for the common use-cases.
 */
export interface TypedRelationPrototype<A = any, I = any> extends TypedRelation<A, I> {
    /** Type constructor. */
    new (): HasId & A;
}
export type TypedRelationProps = TypeMeta & {
    disableValidation?: boolean;
};
/**
 * Base class factory for typed objects.
 * @deprecated Use {@link EchoRelation} instead.
 */
export declare const TypedRelation: ({ typename: _typename, version: _version, disableValidation }: TypedRelationProps) => <SchemaFields extends Schema.Struct.Fields, Options extends TypedObjectOptions>(fields: SchemaFields, options?: Options) => TypedRelationPrototype<TypedObjectFields<SchemaFields, Options> & RelationSourceTargetRefs, Schema.Struct.Encoded<SchemaFields>>;
//# sourceMappingURL=typed-relation.d.ts.map