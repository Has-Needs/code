{
  "version": 3,
  "sources": ["../../../src/core.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport { signal, batch, effect, untracked } from '@preact/signals-core';\n\nimport { registerSignalsRuntime as registerRuntimeForEcho } from './runtime';\n\nlet registered = false;\n\n/**\n * Idempotent function that registers preact signals for module.\n */\nexport const registerSignalsRuntime = () => {\n  if (registered) {\n    return false;\n  }\n\n  registerRuntimeForEcho({\n    createSignal: (debugInfo) => {\n      const thisSignal = signal({});\n      (thisSignal as any).__debugInfo = debugInfo;\n      return {\n        notifyRead: () => {\n          const _ = thisSignal.value;\n        },\n        notifyWrite: () => {\n          thisSignal.value = {};\n        },\n      };\n    },\n    batch,\n    untracked,\n  });\n\n  registered = true;\n  return true;\n};\n\n/**\n * Subscribes to data and executes the effect in a timeout.\n * Allows effects to be scheduled after the current render cycle.\n */\nexport const scheduledEffect = <T extends Record<string, any> = Record<string, any>>(\n  subscribeTo: () => T,\n  exec: (data: T) => void,\n) => {\n  return effect(() => {\n    const data = subscribeTo();\n    setTimeout(() => exec(data));\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAIA,0BAAiD;AAIjD,IAAIA,aAAa;AAKV,IAAMC,0BAAyB,MAAA;AACpC,MAAID,YAAY;AACd,WAAO;EACT;AAEAE,oDAAuB;IACrBC,cAAc,CAACC,cAAAA;AACb,YAAMC,iBAAaC,4BAAO,CAAC,CAAA;AAC1BD,iBAAmBE,cAAcH;AAClC,aAAO;QACLI,YAAY,MAAA;AACV,gBAAMC,IAAIJ,WAAWK;QACvB;QACAC,aAAa,MAAA;AACXN,qBAAWK,QAAQ,CAAC;QACtB;MACF;IACF;IACAE;IACAC;EACF,CAAA;AAEAb,eAAa;AACb,SAAO;AACT;AAMO,IAAMc,kBAAkB,CAC7BC,aACAC,SAAAA;AAEA,aAAOC,4BAAO,MAAA;AACZ,UAAMC,OAAOH,YAAAA;AACbI,eAAW,MAAMH,KAAKE,IAAAA,CAAAA;EACxB,CAAA;AACF;",
  "names": ["registered", "registerSignalsRuntime", "registerRuntimeForEcho", "createSignal", "debugInfo", "thisSignal", "signal", "__debugInfo", "notifyRead", "_", "value", "notifyWrite", "batch", "untracked", "scheduledEffect", "subscribeTo", "exec", "effect", "data", "setTimeout"]
}
