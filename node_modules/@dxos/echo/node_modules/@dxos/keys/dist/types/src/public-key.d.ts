import { type inspect, type InspectOptionsStylized } from 'node:util';
import { devtoolsFormatter, type DevtoolsFormatter, equalsSymbol, type Equatable, inspectCustom } from '@dxos/debug';
export declare const PUBLIC_KEY_LENGTH = 32;
export declare const SECRET_KEY_LENGTH = 64;
/**
 * All representations that can be converted to a PublicKey.
 */
export type PublicKeyLike = PublicKey | Buffer | Uint8Array | ArrayBuffer | string;
/**
 * The purpose of this class is to assure consistent use of keys throughout the project.
 * Keys should be maintained as buffers in objects and proto definitions, and converted to hex
 * strings as late as possible (eg, to log/display).
 */
export declare class PublicKey implements Equatable {
    private readonly _value;
    static ZERO: PublicKey;
    /**
     * Creates new instance of PublicKey automatically determining the input format.
     * @param source A Buffer, or Uint8Array, or hex encoded string, or something with an `asUint8Array` method on it
     * @returns PublicKey
     */
    static from(source: PublicKeyLike): PublicKey;
    /**
     * Same as `PublicKey.from` but does not throw and instead returns a `{ key: PublicKey }` or `{ error: Error }`
     * @param source Same PublicKeyLike argument as for `PublicKey.from`
     * @returns PublicKey
     */
    static safeFrom(source?: PublicKeyLike): PublicKey | undefined;
    /**
     * Creates new instance of PublicKey from hex string.
     */
    static fromHex(hex: string): PublicKey;
    /**
     * Creates a new key.
     */
    static random(): PublicKey;
    static randomOfLength(length: number): PublicKey;
    static randomSequence(): Generator<PublicKey>;
    /**
     * Tests if provided values is an instance of PublicKey.
     */
    static isPublicKey(value: any): value is PublicKey;
    /**
     * Asserts that provided values is an instance of PublicKey.
     */
    static assertValidPublicKey(value: any): asserts value is PublicKey;
    /**
     * Tests two keys for equality.
     */
    static equals(left: PublicKeyLike, right: PublicKeyLike): boolean;
    /**
     * @param str string representation of key.
     * @return Key buffer.
     * @deprecated All keys should be represented as instances of PublicKey.
     */
    static bufferize(str: string): Buffer;
    /**
     * @param key key like data structure (but not PublicKey which should use toString).
     * @return Hex string representation of key.
     * @deprecated All keys should be represented as instances of PublicKey.
     */
    static stringify(key: Buffer | Uint8Array | ArrayBuffer): string;
    /**
     * To be used with ComplexMap and ComplexSet.
     * Returns a scalar representation for this key.
     */
    static hash(key: PublicKey): string;
    static fromMultibase32(encoded: string): PublicKey;
    constructor(_value: Uint8Array);
    toString(): string;
    toJSON(): string;
    toJSONL(): string;
    get length(): number;
    toHex(): string;
    toMultibase32(): string;
    truncate(length?: undefined): string;
    asBuffer(): Buffer;
    asUint8Array(): Uint8Array;
    getInsecureHash(modulo: number): number;
    /**
     * Used by Node.js to get textual representation of this object when it's printed with a `console.log` statement.
     */
    [inspectCustom](depth: number, options: InspectOptionsStylized, inspectFn: typeof inspect): string;
    get [devtoolsFormatter](): DevtoolsFormatter;
    /**
     * Test this key for equality with some other key.
     */
    equals(other: PublicKeyLike): boolean;
    [equalsSymbol](other: any): boolean;
}
//# sourceMappingURL=public-key.d.ts.map