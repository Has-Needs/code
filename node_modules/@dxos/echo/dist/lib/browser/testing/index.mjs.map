{
  "version": 3,
  "sources": ["../../../../src/testing/types.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport { Type } from '..';\n\n// TODO(burdon): These are non-canonical test types, so we really shouldn't export and use in other classes (compare with @dxos/sdk/testing).\nexport namespace Testing {\n  const _Contact = Schema.Struct({\n    name: Schema.String,\n    username: Schema.String,\n    email: Schema.String,\n    tasks: Schema.mutable(Schema.Array(Schema.suspend((): Type.Ref<Task> => Type.Ref(Task)))),\n    address: Schema.Struct({\n      city: Schema.optional(Schema.String),\n      state: Schema.optional(Schema.String),\n      zip: Schema.optional(Schema.String),\n      coordinates: Schema.Struct({\n        lat: Schema.optional(Schema.Number),\n        lng: Schema.optional(Schema.Number),\n      }),\n    }),\n  }).pipe(\n    Schema.partial,\n    Type.Obj({\n      typename: 'example.com/type/Contact',\n      version: '0.1.0',\n    }),\n  );\n  export interface Contact extends Schema.Schema.Type<typeof _Contact> {}\n  export const Contact: Schema.Schema<Contact, Schema.Schema.Encoded<typeof _Contact>, never> = _Contact;\n\n  const _Task = Schema.Struct({\n    title: Schema.optional(Schema.String),\n    completed: Schema.optional(Schema.Boolean),\n    assignee: Schema.optional(Type.Ref(Contact)),\n    previous: Schema.optional(Schema.suspend((): Type.Ref<Task> => Type.Ref(Task))),\n    subTasks: Schema.optional(Schema.mutable(Schema.Array(Schema.suspend((): Type.Ref<Task> => Type.Ref(Task))))),\n    description: Schema.optional(Schema.String),\n  }).pipe(\n    Schema.partial,\n    Type.Obj({\n      typename: 'example.com/type/Task',\n      version: '0.1.0',\n    }),\n  );\n  export interface Task extends Schema.Schema.Type<typeof _Task> {}\n  export const Task: Schema.Schema<Task, Schema.Schema.Encoded<typeof _Task>, never> = _Task;\n\n  export enum RecordType {\n    UNDEFINED = 0,\n    PERSONAL = 1,\n    WORK = 2,\n  }\n\n  export const Container = Schema.Struct({\n    objects: Schema.mutable(Schema.Array(Type.Ref(Type.Expando))),\n    records: Schema.mutable(\n      Schema.Array(\n        Schema.partial(\n          Schema.Struct({\n            title: Schema.String,\n            description: Schema.String,\n            contacts: Schema.mutable(Schema.Array(Type.Ref(Contact))),\n            type: Schema.Enums(RecordType),\n          }),\n        ),\n      ),\n    ),\n  }).pipe(\n    Schema.partial,\n    Type.Obj({\n      typename: 'example.com/type/Container',\n      version: '0.1.0',\n    }),\n  );\n\n  export const WorksFor = Schema.Struct({\n    since: Schema.optional(Schema.String),\n  }).pipe(\n    Type.Relation({\n      typename: 'example.com/type/WorksFor',\n      version: '0.1.0',\n      source: Contact,\n      target: Contact,\n    }),\n  );\n  export interface WorksFor extends Schema.Schema.Type<typeof WorksFor> {}\n}\n"],
  "mappings": ";;;;;;AAIA,SAASA,cAAc;UAKNC,UAAAA;AACf,QAAMC,WAAWC,OAAOC,OAAO;IAC7BC,MAAMF,OAAOG;IACbC,UAAUJ,OAAOG;IACjBE,OAAOL,OAAOG;IACdG,OAAON,OAAOO,QAAQP,OAAOQ,MAAMR,OAAOS,QAAQ,MAAsBC,aAAKC,IAAGb,SAACc,IAAAA,CAAAA,CAAAA,CAAAA;IACjFC,SAASb,OAAOC,OAAO;MACrBa,MAAMd,OAAOe,SAASf,OAAOG,MAAM;MACnCa,OAAOhB,OAAOe,SAASf,OAAOG,MAAM;MACpCc,KAAKjB,OAAOe,SAASf,OAAOG,MAAM;MAClCe,aAAalB,OAAOC,OAAO;QACzBkB,KAAKnB,OAAOe,SAASf,OAAOoB,MAAM;QAClCC,KAAKrB,OAAOe,SAASf,OAAOoB,MAAM;MACpC,CAAA;IACF,CAAA;EACF,CAAA,EAAGE,KACDtB,OAAOuB,SACPb,aAAKc,IAAI;IACPC,UAAU;IACVC,SAAS;EACX,CAAA,CAAA;WAGWC,UAAiF5B;AAE9F,QAAM6B,QAAQ5B,OAAOC,OAAO;IAC1B4B,OAAO7B,OAAOe,SAASf,OAAOG,MAAM;IACpC2B,WAAW9B,OAAOe,SAASf,OAAO+B,OAAO;IACzCC,UAAUhC,OAAOe,SAASL,aAAKC,IAAGb,SAAC6B,OAAAA,CAAAA;IACnCM,UAAUjC,OAAOe,SAASf,OAAOS,QAAQ,MAAsBC,aAAKC,IAAGb,SAACc,IAAAA,CAAAA,CAAAA;IACxEsB,UAAUlC,OAAOe,SAASf,OAAOO,QAAQP,OAAOQ,MAAMR,OAAOS,QAAQ,MAAsBC,aAAKC,IAAGb,SAACc,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;IACpGuB,aAAanC,OAAOe,SAASf,OAAOG,MAAM;EAC5C,CAAA,EAAGmB,KACDtB,OAAOuB,SACPb,aAAKc,IAAI;IACPC,UAAU;IACVC,SAAS;EACX,CAAA,CAAA;WAGWd,OAAwEgB;YAEzEQ,YAAAA;;;;cAAAA,eAAAA,SAAAA,aAAAA,CAAAA,EAAAA;WAMCC,YAAYrC,OAAOC,OAAO;IACrCqC,SAAStC,OAAOO,QAAQP,OAAOQ,MAAME,aAAKC,IAAID,aAAK6B,OAAO,CAAA,CAAA;IAC1DC,SAASxC,OAAOO,QACdP,OAAOQ,MACLR,OAAOuB,QACLvB,OAAOC,OAAO;MACZ4B,OAAO7B,OAAOG;MACdgC,aAAanC,OAAOG;MACpBsC,UAAUzC,OAAOO,QAAQP,OAAOQ,MAAME,aAAKC,IAAGb,SAAC6B,OAAAA,CAAAA,CAAAA;MAC/Ce,MAAM1C,OAAO2C,MAAK7C,SAACsC,UAAAA;IACrB,CAAA,CAAA,CAAA,CAAA;EAIR,CAAA,EAAGd,KACDtB,OAAOuB,SACPb,aAAKc,IAAI;IACPC,UAAU;IACVC,SAAS;EACX,CAAA,CAAA;WAGWkB,WAAW5C,OAAOC,OAAO;IACpC4C,OAAO7C,OAAOe,SAASf,OAAOG,MAAM;EACtC,CAAA,EAAGmB,KACDZ,aAAKoC,SAAS;IACZrB,UAAU;IACVC,SAAS;IACTqB,QAAMjD,SAAE6B;IACRqB,QAAMlD,SAAE6B;EACV,CAAA,CAAA;AAGJ,GAjFiB7B,YAAAA,UAAAA,CAAAA,EAAAA;;",
  "names": ["Schema", "Testing", "_Contact", "Schema", "Struct", "name", "String", "username", "email", "tasks", "mutable", "Array", "suspend", "Type", "Ref", "Task", "address", "city", "optional", "state", "zip", "coordinates", "lat", "Number", "lng", "pipe", "partial", "Obj", "typename", "version", "Contact", "_Task", "title", "completed", "Boolean", "assignee", "previous", "subTasks", "description", "RecordType", "Container", "objects", "Expando", "records", "contacts", "type", "Enums", "WorksFor", "since", "Relation", "source", "target"]
}
