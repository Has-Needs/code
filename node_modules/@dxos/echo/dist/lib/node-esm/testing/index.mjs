import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  Type_exports
} from "../chunk-BYBICDIO.mjs";

// packages/core/echo/echo/src/testing/types.ts
import { Schema } from "effect";
(function(Testing2) {
  const _Contact = Schema.Struct({
    name: Schema.String,
    username: Schema.String,
    email: Schema.String,
    tasks: Schema.mutable(Schema.Array(Schema.suspend(() => Type_exports.Ref(Testing2.Task)))),
    address: Schema.Struct({
      city: Schema.optional(Schema.String),
      state: Schema.optional(Schema.String),
      zip: Schema.optional(Schema.String),
      coordinates: Schema.Struct({
        lat: Schema.optional(Schema.Number),
        lng: Schema.optional(Schema.Number)
      })
    })
  }).pipe(Schema.partial, Type_exports.Obj({
    typename: "example.com/type/Contact",
    version: "0.1.0"
  }));
  Testing2.Contact = _Contact;
  const _Task = Schema.Struct({
    title: Schema.optional(Schema.String),
    completed: Schema.optional(Schema.Boolean),
    assignee: Schema.optional(Type_exports.Ref(Testing2.Contact)),
    previous: Schema.optional(Schema.suspend(() => Type_exports.Ref(Testing2.Task))),
    subTasks: Schema.optional(Schema.mutable(Schema.Array(Schema.suspend(() => Type_exports.Ref(Testing2.Task))))),
    description: Schema.optional(Schema.String)
  }).pipe(Schema.partial, Type_exports.Obj({
    typename: "example.com/type/Task",
    version: "0.1.0"
  }));
  Testing2.Task = _Task;
  (function(RecordType) {
    RecordType[RecordType["UNDEFINED"] = 0] = "UNDEFINED";
    RecordType[RecordType["PERSONAL"] = 1] = "PERSONAL";
    RecordType[RecordType["WORK"] = 2] = "WORK";
  })(Testing2.RecordType || (Testing2.RecordType = {}));
  Testing2.Container = Schema.Struct({
    objects: Schema.mutable(Schema.Array(Type_exports.Ref(Type_exports.Expando))),
    records: Schema.mutable(Schema.Array(Schema.partial(Schema.Struct({
      title: Schema.String,
      description: Schema.String,
      contacts: Schema.mutable(Schema.Array(Type_exports.Ref(Testing2.Contact))),
      type: Schema.Enums(Testing2.RecordType)
    }))))
  }).pipe(Schema.partial, Type_exports.Obj({
    typename: "example.com/type/Container",
    version: "0.1.0"
  }));
  Testing2.WorksFor = Schema.Struct({
    since: Schema.optional(Schema.String)
  }).pipe(Type_exports.Relation({
    typename: "example.com/type/WorksFor",
    version: "0.1.0",
    source: Testing2.Contact,
    target: Testing2.Contact
  }));
})(Testing || (Testing = {}));
var Testing;
export {
  Testing
};
//# sourceMappingURL=index.mjs.map
