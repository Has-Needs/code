"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  Testing: () => Testing
});
module.exports = __toCommonJS(testing_exports);
var import_chunk_4HQE2F3L = require("../chunk-4HQE2F3L.cjs");
var import_effect = require("effect");
(function(Testing2) {
  const _Contact = import_effect.Schema.Struct({
    name: import_effect.Schema.String,
    username: import_effect.Schema.String,
    email: import_effect.Schema.String,
    tasks: import_effect.Schema.mutable(import_effect.Schema.Array(import_effect.Schema.suspend(() => import_chunk_4HQE2F3L.Type_exports.Ref(Testing2.Task)))),
    address: import_effect.Schema.Struct({
      city: import_effect.Schema.optional(import_effect.Schema.String),
      state: import_effect.Schema.optional(import_effect.Schema.String),
      zip: import_effect.Schema.optional(import_effect.Schema.String),
      coordinates: import_effect.Schema.Struct({
        lat: import_effect.Schema.optional(import_effect.Schema.Number),
        lng: import_effect.Schema.optional(import_effect.Schema.Number)
      })
    })
  }).pipe(import_effect.Schema.partial, import_chunk_4HQE2F3L.Type_exports.Obj({
    typename: "example.com/type/Contact",
    version: "0.1.0"
  }));
  Testing2.Contact = _Contact;
  const _Task = import_effect.Schema.Struct({
    title: import_effect.Schema.optional(import_effect.Schema.String),
    completed: import_effect.Schema.optional(import_effect.Schema.Boolean),
    assignee: import_effect.Schema.optional(import_chunk_4HQE2F3L.Type_exports.Ref(Testing2.Contact)),
    previous: import_effect.Schema.optional(import_effect.Schema.suspend(() => import_chunk_4HQE2F3L.Type_exports.Ref(Testing2.Task))),
    subTasks: import_effect.Schema.optional(import_effect.Schema.mutable(import_effect.Schema.Array(import_effect.Schema.suspend(() => import_chunk_4HQE2F3L.Type_exports.Ref(Testing2.Task))))),
    description: import_effect.Schema.optional(import_effect.Schema.String)
  }).pipe(import_effect.Schema.partial, import_chunk_4HQE2F3L.Type_exports.Obj({
    typename: "example.com/type/Task",
    version: "0.1.0"
  }));
  Testing2.Task = _Task;
  (function(RecordType) {
    RecordType[RecordType["UNDEFINED"] = 0] = "UNDEFINED";
    RecordType[RecordType["PERSONAL"] = 1] = "PERSONAL";
    RecordType[RecordType["WORK"] = 2] = "WORK";
  })(Testing2.RecordType || (Testing2.RecordType = {}));
  Testing2.Container = import_effect.Schema.Struct({
    objects: import_effect.Schema.mutable(import_effect.Schema.Array(import_chunk_4HQE2F3L.Type_exports.Ref(import_chunk_4HQE2F3L.Type_exports.Expando))),
    records: import_effect.Schema.mutable(import_effect.Schema.Array(import_effect.Schema.partial(import_effect.Schema.Struct({
      title: import_effect.Schema.String,
      description: import_effect.Schema.String,
      contacts: import_effect.Schema.mutable(import_effect.Schema.Array(import_chunk_4HQE2F3L.Type_exports.Ref(Testing2.Contact))),
      type: import_effect.Schema.Enums(Testing2.RecordType)
    }))))
  }).pipe(import_effect.Schema.partial, import_chunk_4HQE2F3L.Type_exports.Obj({
    typename: "example.com/type/Container",
    version: "0.1.0"
  }));
  Testing2.WorksFor = import_effect.Schema.Struct({
    since: import_effect.Schema.optional(import_effect.Schema.String)
  }).pipe(import_chunk_4HQE2F3L.Type_exports.Relation({
    typename: "example.com/type/WorksFor",
    version: "0.1.0",
    source: Testing2.Contact,
    target: Testing2.Contact
  }));
})(Testing || (Testing = {}));
var Testing;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Testing
});
//# sourceMappingURL=index.cjs.map
