import { type Schema } from 'effect';
import * as EchoSchema from '@dxos/echo-schema';
import { DXN } from '@dxos/keys';
import { type Live } from '@dxos/live-object';
import type * as Obj from './Obj';
import type * as Type from './Type';
interface RelationBase<Source, Target> extends Type.Relation.Endpoints<Source, Target>, Type.OfKind<EchoSchema.EntityKind.Relation> {
    readonly id: EchoSchema.ObjectId;
}
/**
 * Relation type with specific properties.
 */
export type Relation<Source extends Obj.Any, Target extends Obj.Any, Props> = RelationBase<Source, Target> & Props;
/**
 * Base type for all ECHO relations.
 */
export interface Any extends RelationBase<Obj.Any, Obj.Any> {
}
export declare const Source: unique symbol;
export type Source = typeof Source;
export declare const Target: unique symbol;
export type Target = typeof Target;
type MakeProps<T extends Any> = {
    id?: EchoSchema.ObjectId;
    [Source]: T[Source];
    [Target]: T[Target];
} & Type.Properties<T>;
/**
 * Creates new relation.
 * @param schema - Relation schema.
 * @param props - Relation properties. Endpoints are passed as [Relation.Source] and [Relation.Target] keys.
 * @param meta - Relation metadata.
 * @returns
 */
export declare const make: <S extends Type.Relation.Any>(schema: S, props: NoInfer<MakeProps<Schema.Schema.Type<S>>>, meta?: EchoSchema.ObjectMeta) => Live<Schema.Schema.Type<S> & Type.OfKind<EchoSchema.EntityKind.Relation>>;
export declare const isRelation: (value: unknown) => value is Any;
/**
 * @returns Relation source DXN.
 * @throws If the object is not a relation.
 */
export declare const getSourceDXN: (value: Any) => DXN;
/**
 * @returns Relation target DXN.
 * @throws If the object is not a relation.
 */
export declare const getTargetDXN: (value: Any) => DXN;
/**
 * @returns Relation source.
 * @throws If the object is not a relation.
 */
export declare const getSource: <T extends Any>(relation: T) => Type.Relation.Source<T>;
/**
 * @returns Relation target.
 * @throws If the object is not a relation.
 */
export declare const getTarget: <T extends Any>(relation: T) => Type.Relation.Target<T>;
export {};
//# sourceMappingURL=Relation.d.ts.map