import { Schema } from 'effect';
import { Type } from '..';
export declare namespace Testing {
    const _Contact: Type.obj<Schema.SchemaClass<{
        readonly name?: string | undefined;
        readonly email?: string | undefined;
        readonly username?: string | undefined;
        readonly tasks?: import("@dxos/echo-schema").Ref<Task>[] | undefined;
        readonly address?: {
            readonly city?: string | undefined;
            readonly state?: string | undefined;
            readonly zip?: string | undefined;
            readonly coordinates: {
                readonly lat?: number | undefined;
                readonly lng?: number | undefined;
            };
        } | undefined;
    }, {
        readonly name?: string | undefined;
        readonly email?: string | undefined;
        readonly username?: string | undefined;
        readonly tasks?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
        readonly address?: {
            readonly coordinates: {
                readonly lat?: number | undefined;
                readonly lng?: number | undefined;
            };
            readonly city?: string | undefined;
            readonly state?: string | undefined;
            readonly zip?: string | undefined;
        } | undefined;
    }, never>>;
    export interface Contact extends Schema.Schema.Type<typeof _Contact> {
    }
    export const Contact: Schema.Schema<Contact, Schema.Schema.Encoded<typeof _Contact>, never>;
    const _Task: Type.obj<Schema.SchemaClass<{
        readonly description?: string | undefined;
        readonly title?: string | undefined;
        readonly assignee?: import("@dxos/echo-schema").Ref<Contact> | undefined;
        readonly completed?: boolean | undefined;
        readonly previous?: import("@dxos/echo-schema").Ref<Task> | undefined;
        readonly subTasks?: import("@dxos/echo-schema").Ref<Task>[] | undefined;
    }, {
        readonly description?: string | undefined;
        readonly title?: string | undefined;
        readonly assignee?: import("@dxos/echo-protocol").EncodedReference | undefined;
        readonly completed?: boolean | undefined;
        readonly previous?: import("@dxos/echo-protocol").EncodedReference | undefined;
        readonly subTasks?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
    }, never>>;
    export interface Task extends Schema.Schema.Type<typeof _Task> {
    }
    export const Task: Schema.Schema<Task, Schema.Schema.Encoded<typeof _Task>, never>;
    export enum RecordType {
        UNDEFINED = 0,
        PERSONAL = 1,
        WORK = 2
    }
    export const Container: Type.obj<Schema.SchemaClass<{
        readonly records?: {
            readonly type?: RecordType | undefined;
            readonly description?: string | undefined;
            readonly title?: string | undefined;
            readonly contacts?: import("@dxos/echo-schema").Ref<Contact>[] | undefined;
        }[] | undefined;
        readonly objects?: import("@dxos/echo-schema").Ref<Type.Expando>[] | undefined;
    }, {
        readonly records?: {
            readonly type?: RecordType | undefined;
            readonly description?: string | undefined;
            readonly title?: string | undefined;
            readonly contacts?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
        }[] | undefined;
        readonly objects?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
    }, never>>;
    export const WorksFor: Type.relation<Schema.Struct<{
        since: Schema.optional<typeof Schema.String>;
    }>, Schema.Schema<Contact, {
        id: string;
        name?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        tasks?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
        address?: {
            readonly coordinates: {
                readonly lat?: number | undefined;
                readonly lng?: number | undefined;
            };
            readonly city?: string | undefined;
            readonly state?: string | undefined;
            readonly zip?: string | undefined;
        } | undefined;
    }, never>, Schema.Schema<Contact, {
        id: string;
        name?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        tasks?: import("@dxos/echo-protocol").EncodedReference[] | undefined;
        address?: {
            readonly coordinates: {
                readonly lat?: number | undefined;
                readonly lng?: number | undefined;
            };
            readonly city?: string | undefined;
            readonly state?: string | undefined;
            readonly zip?: string | undefined;
        } | undefined;
    }, never>>;
    export interface WorksFor extends Schema.Schema.Type<typeof WorksFor> {
    }
    export {};
}
//# sourceMappingURL=types.d.ts.map