{
  "version": 3,
  "sources": ["../../../src/hooks/useDensityContext.ts", "../../../src/components/AnchoredOverflow/AnchoredOverflow.tsx", "../../../src/hooks/useElevationContext.ts", "../../../src/hooks/useThemeContext.ts", "../../../src/hooks/useIconHref.ts", "../../../src/hooks/useSafeArea.ts", "../../../src/hooks/useTranslationsContext.ts", "../../../src/components/ThemeProvider/TranslationsProvider.tsx", "../../../src/hooks/useVisualViewport.ts", "../../../src/components/Avatars/Avatar.tsx", "../../../src/components/Breadcrumb/Breadcrumb.tsx", "../../../src/components/Link/Link.tsx", "../../../src/components/Buttons/Button.tsx", "../../../src/components/Buttons/IconButton.tsx", "../../../src/components/Icon/Icon.tsx", "../../../src/components/Tooltip/Tooltip.tsx", "../../../src/components/Buttons/Toggle.tsx", "../../../src/components/Buttons/ToggleGroup.tsx", "../../../src/components/Clipboard/ClipboardProvider.tsx", "../../../src/components/Clipboard/CopyButton.tsx", "../../../src/components/ThemeProvider/ThemeProvider.tsx", "../../../src/util/hasIosKeyboard.ts", "../../../src/components/DensityProvider/DensityProvider.tsx", "../../../src/components/ElevationProvider/ElevationProvider.tsx", "../../../src/components/Clipboard/index.ts", "../../../src/components/Dialogs/Dialog.tsx", "../../../src/components/Dialogs/AlertDialog.tsx", "../../../src/components/Input/Input.tsx", "../../../src/components/Lists/List.tsx", "../../../src/components/Lists/ListDropIndicator.tsx", "../../../src/components/Lists/Tree.tsx", "../../../src/components/Lists/TreeDropIndicator.tsx", "../../../src/components/Lists/Treegrid.tsx", "../../../src/components/Main/Main.tsx", "../../../src/components/Main/useSwipeToDismiss.ts", "../../../src/components/Menus/ContextMenu.tsx", "../../../src/hooks/useSafeCollisionPadding.ts", "../../../src/components/Menus/DropdownMenu.tsx", "../../../src/components/Message/Message.tsx", "../../../src/components/Popover/Popover.tsx", "../../../src/components/Status/Status.tsx", "../../../src/components/ScrollArea/ScrollArea.tsx", "../../../src/components/Select/Select.tsx", "../../../src/components/Separator/Separator.tsx", "../../../src/components/Tag/Tag.tsx", "../../../src/components/Toast/Toast.tsx", "../../../src/components/Toolbar/Toolbar.tsx"],
  "sourcesContent": ["//\n// Copyright 2023 DXOS.org\n//\n\nimport { useContext } from 'react';\n\nimport { type Density } from '@dxos/react-ui-types';\n\nimport { DensityContext } from '../components';\n\nexport const useDensityContext = (propsDensity?: Density) => {\n  const { density } = useContext(DensityContext);\n  return propsDensity ?? density;\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\ntype AnchoredOverflowRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n};\n\nconst AnchoredOverflowRoot = forwardRef<HTMLDivElement, AnchoredOverflowRootProps>(\n  ({ asChild, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root\n        role='none'\n        {...props}\n        className={tx('anchoredOverflow.root', 'overflow-anchored', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype AnchoredOverflowAnchorProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n};\n\nconst AnchoredOverflowAnchor = forwardRef<HTMLDivElement, AnchoredOverflowAnchorProps>(\n  ({ asChild, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root\n        role='none'\n        {...props}\n        className={tx('anchoredOverflow.anchor', 'overflow-anchor', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\nexport const AnchoredOverflow = {\n  Root: AnchoredOverflowRoot,\n  Anchor: AnchoredOverflowAnchor,\n};\n\nexport type { AnchoredOverflowRootProps, AnchoredOverflowAnchorProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useContext } from 'react';\n\nimport { type Elevation } from '@dxos/react-ui-types';\n\nimport { ElevationContext } from '../components';\n\nexport const useElevationContext = (propsElevation?: Elevation) => {\n  const { elevation } = useContext(ElevationContext);\n  return propsElevation ?? elevation;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useContext } from 'react';\n\nimport { raise } from '@dxos/debug';\n\nimport { ThemeContext } from '../components';\n\nexport const useThemeContext = () => useContext(ThemeContext) ?? raise(new Error('Missing ThemeContext'));\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { useThemeContext } from './useThemeContext';\n\nconst ICONS_URL = '/icons.svg';\n\nexport const useIconHref = (icon?: string) => {\n  const { noCache } = useThemeContext();\n  const url = noCache ? `${ICONS_URL}?nocache=${new Date().getMinutes()}` : ICONS_URL;\n  return icon ? `${url}#${icon}` : undefined;\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { useCallback, useState } from 'react';\n\nimport { useResize } from '@dxos/react-hooks';\n\nexport type SafeAreaPadding = Record<'top' | 'right' | 'bottom' | 'left', number>;\n\nexport const initialSafeArea = { top: NaN, right: NaN, bottom: NaN, left: NaN };\n\nexport const useSafeArea = (): SafeAreaPadding => {\n  const [padding, setPadding] = useState<SafeAreaPadding>(initialSafeArea);\n  const handleResize = useCallback(() => {\n    setPadding({\n      top: parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-top')),\n      right: parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-right')),\n      bottom: parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom')),\n      left: parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-left')),\n    });\n  }, []);\n  useResize(handleResize);\n  return padding;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useContext } from 'react';\n\nimport { TranslationsContext } from '../components/ThemeProvider/TranslationsProvider';\n\nexport const useTranslationsContext = () => useContext(TranslationsContext);\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { enUS as dtLocaleEnUs, type Locale } from 'date-fns/locale';\nimport i18Next, { type TFunction, type Resource } from 'i18next';\nimport React, { type ReactNode, useEffect, createContext, useState, Suspense, useContext } from 'react';\nimport { initReactI18next, useTranslation as useI18NextTranslation } from 'react-i18next';\n\nconst initialLng = 'en-US';\nconst initialNs = 'dxos-common';\nconst initialDtLocale = dtLocaleEnUs;\n\n// TODO(thure): `Parameters<TFunction>` causes typechecking issues because `TFunction` has so many signatures.\nexport type Label = string | [string, { ns: string; count?: number; defaultValue?: string }];\n\nexport const isLabel = (o: any): o is Label =>\n  typeof o === 'string' ||\n  (Array.isArray(o) &&\n    o.length === 2 &&\n    typeof o[0] === 'string' &&\n    !!o[1] &&\n    typeof o[1] === 'object' &&\n    'ns' in o[1] &&\n    typeof o[1].ns === 'string');\n\nexport const toLocalizedString = (label: Label, t: TFunction) => (Array.isArray(label) ? t(...label) : label);\n\nexport const resources = {\n  [initialLng]: {\n    [initialNs]: {\n      'loading translations': 'Loading translationsâ€¦',\n    },\n  },\n} as const;\n\nvoid i18Next.use(initReactI18next).init({\n  resources,\n  lng: initialLng,\n  defaultNS: initialNs,\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport interface TranslationsProviderProps {\n  children?: ReactNode;\n  // TODO(wittjosiah): Rename to `placeholder` to match ClientProvider?\n  //   Placeholder => loading, fallback => error.\n  fallback?: ReactNode;\n  resourceExtensions?: Resource[];\n  appNs?: string;\n  dtLocale?: Locale;\n}\n\nexport const TranslationsContext = createContext({\n  appNs: initialNs,\n  dtLocale: initialDtLocale,\n});\n\nexport const useTranslation = (...args: Parameters<typeof useI18NextTranslation>) => {\n  const result = useI18NextTranslation(...args);\n  const { dtLocale } = useContext(TranslationsContext);\n  return { ...result, dtLocale };\n};\n\nexport const TranslationsProvider = ({\n  fallback,\n  resourceExtensions,\n  children,\n  appNs,\n  dtLocale,\n}: TranslationsProviderProps) => {\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    setLoaded(false);\n    if (resourceExtensions && resourceExtensions.length) {\n      resourceExtensions.forEach((resource) => {\n        Object.keys(resource).forEach((language) => {\n          Object.keys(resource[language]).forEach((ns) => {\n            i18Next.addResourceBundle(language, ns, resource[language][ns]);\n          });\n        });\n      });\n    }\n\n    setLoaded(true);\n  }, [resourceExtensions]);\n\n  // TODO(thure): This is not ideal, but i18next was causing `Suspense` to not render the fallback even when the child was asking for namespaces yet to be added.\n  // TODO(burdon): Fallbacks should only appear after a short delay, and if the displayed then be visible for 500mx to avoid startup flickering.\n  return (\n    <TranslationsContext.Provider value={{ appNs: appNs ?? initialNs, dtLocale: dtLocale ?? initialDtLocale }}>\n      <Suspense fallback={fallback}>{loaded ? children : fallback}</Suspense>\n    </TranslationsContext.Provider>\n  );\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useCallback, type useEffect, useState } from 'react';\n\nimport { useResize } from '@dxos/react-hooks';\n\nexport const useVisualViewport = (deps?: Parameters<typeof useEffect>[1]) => {\n  const [width, setWidth] = useState<number | null>(null);\n  const [height, setHeight] = useState<number | null>(null);\n\n  const handleResize = useCallback(() => {\n    if (window.visualViewport) {\n      setWidth(window.visualViewport.width);\n      setHeight(window.visualViewport.height);\n    }\n  }, []);\n\n  useResize(handleResize);\n\n  return { width, height };\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport '@dxos/lit-ui/dx-avatar.pcss';\n\nimport { createContext } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentProps, type ComponentPropsWithRef, forwardRef, type PropsWithChildren } from 'react';\n\nimport {\n  type AvatarVariant,\n  type AvatarStatus,\n  type AvatarAnimation,\n  type DxAvatar as NaturalDxAvatar,\n} from '@dxos/lit-ui';\nimport { DxAvatar } from '@dxos/lit-ui/react';\nimport { useId } from '@dxos/react-hooks';\nimport { mx } from '@dxos/react-ui-theme';\n\nimport { useIconHref, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\nexport type AvatarRootProps = PropsWithChildren<Partial<AvatarContextValue>>;\n\ntype AvatarContextValue = {\n  labelId: string;\n  descriptionId: string;\n};\n\nconst AVATAR_NAME = 'Avatar';\nconst [AvatarProvider, useAvatarContext] = createContext<AvatarContextValue>(AVATAR_NAME);\n\nconst AvatarRoot = ({ children, labelId: propsLabelId, descriptionId: propsDescriptionId }: AvatarRootProps) => {\n  const labelId = useId('avatar__label', propsLabelId);\n  const descriptionId = useId('avatar__description', propsDescriptionId);\n  return <AvatarProvider {...{ labelId, descriptionId }}>{children}</AvatarProvider>;\n};\n\ntype AvatarContentProps = ThemedClassName<Omit<ComponentProps<typeof DxAvatar>, 'children'>>;\n\nconst AvatarContent = forwardRef<NaturalDxAvatar, AvatarContentProps>(\n  ({ icon, classNames, ...props }, forwardedRef) => {\n    const href = useIconHref(icon);\n    const { labelId, descriptionId } = useAvatarContext('AvatarContent');\n    return (\n      <DxAvatar\n        {...props}\n        icon={href}\n        aria-labelledby={labelId}\n        aria-describedby={descriptionId}\n        rootClassName={mx(classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype AvatarLabelProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'>> & {\n  asChild?: boolean;\n  srOnly?: boolean;\n};\n\nconst AvatarLabel = forwardRef<HTMLSpanElement, AvatarLabelProps>(\n  ({ asChild, srOnly, classNames, ...props }, forwardedRef) => {\n    const Root = asChild ? Slot : Primitive.span;\n    const { tx } = useThemeContext();\n    const { labelId } = useAvatarContext('AvatarLabel');\n    return (\n      <Root\n        {...props}\n        id={labelId}\n        ref={forwardedRef}\n        className={tx('avatar.label', 'avatar__label', { srOnly }, classNames)}\n      />\n    );\n  },\n);\n\ntype AvatarDescriptionProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'>> & {\n  asChild?: boolean;\n  srOnly?: boolean;\n};\n\nconst AvatarDescription = forwardRef<HTMLSpanElement, AvatarDescriptionProps>(\n  ({ asChild, srOnly, classNames, ...props }, forwardedRef) => {\n    const Root = asChild ? Slot : Primitive.span;\n    const { tx } = useThemeContext();\n    const { descriptionId } = useAvatarContext('AvatarDescription');\n    return (\n      <Root\n        {...props}\n        id={descriptionId}\n        ref={forwardedRef}\n        className={tx('avatar.description', 'avatar__description', { srOnly }, classNames)}\n      />\n    );\n  },\n);\n\nexport const Avatar = {\n  Root: AvatarRoot,\n  Content: AvatarContent,\n  Label: AvatarLabel,\n  Description: AvatarDescription,\n};\n\nexport { useAvatarContext };\n\nexport type {\n  AvatarStatus,\n  AvatarVariant,\n  AvatarAnimation,\n  AvatarContentProps,\n  AvatarLabelProps,\n  AvatarDescriptionProps,\n  NaturalDxAvatar as DxAvatar,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Dot } from '@phosphor-icons/react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithoutRef, type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { Link, type LinkProps } from '../Link';\n\ntype BreadcrumbRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  'aria-label': string;\n  asChild?: boolean;\n};\n\nconst BreadcrumbRoot = forwardRef<HTMLDivElement, BreadcrumbRootProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root\n        role='navigation'\n        {...props}\n        className={tx('breadcrumb.root', 'breadcrumb', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype BreadcrumbListProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.ol>> & { asChild?: boolean };\n\nconst BreadcrumbList = forwardRef<HTMLOListElement, BreadcrumbListProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.ol;\n    return (\n      <Root\n        role='list'\n        {...props}\n        className={tx('breadcrumb.list', 'breadcrumb__list', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype BreadcrumbListItemProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.li>> & { asChild?: boolean };\n\nconst BreadcrumbListItem = forwardRef<HTMLLIElement, BreadcrumbListItemProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.li;\n    return (\n      <Root\n        role='listitem'\n        {...props}\n        className={tx('breadcrumb.listItem', 'breadcrumb__list__item', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype BreadcrumbLinkProps = LinkProps;\n\nconst BreadcrumbLink = forwardRef<HTMLAnchorElement, BreadcrumbLinkProps>(({ asChild, ...props }, forwardedRef) => {\n  const Root = asChild ? Slot : Link;\n  return <Root {...props} ref={forwardedRef} />;\n});\n\ntype BreadcrumbCurrentProps = ThemedClassName<ComponentPropsWithRef<'h1'>> & { asChild?: boolean };\n\nconst BreadcrumbCurrent = forwardRef<HTMLHeadingElement, BreadcrumbCurrentProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : 'h1';\n    return (\n      <Root\n        {...props}\n        aria-current='page'\n        className={tx('breadcrumb.current', 'breadcrumb__item__heading--current', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype BreadcrumbSeparatorProps = ThemedClassName<ComponentPropsWithoutRef<typeof Primitive.span>>;\n\nconst BreadcrumbSeparator = ({ children, classNames, ...props }: BreadcrumbSeparatorProps) => {\n  const { tx } = useThemeContext();\n  return (\n    <Primitive.span\n      role='separator'\n      aria-hidden='true'\n      {...props}\n      className={tx('breadcrumb.separator', 'breadcrumb__separator', {}, classNames)}\n    >\n      {children ?? <Dot weight='bold' />}\n    </Primitive.span>\n  );\n};\n\nexport const Breadcrumb = {\n  Root: BreadcrumbRoot,\n  List: BreadcrumbList,\n  ListItem: BreadcrumbListItem,\n  Link: BreadcrumbLink,\n  Current: BreadcrumbCurrent,\n  Separator: BreadcrumbSeparator,\n};\n\nexport type {\n  BreadcrumbRootProps,\n  BreadcrumbListProps,\n  BreadcrumbListItemProps,\n  BreadcrumbLinkProps,\n  BreadcrumbCurrentProps,\n  BreadcrumbSeparatorProps,\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\nexport type LinkProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.a>> &\n  Partial<{\n    asChild: boolean;\n    variant: 'accent' | 'neutral';\n  }>;\n\nexport const Link = forwardRef<HTMLAnchorElement, LinkProps>(\n  ({ asChild, variant, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.a;\n    return <Root {...props} className={tx('link.root', 'link', { variant }, classNames)} ref={forwardedRef} />;\n  },\n);\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { createContext } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef, memo } from 'react';\n\nimport { type Density, type Elevation } from '@dxos/react-ui-types';\n\nimport { useDensityContext, useElevationContext, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\ninterface ButtonProps extends ThemedClassName<ComponentPropsWithRef<typeof Primitive.button>> {\n  variant?: 'default' | 'primary' | 'outline' | 'ghost' | 'destructive';\n  density?: Density;\n  elevation?: Elevation;\n  asChild?: boolean;\n}\n\ntype ButtonGroupContextValue = { inGroup?: boolean };\n\nconst BUTTON_GROUP_NAME = 'ButtonGroup';\nconst BUTTON_NAME = 'Button';\nconst [ButtonGroupProvider, useButtonGroupContext] = createContext<ButtonGroupContextValue>(BUTTON_GROUP_NAME, {\n  inGroup: false,\n});\n\nconst Button = memo(\n  forwardRef<HTMLButtonElement, ButtonProps>(\n    (\n      {\n        classNames,\n        children,\n        density: propsDensity,\n        elevation: propsElevation,\n        variant = 'default',\n        asChild,\n        ...props\n      },\n      ref,\n    ) => {\n      const { inGroup } = useButtonGroupContext(BUTTON_NAME);\n      const { tx } = useThemeContext();\n      const elevation = useElevationContext(propsElevation);\n      const density = useDensityContext(propsDensity);\n      const Root = asChild ? Slot : Primitive.button;\n      return (\n        <Root\n          ref={ref}\n          {...props}\n          data-variant={variant}\n          data-density={density}\n          data-props={inGroup ? 'grouped' : ''}\n          className={tx(\n            'button.root',\n            'button',\n            {\n              variant,\n              inGroup,\n              disabled: props.disabled,\n              density,\n              elevation,\n            },\n            classNames,\n          )}\n          {...(props.disabled && { disabled: true })}\n        >\n          {children}\n        </Root>\n      );\n    },\n  ),\n);\n\nButton.displayName = BUTTON_NAME;\n\ntype ButtonGroupProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  elevation?: Elevation;\n  asChild?: boolean;\n};\n\nconst ButtonGroup = forwardRef<HTMLDivElement, ButtonGroupProps>(\n  ({ children, elevation: propsElevation, classNames, asChild, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const elevation = useElevationContext(propsElevation);\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root\n        role='none'\n        {...props}\n        className={tx('button.group', 'button-group', { elevation }, classNames)}\n        ref={forwardedRef}\n      >\n        <ButtonGroupProvider inGroup>{children}</ButtonGroupProvider>\n      </Root>\n    );\n  },\n);\n\nButtonGroup.displayName = BUTTON_GROUP_NAME;\n\nexport { Button, ButtonGroup, BUTTON_GROUP_NAME, useButtonGroupContext };\n\nexport type { ButtonProps, ButtonGroupProps };\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport React, { forwardRef } from 'react';\n\nimport { Button, type ButtonProps } from './Button';\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { Icon, type IconProps } from '../Icon';\nimport { Tooltip, type TooltipSide } from '../Tooltip';\n\ntype IconButtonProps = Omit<ButtonProps, 'children'> &\n  Pick<IconProps, 'icon' | 'size'> & {\n    label: string;\n    iconOnly?: boolean;\n    noTooltip?: boolean;\n    caretDown?: boolean;\n    iconClassNames?: ThemedClassName<any>['classNames'];\n    tooltipPortal?: boolean;\n    tooltipSide?: TooltipSide;\n  };\n\nconst IconOnlyButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  ({ noTooltip, tooltipPortal = true, tooltipSide, ...props }, forwardedRef) => {\n    if (noTooltip) {\n      return <LabelledIconButton {...props} ref={forwardedRef} />;\n    }\n    return (\n      <Tooltip.Trigger asChild content={props.label} side={tooltipSide}>\n        <LabelledIconButton {...props} ref={forwardedRef} />\n      </Tooltip.Trigger>\n    );\n  },\n);\n\nconst LabelledIconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\n  ({ icon, size, iconOnly, label, classNames, iconClassNames, caretDown, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <Button {...props} classNames={tx('iconButton.root', 'iconButton', {}, classNames)} ref={forwardedRef}>\n        <Icon icon={icon} size={size} classNames={iconClassNames} />\n        <span className={iconOnly ? 'sr-only' : undefined}>{label}</span>\n        {caretDown && <Icon size={3} icon='ph--caret-down--bold' />}\n      </Button>\n    );\n  },\n);\n\nconst IconButton = forwardRef<HTMLButtonElement, IconButtonProps>((props, forwardedRef) =>\n  props.iconOnly ? (\n    <IconOnlyButton {...props} ref={forwardedRef} />\n  ) : (\n    <LabelledIconButton {...props} ref={forwardedRef} />\n  ),\n);\n\nexport { IconButton };\n\nexport type { IconButtonProps };\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Primitive } from '@radix-ui/react-primitive';\nimport React, { type ComponentPropsWithRef, forwardRef, memo } from 'react';\n\nimport { type Size } from '@dxos/react-ui-types';\n\nimport { useIconHref, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\nexport type IconProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.svg>> & {\n  icon: string;\n  size?: Size;\n};\n\nexport const Icon = memo(\n  forwardRef<SVGSVGElement, IconProps>(({ icon, classNames, size, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const href = useIconHref(icon);\n    return (\n      <svg {...props} className={tx('icon.root', 'icon', { size }, classNames)} ref={forwardedRef}>\n        <use href={href} />\n      </svg>\n    );\n  }),\n);\n", "//\n// Copyright 2025 DXOS.org\n//\n\n// This is based upon `@radix-ui/react-tooltip` fetched 17 March 2025 at https://github.com/radix-ui/primitives at commit 6e75e11.\n\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport type { Scope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope, type PopperAnchorProps } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slottable } from '@radix-ui/react-slot';\nimport { type TooltipProps } from '@radix-ui/react-tooltip';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\nimport React, {\n  type ComponentPropsWithoutRef,\n  type ElementRef,\n  type FC,\n  type SyntheticEvent,\n  forwardRef,\n  type MutableRefObject,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\n\ntype TooltipScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [createPopperScope]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * ----------------------------------------------------------------------------------------------- */\n\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onTriggerLeave(): void;\n  onOpen(): void;\n  onClose(): void;\n  onPointerInTransitChange(inTransit: boolean): void;\n  isPointerInTransitRef: MutableRefObject<boolean>;\n  disableHoverableContent: boolean;\n};\n\nconst [TooltipContextProvider, useTooltipContext] = createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProviderProps {\n  children?: ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst TooltipProvider: FC<TooltipProviderProps> = (props: TooltipScopedProps<TooltipProviderProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    disableHoverableContent = false,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n  } = props;\n  const isOpenDelayedRef = useRef(true);\n  const isPointerInTransitRef = useRef(false);\n  const skipDelayTimerRef = useRef(0);\n\n  useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = useState<HTMLButtonElement | null>(null);\n  const [content, setContent] = useState<string>('');\n  const [side, setSide] = useState<TooltipSide | undefined>(undefined);\n  const triggerRef = useRef<HTMLButtonElement | null>(trigger);\n  const handleTriggerChange = useCallback((nextTrigger: HTMLButtonElement | null) => {\n    setTrigger(nextTrigger);\n    triggerRef.current = nextTrigger;\n    setContent(nextTrigger?.getAttribute('data-tooltip-content') ?? '');\n    setSide((nextTrigger?.getAttribute('data-tooltip-side') as TooltipSide | null) ?? undefined);\n  }, []);\n  const contentId = useId();\n  const openTimerRef = useRef(0);\n  const wasOpenDelayedRef = useRef(false);\n  const handleOpenChange = useCallback(\n    (open: boolean) => {\n      if (open) {\n        window.clearTimeout(skipDelayTimerRef.current);\n        isOpenDelayedRef.current = false;\n        // as `onChange` is called within a lifecycle method we\n        // avoid dispatching via `dispatchDiscreteCustomEvent`.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n      } else {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(() => (isOpenDelayedRef.current = true), skipDelayDuration);\n      }\n      onOpenChange?.(open);\n    },\n    [skipDelayDuration, onOpenChange],\n  );\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: handleOpenChange,\n  });\n  const stateAttribute = useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleClose = useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    setOpen(false);\n  }, [setOpen]);\n\n  const handleDelayedOpen = useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n      openTimerRef.current = 0;\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  useEffect(() => {\n    return () => {\n      if (openTimerRef.current) {\n        window.clearTimeout(openTimerRef.current);\n        openTimerRef.current = 0;\n      }\n    };\n  }, []);\n\n  const { tx } = useThemeContext();\n  const elevation = useElevationContext();\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={handleTriggerChange}\n        onTriggerEnter={useCallback(() => {\n          if (isOpenDelayedRef.current) {\n            handleDelayedOpen();\n          } else {\n            handleOpen();\n          }\n        }, [isOpenDelayedRef, handleDelayedOpen, handleOpen])}\n        onTriggerLeave={useCallback(() => {\n          if (disableHoverableContent) {\n            handleClose();\n          } else {\n            // Clear the timer in case the pointer leaves the trigger before the tooltip is opened.\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = 0;\n          }\n        }, [handleClose, disableHoverableContent])}\n        onOpen={handleOpen}\n        onClose={handleClose}\n        disableHoverableContent={disableHoverableContent}\n        isPointerInTransitRef={isPointerInTransitRef}\n        onPointerInTransitChange={useCallback((inTransit: boolean) => {\n          isPointerInTransitRef.current = inTransit;\n        }, [])}\n      >\n        <TooltipContent side={side} className={tx('tooltip.content', 'tooltip', { elevation })}>\n          {content}\n          <TooltipArrow className={tx('tooltip.arrow', 'tooltip__arrow')} />\n        </TooltipContent>\n        <TooltipVirtualTrigger virtualRef={triggerRef} />\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltipProvider.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipVirtualTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst TooltipVirtualTrigger = ({\n  virtualRef,\n  __scopeTooltip,\n}: TooltipScopedProps<Pick<PopperAnchorProps, 'virtualRef'>>) => {\n  const popperScope = usePopperScope(__scopeTooltip);\n  return <PopperPrimitive.Anchor asChild {...popperScope} virtualRef={virtualRef} />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = ComponentPropsWithoutRef<typeof Primitive.button>;\ntype TooltipTriggerProps = PrimitiveButtonProps &\n  Pick<TooltipProps, 'delayDuration'> & {\n    content?: string;\n    side?: TooltipSide;\n    onInteract?: (event: SyntheticEvent) => void;\n  };\n\nconst TooltipTrigger = forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: TooltipScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      onInteract,\n      // TODO(thure): Pass `delayDuration` into the context.\n      delayDuration: _delayDuration,\n      side,\n      content,\n      ...triggerProps\n    } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const ref = useRef<TooltipTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const isPointerDownRef = useRef(false);\n    const hasPointerMoveOpenedRef = useRef(false);\n    const handlePointerUp = useCallback(() => (isPointerDownRef.current = false), []);\n\n    useEffect(() => {\n      return () => document.removeEventListener('pointerup', handlePointerUp);\n    }, [handlePointerUp]);\n\n    return (\n      <Primitive.button\n        // We purposefully avoid adding `type=button` here because tooltip triggers are also\n        // commonly anchors and the anchor `type` attribute signifies MIME type.\n        aria-describedby={context.open ? context.contentId : undefined}\n        data-state={context.stateAttribute}\n        data-tooltip-content={content}\n        data-tooltip-side={side}\n        {...triggerProps}\n        ref={composedRefs}\n        onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n          if (event.pointerType === 'touch') {\n            return;\n          }\n          if (!hasPointerMoveOpenedRef.current && !context.isPointerInTransitRef.current) {\n            onInteract?.(event);\n            if (event.defaultPrevented) {\n              return;\n            }\n            context.onTriggerChange(ref.current);\n            context.onTriggerEnter();\n            hasPointerMoveOpenedRef.current = true;\n          }\n        })}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => {\n          context.onTriggerLeave();\n          hasPointerMoveOpenedRef.current = false;\n        })}\n        onPointerDown={composeEventHandlers(props.onPointerDown, () => {\n          if (context.open) {\n            context.onClose();\n          }\n          isPointerDownRef.current = true;\n          document.addEventListener('pointerup', handlePointerUp, { once: true });\n        })}\n        onFocus={props.onFocus}\n        onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n        onClick={composeEventHandlers(props.onClick, context.onClose)}\n      />\n    );\n  },\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipPortal\n * ----------------------------------------------------------------------------------------------- */\n\nconst PORTAL_NAME = 'TooltipPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createTooltipContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface TooltipPortalProps {\n  children?: ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipPortal: FC<TooltipPortalProps> = (props: TooltipScopedProps<TooltipPortalProps>) => {\n  const { __scopeTooltip, forceMount, children, container } = props;\n  const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);\n  return (\n    <PortalProvider scope={__scopeTooltip} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nTooltipPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * ----------------------------------------------------------------------------------------------- */\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: TooltipScopedProps<TooltipContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeTooltip);\n    const { forceMount = portalContext.forceMount, side = 'top', ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.disableHoverableContent ? (\n          <TooltipContentImpl side={side} {...contentProps} ref={forwardedRef} />\n        ) : (\n          <TooltipContentHoverable side={side} {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  },\n);\n\ntype Point = { x: number; y: number };\ntype Polygon = Point[];\n\ntype TooltipContentHoverableElement = TooltipContentImplElement;\ninterface TooltipContentHoverableProps extends TooltipContentImplProps {}\n\nconst TooltipContentHoverable = forwardRef<TooltipContentHoverableElement, TooltipContentHoverableProps>(\n  (props: TooltipScopedProps<TooltipContentHoverableProps>, forwardedRef) => {\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n    const ref = useRef<TooltipContentHoverableElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const [pointerGraceArea, setPointerGraceArea] = useState<Polygon | null>(null);\n\n    const { trigger, onClose } = context;\n    const content = ref.current;\n\n    const { onPointerInTransitChange } = context;\n\n    const handleRemoveGraceArea = useCallback(() => {\n      setPointerGraceArea(null);\n      onPointerInTransitChange(false);\n    }, [onPointerInTransitChange]);\n\n    const handleCreateGraceArea = useCallback(\n      (event: PointerEvent, hoverTarget: HTMLElement) => {\n        const currentTarget = event.currentTarget as HTMLElement;\n        const exitPoint = { x: event.clientX, y: event.clientY };\n        const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());\n        const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);\n        const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());\n        const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);\n        setPointerGraceArea(graceArea);\n        onPointerInTransitChange(true);\n      },\n      [onPointerInTransitChange],\n    );\n\n    useEffect(() => {\n      return () => handleRemoveGraceArea();\n    }, [handleRemoveGraceArea]);\n\n    useEffect(() => {\n      if (trigger && content) {\n        const handleTriggerLeave = (event: PointerEvent) => handleCreateGraceArea(event, content);\n        const handleContentLeave = (event: PointerEvent) => handleCreateGraceArea(event, trigger);\n\n        trigger.addEventListener('pointerleave', handleTriggerLeave);\n        content.addEventListener('pointerleave', handleContentLeave);\n        return () => {\n          trigger.removeEventListener('pointerleave', handleTriggerLeave);\n          content.removeEventListener('pointerleave', handleContentLeave);\n        };\n      }\n    }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);\n\n    useEffect(() => {\n      if (pointerGraceArea) {\n        const handleTrackPointerGrace = (event: PointerEvent) => {\n          const target = event.target as HTMLElement;\n          const pointerPosition = { x: event.clientX, y: event.clientY };\n          const hasEnteredTarget = trigger?.contains(target) || content?.contains(target);\n          const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);\n\n          if (hasEnteredTarget) {\n            handleRemoveGraceArea();\n          } else if (isPointerOutsideGraceArea) {\n            handleRemoveGraceArea();\n            onClose();\n          }\n        };\n        document.addEventListener('pointermove', handleTrackPointerGrace);\n        return () => document.removeEventListener('pointermove', handleTrackPointerGrace);\n      }\n    }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);\n\n    return <TooltipContentImpl {...props} ref={composedRefs} />;\n  },\n);\n\nconst [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, {\n  isInside: false,\n});\n\ntype TooltipContentImplElement = ElementRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `Tooltip`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n}\n\nconst TooltipContentImpl = forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: TooltipScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const { onClose } = context;\n\n    // Close this tooltip if another one opens\n    useEffect(() => {\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    // Close the tooltip if the trigger is scrolled\n    useEffect(() => {\n      if (context.trigger) {\n        const handleScroll = (event: Event) => {\n          const target = event.target as HTMLElement;\n          if (target?.contains(context.trigger)) {\n            onClose();\n          }\n        };\n        window.addEventListener('scroll', handleScroll, { capture: true });\n        return () => window.removeEventListener('scroll', handleScroll, { capture: true });\n      }\n    }, [context.trigger, onClose]);\n\n    return (\n      <DismissableLayer\n        asChild\n        disableOutsidePointerEvents={false}\n        onEscapeKeyDown={onEscapeKeyDown}\n        onPointerDownOutside={onPointerDownOutside}\n        onFocusOutside={(event) => event.preventDefault()}\n        onDismiss={onClose}\n      >\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom properties\n            ...{\n              '--radix-tooltip-content-transform-origin': 'var(--radix-popper-transform-origin)',\n              '--radix-tooltip-content-available-width': 'var(--radix-popper-available-width)',\n              '--radix-tooltip-content-available-height': 'var(--radix-popper-available-height)',\n              '--radix-tooltip-trigger-width': 'var(--radix-popper-anchor-width)',\n              '--radix-tooltip-trigger-height': 'var(--radix-popper-anchor-height)',\n            },\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenContentContextProvider scope={__scopeTooltip} isInside={true}>\n            <VisuallyHiddenPrimitive.Root id={context.contentId} role='tooltip'>\n              {ariaLabel || children}\n            </VisuallyHiddenPrimitive.Root>\n          </VisuallyHiddenContentContextProvider>\n        </PopperPrimitive.Content>\n      </DismissableLayer>\n    );\n  },\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * ----------------------------------------------------------------------------------------------- */\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: TooltipScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(ARROW_NAME, __scopeTooltip);\n    // if the arrow is inside the `VisuallyHidden`, we don't want to render it all to\n    // prevent issues in positioning the arrow due to the duplicate\n    return visuallyHiddenContentContext.isInside ? null : (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    );\n  },\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* ----------------------------------------------------------------------------------------------- */\n\ntype TooltipSide = NonNullable<TooltipContentProps['side']>;\n\nconst getExitSideFromRect = (point: Point, rect: DOMRect): TooltipSide => {\n  const top = Math.abs(rect.top - point.y);\n  const bottom = Math.abs(rect.bottom - point.y);\n  const right = Math.abs(rect.right - point.x);\n  const left = Math.abs(rect.left - point.x);\n\n  switch (Math.min(top, bottom, right, left)) {\n    case left:\n      return 'left';\n    case right:\n      return 'right';\n    case top:\n      return 'top';\n    case bottom:\n      return 'bottom';\n    default:\n      throw new Error('unreachable');\n  }\n};\n\nconst getPaddedExitPoints = (exitPoint: Point, exitSide: TooltipSide, padding = 5) => {\n  const paddedExitPoints: Point[] = [];\n  switch (exitSide) {\n    case 'top':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y + padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding },\n      );\n      break;\n    case 'bottom':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y - padding },\n      );\n      break;\n    case 'left':\n      paddedExitPoints.push(\n        { x: exitPoint.x + padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding },\n      );\n      break;\n    case 'right':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x - padding, y: exitPoint.y + padding },\n      );\n      break;\n  }\n  return paddedExitPoints;\n};\n\nconst getPointsFromRect = (rect: DOMRect) => {\n  const { top, right, bottom, left } = rect;\n  return [\n    { x: left, y: top },\n    { x: right, y: top },\n    { x: right, y: bottom },\n    { x: left, y: bottom },\n  ];\n};\n\n// Determine if a point is inside of a polygon.\n// Based on https://github.com/substack/point-in-polygon\nconst isPointInPolygon = (point: Point, polygon: Polygon) => {\n  const { x, y } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    // prettier-ignore\n    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) {\n      inside = !inside;\n    }\n  }\n\n  return inside;\n};\n\n// Returns a new array of points representing the convex hull of the given set of points.\n// https://www.nayuki.io/page/convex-hull-algorithm\nconst getHull = <P extends Point>(points: Readonly<Array<P>>): Array<P> => {\n  const newPoints: Array<P> = points.slice();\n  newPoints.sort((a: Point, b: Point) => {\n    if (a.x < b.x) {\n      return -1;\n    } else if (a.x > b.x) {\n      return +1;\n    } else if (a.y < b.y) {\n      return -1;\n    } else if (a.y > b.y) {\n      return +1;\n    } else {\n      return 0;\n    }\n  });\n  return getHullPresorted(newPoints);\n};\n\n// Returns the convex hull, assuming that each points[i] <= points[i + 1]. Runs in O(n) time.\nconst getHullPresorted = <P extends Point>(points: Readonly<Array<P>>): Array<P> => {\n  if (points.length <= 1) {\n    return points.slice();\n  }\n\n  const upperHull: Array<P> = [];\n  for (let i = 0; i < points.length; i++) {\n    const p = points[i];\n    while (upperHull.length >= 2) {\n      const q = upperHull[upperHull.length - 1];\n      const r = upperHull[upperHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) {\n        upperHull.pop();\n      } else {\n        break;\n      }\n    }\n    upperHull.push(p);\n  }\n  upperHull.pop();\n\n  const lowerHull: Array<P> = [];\n  for (let i = points.length - 1; i >= 0; i--) {\n    const p = points[i];\n    while (lowerHull.length >= 2) {\n      const q = lowerHull[lowerHull.length - 1];\n      const r = lowerHull[lowerHull.length - 2];\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) {\n        lowerHull.pop();\n      } else {\n        break;\n      }\n    }\n    lowerHull.push(p);\n  }\n  lowerHull.pop();\n\n  if (\n    upperHull.length === 1 &&\n    lowerHull.length === 1 &&\n    upperHull[0].x === lowerHull[0].x &&\n    upperHull[0].y === lowerHull[0].y\n  ) {\n    return upperHull;\n  } else {\n    return upperHull.concat(lowerHull);\n  }\n};\n\nexport const Tooltip = {\n  Provider: TooltipProvider,\n  Trigger: TooltipTrigger,\n};\n\nexport { createTooltipScope, useTooltipContext };\n\nexport type { TooltipProviderProps, TooltipTriggerProps, TooltipScopedProps, TooltipSide };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Toggle as TogglePrimitive, type ToggleProps as TogglePrimitiveProps } from '@radix-ui/react-toggle';\nimport React, { forwardRef } from 'react';\n\nimport { Button, type ButtonProps } from './Button';\n\ntype ToggleProps = Omit<TogglePrimitiveProps, 'asChild'> & ButtonProps;\n\nconst Toggle = forwardRef<HTMLButtonElement, ToggleProps>(\n  ({ defaultPressed, pressed, onPressedChange, ...props }, forwardedRef) => {\n    return (\n      <TogglePrimitive {...{ defaultPressed, pressed, onPressedChange }} asChild>\n        <Button {...props} ref={forwardedRef} />\n      </TogglePrimitive>\n    );\n  },\n);\n\nexport { Toggle };\nexport type { ToggleProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport {\n  ToggleGroup as ToggleGroupPrimitive,\n  type ToggleGroupSingleProps,\n  type ToggleGroupMultipleProps,\n  type ToggleGroupItemProps as ToggleGroupItemPrimitiveProps,\n  ToggleGroupItem as ToggleGroupItemPrimitive,\n} from '@radix-ui/react-toggle-group';\nimport React, { forwardRef } from 'react';\n\nimport { Button, ButtonGroup, type ButtonGroupProps, type ButtonProps } from './Button';\n\ntype ToggleGroupProps = Omit<ToggleGroupSingleProps, 'className'> | Omit<ToggleGroupMultipleProps, 'className'>;\n\nconst ToggleGroup = forwardRef<HTMLDivElement, ToggleGroupProps & ButtonGroupProps>(\n  ({ classNames, children, ...props }, forwardedRef) => {\n    return (\n      <ToggleGroupPrimitive {...props} asChild>\n        <ButtonGroup {...{ classNames, children }} ref={forwardedRef} />\n      </ToggleGroupPrimitive>\n    );\n  },\n);\n\ntype ToggleGroupItemProps = Omit<ToggleGroupItemPrimitiveProps, 'className'> & ButtonProps;\n\nconst ToggleGroupItem = forwardRef<HTMLButtonElement, ToggleGroupItemProps>(\n  ({ variant, elevation, density, classNames, children, ...props }, forwardedRef) => {\n    return (\n      <ToggleGroupItemPrimitive {...props} asChild>\n        <Button {...{ variant, elevation, density, classNames, children }} ref={forwardedRef} />\n      </ToggleGroupItemPrimitive>\n    );\n  },\n);\n\nexport { ToggleGroup, ToggleGroupItem };\nexport type { ToggleGroupProps, ToggleGroupItemProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { createContext, type PropsWithChildren, useCallback, useContext, useState } from 'react';\n\nexport type ClipboardContextValue = {\n  textValue: string;\n  setTextValue: (nextValue: string) => Promise<void>;\n};\n\nexport const ClipboardContext = createContext<ClipboardContextValue>({\n  textValue: '',\n  setTextValue: async (_) => {},\n});\n\nexport const useClipboard = () => useContext(ClipboardContext);\n\nexport const ClipboardProvider = ({ children }: PropsWithChildren<{}>) => {\n  const [textValue, setInternalTextValue] = useState('');\n  const setTextValue = useCallback(async (nextValue: string) => {\n    await navigator.clipboard.writeText(nextValue);\n    return setInternalTextValue(nextValue);\n  }, []);\n  return <ClipboardContext.Provider value={{ textValue, setTextValue }}>{children}</ClipboardContext.Provider>;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type IconProps } from '@phosphor-icons/react';\nimport React from 'react';\n\nimport { mx } from '@dxos/react-ui-theme';\n\nimport { useClipboard } from './ClipboardProvider';\nimport { Button, type ButtonProps, IconButton } from '../Buttons';\nimport { Icon } from '../Icon';\nimport { useTranslation } from '../ThemeProvider';\nimport { type TooltipScopedProps, useTooltipContext } from '../Tooltip';\n\nexport type CopyButtonProps = ButtonProps & {\n  value: string;\n  iconProps?: IconProps;\n};\n\nconst inactiveLabelStyles = 'invisible bs-px -mbe-px overflow-hidden';\n\nexport const CopyButton = ({ value, classNames, iconProps, ...props }: CopyButtonProps) => {\n  const { t } = useTranslation('os');\n  const { textValue, setTextValue } = useClipboard();\n  const isCopied = textValue === value;\n  return (\n    <Button\n      {...props}\n      classNames={['inline-flex flex-col justify-center', classNames]}\n      onClick={() => setTextValue(value)}\n      data-testid='copy-invitation'\n    >\n      <div role='none' className={mx('flex gap-1 items-center', isCopied && inactiveLabelStyles)}>\n        <span className='pli-1'>{t('copy label')}</span>\n        {/* TODO(wittjosiah): Why do these need as any? */}\n        <Icon icon='ph--copy--regular' size={5 as any} {...iconProps} />\n      </div>\n      <div role='none' className={mx('flex gap-1 items-center', !isCopied && inactiveLabelStyles)}>\n        <span className='pli-1'>{t('copy success label')}</span>\n        <Icon icon='ph--check--regular' size={5 as any} {...iconProps} />\n      </div>\n    </Button>\n  );\n};\n\ntype CopyButtonIconOnlyProps = CopyButtonProps & {\n  label?: string;\n};\n\nexport const CopyButtonIconOnly = ({\n  __scopeTooltip,\n  value,\n  classNames,\n  iconProps,\n  variant,\n  ...props\n}: TooltipScopedProps<CopyButtonIconOnlyProps>) => {\n  const { t } = useTranslation('os');\n  const { textValue, setTextValue } = useClipboard();\n  const isCopied = textValue === value;\n  const label = isCopied ? t('copy success label') : props.label ?? t('copy label');\n  const { onOpen } = useTooltipContext('CopyButton', __scopeTooltip);\n  return (\n    <IconButton\n      iconOnly\n      label={label!}\n      icon='ph--copy--regular'\n      size={5}\n      variant={variant}\n      classNames={['inline-flex flex-col justify-center', classNames]}\n      onClick={() => setTextValue(value).then(onOpen)}\n      data-testid='copy-invitation'\n    />\n  );\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { createKeyborg } from 'keyborg';\nimport React, { createContext, type PropsWithChildren, useEffect, useMemo } from 'react';\n\nimport { type Density, type Elevation, type ThemeFunction } from '@dxos/react-ui-types';\n\nimport { TranslationsProvider, type TranslationsProviderProps } from './TranslationsProvider';\nimport { type SafeAreaPadding, useSafeArea } from '../../hooks';\nimport { hasIosKeyboard } from '../../util';\nimport { DensityProvider } from '../DensityProvider';\nimport { ElevationProvider } from '../ElevationProvider';\n\nexport type ThemeMode = 'light' | 'dark';\n\nexport type ThemeContextValue = {\n  tx: ThemeFunction<any>;\n  themeMode: ThemeMode;\n  hasIosKeyboard: boolean;\n  safeAreaPadding?: SafeAreaPadding;\n  noCache?: boolean;\n};\n\n/**\n * @internal\n */\nexport const ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\nexport type ThemeProviderProps = Omit<TranslationsProviderProps, 'children'> &\n  Partial<Omit<ThemeContextValue, 'safeAreaPadding'>> &\n  PropsWithChildren<{\n    rootDensity?: Density;\n    rootElevation?: Elevation;\n  }>;\n\nexport const ThemeProvider = ({\n  children,\n  fallback = null,\n  resourceExtensions,\n  appNs,\n  tx = (_path, defaultClassName, _styleProps, ..._options) => defaultClassName,\n  themeMode = 'dark',\n  rootDensity = 'fine',\n  ...rest\n}: ThemeProviderProps) => {\n  useEffect(() => {\n    if (document.defaultView) {\n      const kb = createKeyborg(document.defaultView);\n      kb.subscribe(handleInputModalityChange);\n      return () => kb.unsubscribe(handleInputModalityChange);\n    }\n  }, []);\n\n  const safeAreaPadding = useSafeArea();\n\n  const contextValue = useMemo(\n    () => ({ tx, themeMode, hasIosKeyboard: hasIosKeyboard(), safeAreaPadding, ...rest }),\n    [tx, themeMode, safeAreaPadding, rest],\n  );\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <TranslationsProvider\n        {...{\n          fallback,\n          resourceExtensions,\n          appNs,\n        }}\n      >\n        <ElevationProvider elevation='base'>\n          <DensityProvider density={rootDensity}>{children}</DensityProvider>\n        </ElevationProvider>\n      </TranslationsProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nconst handleInputModalityChange = (isUsingKeyboard: boolean) => {\n  if (isUsingKeyboard) {\n    document.body.setAttribute('data-is-keyboard', 'true');\n  } else {\n    document.body.removeAttribute('data-is-keyboard');\n  }\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nexport const hasIosKeyboard = () => {\n  // TODO(thure): UA sniffing is never good, however I havenâ€™t found a better way to query for whether the on-screen keyboard will appear on `focus` outside of a click handler.\n  return !!navigator.userAgent.match(/iP(ad|od|hone).+Safari/);\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { createContext, type PropsWithChildren } from 'react';\n\nimport { type Density } from '@dxos/react-ui-types';\n\nexport interface DensityContextValue {\n  density?: Density;\n}\n\nexport type DensityProviderProps = PropsWithChildren<{\n  density?: Density;\n}>;\n\nexport const DensityContext = createContext<DensityContextValue>({ density: 'fine' });\n\nexport const DensityProvider = ({ density, children }: DensityProviderProps) => (\n  <DensityContext.Provider value={{ density }}>{children}</DensityContext.Provider>\n);\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { createContext, type PropsWithChildren } from 'react';\n\nimport { type Elevation } from '@dxos/react-ui-types';\n\nexport interface ElevationContextValue {\n  elevation?: Elevation;\n}\n\nexport type ElevationProviderProps = PropsWithChildren<{\n  elevation?: Elevation;\n}>;\n\nexport const ElevationContext = createContext<ElevationContextValue>({ elevation: 'base' });\n\nexport const ElevationProvider = ({ elevation, children }: ElevationProviderProps) => (\n  <ElevationContext.Provider value={{ elevation }}>{children}</ElevationContext.Provider>\n);\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { ClipboardProvider } from './ClipboardProvider';\nimport { CopyButton, CopyButtonIconOnly } from './CopyButton';\n\nexport const Clipboard = {\n  Button: CopyButton,\n  IconButton: CopyButtonIconOnly,\n  Provider: ClipboardProvider,\n};\n\nexport { useClipboard } from './ClipboardProvider';\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { createContext } from '@radix-ui/react-context';\nimport {\n  type DialogProps as DialogRootPrimitiveProps,\n  Root as DialogRootPrimitive,\n  DialogTrigger as DialogTriggerPrimitive,\n  type DialogTriggerProps as DialogTriggerPrimitiveProps,\n  DialogPortal as DialogPortalPrimitive,\n  type DialogPortalProps as DialogPortalPrimitiveProps,\n  DialogOverlay as DialogOverlayPrimitive,\n  type DialogOverlayProps as DialogOverlayPrimitiveProps,\n  DialogTitle as DialogTitlePrimitive,\n  type DialogTitleProps as DialogTitlePrimitiveProps,\n  DialogDescription as DialogDescriptionPrimitive,\n  type DialogDescriptionProps as DialogDescriptionPrimitiveProps,\n  DialogClose as DialogClosePrimitive,\n  type DialogCloseProps as DialogClosePrimitiveProps,\n  DialogContent as DialogContentPrimitive,\n  type DialogContentProps as DialogContentPrimitiveProps,\n} from '@radix-ui/react-dialog';\nimport React, { forwardRef, type ForwardRefExoticComponent, type FunctionComponent } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { ElevationProvider } from '../ElevationProvider';\n\ntype DialogRootProps = DialogRootPrimitiveProps;\n\nconst DialogRoot: FunctionComponent<DialogRootProps> = (props) => (\n  <ElevationProvider elevation='dialog'>\n    <DialogRootPrimitive {...props} />\n  </ElevationProvider>\n);\n\ntype DialogTriggerProps = DialogTriggerPrimitiveProps;\n\nconst DialogTrigger: FunctionComponent<DialogTriggerProps> = DialogTriggerPrimitive;\n\ntype DialogPortalProps = DialogPortalPrimitiveProps;\n\nconst DialogPortal: FunctionComponent<DialogPortalProps> = DialogPortalPrimitive;\n\ntype DialogTitleProps = ThemedClassName<DialogTitlePrimitiveProps> & { srOnly?: boolean };\n\nconst DialogTitle: ForwardRefExoticComponent<DialogTitleProps> = forwardRef<HTMLHeadingElement, DialogTitleProps>(\n  ({ classNames, srOnly, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <DialogTitlePrimitive\n        {...props}\n        className={tx('dialog.title', 'dialog__title', { srOnly }, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype DialogDescriptionProps = ThemedClassName<DialogDescriptionPrimitiveProps> & { srOnly?: boolean };\n\nconst DialogDescription: ForwardRefExoticComponent<DialogTitleProps> = forwardRef<\n  HTMLParagraphElement,\n  DialogDescriptionProps\n>(({ classNames, srOnly, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <DialogDescriptionPrimitive\n      {...props}\n      className={tx('dialog.description', 'dialog__description', { srOnly }, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype DialogCloseProps = DialogClosePrimitiveProps;\n\nconst DialogClose: FunctionComponent<DialogCloseProps> = DialogClosePrimitive;\n\ntype OverlayLayoutContextValue = { inOverlayLayout?: boolean };\nconst DIALOG_OVERLAY_NAME = 'DialogOverlay';\nconst DIALOG_CONTENT_NAME = 'DialogContent';\nconst [OverlayLayoutProvider, useOverlayLayoutContext] = createContext<OverlayLayoutContextValue>(\n  DIALOG_OVERLAY_NAME,\n  {},\n);\n\ntype DialogOverlayProps = ThemedClassName<DialogOverlayPrimitiveProps & { blockAlign?: 'center' | 'start' | 'end' }>;\n\nconst DialogOverlay: ForwardRefExoticComponent<DialogOverlayProps> = forwardRef<HTMLDivElement, DialogOverlayProps>(\n  ({ classNames, children, blockAlign, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n\n    return (\n      <DialogOverlayPrimitive\n        {...props}\n        className={tx('dialog.overlay', 'dialog__overlay', {}, classNames)}\n        ref={forwardedRef}\n        data-block-align={blockAlign}\n      >\n        <OverlayLayoutProvider inOverlayLayout>{children}</OverlayLayoutProvider>\n      </DialogOverlayPrimitive>\n    );\n  },\n);\n\nDialogOverlay.displayName = DIALOG_OVERLAY_NAME;\n\ntype DialogContentProps = ThemedClassName<DialogContentPrimitiveProps> & { inOverlayLayout?: boolean };\n\nconst DialogContent: ForwardRefExoticComponent<DialogContentProps> = forwardRef<HTMLDivElement, DialogContentProps>(\n  ({ classNames, children, inOverlayLayout: propsInOverlayLayout, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const { inOverlayLayout } = useOverlayLayoutContext(DIALOG_CONTENT_NAME);\n\n    return (\n      <DialogContentPrimitive\n        // NOTE: Radix warning unless set to undefined.\n        // https://www.radix-ui.com/primitives/docs/components/dialog#description\n        aria-describedby={undefined}\n        {...props}\n        className={tx(\n          'dialog.content',\n          'dialog',\n          { inOverlayLayout: propsInOverlayLayout || inOverlayLayout },\n          classNames,\n        )}\n        ref={forwardedRef}\n      >\n        {children}\n      </DialogContentPrimitive>\n    );\n  },\n);\n\nDialogContent.displayName = DIALOG_CONTENT_NAME;\n\nexport const Dialog = {\n  Root: DialogRoot,\n  Trigger: DialogTrigger,\n  Portal: DialogPortal,\n  Overlay: DialogOverlay,\n  Content: DialogContent,\n  Title: DialogTitle,\n  Description: DialogDescription,\n  Close: DialogClose,\n};\n\nexport type {\n  DialogRootProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport {\n  type AlertDialogProps as AlertDialogRootPrimitiveProps,\n  Root as AlertDialogRootPrimitive,\n  AlertDialogTrigger as AlertDialogTriggerPrimitive,\n  type AlertDialogTriggerProps as AlertDialogTriggerPrimitiveProps,\n  AlertDialogPortal as AlertDialogPortalPrimitive,\n  type AlertDialogPortalProps as AlertDialogPortalPrimitiveProps,\n  AlertDialogOverlay as AlertDialogOverlayPrimitive,\n  type AlertDialogOverlayProps as AlertDialogOverlayPrimitiveProps,\n  AlertDialogTitle as AlertDialogTitlePrimitive,\n  type AlertDialogTitleProps as AlertDialogTitlePrimitiveProps,\n  AlertDialogDescription as AlertDialogDescriptionPrimitive,\n  type AlertDialogDescriptionProps as AlertDialogDescriptionPrimitiveProps,\n  AlertDialogAction as AlertDialogActionPrimitive,\n  type AlertDialogActionProps as AlertDialogActionPrimitiveProps,\n  AlertDialogCancel as AlertDialogCancelPrimitive,\n  type AlertDialogCancelProps as AlertDialogCancelPrimitiveProps,\n  AlertDialogContent as AlertDialogContentPrimitive,\n  type AlertDialogContentProps as AlertDialogContentPrimitiveProps,\n} from '@radix-ui/react-alert-dialog';\nimport { createContext } from '@radix-ui/react-context';\nimport React, { forwardRef, type ForwardRefExoticComponent, type FunctionComponent } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { ElevationProvider } from '../ElevationProvider';\n\ntype AlertDialogRootProps = AlertDialogRootPrimitiveProps;\n\nconst AlertDialogRoot: FunctionComponent<AlertDialogRootProps> = (props) => (\n  <ElevationProvider elevation='dialog'>\n    <AlertDialogRootPrimitive {...props} />\n  </ElevationProvider>\n);\n\ntype AlertDialogTriggerProps = AlertDialogTriggerPrimitiveProps;\n\nconst AlertDialogTrigger: FunctionComponent<AlertDialogTriggerProps> = AlertDialogTriggerPrimitive;\n\ntype AlertDialogPortalProps = AlertDialogPortalPrimitiveProps;\n\nconst AlertDialogPortal: FunctionComponent<AlertDialogPortalProps> = AlertDialogPortalPrimitive;\n\ntype AlertDialogCancelProps = AlertDialogCancelPrimitiveProps;\n\nconst AlertDialogCancel: FunctionComponent<AlertDialogCancelProps> = AlertDialogCancelPrimitive;\n\ntype AlertDialogActionProps = AlertDialogActionPrimitiveProps;\n\nconst AlertDialogAction: FunctionComponent<AlertDialogActionProps> = AlertDialogActionPrimitive;\n\ntype AlertDialogTitleProps = ThemedClassName<AlertDialogTitlePrimitiveProps> & { srOnly?: boolean };\n\nconst AlertDialogTitle: ForwardRefExoticComponent<AlertDialogTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  AlertDialogTitleProps\n>(({ classNames, srOnly, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <AlertDialogTitlePrimitive\n      {...props}\n      className={tx('dialog.title', 'dialog--alert__title', { srOnly }, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype AlertDialogDescriptionProps = ThemedClassName<AlertDialogDescriptionPrimitiveProps> & { srOnly?: boolean };\n\nconst AlertDialogDescription: ForwardRefExoticComponent<AlertDialogTitleProps> = forwardRef<\n  HTMLParagraphElement,\n  AlertDialogDescriptionProps\n>(({ classNames, srOnly, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <AlertDialogDescriptionPrimitive\n      {...props}\n      className={tx('dialog.description', 'dialog--alert__description', { srOnly }, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype OverlayLayoutContextValue = { inOverlayLayout?: boolean };\nconst ALERT_DIALOG_OVERLAY_NAME = 'AlertDialogOverlay';\nconst ALERT_DIALOG_CONTENT_NAME = 'AlertDialogContent';\nconst [OverlayLayoutProvider, useOverlayLayoutContext] = createContext<OverlayLayoutContextValue>(\n  ALERT_DIALOG_OVERLAY_NAME,\n  {\n    inOverlayLayout: false,\n  },\n);\n\ntype AlertDialogOverlayProps = ThemedClassName<AlertDialogOverlayPrimitiveProps> & {\n  blockAlign?: 'center' | 'start' | 'end';\n};\n\nconst AlertDialogOverlay: ForwardRefExoticComponent<AlertDialogOverlayProps> = forwardRef<\n  HTMLDivElement,\n  AlertDialogOverlayProps\n>(({ classNames, children, blockAlign, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <AlertDialogOverlayPrimitive\n      {...props}\n      className={tx(\n        'dialog.overlay',\n        'dialog--alert__overlay',\n        {},\n        classNames,\n        'data-[block-align=start]:justify-center',\n        'data-[block-align=start]:items-start',\n        'data-[block-align=center]:place-content-center',\n      )}\n      ref={forwardedRef}\n      data-block-align={blockAlign}\n    >\n      <OverlayLayoutProvider inOverlayLayout>{children}</OverlayLayoutProvider>\n    </AlertDialogOverlayPrimitive>\n  );\n});\n\nAlertDialogOverlay.displayName = ALERT_DIALOG_OVERLAY_NAME;\n\ntype AlertDialogContentProps = ThemedClassName<AlertDialogContentPrimitiveProps>;\n\nconst AlertDialogContent: ForwardRefExoticComponent<AlertDialogContentProps> = forwardRef<\n  HTMLDivElement,\n  AlertDialogContentProps\n>(({ classNames, children, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  const { inOverlayLayout } = useOverlayLayoutContext(ALERT_DIALOG_CONTENT_NAME);\n  return (\n    <AlertDialogContentPrimitive\n      {...props}\n      className={tx('dialog.content', 'dialog--alert', { inOverlayLayout }, classNames)}\n      ref={forwardedRef}\n    >\n      {children}\n    </AlertDialogContentPrimitive>\n  );\n});\n\nAlertDialogContent.displayName = ALERT_DIALOG_CONTENT_NAME;\n\nexport const AlertDialog = {\n  Root: AlertDialogRoot,\n  Trigger: AlertDialogTrigger,\n  Portal: AlertDialogPortal,\n  Overlay: AlertDialogOverlay,\n  Content: AlertDialogContent,\n  Title: AlertDialogTitle,\n  Description: AlertDialogDescription,\n  Cancel: AlertDialogCancel,\n  Action: AlertDialogAction,\n};\n\nexport type {\n  AlertDialogRootProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n  AlertDialogCancelProps,\n  AlertDialogActionProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type IconWeight } from '@phosphor-icons/react';\nimport { Root as CheckboxPrimitive, type CheckboxProps as CheckboxPrimitiveProps } from '@radix-ui/react-checkbox';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport React, { type ComponentPropsWithRef, forwardRef, type ForwardRefExoticComponent, useCallback } from 'react';\n\nimport {\n  InputRoot,\n  type InputRootProps,\n  PinInput as PinInputPrimitive,\n  type PinInputProps as PinInputPrimitiveProps,\n  TextInput as TextInputPrimitive,\n  type TextInputProps as TextInputPrimitiveProps,\n  TextArea as TextAreaPrimitive,\n  type TextAreaProps as TextAreaPrimitiveProps,\n  useInputContext,\n  INPUT_NAME,\n  type InputScopedProps,\n  Description as DescriptionPrimitive,\n  DescriptionAndValidation as DescriptionAndValidationPrimitive,\n  type DescriptionAndValidationProps as DescriptionAndValidationPrimitiveProps,\n  type DescriptionProps as DescriptionPrimitiveProps,\n  Label as LabelPrimitive,\n  type LabelProps as LabelPrimitiveProps,\n  Validation as ValidationPrimitive,\n  type ValidationProps as ValidationPrimitiveProps,\n} from '@dxos/react-input';\nimport { mx } from '@dxos/react-ui-theme';\nimport { type Density, type Elevation, type ClassNameValue, type Size } from '@dxos/react-ui-types';\n\nimport { useDensityContext, useElevationContext, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { Icon } from '../Icon';\n\ntype InputVariant = 'default' | 'subdued';\n\ntype InputSharedProps = Partial<{ density: Density; elevation: Elevation; variant: InputVariant }>;\n\ntype LabelProps = ThemedClassName<LabelPrimitiveProps> & { srOnly?: boolean };\n\nconst Label = forwardRef<HTMLLabelElement, LabelProps>(({ srOnly, classNames, children, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <LabelPrimitive {...props} className={tx('input.label', 'input__label', { srOnly }, classNames)} ref={forwardedRef}>\n      {children}\n    </LabelPrimitive>\n  );\n});\n\ntype DescriptionProps = ThemedClassName<DescriptionPrimitiveProps> & { srOnly?: boolean };\n\nconst Description = forwardRef<HTMLSpanElement, DescriptionProps>(\n  ({ srOnly, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <DescriptionPrimitive\n        {...props}\n        className={tx('input.description', 'input__description', { srOnly }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </DescriptionPrimitive>\n    );\n  },\n);\n\ntype ValidationProps = ThemedClassName<ValidationPrimitiveProps> & { srOnly?: boolean };\n\nconst Validation = forwardRef<HTMLSpanElement, InputScopedProps<ValidationProps>>(\n  ({ __inputScope, srOnly, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const { validationValence } = useInputContext(INPUT_NAME, __inputScope);\n    return (\n      <ValidationPrimitive\n        {...props}\n        className={tx(\n          'input.validation',\n          `input__validation-message input__validation-message--${validationValence}`,\n          { srOnly, validationValence },\n          classNames,\n        )}\n        ref={forwardedRef}\n      >\n        {children}\n      </ValidationPrimitive>\n    );\n  },\n);\n\ntype DescriptionAndValidationProps = ThemedClassName<DescriptionAndValidationPrimitiveProps> & { srOnly?: boolean };\n\nconst DescriptionAndValidation = forwardRef<HTMLParagraphElement, DescriptionAndValidationProps>(\n  ({ srOnly, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <DescriptionAndValidationPrimitive\n        {...props}\n        className={tx('input.descriptionAndValidation', 'input__description-and-validation', { srOnly }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </DescriptionAndValidationPrimitive>\n    );\n  },\n);\n\ntype PinInputProps = InputSharedProps &\n  Omit<PinInputPrimitiveProps, 'segmentClassName' | 'inputClassName'> & {\n    segmentClassName?: ClassNameValue;\n    inputClassName?: ClassNameValue;\n  };\n\nconst PinInput = forwardRef<HTMLInputElement, PinInputProps>(\n  (\n    {\n      density: propsDensity,\n      elevation: propsElevation,\n      segmentClassName: propsSegmentClassName,\n      inputClassName,\n      variant,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const { hasIosKeyboard } = useThemeContext();\n    const { tx } = useThemeContext();\n    const density = useDensityContext(propsDensity);\n    const elevation = useElevationContext(propsElevation);\n\n    const segmentClassName = useCallback(\n      ({ focused, validationValence }: Parameters<Exclude<PinInputPrimitiveProps['segmentClassName'], undefined>>[0]) =>\n        tx(\n          'input.input',\n          'input--pin-segment',\n          {\n            variant: 'static',\n            focused,\n            disabled: props.disabled,\n            density,\n            elevation,\n            validationValence,\n          },\n          propsSegmentClassName,\n        ),\n      [tx, props.disabled, elevation, propsElevation, density],\n    );\n    return (\n      <PinInputPrimitive\n        {...{\n          ...props,\n          segmentClassName,\n          ...(props.autoFocus && !hasIosKeyboard && { autoFocus: true }),\n        }}\n        inputClassName={tx('input.inputWithSegments', 'input input--pin', { disabled: props.disabled }, inputClassName)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\n// TODO(burdon): Implement inline icon within button: e.g., https://www.radix-ui.com/themes/playground#text-field\n\ntype TextInputProps = InputSharedProps & ThemedClassName<TextInputPrimitiveProps>;\n\nconst TextInput = forwardRef<HTMLInputElement, InputScopedProps<TextInputProps>>(\n  ({ __inputScope, classNames, density: propsDensity, elevation: propsElevation, variant, ...props }, forwardedRef) => {\n    const { hasIosKeyboard } = useThemeContext();\n    const themeContextValue = useThemeContext();\n    const density = useDensityContext(propsDensity);\n    const elevation = useElevationContext(propsElevation);\n    const { validationValence } = useInputContext(INPUT_NAME, __inputScope);\n\n    const { tx } = themeContextValue;\n\n    return (\n      <TextInputPrimitive\n        {...props}\n        className={tx(\n          'input.input',\n          'input',\n          {\n            variant,\n            disabled: props.disabled,\n            density,\n            elevation,\n            validationValence,\n          },\n          classNames,\n        )}\n        {...(props.autoFocus && !hasIosKeyboard && { autoFocus: true })}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype TextAreaProps = InputSharedProps & ThemedClassName<TextAreaPrimitiveProps>;\n\nconst TextArea = forwardRef<HTMLTextAreaElement, InputScopedProps<TextAreaProps>>(\n  ({ __inputScope, classNames, density: propsDensity, elevation: propsElevation, variant, ...props }, forwardedRef) => {\n    const { hasIosKeyboard } = useThemeContext();\n    const { tx } = useThemeContext();\n    const density = useDensityContext(propsDensity);\n    const elevation = useElevationContext(propsElevation);\n    const { validationValence } = useInputContext(INPUT_NAME, __inputScope);\n\n    return (\n      <TextAreaPrimitive\n        {...props}\n        className={tx(\n          'input.input',\n          'input--text-area',\n          {\n            variant,\n            disabled: props.disabled,\n            density,\n            elevation,\n            validationValence,\n          },\n          '-mbe-labelSpacingBlock',\n          classNames,\n        )}\n        {...(props.autoFocus && !hasIosKeyboard && { autoFocus: true })}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype CheckboxProps = ThemedClassName<Omit<CheckboxPrimitiveProps, 'children'>> & { size?: Size; weight?: IconWeight };\n\nconst Checkbox: ForwardRefExoticComponent<CheckboxProps> = forwardRef<\n  HTMLButtonElement,\n  InputScopedProps<CheckboxProps>\n>(\n  (\n    {\n      __inputScope,\n      checked: propsChecked,\n      defaultChecked: propsDefaultChecked,\n      onCheckedChange: propsOnCheckedChange,\n      size,\n      weight = 'bold',\n      classNames,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const [checked, onCheckedChange] = useControllableState({\n      prop: propsChecked,\n      defaultProp: propsDefaultChecked,\n      onChange: propsOnCheckedChange,\n    });\n    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n    const { tx } = useThemeContext();\n\n    return (\n      <CheckboxPrimitive\n        {...{\n          ...props,\n          checked,\n          onCheckedChange,\n          id,\n          'aria-describedby': descriptionId,\n          ...(validationValence === 'error' && {\n            'aria-invalid': 'true' as const,\n            'aria-errormessage': errorMessageId,\n          }),\n          className: tx('input.checkbox', 'input--checkbox', { size }, 'shrink-0', classNames),\n        }}\n        ref={forwardedRef}\n      >\n        <Icon\n          icon={checked === 'indeterminate' ? 'ph--minus--regular' : 'ph--check--regular'}\n          classNames={tx('input.checkboxIndicator', 'input--checkbox__indicator', { size, checked })}\n        />\n      </CheckboxPrimitive>\n    );\n  },\n);\n\ntype SwitchProps = ThemedClassName<\n  Omit<ComponentPropsWithRef<'input'>, 'children' | 'onChange'> & { onCheckedChange?: (checked: boolean) => void }\n>;\n\nconst Switch = forwardRef<HTMLInputElement, InputScopedProps<SwitchProps>>(\n  (\n    {\n      __inputScope,\n      checked: propsChecked,\n      defaultChecked: propsDefaultChecked,\n      onCheckedChange: propsOnCheckedChange,\n      classNames,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const [checked, onCheckedChange] = useControllableState({\n      prop: propsChecked,\n      defaultProp: propsDefaultChecked ?? false,\n      onChange: propsOnCheckedChange,\n    });\n\n    const { id, validationValence, descriptionId, errorMessageId } = useInputContext(INPUT_NAME, __inputScope);\n\n    return (\n      <input\n        type='checkbox'\n        className={mx('dx-checkbox--switch dx-focus-ring', classNames)}\n        checked={checked}\n        onChange={(event) => {\n          onCheckedChange(event.target.checked);\n        }}\n        id={id}\n        aria-describedby={descriptionId}\n        {...props}\n        {...(validationValence === 'error' && {\n          'aria-invalid': 'true' as const,\n          'aria-errormessage': errorMessageId,\n        })}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nexport const Input = {\n  Root: InputRoot,\n  PinInput,\n  TextInput,\n  TextArea,\n  Checkbox,\n  Switch,\n  Label,\n  Description,\n  Validation,\n  DescriptionAndValidation,\n};\n\nexport type {\n  InputVariant,\n  InputRootProps,\n  InputSharedProps,\n  PinInputProps,\n  TextInputProps,\n  TextAreaProps,\n  CheckboxProps,\n  SwitchProps,\n  LabelProps,\n  DescriptionProps,\n  ValidationProps,\n  DescriptionAndValidationProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { CaretDown, CaretRight } from '@phosphor-icons/react';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithoutRef, type FC, forwardRef, type ForwardRefExoticComponent } from 'react';\n\nimport {\n  List as ListPrimitive,\n  type ListProps as ListPrimitiveProps,\n  type ListScopedProps,\n  ListItemHeading as ListPrimitiveItemHeading,\n  type ListItemHeadingProps as ListPrimitiveItemHeadingProps,\n  ListItemOpenTrigger as ListPrimitiveItemOpenTrigger,\n  type ListItemOpenTriggerProps as ListPrimitiveItemOpenTriggerProps,\n  ListItemCollapsibleContent,\n  type ListItemCollapsibleContentProps,\n  ListItem as ListPrimitiveItem,\n  type ListItemProps as ListPrimitiveItemProps,\n  type ListItemScopedProps,\n  LIST_NAME,\n  LIST_ITEM_NAME,\n  useListContext,\n  useListItemContext,\n} from '@dxos/react-list';\nimport { type Density } from '@dxos/react-ui-types';\n\nimport { ListDropIndicator } from './ListDropIndicator';\nimport { useDensityContext, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { DensityProvider } from '../DensityProvider';\n\ntype ListProps = ThemedClassName<ListPrimitiveProps> & { density?: Density };\n\nconst List = forwardRef<HTMLOListElement, ListProps>(({ classNames, children, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  const density = useDensityContext(props.density);\n\n  return (\n    <DensityProvider density={density}>\n      <ListPrimitive {...props} className={tx('list.root', 'list', {}, classNames)} ref={forwardedRef}>\n        {children}\n      </ListPrimitive>\n    </DensityProvider>\n  );\n});\n\ntype ListItemEndcapProps = ThemedClassName<ComponentPropsWithoutRef<'div'>> & { asChild?: boolean };\n\nconst ListItemEndcap = forwardRef<HTMLDivElement, ListItemEndcapProps>(\n  ({ children, classNames, asChild, ...props }, forwardedRef) => {\n    const Root = asChild ? Slot : 'div';\n    const density = useDensityContext();\n    const { tx } = useThemeContext();\n    return (\n      <Root\n        {...(!asChild && { role: 'none' })}\n        {...props}\n        className={tx('list.item.endcap', 'list__listItem__endcap', { density }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\nconst MockListItemOpenTrigger = ({\n  classNames,\n  ...props\n}: ThemedClassName<Omit<ComponentPropsWithoutRef<'div'>, 'children'>>) => {\n  const density = useDensityContext();\n  const { tx } = useThemeContext();\n  return (\n    <div\n      role='none'\n      {...props}\n      className={tx('list.item.openTrigger', 'list__listItem__openTrigger--mock', { density }, classNames)}\n    />\n  );\n};\n\ntype ListItemHeadingProps = ThemedClassName<ListPrimitiveItemHeadingProps>;\n\nconst ListItemHeading = forwardRef<HTMLParagraphElement, ListItemHeadingProps>(\n  ({ children, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const density = useDensityContext();\n    return (\n      <ListPrimitiveItemHeading\n        {...props}\n        className={tx('list.item.heading', 'list__listItem__heading', { density }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </ListPrimitiveItemHeading>\n    );\n  },\n);\n\ntype ListItemOpenTriggerProps = ThemedClassName<ListPrimitiveItemOpenTriggerProps>;\n\nconst ListItemOpenTrigger = forwardRef<HTMLButtonElement, ListItemOpenTriggerProps>(\n  ({ __listItemScope, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const density = useDensityContext();\n    const { open } = useListItemContext(LIST_ITEM_NAME, __listItemScope);\n    const Icon = open ? CaretDown : CaretRight;\n    return (\n      <ListPrimitiveItemOpenTrigger\n        {...props}\n        className={tx('list.item.openTrigger', 'list__listItem__openTrigger', { density }, classNames)}\n        ref={forwardedRef}\n      >\n        {children || (\n          <Icon\n            {...{\n              weight: 'bold',\n              className: tx('list.item.openTriggerIcon', 'list__listItem__openTrigger__icon', {}),\n            }}\n          />\n        )}\n      </ListPrimitiveItemOpenTrigger>\n    );\n  },\n);\n\ntype ListItemRootProps = ThemedClassName<ListPrimitiveItemProps>;\n\nconst ListItemRoot = forwardRef<HTMLLIElement, ListItemRootProps>(\n  ({ classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const density = useDensityContext();\n    return (\n      <ListPrimitiveItem\n        {...props}\n        className={tx('list.item.root', 'list__listItem', { density, collapsible: props.collapsible }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </ListPrimitiveItem>\n    );\n  },\n);\n\nexport const ListItem: {\n  Root: ForwardRefExoticComponent<ListItemRootProps>;\n  Endcap: ForwardRefExoticComponent<ListItemEndcapProps>;\n  Heading: ForwardRefExoticComponent<ListItemHeadingProps>;\n  OpenTrigger: ForwardRefExoticComponent<ListItemOpenTriggerProps>;\n  CollapsibleContent: ForwardRefExoticComponent<ListItemCollapsibleContentProps>;\n  MockOpenTrigger: FC<ThemedClassName<Omit<ComponentPropsWithoutRef<'div'>, 'children'>>>;\n  DropIndicator: typeof ListDropIndicator;\n} = {\n  Root: ListItemRoot,\n  Endcap: ListItemEndcap,\n  Heading: ListItemHeading,\n  OpenTrigger: ListItemOpenTrigger,\n  CollapsibleContent: ListItemCollapsibleContent,\n  MockOpenTrigger: MockListItemOpenTrigger,\n  DropIndicator: ListDropIndicator,\n};\n\nexport { List, useListContext, useListItemContext, LIST_NAME, LIST_ITEM_NAME };\n\nexport type {\n  ListProps,\n  ListScopedProps,\n  ListItemRootProps,\n  ListItemScopedProps,\n  ListItemEndcapProps,\n  ListItemHeadingProps,\n  ListItemOpenTriggerProps,\n  ListItemCollapsibleContentProps,\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Edge } from '@atlaskit/pragmatic-drag-and-drop-hitbox/types';\nimport React, { type CSSProperties, type HTMLAttributes } from 'react';\n\ntype Orientation = 'horizontal' | 'vertical';\n\nconst edgeToOrientationMap: Record<Edge, Orientation> = {\n  top: 'horizontal',\n  bottom: 'horizontal',\n  left: 'vertical',\n  right: 'vertical',\n};\n\nconst orientationStyles: Record<Orientation, HTMLAttributes<HTMLElement>['className']> = {\n  horizontal:\n    'h-[--line-thickness] left-[calc(var(--line-inset)+var(--terminal-radius))] right-[--line-inset] before:left-[--terminal-inset]',\n  vertical:\n    'w-[--line-thickness] top-[calc(var(--line-inset)+var(--terminal-radius))] bottom-[--line-inset] before:top-[--terminal-inset]',\n};\n\nconst edgeStyles: Record<Edge, HTMLAttributes<HTMLElement>['className']> = {\n  top: 'top-[--line-offset] before:top-[--offset-terminal]',\n  right: 'right-[--line-offset] before:right-[--offset-terminal]',\n  bottom: 'bottom-[--line-offset] before:bottom-[--offset-terminal]',\n  left: 'left-[--line-offset] before:left-[--offset-terminal]',\n};\n\nconst strokeSize = 2;\nconst terminalSize = 8;\nconst offsetToAlignTerminalWithLine = (strokeSize - terminalSize) / 2;\n\nexport type DropIndicatorProps = {\n  edge: Edge;\n  gap?: number;\n  terminalInset?: number;\n  lineInset?: number;\n};\n\n/**\n * This is a tailwind port of `@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box`\n */\nexport const ListDropIndicator = ({\n  edge,\n  gap = 0,\n  lineInset = 0,\n  terminalInset = lineInset - terminalSize,\n}: DropIndicatorProps) => {\n  const orientation = edgeToOrientationMap[edge];\n\n  return (\n    <div\n      role='none'\n      style={\n        {\n          '--line-thickness': `${strokeSize}px`,\n          '--line-offset': `calc(-0.5 * (${gap}px + ${strokeSize}px))`,\n          '--line-inset': `${lineInset}px`,\n          '--terminal-size': `${terminalSize}px`,\n          '--terminal-radius': `${terminalSize / 2}px`,\n          '--terminal-inset': `${terminalInset}px`,\n          '--offset-terminal': `${offsetToAlignTerminalWithLine}px`,\n        } as CSSProperties\n      }\n      className={`absolute z-10 pointer-events-none bg-accentSurface before:content-[''] before:w-[--terminal-size] before:h-[--terminal-size] box-border before:absolute before:border-[length:--line-thickness] before:border-solid before:border-accentSurface before:rounded-full ${orientationStyles[orientation]} ${edgeStyles[edge]}`}\n    />\n  );\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { type ComponentPropsWithoutRef, type FC, forwardRef, type ForwardRefExoticComponent } from 'react';\n\nimport {\n  List,\n  ListItem,\n  type ListItemCollapsibleContentProps,\n  type ListItemHeadingProps,\n  type ListItemOpenTriggerProps,\n  type ListItemRootProps,\n  type ListProps,\n  type ListScopedProps,\n  LIST_ITEM_NAME,\n  useListItemContext,\n} from './List';\nimport { TreeDropIndicator } from './TreeDropIndicator';\nimport { type ThemedClassName } from '../../util';\n\ntype TreeRootProps = ListProps;\n\ntype TreeItemProps = ListItemRootProps;\n\nconst TreeRoot = forwardRef<HTMLOListElement, TreeRootProps>((props, forwardedRef) => {\n  return <List {...props} ref={forwardedRef} />;\n});\n\ntype TreeBranchProps = TreeRootProps;\n\nconst TreeBranch = forwardRef<HTMLOListElement, ListScopedProps<TreeBranchProps>>(\n  ({ __listScope, ...props }, forwardedRef) => {\n    const { headingId } = useListItemContext(LIST_ITEM_NAME, __listScope);\n    return <List {...props} aria-labelledby={headingId} ref={forwardedRef} />;\n  },\n);\n\nconst TreeItemRoot = forwardRef<HTMLLIElement, ListItemRootProps>((props, forwardedRef) => {\n  return <ListItem.Root role='treeitem' {...props} ref={forwardedRef} />;\n});\n\ntype TreeItemHeadingProps = ListItemHeadingProps;\n\nconst TreeItemHeading = ListItem.Heading;\n\ntype TreeItemOpenTriggerProps = ListItemOpenTriggerProps;\n\nconst TreeItemOpenTrigger = ListItem.OpenTrigger;\n\nconst MockTreeItemOpenTrigger = ListItem.MockOpenTrigger;\n\ntype TreeItemBodyProps = ListItemCollapsibleContentProps;\n\nconst TreeItemBody: ForwardRefExoticComponent<TreeItemBodyProps> = ListItem.CollapsibleContent;\n\nexport const Tree = { Root: TreeRoot, Branch: TreeBranch };\nexport const TreeItem: {\n  Root: ForwardRefExoticComponent<TreeItemProps>;\n  Heading: ForwardRefExoticComponent<TreeItemHeadingProps>;\n  Body: ForwardRefExoticComponent<TreeItemBodyProps>;\n  OpenTrigger: ForwardRefExoticComponent<TreeItemOpenTriggerProps>;\n  MockOpenTrigger: FC<ThemedClassName<Omit<ComponentPropsWithoutRef<'div'>, 'children'>>>;\n  DropIndicator: typeof TreeDropIndicator;\n} = {\n  Root: TreeItemRoot,\n  Heading: TreeItemHeading,\n  Body: TreeItemBody,\n  OpenTrigger: TreeItemOpenTrigger,\n  MockOpenTrigger: MockTreeItemOpenTrigger,\n  DropIndicator: TreeDropIndicator,\n};\n\nexport type { TreeRootProps, TreeItemProps, TreeItemHeadingProps, TreeItemBodyProps, TreeItemOpenTriggerProps };\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Instruction } from '@atlaskit/pragmatic-drag-and-drop-hitbox/tree-item';\nimport React, { type HTMLAttributes, type CSSProperties } from 'react';\n\n// Tree item hitbox\n// https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#tree-item\n\ntype InstructionType = Exclude<Instruction, { type: 'instruction-blocked' }>['type'];\ntype Orientation = 'sibling' | 'child';\n\nconst edgeToOrientationMap: Record<InstructionType, Orientation> = {\n  'reorder-above': 'sibling',\n  'reorder-below': 'sibling',\n  'make-child': 'child',\n  reparent: 'child',\n};\n\nconst orientationStyles: Record<Orientation, HTMLAttributes<HTMLElement>['className']> = {\n  // TODO(wittjosiah): Stop using left/right here.\n  sibling:\n    'bs-[--line-thickness] left-[--horizontal-indent] right-0 bg-accentSurface before:left-[--negative-terminal-size]',\n  child: 'is-full block-start-0 block-end-0 border-[length:--line-thickness] before:invisible',\n};\n\nconst instructionStyles: Record<InstructionType, HTMLAttributes<HTMLElement>['className']> = {\n  'reorder-above': 'block-start-[--line-offset] before:block-start-[--offset-terminal]',\n  'reorder-below': 'block-end-[--line-offset] before:block-end-[--offset-terminal]',\n  'make-child': 'border-accentSurface',\n  // TODO(wittjosiah): This is not occurring in the current implementation.\n  reparent: '',\n};\n\nconst strokeSize = 2;\nconst terminalSize = 8;\nconst offsetToAlignTerminalWithLine = (strokeSize - terminalSize) / 2;\n\nexport type DropIndicatorProps = {\n  instruction: Instruction;\n  gap?: number;\n};\n\nexport const TreeDropIndicator = ({ instruction, gap = 0 }: DropIndicatorProps) => {\n  const lineOffset = `calc(-0.5 * (${gap}px + ${strokeSize}px))`;\n  const isBlocked = instruction.type === 'instruction-blocked';\n  const desiredInstruction = isBlocked ? instruction.desired : instruction;\n  const orientation = edgeToOrientationMap[desiredInstruction.type];\n  if (isBlocked) {\n    return null;\n  }\n\n  return (\n    <div\n      style={\n        {\n          '--line-thickness': `${strokeSize}px`,\n          '--line-offset': `${lineOffset}`,\n          '--terminal-size': `${terminalSize}px`,\n          '--terminal-radius': `${terminalSize / 2}px`,\n          '--negative-terminal-size': `-${terminalSize}px`,\n          '--offset-terminal': `${offsetToAlignTerminalWithLine}px`,\n          '--horizontal-indent': `${desiredInstruction.currentLevel * desiredInstruction.indentPerLevel + 4}px`,\n        } as CSSProperties\n      }\n      className={`absolute z-10 pointer-events-none before:is-[--terminal-size] before:bs-[--terminal-size] box-border before:absolute before:border-[length:--line-thickness] before:border-solid before:border-accentSurface before:rounded-full ${orientationStyles[orientation]} ${instructionStyles[desiredInstruction.type]}`}\n    ></div>\n  );\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { useArrowNavigationGroup, useFocusableGroup } from '@fluentui/react-tabster';\nimport { createContextScope, type Scope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport React, { type ComponentPropsWithRef, type CSSProperties, forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\n// TODO(thure): A lot of the accessible affordances for this kind of thing need to be implemented per https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/treegrid_role\n\nconst TREEGRID_ROW_NAME = 'TreegridRow';\n\ntype TreegridRowScopedProps<P> = P & { __treegridRowScope?: Scope };\n\nconst [createTreegridRowContext, createTreegridRowScope] = createContextScope(TREEGRID_ROW_NAME, []);\n\ntype TreegridRowContextValue = {\n  open?: boolean;\n  onOpenChange?: (nextOpen: boolean) => void;\n};\n\nconst [TreegridRowProvider, useTreegridRowContext] =\n  createTreegridRowContext<TreegridRowContextValue>(TREEGRID_ROW_NAME);\n\nconst PATH_SEPARATOR = '~';\nconst PARENT_OF_SEPARATOR = ' ';\n\ntype TreegridRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  gridTemplateColumns: CSSProperties['gridTemplateColumns'];\n  asChild?: boolean;\n};\n\nconst TreegridRoot = forwardRef<HTMLDivElement, TreegridRootProps>(\n  ({ asChild, classNames, children, style, gridTemplateColumns, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    const arrowNavigationAttrs = useArrowNavigationGroup({ axis: 'vertical', tabbable: false, circular: true });\n\n    return (\n      <Root\n        role='treegrid'\n        {...arrowNavigationAttrs}\n        {...props}\n        className={tx('treegrid.root', 'treegrid', {}, classNames)}\n        style={{ ...style, gridTemplateColumns }}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype TreegridRowProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  id: string;\n  asChild?: boolean;\n  parentOf?: string;\n  defaultOpen?: boolean;\n  open?: boolean;\n  onOpenChange?(open: boolean): void;\n};\n\nconst TreegridRow = forwardRef<HTMLDivElement, TreegridRowScopedProps<TreegridRowProps>>(\n  (\n    {\n      __treegridRowScope,\n      asChild,\n      classNames,\n      children,\n      id,\n      parentOf,\n      open: propsOpen,\n      defaultOpen,\n      onOpenChange: propsOnOpenChange,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    const pathParts = id.split(PATH_SEPARATOR);\n    const level = pathParts.length - 1;\n    const [open, onOpenChange] = useControllableState({\n      prop: propsOpen,\n      onChange: propsOnOpenChange,\n      defaultProp: defaultOpen,\n    });\n    const focusableGroupAttrs = useFocusableGroup({ tabBehavior: 'limited' });\n    const arrowGroupAttrs = useArrowNavigationGroup({\n      axis: 'horizontal',\n      tabbable: false,\n      circular: false,\n      memorizeCurrent: false,\n    });\n\n    return (\n      <TreegridRowProvider open={open} onOpenChange={onOpenChange} scope={__treegridRowScope}>\n        <Root\n          role='row'\n          aria-level={level}\n          className={tx('treegrid.row', 'treegrid__row', { level }, classNames)}\n          {...(parentOf && { 'aria-expanded': open, 'aria-owns': parentOf })}\n          tabIndex={0}\n          {...focusableGroupAttrs}\n          {...props}\n          id={id}\n          ref={forwardedRef}\n        >\n          <div role='none' className='contents' {...arrowGroupAttrs}>\n            {children}\n          </div>\n        </Root>\n      </TreegridRowProvider>\n    );\n  },\n);\n\ntype TreegridCellProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & { indent?: boolean };\n\nconst TreegridCell = forwardRef<HTMLDivElement, TreegridCellProps>(\n  ({ classNames, children, indent, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <div\n        role='gridcell'\n        className={tx('treegrid.cell', 'treegrid__cell', { indent }, classNames)}\n        {...props}\n        ref={forwardedRef}\n      >\n        {children}\n      </div>\n    );\n  },\n);\n\nexport type { TreegridRootProps, TreegridRowProps };\n\nexport const Treegrid = {\n  Root: TreegridRoot,\n  Row: TreegridRow,\n  Cell: TreegridCell,\n  PARENT_OF_SEPARATOR,\n  PATH_SEPARATOR,\n  createTreegridRowScope,\n  useTreegridRowContext,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { createContext } from '@radix-ui/react-context';\nimport { Root as DialogRoot, DialogContent, DialogTitle } from '@radix-ui/react-dialog';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport React, {\n  type ComponentPropsWithRef,\n  type Dispatch,\n  forwardRef,\n  type PropsWithChildren,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type KeyboardEvent,\n  type ComponentPropsWithoutRef,\n} from 'react';\n\nimport { log } from '@dxos/log';\nimport { useMediaQuery, useForwardedRef } from '@dxos/react-hooks';\n\nimport { useSwipeToDismiss } from './useSwipeToDismiss';\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { type Label, toLocalizedString, useTranslation } from '../ThemeProvider';\n\nconst MAIN_ROOT_NAME = 'MainRoot';\nconst NAVIGATION_SIDEBAR_NAME = 'NavigationSidebar';\nconst COMPLEMENTARY_SIDEBAR_NAME = 'ComplementarySidebar';\nconst MAIN_NAME = 'Main';\nconst GENERIC_CONSUMER_NAME = 'GenericConsumer';\n\ntype SidebarState = 'expanded' | 'collapsed' | 'closed';\n\ntype MainContextValue = {\n  resizing: boolean;\n  navigationSidebarState: SidebarState;\n  setNavigationSidebarState: Dispatch<SetStateAction<SidebarState | undefined>>;\n  complementarySidebarState: SidebarState;\n  setComplementarySidebarState: Dispatch<SetStateAction<SidebarState | undefined>>;\n};\n\nconst landmarkAttr = 'data-main-landmark';\n\n/**\n * Facilitates moving focus between landmarks.\n * Ref https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role\n */\nconst useLandmarkMover = (propsOnKeyDown: ComponentPropsWithoutRef<'div'>['onKeyDown'], landmark: string) => {\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      const target = event.target as HTMLDivElement;\n      if (event.target === event.currentTarget && event.key === 'Tab' && target.hasAttribute(landmarkAttr)) {\n        event.preventDefault();\n        const landmarks = Array.from(document.querySelectorAll(`[${landmarkAttr}]:not([inert])`))\n          .map((el) => (el.hasAttribute(landmarkAttr) ? parseInt(el.getAttribute(landmarkAttr)!) : NaN))\n          .sort();\n        const l = landmarks.length;\n        const cursor = landmarks.indexOf(parseInt(target.getAttribute(landmarkAttr)!));\n        const nextLandmark = landmarks[(cursor + l + (event.getModifierState('Shift') ? -1 : 1)) % l];\n        (document.querySelector(`[${landmarkAttr}=\"${nextLandmark}\"]`) as HTMLDivElement | null)?.focus();\n      }\n      propsOnKeyDown?.(event);\n    },\n    [propsOnKeyDown],\n  );\n  const focusableGroupAttrs = window ? {} : { tabBehavior: 'limited', ignoreDefaultKeydown: { Tab: true } };\n\n  return { onKeyDown: handleKeyDown, [landmarkAttr]: landmark, tabIndex: 0, ...focusableGroupAttrs };\n};\n\nconst [MainProvider, useMainContext] = createContext<MainContextValue>(MAIN_NAME, {\n  resizing: false,\n  navigationSidebarState: 'closed',\n  setNavigationSidebarState: (nextState) => {\n    // TODO(burdon): Standardize with other context missing errors using raise.\n    log.warn('Attempt to set sidebar state without initializing `MainRoot`');\n  },\n  complementarySidebarState: 'closed',\n  setComplementarySidebarState: (nextState) => {\n    // TODO(burdon): Standardize with other context missing errors using raise.\n    log.warn('Attempt to set sidebar state without initializing `MainRoot`');\n  },\n});\n\nconst useSidebars = (consumerName = GENERIC_CONSUMER_NAME) => {\n  const { setNavigationSidebarState, navigationSidebarState, setComplementarySidebarState, complementarySidebarState } =\n    useMainContext(consumerName);\n\n  return {\n    navigationSidebarState,\n    setNavigationSidebarState,\n    toggleNavigationSidebar: useCallback(\n      () => setNavigationSidebarState(navigationSidebarState === 'expanded' ? 'closed' : 'expanded'),\n      [navigationSidebarState, setNavigationSidebarState],\n    ),\n    openNavigationSidebar: useCallback(() => setNavigationSidebarState('expanded'), []),\n    collapseNavigationSidebar: useCallback(() => setNavigationSidebarState('collapsed'), []),\n    closeNavigationSidebar: useCallback(() => setNavigationSidebarState('closed'), []),\n    complementarySidebarState,\n    setComplementarySidebarState,\n    toggleComplementarySidebar: useCallback(\n      () => setComplementarySidebarState(complementarySidebarState === 'expanded' ? 'closed' : 'expanded'),\n      [complementarySidebarState, setComplementarySidebarState],\n    ),\n    openComplementarySidebar: useCallback(() => setComplementarySidebarState('expanded'), []),\n    collapseComplementarySidebar: useCallback(() => setComplementarySidebarState('collapsed'), []),\n    closeComplementarySidebar: useCallback(() => setComplementarySidebarState('closed'), []),\n  };\n};\n\ntype MainRootProps = PropsWithChildren<{\n  navigationSidebarState?: SidebarState;\n  defaultNavigationSidebarState?: SidebarState;\n  onNavigationSidebarStateChange?: (nextState: SidebarState) => void;\n  complementarySidebarState?: SidebarState;\n  defaultComplementarySidebarState?: SidebarState;\n  onComplementarySidebarStateChange?: (nextState: SidebarState) => void;\n}>;\n\nconst resizeDebounce = 3000;\n\nconst MainRoot = ({\n  navigationSidebarState: propsNavigationSidebarState,\n  defaultNavigationSidebarState,\n  onNavigationSidebarStateChange,\n  complementarySidebarState: propsComplementarySidebarState,\n  defaultComplementarySidebarState,\n  onComplementarySidebarStateChange,\n  children,\n  ...props\n}: MainRootProps) => {\n  const [isLg] = useMediaQuery('lg', { ssr: false });\n  const [navigationSidebarState = isLg ? 'expanded' : 'collapsed', setNavigationSidebarState] =\n    useControllableState<SidebarState>({\n      prop: propsNavigationSidebarState,\n      defaultProp: defaultNavigationSidebarState,\n      onChange: onNavigationSidebarStateChange,\n    });\n  const [complementarySidebarState = isLg ? 'expanded' : 'collapsed', setComplementarySidebarState] =\n    useControllableState<SidebarState>({\n      prop: propsComplementarySidebarState,\n      defaultProp: defaultComplementarySidebarState,\n      onChange: onComplementarySidebarStateChange,\n    });\n\n  const [resizing, setResizing] = useState(false);\n  const resizeInterval = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const handleResize = useCallback(() => {\n    setResizing(true);\n    if (resizeInterval.current) {\n      clearTimeout(resizeInterval.current);\n    }\n    resizeInterval.current = setTimeout(() => {\n      setResizing(false);\n      resizeInterval.current = null;\n    }, resizeDebounce);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [handleResize]);\n\n  return (\n    <MainProvider\n      {...props}\n      {...{\n        navigationSidebarState,\n        setNavigationSidebarState,\n        complementarySidebarState,\n        setComplementarySidebarState,\n      }}\n      resizing={resizing}\n    >\n      {children}\n    </MainProvider>\n  );\n};\n\nMainRoot.displayName = MAIN_ROOT_NAME;\n\nconst handleOpenAutoFocus = (event: Event) => {\n  !document.body.hasAttribute('data-is-keyboard') && event.preventDefault();\n};\n\ntype MainSidebarProps = ThemedClassName<ComponentPropsWithRef<typeof DialogContent>> & {\n  swipeToDismiss?: boolean;\n  state?: SidebarState;\n  resizing?: boolean;\n  onStateChange?: (nextState: SidebarState) => void;\n  side: 'inline-start' | 'inline-end';\n  label: Label;\n};\n\nconst MainSidebar = forwardRef<HTMLDivElement, MainSidebarProps>(\n  (\n    { classNames, children, swipeToDismiss, onOpenAutoFocus, state, resizing, onStateChange, side, label, ...props },\n    forwardedRef,\n  ) => {\n    const [isLg] = useMediaQuery('lg', { ssr: false });\n    const { tx } = useThemeContext();\n    const { t } = useTranslation();\n    const ref = useForwardedRef(forwardedRef);\n    const noopRef = useRef(null);\n    useSwipeToDismiss(swipeToDismiss ? ref : noopRef, {\n      onDismiss: () => onStateChange?.('closed'),\n    });\n    const handleKeyDown = useCallback(\n      (event: KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'Escape') {\n          ((event.target as HTMLDivElement).closest('[data-tabster]') as HTMLDivElement)?.focus();\n        }\n        props.onKeyDown?.(event);\n      },\n      [props.onKeyDown],\n    );\n    const Root = isLg ? Primitive.div : DialogContent;\n\n    return (\n      <DialogRoot open={state !== 'closed'} aria-label={toLocalizedString(label, t)} modal={false}>\n        {!isLg && <DialogTitle className='sr-only'>{toLocalizedString(label, t)}</DialogTitle>}\n        <Root\n          {...(!isLg && { forceMount: true, tabIndex: -1, onOpenAutoFocus: onOpenAutoFocus ?? handleOpenAutoFocus })}\n          {...props}\n          data-side={side === 'inline-end' ? 'ie' : 'is'}\n          data-state={state}\n          data-resizing={resizing ? 'true' : 'false'}\n          className={tx('main.sidebar', 'main__sidebar', {}, classNames)}\n          onKeyDown={handleKeyDown}\n          {...(state === 'closed' && { inert: 'true' })}\n          ref={ref}\n        >\n          {children}\n        </Root>\n      </DialogRoot>\n    );\n  },\n);\n\ntype MainNavigationSidebarProps = Omit<MainSidebarProps, 'expanded' | 'side'>;\n\nconst MainNavigationSidebar = forwardRef<HTMLDivElement, MainNavigationSidebarProps>((props, forwardedRef) => {\n  const { navigationSidebarState, setNavigationSidebarState, resizing } = useMainContext(NAVIGATION_SIDEBAR_NAME);\n  const mover = useLandmarkMover(props.onKeyDown, '0');\n\n  return (\n    <MainSidebar\n      {...mover}\n      {...props}\n      state={navigationSidebarState}\n      onStateChange={setNavigationSidebarState}\n      resizing={resizing}\n      side='inline-start'\n      ref={forwardedRef}\n    />\n  );\n});\n\nMainNavigationSidebar.displayName = NAVIGATION_SIDEBAR_NAME;\n\ntype MainComplementarySidebarProps = Omit<MainSidebarProps, 'expanded' | 'side'>;\n\nconst MainComplementarySidebar = forwardRef<HTMLDivElement, MainComplementarySidebarProps>((props, forwardedRef) => {\n  const { complementarySidebarState, setComplementarySidebarState, resizing } =\n    useMainContext(COMPLEMENTARY_SIDEBAR_NAME);\n  const mover = useLandmarkMover(props.onKeyDown, '2');\n\n  return (\n    <MainSidebar\n      {...mover}\n      {...props}\n      state={complementarySidebarState}\n      onStateChange={setComplementarySidebarState}\n      resizing={resizing}\n      side='inline-end'\n      ref={forwardedRef}\n    />\n  );\n});\n\nMainNavigationSidebar.displayName = NAVIGATION_SIDEBAR_NAME;\n\ntype MainProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n  bounce?: boolean;\n  handlesFocus?: boolean;\n};\n\nconst MainContent = forwardRef<HTMLDivElement, MainProps>(\n  ({ asChild, classNames, bounce, handlesFocus, children, role, ...props }: MainProps, forwardedRef) => {\n    const { navigationSidebarState, complementarySidebarState } = useMainContext(MAIN_NAME);\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : role ? 'div' : 'main';\n\n    const mover = useLandmarkMover(props.onKeyDown, '1');\n\n    return (\n      <Root\n        role={role}\n        {...(handlesFocus && { ...mover })}\n        {...props}\n        data-sidebar-inline-start-state={navigationSidebarState}\n        data-sidebar-inline-end-state={complementarySidebarState}\n        data-handles-focus={handlesFocus}\n        className={tx('main.content', 'main', { bounce, handlesFocus }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\nMainContent.displayName = MAIN_NAME;\n\ntype MainOverlayProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.div>, 'children'>>;\n\nconst MainOverlay = forwardRef<HTMLDivElement, MainOverlayProps>(({ classNames, ...props }, forwardedRef) => {\n  const [isLg] = useMediaQuery('lg', { ssr: false });\n  const { navigationSidebarState, setNavigationSidebarState, complementarySidebarState, setComplementarySidebarState } =\n    useMainContext(MAIN_NAME);\n  const { tx } = useThemeContext();\n  return (\n    <div\n      onClick={() => {\n        setNavigationSidebarState('collapsed');\n        setComplementarySidebarState('collapsed');\n      }}\n      {...props}\n      className={tx(\n        'main.overlay',\n        'main__overlay',\n        { isLg, inlineStartSidebarOpen: navigationSidebarState, inlineEndSidebarOpen: complementarySidebarState },\n        classNames,\n      )}\n      data-state={navigationSidebarState === 'expanded' || complementarySidebarState === 'expanded' ? 'open' : 'closed'}\n      aria-hidden='true'\n      ref={forwardedRef}\n    />\n  );\n});\n\nexport const Main = {\n  Root: MainRoot,\n  Content: MainContent,\n  Overlay: MainOverlay,\n  NavigationSidebar: MainNavigationSidebar,\n  ComplementarySidebar: MainComplementarySidebar,\n};\n\nexport { useMainContext, useSidebars, useLandmarkMover };\n\nexport type { MainRootProps, MainProps, MainOverlayProps, MainNavigationSidebarProps, SidebarState };\n", "//\n// Copyright 2023 DXOS.org\n//\n\n// This implementation is based upon https://github.com/hosembafer/react-swipe-to-dismiss, commit d88deafe910a6bd1400cf8fa90459a76cf4f71d3\n\nimport { type RefObject, useCallback, useEffect, useState } from 'react';\n\nenum MotionState {\n  IDLE,\n  DEBOUNCING,\n  FOLLOWING,\n}\n\ntype Options = Partial<{\n  onDismiss: () => void;\n  dismissThreshold: number;\n  debounceThreshold: number;\n  side: 'inline-start' | 'inline-end';\n  offset: number;\n}>;\n\nexport const useSwipeToDismiss = (\n  ref: RefObject<HTMLElement | null>,\n  { onDismiss, dismissThreshold = 64, debounceThreshold = 8, offset = 0 /* side = 'inline-start' */ }: Options,\n) => {\n  const $root = ref.current;\n  // todo(thure): Implement other sides.\n  // const dK = direction === 'inline-start' ? 1 : -1;\n\n  const [motionState, setMotionState] = useState<MotionState>(MotionState.IDLE);\n  const [gestureStartX, setGestureStartX] = useState(0);\n\n  const setIdle = useCallback(() => {\n    setMotionState(MotionState.IDLE);\n    $root?.style.removeProperty('inset-inline-start');\n    $root?.style.setProperty('transition-duration', '200ms');\n  }, [$root]);\n\n  const setFollowing = useCallback(() => {\n    setMotionState(MotionState.FOLLOWING);\n    $root?.style.setProperty('transition-duration', '0ms');\n  }, [$root]);\n\n  const handlePointerDown = useCallback(\n    ({ screenX }: PointerEvent) => {\n      if (motionState === MotionState.IDLE) {\n        setMotionState(MotionState.DEBOUNCING);\n        setGestureStartX(screenX);\n      }\n    },\n    [motionState],\n  );\n\n  const handlePointerMove = useCallback(\n    ({ screenX }: PointerEvent) => {\n      if ($root) {\n        const delta = Math.min(screenX - gestureStartX, 0);\n        switch (motionState) {\n          case MotionState.FOLLOWING:\n            if (Math.abs(delta) > dismissThreshold) {\n              setIdle();\n              onDismiss?.();\n            } else {\n              $root.style.setProperty('inset-inline-start', `${offset + delta}px`);\n            }\n            break;\n          case MotionState.DEBOUNCING:\n            if (Math.abs(delta) > debounceThreshold) {\n              setFollowing();\n            }\n            break;\n        }\n      }\n    },\n    [$root, motionState, gestureStartX],\n  );\n\n  const handlePointerUp = useCallback(() => {\n    setIdle();\n  }, [setIdle]);\n\n  useEffect(() => {\n    $root?.addEventListener('pointerdown', handlePointerDown);\n    return () => {\n      $root?.removeEventListener('pointerdown', handlePointerDown);\n    };\n  }, [$root, handlePointerDown]);\n\n  useEffect(() => {\n    $root && document.documentElement.addEventListener('pointermove', handlePointerMove);\n    return () => {\n      document.documentElement.removeEventListener('pointermove', handlePointerMove);\n    };\n  }, [$root, handlePointerMove]);\n\n  useEffect(() => {\n    $root && document.documentElement.addEventListener('pointerup', handlePointerUp);\n    return () => {\n      document.documentElement.removeEventListener('pointerup', handlePointerUp);\n    };\n  }, [$root, handlePointerUp]);\n};\n", "//\n// Copyright 2023 DXOS.org\n//\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\nimport { useSafeCollisionPadding } from '../../hooks/useSafeCollisionPadding';\nimport { type ThemedClassName } from '../../util';\n\ntype ContextMenuRootProps = ContextMenuPrimitive.ContextMenuProps;\n\nconst ContextMenuRoot = ContextMenuPrimitive.ContextMenu;\n\ntype ContextMenuTriggerProps = ContextMenuPrimitive.ContextMenuTriggerProps;\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger;\n\ntype ContextMenuPortalProps = ContextMenuPrimitive.ContextMenuPortalProps;\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal;\n\ntype ContextMenuContentProps = ThemedClassName<ContextMenuPrimitive.ContextMenuContentProps> & {\n  constrainBlockSize?: boolean;\n};\n\nconst ContextMenuContent = forwardRef<HTMLDivElement, ContextMenuContentProps>(\n  ({ classNames, children, collisionPadding = 8, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const elevation = useElevationContext();\n    const safeCollisionPadding = useSafeCollisionPadding(collisionPadding);\n    return (\n      <ContextMenuPrimitive.Content\n        {...props}\n        collisionPadding={safeCollisionPadding}\n        className={tx('menu.content', 'menu', { elevation }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </ContextMenuPrimitive.Content>\n    );\n  },\n);\n\ntype ContextMenuViewportProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n};\n\nconst ContextMenuViewport = forwardRef<HTMLDivElement, ContextMenuViewportProps>(\n  ({ classNames, asChild, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root {...props} className={tx('menu.viewport', 'menu__viewport', {}, classNames)} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\ntype ContextMenuArrowProps = ThemedClassName<ContextMenuPrimitive.ContextMenuArrowProps>;\n\nconst ContextMenuArrow = forwardRef<SVGSVGElement, ContextMenuArrowProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ContextMenuPrimitive.Arrow\n      {...props}\n      className={tx('menu.arrow', 'menu__arrow', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype ContextMenuGroupProps = ContextMenuPrimitive.ContextMenuGroupProps;\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group;\n\ntype ContextMenuItemIndicatorProps = ContextMenuPrimitive.ContextMenuItemIndicatorProps;\n\nconst ContextMenuItemIndicator = ContextMenuPrimitive.ItemIndicator;\n\ntype ContextMenuItemProps = ThemedClassName<ContextMenuPrimitive.ContextMenuItemProps>;\n\nconst ContextMenuItem = forwardRef<HTMLDivElement, ContextMenuItemProps>(\n  ({ classNames, ...props }: ContextMenuItemProps, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ContextMenuPrimitive.Item\n        {...props}\n        className={tx('menu.item', 'menu__item', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype ContextMenuCheckboxItemProps = ThemedClassName<ContextMenuPrimitive.ContextMenuCheckboxItemProps>;\n\nconst ContextMenuCheckboxItem = forwardRef<HTMLDivElement, ContextMenuCheckboxItemProps>(\n  ({ classNames, ...props }: ContextMenuItemProps, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ContextMenuPrimitive.CheckboxItem\n        {...props}\n        className={tx('menu.item', 'menu__item--checkbox', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype ContextMenuSeparatorProps = ThemedClassName<ContextMenuPrimitive.ContextMenuSeparatorProps>;\n\nconst ContextMenuSeparator = forwardRef<HTMLDivElement, ContextMenuSeparatorProps>(\n  ({ classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ContextMenuPrimitive.Separator\n        {...props}\n        className={tx('menu.separator', 'menu__item', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype ContextMenuGroupLabelProps = ThemedClassName<ContextMenuPrimitive.ContextMenuLabelProps>;\n\nconst ContextMenuGroupLabel = forwardRef<HTMLDivElement, ContextMenuGroupLabelProps>(\n  ({ classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ContextMenuPrimitive.Label\n        {...props}\n        className={tx('menu.groupLabel', 'menu__group__label', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nexport const ContextMenu = {\n  Root: ContextMenuRoot,\n  Trigger: ContextMenuTrigger,\n  Portal: ContextMenuPortal,\n  Content: ContextMenuContent,\n  Viewport: ContextMenuViewport,\n  Arrow: ContextMenuArrow,\n  Group: ContextMenuGroup,\n  Item: ContextMenuItem,\n  CheckboxItem: ContextMenuCheckboxItem,\n  ItemIndicator: ContextMenuItemIndicator,\n  Separator: ContextMenuSeparator,\n  GroupLabel: ContextMenuGroupLabel,\n};\n\nexport type {\n  ContextMenuRootProps,\n  ContextMenuTriggerProps,\n  ContextMenuPortalProps,\n  ContextMenuContentProps,\n  ContextMenuViewportProps,\n  ContextMenuArrowProps,\n  ContextMenuGroupProps,\n  ContextMenuItemProps,\n  ContextMenuCheckboxItemProps,\n  ContextMenuItemIndicatorProps,\n  ContextMenuSeparatorProps,\n  ContextMenuGroupLabelProps,\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { type TooltipContentProps } from '@radix-ui/react-tooltip';\nimport { useMemo } from 'react';\n\nimport { type SafeAreaPadding } from './useSafeArea';\nimport { useThemeContext } from './useThemeContext';\n\ntype PaddingProp = TooltipContentProps['collisionPadding'];\ntype PaddingRecord = Exclude<PaddingProp, number | undefined>;\n\nconst propIsNumber = (prop: PaddingProp): prop is number => Number.isFinite(prop);\nconst propsIsRecord = (prop: PaddingProp): prop is PaddingRecord => !!(prop && typeof prop === 'object');\n\nconst safePadding = (\n  propsPadding: TooltipContentProps['collisionPadding'],\n  safePadding: SafeAreaPadding,\n  side: keyof SafeAreaPadding,\n) => {\n  return (\n    (propIsNumber(safePadding[side]) ? safePadding[side] : 0) +\n    (propIsNumber(propsPadding) ? propsPadding : propsIsRecord(propsPadding) ? propsPadding[side] ?? 0 : 0)\n  );\n};\n\nexport const useSafeCollisionPadding = (collisionPadding?: PaddingProp) => {\n  const { safeAreaPadding } = useThemeContext();\n  return useMemo(\n    () => ({\n      top: safePadding(collisionPadding, safeAreaPadding!, 'top'),\n      right: safePadding(collisionPadding, safeAreaPadding!, 'right'),\n      bottom: safePadding(collisionPadding, safeAreaPadding!, 'bottom'),\n      left: safePadding(collisionPadding, safeAreaPadding!, 'left'),\n    }),\n    [collisionPadding, safeAreaPadding],\n  );\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\n// This is based upon `@radix-ui/react-dropdown-menu` fetched 25 Oct 2024 at https://github.com/radix-ui/primitives at commit 06de2d4.\n\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport type { Scope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport React, {\n  type ReactNode,\n  type FC,\n  useRef,\n  type ElementRef,\n  useCallback,\n  type ComponentPropsWithoutRef,\n  forwardRef,\n  type ComponentPropsWithRef,\n  useEffect,\n  type MutableRefObject,\n  type RefObject,\n} from 'react';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\nimport { useSafeCollisionPadding } from '../../hooks/useSafeCollisionPadding';\nimport { type ThemedClassName } from '../../util';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * ----------------------------------------------------------------------------------------------- */\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype ScopedProps<P> = P & { __scopeDropdownMenu?: Scope };\nconst [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(DROPDOWN_MENU_NAME, [createMenuScope]);\nconst useMenuScope = createMenuScope();\n\ntype DropdownMenuContextValue = {\n  triggerId: string;\n  triggerRef: MutableRefObject<HTMLButtonElement | null>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] =\n  createDropdownMenuContext<DropdownMenuContextValue>(DROPDOWN_MENU_NAME);\n\ninterface DropdownMenuRootProps {\n  children?: ReactNode;\n  dir?: Direction;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst DropdownMenuRoot: FC<DropdownMenuRootProps> = (props: ScopedProps<DropdownMenuRootProps>) => {\n  const { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = true } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = useRef<HTMLButtonElement | null>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      triggerId={useId()}\n      triggerRef={triggerRef as MutableRefObject<HTMLButtonElement | null>}\n      contentId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      <MenuPrimitive.Root {...menuScope} open={open} onOpenChange={setOpen} dir={dir} modal={modal}>\n        {children}\n      </MenuPrimitive.Root>\n    </DropdownMenuProvider>\n  );\n};\n\nDropdownMenuRoot.displayName = DROPDOWN_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\n\ntype DropdownMenuTriggerElement = ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DropdownMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst DropdownMenuTrigger = forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(\n  (props: ScopedProps<DropdownMenuTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;\n    const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return (\n      <MenuPrimitive.Anchor asChild {...menuScope}>\n        <Primitive.button\n          type='button'\n          id={context.triggerId}\n          aria-haspopup='menu'\n          aria-expanded={context.open}\n          aria-controls={context.open ? context.contentId : undefined}\n          data-state={context.open ? 'open' : 'closed'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          {...triggerProps}\n          ref={composeRefs(forwardedRef, context.triggerRef)}\n          onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onOpenToggle();\n              // prevent trigger focusing when opening\n              // this allows the content to be given focus without competition\n              if (!context.open) {\n                event.preventDefault();\n              }\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (disabled) {\n              return;\n            }\n            if (['Enter', ' '].includes(event.key)) {\n              context.onOpenToggle();\n            }\n            if (event.key === 'ArrowDown') {\n              context.onOpenChange(true);\n            }\n            // prevent keydown from scrolling window / first focused item to execute\n            // that keydown (inadvertently closing the menu)\n            if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {\n              event.preventDefault();\n            }\n          })}\n        />\n      </MenuPrimitive.Anchor>\n    );\n  },\n);\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuVirtualTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst VIRTUAL_TRIGGER_NAME = 'DropdownMenuVirtualTrigger';\n\ninterface DropdownMenuVirtualTriggerProps {\n  virtualRef: RefObject<DropdownMenuTriggerElement>;\n}\n\nconst DropdownMenuVirtualTrigger = (props: ScopedProps<DropdownMenuVirtualTriggerProps>) => {\n  const { __scopeDropdownMenu, virtualRef } = props;\n  const context = useDropdownMenuContext(VIRTUAL_TRIGGER_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  useEffect(() => {\n    if (virtualRef.current) {\n      context.triggerRef.current = virtualRef.current;\n    }\n  });\n  return <MenuPrimitive.Anchor {...menuScope} virtualRef={virtualRef} />;\n};\n\nDropdownMenuVirtualTrigger.displayName = VIRTUAL_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuPortal\n * ----------------------------------------------------------------------------------------------- */\n\nconst PORTAL_NAME = 'DropdownMenuPortal';\n\ntype MenuPortalProps = ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface DropdownMenuPortalProps extends MenuPortalProps {}\n\nconst DropdownMenuPortal: FC<DropdownMenuPortalProps> = (props: ScopedProps<DropdownMenuPortalProps>) => {\n  const { __scopeDropdownMenu, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nDropdownMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuViewport\n * ----------------------------------------------------------------------------------------------- */\n\ntype DropdownMenuViewportProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n};\n\nconst DropdownMenuViewport = forwardRef<HTMLDivElement, DropdownMenuViewportProps>(\n  ({ classNames, asChild, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root {...props} className={tx('menu.viewport', 'menu__viewport', {}, classNames)} ref={forwardedRef}>\n        {children}\n      </Root>\n    );\n  },\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * ----------------------------------------------------------------------------------------------- */\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\ntype DropdownMenuContentElement = ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Content>>;\ninterface DropdownMenuContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst DropdownMenuContent = forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(\n  (props: ScopedProps<DropdownMenuContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, collisionPadding = 8, ...contentProps } = props;\n    const { tx } = useThemeContext();\n    const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n    const elevation = useElevationContext();\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const hasInteractedOutsideRef = useRef(false);\n    const safeCollisionPadding = useSafeCollisionPadding(collisionPadding);\n    return (\n      <MenuPrimitive.Content\n        id={context.contentId}\n        aria-labelledby={context.triggerId}\n        {...menuScope}\n        {...contentProps}\n        collisionPadding={safeCollisionPadding}\n        ref={forwardedRef}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          if (!hasInteractedOutsideRef.current) {\n            context.triggerRef.current?.focus();\n          }\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, (event) => {\n          const originalEvent = event.detail.originalEvent as PointerEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n          if (!context.modal || isRightClick) {\n            hasInteractedOutsideRef.current = true;\n          }\n        })}\n        className={tx('menu.content', 'menu', { elevation }, classNames)}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  },\n);\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * ----------------------------------------------------------------------------------------------- */\n\nconst GROUP_NAME = 'DropdownMenuGroup';\n\ntype DropdownMenuGroupElement = ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface DropdownMenuGroupProps extends MenuGroupProps {}\n\nconst DropdownMenuGroup = forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(\n  (props: ScopedProps<DropdownMenuGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  },\n);\n\nDropdownMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * ----------------------------------------------------------------------------------------------- */\n\nconst LABEL_NAME = 'DropdownMenuLabel';\n\ntype DropdownMenuLabelElement = ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Label>>;\ninterface DropdownMenuLabelProps extends MenuLabelProps {}\n\nconst DropdownMenuGroupLabel = forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(\n  (props: ScopedProps<DropdownMenuLabelProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const { tx } = useThemeContext();\n    return (\n      <MenuPrimitive.Label\n        {...menuScope}\n        {...labelProps}\n        className={tx('menu.groupLabel', 'menu__group__label', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nDropdownMenuGroupLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * ----------------------------------------------------------------------------------------------- */\n\nconst ITEM_NAME = 'DropdownMenuItem';\n\ntype DropdownMenuItemElement = ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Item>>;\ninterface DropdownMenuItemProps extends MenuItemProps {}\n\nconst DropdownMenuItem = forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(\n  (props: ScopedProps<DropdownMenuItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const { tx } = useThemeContext();\n    return (\n      <MenuPrimitive.Item\n        {...menuScope}\n        {...itemProps}\n        className={tx('menu.item', 'menu__item', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nDropdownMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuCheckboxItem\n * ----------------------------------------------------------------------------------------------- */\n\nconst CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';\n\ntype DropdownMenuCheckboxItemElement = ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>>;\ninterface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst DropdownMenuCheckboxItem = forwardRef<DropdownMenuCheckboxItemElement, DropdownMenuCheckboxItemProps>(\n  (props: ScopedProps<DropdownMenuCheckboxItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const { tx } = useThemeContext();\n    return (\n      <MenuPrimitive.CheckboxItem\n        {...menuScope}\n        {...checkboxItemProps}\n        className={tx('menu.item', 'menu__item--checkbox', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioGroup\n * ----------------------------------------------------------------------------------------------- */\n\nconst RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';\n\ntype DropdownMenuRadioGroupElement = ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst DropdownMenuRadioGroup = forwardRef<DropdownMenuRadioGroupElement, DropdownMenuRadioGroupProps>(\n  (props: ScopedProps<DropdownMenuRadioGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n  },\n);\n\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioItem\n * ----------------------------------------------------------------------------------------------- */\n\nconst RADIO_ITEM_NAME = 'DropdownMenuRadioItem';\n\ntype DropdownMenuRadioItemElement = ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface DropdownMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst DropdownMenuRadioItem = forwardRef<DropdownMenuRadioItemElement, DropdownMenuRadioItemProps>(\n  (props: ScopedProps<DropdownMenuRadioItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n  },\n);\n\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItemIndicator\n * ----------------------------------------------------------------------------------------------- */\n\nconst INDICATOR_NAME = 'DropdownMenuItemIndicator';\n\ntype DropdownMenuItemIndicatorElement = ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst DropdownMenuItemIndicator = forwardRef<DropdownMenuItemIndicatorElement, DropdownMenuItemIndicatorProps>(\n  (props: ScopedProps<DropdownMenuItemIndicatorProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...itemIndicatorProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n  },\n);\n\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * ----------------------------------------------------------------------------------------------- */\n\nconst SEPARATOR_NAME = 'DropdownMenuSeparator';\n\ntype DropdownMenuSeparatorElement = ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>>;\ninterface DropdownMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst DropdownMenuSeparator = forwardRef<DropdownMenuSeparatorElement, DropdownMenuSeparatorProps>(\n  (props: ScopedProps<DropdownMenuSeparatorProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const { tx } = useThemeContext();\n    return (\n      <MenuPrimitive.Separator\n        {...menuScope}\n        {...separatorProps}\n        className={tx('menu.separator', 'menu__item', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuArrow\n * ----------------------------------------------------------------------------------------------- */\n\nconst ARROW_NAME = 'DropdownMenuArrow';\n\ntype DropdownMenuArrowElement = ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>>;\ninterface DropdownMenuArrowProps extends MenuArrowProps {}\n\nconst DropdownMenuArrow = forwardRef<DropdownMenuArrowElement, DropdownMenuArrowProps>(\n  (props: ScopedProps<DropdownMenuArrowProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, classNames, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const { tx } = useThemeContext();\n    return (\n      <MenuPrimitive.Arrow\n        {...menuScope}\n        {...arrowProps}\n        className={tx('menu.arrow', 'menu__arrow', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nDropdownMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSub\n * ----------------------------------------------------------------------------------------------- */\n\ninterface DropdownMenuSubProps {\n  children?: ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst DropdownMenuSub: FC<DropdownMenuSubProps> = (props: ScopedProps<DropdownMenuSubProps>) => {\n  const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst SUB_TRIGGER_NAME = 'DropdownMenuSubTrigger';\n\ntype DropdownMenuSubTriggerElement = ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface DropdownMenuSubTriggerProps extends MenuSubTriggerProps {}\n\nconst DropdownMenuSubTrigger = forwardRef<DropdownMenuSubTriggerElement, DropdownMenuSubTriggerProps>(\n  (props: ScopedProps<DropdownMenuSubTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.SubTrigger {...menuScope} {...subTriggerProps} ref={forwardedRef} />;\n  },\n);\n\nDropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubContent\n * ----------------------------------------------------------------------------------------------- */\n\nconst SUB_CONTENT_NAME = 'DropdownMenuSubContent';\n\ntype DropdownMenuSubContentElement = ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface DropdownMenuSubContentProps extends MenuSubContentProps {}\n\nconst DropdownMenuSubContent = forwardRef<DropdownMenuSubContentElement, DropdownMenuSubContentProps>(\n  (props: ScopedProps<DropdownMenuSubContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n\n    return (\n      <MenuPrimitive.SubContent\n        {...menuScope}\n        {...subContentProps}\n        ref={forwardedRef}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  },\n);\n\nDropdownMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* ----------------------------------------------------------------------------------------------- */\n\nexport const DropdownMenu = {\n  Root: DropdownMenuRoot,\n  Trigger: DropdownMenuTrigger,\n  VirtualTrigger: DropdownMenuVirtualTrigger,\n  Portal: DropdownMenuPortal,\n  Content: DropdownMenuContent,\n  Viewport: DropdownMenuViewport,\n  Group: DropdownMenuGroup,\n  GroupLabel: DropdownMenuGroupLabel,\n  Item: DropdownMenuItem,\n  CheckboxItem: DropdownMenuCheckboxItem,\n  RadioGroup: DropdownMenuRadioGroup,\n  RadioItem: DropdownMenuRadioItem,\n  ItemIndicator: DropdownMenuItemIndicator,\n  Separator: DropdownMenuSeparator,\n  Arrow: DropdownMenuArrow,\n  Sub: DropdownMenuSub,\n  SubTrigger: DropdownMenuSubTrigger,\n  SubContent: DropdownMenuSubContent,\n};\n\nconst useDropdownMenuMenuScope = useMenuScope;\n\nexport { createDropdownMenuScope, useDropdownMenuContext, useDropdownMenuMenuScope };\n\nexport type {\n  DropdownMenuRootProps,\n  DropdownMenuTriggerProps,\n  DropdownMenuVirtualTriggerProps,\n  DropdownMenuPortalProps,\n  DropdownMenuContentProps,\n  DropdownMenuViewportProps,\n  DropdownMenuGroupProps,\n  DropdownMenuLabelProps,\n  DropdownMenuItemProps,\n  DropdownMenuCheckboxItemProps,\n  DropdownMenuRadioGroupProps,\n  DropdownMenuRadioItemProps,\n  DropdownMenuItemIndicatorProps,\n  DropdownMenuSeparatorProps,\n  DropdownMenuArrowProps,\n  DropdownMenuSubProps,\n  DropdownMenuSubTriggerProps,\n  DropdownMenuSubContentProps,\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { createContext } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useId } from '@dxos/react-hooks';\nimport { type MessageValence, type Elevation } from '@dxos/react-ui-types';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { Icon } from '../Icon';\n\nconst messageIcons: Record<MessageValence, string> = {\n  success: 'ph--check-circle--duotone',\n  info: 'ph--info--duotone',\n  warning: 'ph--warning--duotone',\n  error: 'ph--warning-circle--duotone',\n  neutral: 'ph--info--duotone',\n};\n\ntype MessageRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  valence?: MessageValence;\n  elevation?: Elevation;\n  asChild?: boolean;\n  titleId?: string;\n  descriptionId?: string;\n};\n\ntype MessageContextValue = { titleId?: string; descriptionId: string; valence: MessageValence };\nconst MESSAGE_NAME = 'Message';\nconst [MessageProvider, useMessageContext] = createContext<MessageContextValue>(MESSAGE_NAME);\n\nconst MessageRoot = forwardRef<HTMLDivElement, MessageRootProps>(\n  (\n    {\n      asChild,\n      valence = 'neutral',\n      elevation: propsElevation,\n      classNames,\n      titleId: propsTitleId,\n      descriptionId: propsDescriptionId,\n      children,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const { tx } = useThemeContext();\n    const titleId = useId('message__title', propsTitleId);\n    const descriptionId = useId('message__description', propsDescriptionId);\n    const elevation = useElevationContext(propsElevation);\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <MessageProvider {...{ titleId, descriptionId, valence }}>\n        <Root\n          role={valence === 'neutral' ? 'paragraph' : 'alert'}\n          {...props}\n          className={tx('message.root', 'message', { valence, elevation }, classNames)}\n          aria-labelledby={titleId}\n          aria-describedby={descriptionId}\n          ref={forwardedRef}\n        >\n          {children}\n        </Root>\n      </MessageProvider>\n    );\n  },\n);\n\nMessageRoot.displayName = MESSAGE_NAME;\n\ntype MessageTitleProps = Omit<ThemedClassName<ComponentPropsWithRef<typeof Primitive.h2>>, 'id'> & {\n  asChild?: boolean;\n  icon?: string;\n};\n\nconst MESSAGE_TITLE_NAME = 'MessageTitle';\n\nconst MessageTitle = forwardRef<HTMLHeadingElement, MessageTitleProps>(\n  ({ asChild, classNames, children, icon, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const { titleId, valence } = useMessageContext(MESSAGE_TITLE_NAME);\n    const Root = asChild ? Slot : Primitive.h2;\n    return (\n      <Root\n        {...props}\n        className={tx('message.title', 'message__title', {}, classNames)}\n        id={titleId}\n        ref={forwardedRef}\n      >\n        {!icon && valence === 'neutral' ? null : (\n          <Icon\n            size={5}\n            icon={icon ?? messageIcons[valence]}\n            classNames={tx('message.icon', 'message__icon', { valence })}\n          />\n        )}\n        <span>{children}</span>\n      </Root>\n    );\n  },\n);\n\nMessageTitle.displayName = MESSAGE_TITLE_NAME;\n\ntype MessageContentProps = Omit<ThemedClassName<ComponentPropsWithRef<typeof Primitive.h2>>, 'id'> & {\n  asChild?: boolean;\n};\n\nconst MESSAGE_BODY_NAME = 'MessageContent';\n\nconst MessageContent = forwardRef<HTMLParagraphElement, MessageContentProps>(\n  ({ asChild, classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const { descriptionId } = useMessageContext(MESSAGE_BODY_NAME);\n    const Root = asChild ? Slot : Primitive.p;\n    return (\n      <Root\n        {...props}\n        className={tx('message.content', 'message__content', {}, classNames)}\n        id={descriptionId}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\nMessageContent.displayName = MESSAGE_BODY_NAME;\n\nexport const Message = { Root: MessageRoot, Title: MessageTitle, Content: MessageContent };\nexport const Callout = Message;\n\nexport type { MessageRootProps, MessageTitleProps, MessageContentProps };\n\nexport { messageIcons };\n", "//\n// Copyright 2023 DXOS.org\n//\n\n// This is based upon `@radix-ui/react-popover` fetched 25 Oct 2024 at https://github.com/radix-ui/primitives at commit 374c7d7.\n\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport type { Scope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { hideOthers } from 'aria-hidden';\nimport React, {\n  type ComponentPropsWithRef,\n  forwardRef,\n  type ElementRef,\n  type RefObject,\n  type ReactNode,\n  useRef,\n  useCallback,\n  type ComponentPropsWithoutRef,\n  type FC,\n  useState,\n  useEffect,\n  type MutableRefObject,\n} from 'react';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\nimport { useSafeCollisionPadding } from '../../hooks/useSafeCollisionPadding';\nimport { type ThemedClassName } from '../../util';\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * ----------------------------------------------------------------------------------------------- */\n\nconst POPOVER_NAME = 'Popover';\n\ntype ScopedProps<P> = P & { __scopePopover?: Scope };\nconst [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [createPopperScope]);\nconst usePopperScope = createPopperScope();\n\ntype PopoverContextValue = {\n  triggerRef: MutableRefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  hasCustomAnchor: boolean;\n  onCustomAnchorAdd(): void;\n  onCustomAnchorRemove(): void;\n  modal: boolean;\n};\n\nconst [PopoverProvider, usePopoverContext] = createPopoverContext<PopoverContextValue>(POPOVER_NAME);\n\ninterface PopoverRootProps {\n  children?: ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n}\n\nconst PopoverRoot: FC<PopoverRootProps> = (props: ScopedProps<PopoverRootProps>) => {\n  const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <PopoverProvider\n        scope={__scopePopover}\n        contentId={useId()}\n        triggerRef={triggerRef as MutableRefObject<HTMLButtonElement>}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n        hasCustomAnchor={hasCustomAnchor}\n        onCustomAnchorAdd={useCallback(() => setHasCustomAnchor(true), [])}\n        onCustomAnchorRemove={useCallback(() => setHasCustomAnchor(false), [])}\n        modal={modal}\n      >\n        {children}\n      </PopoverProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nPopoverRoot.displayName = POPOVER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverAnchor\n * ----------------------------------------------------------------------------------------------- */\n\nconst ANCHOR_NAME = 'PopoverAnchor';\n\ntype PopoverAnchorElement = ElementRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface PopoverAnchorProps extends PopperAnchorProps {}\n\nconst PopoverAnchor = forwardRef<PopoverAnchorElement, PopoverAnchorProps>(\n  (props: ScopedProps<PopoverAnchorProps>, forwardedRef) => {\n    const { __scopePopover, ...anchorProps } = props;\n    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n\n    useEffect(() => {\n      onCustomAnchorAdd();\n      return () => onCustomAnchorRemove();\n    }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  },\n);\n\nPopoverAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst TRIGGER_NAME = 'PopoverTrigger';\n\ntype PopoverTriggerElement = ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface PopoverTriggerProps extends PrimitiveButtonProps {}\n\nconst PopoverTrigger = forwardRef<PopoverTriggerElement, PopoverTriggerProps>(\n  (props: ScopedProps<PopoverTriggerProps>, forwardedRef) => {\n    const { __scopePopover, ...triggerProps } = props;\n    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n    const trigger = (\n      <Primitive.button\n        type='button'\n        aria-haspopup='dialog'\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n\n    return context.hasCustomAnchor ? (\n      trigger\n    ) : (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        {trigger}\n      </PopperPrimitive.Anchor>\n    );\n  },\n);\n\nPopoverTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverVirtualTrigger\n * ----------------------------------------------------------------------------------------------- */\n\nconst VIRTUAL_TRIGGER_NAME = 'PopoverVirtualTrigger';\n\ninterface PopoverVirtualTriggerProps {\n  virtualRef: RefObject<PopoverTriggerElement>;\n}\n\nconst PopoverVirtualTrigger = (props: ScopedProps<PopoverVirtualTriggerProps>) => {\n  const { __scopePopover, virtualRef } = props;\n  const context = usePopoverContext(VIRTUAL_TRIGGER_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  useEffect(() => {\n    if (virtualRef.current) {\n      context.triggerRef.current = virtualRef.current;\n    }\n  });\n  return <PopperPrimitive.Anchor {...popperScope} virtualRef={virtualRef} />;\n};\n\nPopoverVirtualTrigger.displayName = VIRTUAL_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverPortal\n * ----------------------------------------------------------------------------------------------- */\n\nconst PORTAL_NAME = 'PopoverPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createPopoverContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface PopoverPortalProps {\n  children?: ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverPortal: FC<PopoverPortalProps> = (props: ScopedProps<PopoverPortalProps>) => {\n  const { __scopePopover, forceMount, children, container } = props;\n  const context = usePopoverContext(PORTAL_NAME, __scopePopover);\n  return (\n    <PortalProvider scope={__scopePopover} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nPopoverPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverContent\n * ----------------------------------------------------------------------------------------------- */\n\nconst CONTENT_NAME = 'PopoverContent';\n\ntype PopoverContentProps = ThemedClassName<PopoverContentTypeProps> & {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: boolean;\n};\n\nconst PopoverContent = forwardRef<PopoverContentTypeElement, PopoverContentProps>(\n  (props: ScopedProps<PopoverContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <PopoverContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <PopoverContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  },\n);\n\nPopoverContent.displayName = CONTENT_NAME;\n\n/* ----------------------------------------------------------------------------------------------- */\n\ntype PopoverContentTypeElement = PopoverContentImplElement;\nexport interface PopoverContentTypeProps\n  extends Omit<PopoverContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst PopoverContentModal = forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const contentRef = useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const isRightClickOutsideRef = useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    useEffect(() => {\n      const content = contentRef.current;\n      if (content) {\n        return hideOthers(content);\n      }\n    }, []);\n\n    return (\n      <RemoveScroll as={Slot} allowPinchZoom>\n        <PopoverContentImpl\n          {...props}\n          ref={composedRefs}\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapFocus={context.open}\n          disableOutsidePointerEvents\n          onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n            event.preventDefault();\n            if (!isRightClickOutsideRef.current) {\n              context.triggerRef.current?.focus();\n            }\n          })}\n          onPointerDownOutside={composeEventHandlers(\n            props.onPointerDownOutside,\n            (event) => {\n              const originalEvent = event.detail.originalEvent;\n              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n              isRightClickOutsideRef.current = isRightClick;\n            },\n            { checkForDefaultPrevented: false },\n          )}\n          // When focus is trapped, a `focusout` event may still happen.\n          // We make sure we don't trigger our `onDismiss` in such case.\n          onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => event.preventDefault(), {\n            checkForDefaultPrevented: false,\n          })}\n        />\n      </RemoveScroll>\n    );\n  },\n);\n\nconst PopoverContentNonModal = forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const hasInteractedOutsideRef = useRef(false);\n    const hasPointerDownOutsideRef = useRef(false);\n\n    return (\n      <PopoverContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) {\n              context.triggerRef.current?.focus();\n            }\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) {\n            event.preventDefault();\n          }\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  },\n);\n\n/* ----------------------------------------------------------------------------------------------- */\n\ntype PopoverContentImplElement = ElementRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = ThemedClassName<ComponentPropsWithoutRef<typeof PopperPrimitive.Content>>;\ninterface PopoverContentImplProps\n  extends Omit<PopperContentProps, 'onPlaced'>,\n    Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * Whether focus should be trapped within the `Popover`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst PopoverContentImpl = forwardRef<PopoverContentImplElement, PopoverContentImplProps>(\n  (props: ScopedProps<PopoverContentImplProps>, forwardedRef) => {\n    const {\n      __scopePopover,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      collisionPadding = 8,\n      classNames,\n      ...contentProps\n    } = props;\n    const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const { tx } = useThemeContext();\n    const elevation = useElevationContext();\n    const safeCollisionPadding = useSafeCollisionPadding(collisionPadding);\n\n    // Make sure the whole tree has focus guards as our `Popover` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <FocusScope\n        asChild\n        loop\n        trapped={trapFocus}\n        onMountAutoFocus={onOpenAutoFocus}\n        onUnmountAutoFocus={onCloseAutoFocus}\n      >\n        <DismissableLayer\n          asChild\n          disableOutsidePointerEvents={disableOutsidePointerEvents}\n          onInteractOutside={onInteractOutside}\n          onEscapeKeyDown={onEscapeKeyDown}\n          onPointerDownOutside={onPointerDownOutside}\n          onFocusOutside={onFocusOutside}\n          onDismiss={() => context.onOpenChange(false)}\n        >\n          <PopperPrimitive.Content\n            data-state={getState(context.open)}\n            role='dialog'\n            id={context.contentId}\n            {...popperScope}\n            {...contentProps}\n            collisionPadding={safeCollisionPadding}\n            className={tx('popover.content', 'popover', { elevation }, classNames)}\n            ref={forwardedRef}\n            style={{\n              ...contentProps.style,\n              // re-namespace exposed content custom properties\n              ...{\n                '--radix-popover-content-transform-origin': 'var(--radix-popper-transform-origin)',\n                '--radix-popover-content-available-width': 'var(--radix-popper-available-width)',\n                '--radix-popover-content-available-height': 'var(--radix-popper-available-height)',\n                '--radix-popover-trigger-width': 'var(--radix-popper-anchor-width)',\n                '--radix-popover-trigger-height': 'var(--radix-popper-anchor-height)',\n              },\n            }}\n          />\n        </DismissableLayer>\n      </FocusScope>\n    );\n  },\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverClose\n * ----------------------------------------------------------------------------------------------- */\n\nconst CLOSE_NAME = 'PopoverClose';\n\ntype PopoverCloseElement = ElementRef<typeof Primitive.button>;\ninterface PopoverCloseProps extends PrimitiveButtonProps {}\n\nconst PopoverClose = forwardRef<PopoverCloseElement, PopoverCloseProps>(\n  (props: ScopedProps<PopoverCloseProps>, forwardedRef) => {\n    const { __scopePopover, ...closeProps } = props;\n    const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n    return (\n      <Primitive.button\n        type='button'\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  },\n);\n\nPopoverClose.displayName = CLOSE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverArrow\n * ----------------------------------------------------------------------------------------------- */\n\nconst ARROW_NAME = 'PopoverArrow';\n\ntype PopoverArrowElement = ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = ThemedClassName<ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>>;\ninterface PopoverArrowProps extends PopperArrowProps {}\n\nconst PopoverArrow = forwardRef<PopoverArrowElement, PopoverArrowProps>(\n  (props: ScopedProps<PopoverArrowProps>, forwardedRef) => {\n    const { __scopePopover, classNames, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopePopover);\n    const { tx } = useThemeContext();\n    return (\n      <PopperPrimitive.Arrow\n        {...popperScope}\n        {...arrowProps}\n        className={tx('popover.arrow', 'popover__arrow', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nPopoverArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverViewport\n * ----------------------------------------------------------------------------------------------- */\n\ntype PopoverViewportProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {\n  asChild?: boolean;\n  constrainInline?: boolean;\n  constrainBlock?: boolean;\n};\n\nconst PopoverViewport = forwardRef<HTMLDivElement, PopoverViewportProps>(\n  ({ classNames, asChild, constrainInline = true, constrainBlock = true, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return (\n      <Root\n        {...props}\n        className={tx('popover.viewport', 'popover__viewport', { constrainInline, constrainBlock }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </Root>\n    );\n  },\n);\n\n/* ----------------------------------------------------------------------------------------------- */\n\nconst getState = (open: boolean) => (open ? 'open' : 'closed');\n\ntype PopoverContentInteractOutsideEvent = Parameters<NonNullable<PopoverContentProps['onInteractOutside']>>[0];\n\nexport const Popover = {\n  Root: PopoverRoot,\n  Anchor: PopoverAnchor,\n  Trigger: PopoverTrigger,\n  VirtualTrigger: PopoverVirtualTrigger,\n  Portal: PopoverPortal,\n  Content: PopoverContent,\n  Close: PopoverClose,\n  Arrow: PopoverArrow,\n  Viewport: PopoverViewport,\n};\n\nexport { createPopoverScope };\n\nexport type {\n  PopoverRootProps,\n  PopoverAnchorProps,\n  PopoverTriggerProps,\n  PopoverVirtualTriggerProps,\n  PopoverPortalProps,\n  PopoverContentProps,\n  PopoverCloseProps,\n  PopoverArrowProps,\n  PopoverViewportProps,\n  PopoverContentInteractOutsideEvent,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\ntype StatusProps = ThemedClassName<ComponentPropsWithRef<'span'>> & {\n  indeterminate?: boolean;\n  variant?: 'default' | 'main-bottom';\n  progress?: number;\n};\n\nconst Status = forwardRef<HTMLSpanElement, StatusProps>(\n  ({ classNames, children, progress = 0, indeterminate, variant, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <span\n        role='status'\n        {...props}\n        className={tx('status.root', 'status', { indeterminate, variant }, classNames)}\n        ref={forwardedRef}\n      >\n        <span\n          role='none'\n          className={tx('status.bar', 'status__bar', { indeterminate, variant }, classNames)}\n          {...(!indeterminate && { style: { width: `${Math.round(progress * 100)}%` } })}\n        />\n        {children}\n      </span>\n    );\n  },\n);\n\nexport { Status };\n\nexport type { StatusProps };\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport {\n  Root as ScrollAreaPrimitiveRoot,\n  type ScrollAreaProps as ScrollAreaPrimitiveRootProps,\n  Viewport as ScrollAreaPrimitiveViewport,\n  type ScrollAreaViewportProps as ScrollAreaPrimitiveViewportProps,\n  Scrollbar as ScrollAreaPrimitiveScrollbar,\n  type ScrollAreaScrollbarProps as ScrollAreaPrimitiveScrollbarProps,\n  Thumb as ScrollAreaPrimitiveThumb,\n  type ScrollAreaThumbProps as ScrollAreaPrimitiveThumbProps,\n  Corner as ScrollAreaPrimitiveCorner,\n  type ScrollAreaCornerProps as ScrollAreaPrimitiveCornerProps,\n} from '@radix-ui/react-scroll-area';\nimport React, { forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\ntype ScrollAreaVariant = 'coarse' | 'fine';\n\ntype ScrollAreaRootProps = ThemedClassName<ScrollAreaPrimitiveRootProps>;\n\n/**\n * @deprecated\n */\nconst ScrollAreaRoot = forwardRef<HTMLDivElement, ScrollAreaRootProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ScrollAreaPrimitiveRoot\n      {...props}\n      className={tx('scrollArea.root', 'scroll-area', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype ScrollAreaViewportProps = ThemedClassName<ScrollAreaPrimitiveViewportProps>;\n\nconst ScrollAreaViewport = forwardRef<HTMLDivElement, ScrollAreaViewportProps>(\n  ({ classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ScrollAreaPrimitiveViewport\n        {...props}\n        className={tx('scrollArea.viewport', 'scroll-area', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype ScrollAreaScrollbarProps = ThemedClassName<ScrollAreaPrimitiveScrollbarProps> & { variant?: ScrollAreaVariant };\n\nconst ScrollAreaScrollbar = forwardRef<HTMLDivElement, ScrollAreaScrollbarProps>(\n  ({ classNames, variant = 'fine', ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ScrollAreaPrimitiveScrollbar\n        data-variant={variant}\n        {...props}\n        className={tx('scrollArea.scrollbar', 'scroll-area__scrollbar', {}, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\ntype ScrollAreaThumbProps = ThemedClassName<ScrollAreaPrimitiveThumbProps>;\n\nconst ScrollAreaThumb = forwardRef<HTMLDivElement, ScrollAreaThumbProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ScrollAreaPrimitiveThumb\n      {...props}\n      className={tx('scrollArea.thumb', 'scroll-area__thumb', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype ScrollAreaCornerProps = ThemedClassName<ScrollAreaPrimitiveCornerProps>;\n\nconst ScrollAreaCorner = forwardRef<HTMLDivElement, ScrollAreaCornerProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ScrollAreaPrimitiveCorner\n      {...props}\n      className={tx('scrollArea.corner', 'scroll-area__corner', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\nexport const ScrollArea = {\n  Root: ScrollAreaRoot,\n  Viewport: ScrollAreaViewport,\n  Scrollbar: ScrollAreaScrollbar,\n  Thumb: ScrollAreaThumb,\n  Corner: ScrollAreaCorner,\n};\n\nexport type {\n  ScrollAreaRootProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { CaretDown, CaretUp } from '@phosphor-icons/react';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport React, { forwardRef } from 'react';\n\nimport { useElevationContext, useThemeContext } from '../../hooks';\nimport { useSafeCollisionPadding } from '../../hooks/useSafeCollisionPadding';\nimport { type ThemedClassName } from '../../util';\nimport { Button, type ButtonProps } from '../Buttons';\nimport { Icon } from '../Icon';\n\ntype SelectRootProps = SelectPrimitive.SelectProps;\n\nconst SelectRoot = SelectPrimitive.Root;\n\ntype SelectTriggerProps = SelectPrimitive.SelectTriggerProps;\n\nconst SelectTrigger = SelectPrimitive.Trigger;\n\ntype SelectValueProps = SelectPrimitive.SelectValueProps;\n\nconst SelectValue = SelectPrimitive.Value;\n\ntype SelectIconProps = SelectPrimitive.SelectIconProps;\n\nconst SelectIcon = SelectPrimitive.Icon;\n\ntype SelectPortalProps = SelectPrimitive.SelectPortalProps;\n\nconst SelectPortal = SelectPrimitive.Portal;\n\ntype SelectTriggerButtonProps = Omit<ButtonProps, 'children'> & Pick<SelectValueProps, 'placeholder' | 'children'>;\n\nconst SelectTriggerButton = forwardRef<HTMLButtonElement, SelectTriggerButtonProps>(\n  ({ children, placeholder, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SelectPrimitive.Trigger asChild ref={forwardedRef}>\n        <Button {...props}>\n          <SelectPrimitive.Value placeholder={placeholder}>{children}</SelectPrimitive.Value>\n          <span className='w-1 flex-1' />\n          <SelectPrimitive.Icon asChild>\n            <CaretDown className={tx('select.triggerIcon', 'select__trigger__icon', {})} weight='bold' />\n          </SelectPrimitive.Icon>\n        </Button>\n      </SelectPrimitive.Trigger>\n    );\n  },\n);\n\ntype SelectContentProps = ThemedClassName<SelectPrimitive.SelectContentProps>;\n\nconst SelectContent = forwardRef<HTMLDivElement, SelectContentProps>(\n  ({ classNames, children, collisionPadding = 8, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const elevation = useElevationContext();\n    const safeCollisionPadding = useSafeCollisionPadding(collisionPadding);\n    return (\n      <SelectPrimitive.Content\n        {...props}\n        collisionPadding={safeCollisionPadding}\n        className={tx('select.content', 'select__content', { elevation }, classNames)}\n        position='popper'\n        ref={forwardedRef}\n      >\n        {children}\n      </SelectPrimitive.Content>\n    );\n  },\n);\n\ntype SelectScrollUpButtonProps = ThemedClassName<SelectPrimitive.SelectScrollUpButtonProps>;\n\nconst SelectScrollUpButton = forwardRef<HTMLDivElement, SelectScrollUpButtonProps>(\n  ({ classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SelectPrimitive.SelectScrollUpButton\n        {...props}\n        className={tx('select.scrollButton', 'select__scroll-button--up', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children ?? <CaretUp weight='bold' />}\n      </SelectPrimitive.SelectScrollUpButton>\n    );\n  },\n);\n\ntype SelectScrollDownButtonProps = ThemedClassName<SelectPrimitive.SelectScrollDownButtonProps>;\n\nconst SelectScrollDownButton = forwardRef<HTMLDivElement, SelectScrollDownButtonProps>(\n  ({ classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SelectPrimitive.SelectScrollDownButton\n        {...props}\n        className={tx('select.scrollButton', 'select__scroll-button--down', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children ?? <CaretDown weight='bold' />}\n      </SelectPrimitive.SelectScrollDownButton>\n    );\n  },\n);\n\ntype SelectViewportProps = ThemedClassName<SelectPrimitive.SelectViewportProps>;\n\nconst SelectViewport = forwardRef<HTMLDivElement, SelectViewportProps>(\n  ({ classNames, asChild, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SelectPrimitive.SelectViewport\n        {...props}\n        className={tx('select.viewport', 'select__viewport', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </SelectPrimitive.SelectViewport>\n    );\n  },\n);\n\ntype SelectItemProps = ThemedClassName<SelectPrimitive.SelectItemProps>;\n\nconst SelectItem = forwardRef<HTMLDivElement, SelectItemProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return <SelectPrimitive.Item {...props} className={tx('select.item', 'option', {}, classNames)} ref={forwardedRef} />;\n});\n\ntype SelectItemTextProps = SelectPrimitive.SelectItemTextProps;\n\nconst SelectItemText = SelectPrimitive.ItemText;\n\ntype SelectItemIndicatorProps = ThemedClassName<SelectPrimitive.SelectItemIndicatorProps>;\n\nconst SelectItemIndicator = forwardRef<HTMLDivElement, SelectItemIndicatorProps>(\n  ({ classNames, children, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SelectPrimitive.ItemIndicator\n        {...props}\n        className={tx('select.itemIndicator', 'option__indicator', {}, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </SelectPrimitive.ItemIndicator>\n    );\n  },\n);\n\ntype SelectOptionProps = SelectItemProps;\n\nconst SelectOption = forwardRef<HTMLDivElement, SelectItemProps>(({ children, classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <SelectPrimitive.Item {...props} className={tx('select.item', 'option', {}, classNames)} ref={forwardedRef}>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n      <span className='grow w-1' />\n      {/* <SelectPrimitive.ItemIndicator className={tx('select.itemIndicator', 'option__indicator', {})}> */}\n      <Icon icon='ph--check--regular' />\n      {/* </SelectPrimitive.ItemIndicator> */}\n    </SelectPrimitive.Item>\n  );\n});\n\ntype SelectGroupProps = SelectPrimitive.SelectGroupProps;\n\nconst SelectGroup = SelectPrimitive.Group;\n\ntype SelectLabelProps = SelectPrimitive.SelectLabelProps;\n\nconst SelectLabel = SelectPrimitive.Label;\n\ntype SelectSeparatorProps = ThemedClassName<SelectPrimitive.SelectSeparatorProps>;\n\nconst SelectSeparator = forwardRef<HTMLDivElement, SelectSeparatorProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <SelectPrimitive.Separator\n      {...props}\n      className={tx('select.separator', 'select__separator', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\ntype SelectArrowProps = ThemedClassName<SelectPrimitive.SelectArrowProps>;\n\nconst SelectArrow = forwardRef<SVGSVGElement, SelectArrowProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <SelectPrimitive.Arrow\n      {...props}\n      className={tx('select.arrow', 'select__arrow', {}, classNames)}\n      ref={forwardedRef}\n    />\n  );\n});\n\nexport const Select = {\n  Root: SelectRoot,\n  Trigger: SelectTrigger,\n  TriggerButton: SelectTriggerButton,\n  Value: SelectValue,\n  Icon: SelectIcon,\n  Portal: SelectPortal,\n  Content: SelectContent,\n  ScrollUpButton: SelectScrollUpButton,\n  ScrollDownButton: SelectScrollDownButton,\n  Viewport: SelectViewport,\n  Item: SelectItem,\n  ItemText: SelectItemText,\n  ItemIndicator: SelectItemIndicator,\n  Option: SelectOption,\n  Group: SelectGroup,\n  Label: SelectLabel,\n  Separator: SelectSeparator,\n  Arrow: SelectArrow,\n};\n\nexport type {\n  SelectRootProps,\n  SelectTriggerProps,\n  SelectTriggerButtonProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectViewportProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectOptionProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\nimport {\n  Separator as SeparatorPrimitive,\n  type SeparatorProps as SeparatorPrimitiveProps,\n} from '@radix-ui/react-separator';\nimport React, { forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\ntype SeparatorProps = ThemedClassName<SeparatorPrimitiveProps> & { subdued?: boolean };\n\nconst Separator = forwardRef<HTMLDivElement, SeparatorProps>(\n  ({ classNames, orientation = 'horizontal', subdued, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <SeparatorPrimitive\n        orientation={orientation}\n        {...props}\n        className={tx('separator.root', 'separator', { orientation, subdued }, classNames)}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nexport type { SeparatorProps };\n\nexport { Separator };\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport React, { type ComponentPropsWithRef, forwardRef } from 'react';\n\nimport { type ChromaticPalette, type MessageValence, type NeutralPalette } from '@dxos/react-ui-types';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\n\nexport type TagProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.span>> & {\n  palette?: NeutralPalette | ChromaticPalette | MessageValence;\n  asChild?: boolean;\n};\n\nexport const Tag = forwardRef<HTMLSpanElement, TagProps>(\n  ({ asChild, palette = 'neutral', classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.span;\n    return (\n      <Root\n        {...props}\n        className={tx('tag.root', 'dx-tag', { palette }, classNames)}\n        data-hue={palette}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport {\n  ToastProvider as ToastProviderPrimitive,\n  type ToastProviderProps as ToastProviderPrimitiveProps,\n  ToastViewport as ToastViewportPrimitive,\n  type ToastViewportProps as ToastViewportPrimitiveProps,\n  Root as ToastRootPrimitive,\n  type ToastProps as ToastRootPrimitiveProps,\n  ToastTitle as ToastTitlePrimitive,\n  type ToastTitleProps as ToastTitlePrimitiveProps,\n  ToastDescription as ToastDescriptionPrimitive,\n  type ToastDescriptionProps as ToastDescriptionPrimitiveProps,\n  ToastAction as ToastActionPrimitive,\n  type ToastActionProps as ToastActionPrimitiveProps,\n  ToastClose as ToastClosePrimitive,\n  type ToastCloseProps as ToastClosePrimitiveProps,\n} from '@radix-ui/react-toast';\nimport React, { type ComponentPropsWithRef, forwardRef, type FunctionComponent } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport { ElevationProvider } from '../ElevationProvider';\n\ntype ToastProviderProps = ToastProviderPrimitiveProps;\n\nconst ToastProvider: FunctionComponent<ToastProviderProps> = ToastProviderPrimitive;\n\ntype ToastViewportProps = ThemedClassName<ToastViewportPrimitiveProps>;\n\nconst ToastViewport = forwardRef<HTMLOListElement, ToastViewportProps>(({ classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ToastViewportPrimitive className={tx('toast.viewport', 'toast-viewport', {}, classNames)} ref={forwardedRef} />\n  );\n});\n\ntype ToastRootProps = ThemedClassName<ToastRootPrimitiveProps>;\n\nconst ToastRoot = forwardRef<HTMLLIElement, ToastRootProps>(({ classNames, children, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  return (\n    <ToastRootPrimitive {...props} className={tx('toast.root', 'toast', {}, classNames)} ref={forwardedRef}>\n      <ElevationProvider elevation='toast'>{children}</ElevationProvider>\n    </ToastRootPrimitive>\n  );\n});\n\ntype ToastBodyProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>>;\n\nconst ToastBody = forwardRef<HTMLDivElement, ToastBodyProps>(({ asChild, classNames, ...props }, forwardedRef) => {\n  const { tx } = useThemeContext();\n  const Root = asChild ? Slot : Primitive.div;\n  return <Root {...props} className={tx('toast.body', 'toast__body', {}, classNames)} ref={forwardedRef} />;\n});\n\ntype ToastTitleProps = ThemedClassName<ToastTitlePrimitiveProps>;\n\nconst ToastTitle = forwardRef<HTMLHeadingElement, ToastTitleProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : ToastTitlePrimitive;\n    return <Root {...props} className={tx('toast.title', 'toast__title', {}, classNames)} ref={forwardedRef} />;\n  },\n);\n\ntype ToastDescriptionProps = ThemedClassName<ToastDescriptionPrimitiveProps>;\n\nconst ToastDescription = forwardRef<HTMLParagraphElement, ToastDescriptionProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : ToastDescriptionPrimitive;\n    return (\n      <Root {...props} className={tx('toast.description', 'toast__description', {}, classNames)} ref={forwardedRef} />\n    );\n  },\n);\n\ntype ToastActionsProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>>;\n\nconst ToastActions = forwardRef<HTMLDivElement, ToastActionsProps>(\n  ({ asChild, classNames, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    const Root = asChild ? Slot : Primitive.div;\n    return <Root {...props} className={tx('toast.actions', 'toast__actions', {}, classNames)} ref={forwardedRef} />;\n  },\n);\n\ntype ToastActionProps = ToastActionPrimitiveProps;\n\nconst ToastAction: FunctionComponent<ToastActionProps> = ToastActionPrimitive;\n\ntype ToastCloseProps = ToastClosePrimitiveProps;\n\nconst ToastClose: FunctionComponent<ToastCloseProps> = ToastClosePrimitive;\n\nexport const Toast = {\n  Provider: ToastProvider,\n  Viewport: ToastViewport,\n  Root: ToastRoot,\n  Body: ToastBody,\n  Title: ToastTitle,\n  Description: ToastDescription,\n  Actions: ToastActions,\n  Action: ToastAction,\n  Close: ToastClose,\n};\n\nexport type {\n  ToastProviderProps,\n  ToastViewportProps,\n  ToastRootProps,\n  ToastBodyProps,\n  ToastTitleProps,\n  ToastDescriptionProps,\n  ToastActionsProps,\n  ToastActionProps,\n  ToastCloseProps,\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport type { ToggleGroupItemProps as ToggleGroupItemPrimitiveProps } from '@radix-ui/react-toggle-group';\nimport * as ToolbarPrimitive from '@radix-ui/react-toolbar';\nimport React, { forwardRef } from 'react';\n\nimport { useThemeContext } from '../../hooks';\nimport { type ThemedClassName } from '../../util';\nimport {\n  Button,\n  ButtonGroup,\n  type ButtonGroupProps,\n  type ButtonProps,\n  Toggle,\n  type ToggleGroupItemProps,\n  type ToggleProps,\n  IconButton,\n  type IconButtonProps,\n} from '../Buttons';\nimport { Link, type LinkProps } from '../Link';\nimport { Separator, type SeparatorProps } from '../Separator';\n\ntype ToolbarRootProps = ThemedClassName<ToolbarPrimitive.ToolbarProps> & { layoutManaged?: boolean };\n\nconst ToolbarRoot = forwardRef<HTMLDivElement, ToolbarRootProps>(\n  ({ classNames, children, layoutManaged, ...props }, forwardedRef) => {\n    const { tx } = useThemeContext();\n    return (\n      <ToolbarPrimitive.Root\n        {...props}\n        className={tx('toolbar.root', 'toolbar', { layoutManaged }, classNames)}\n        ref={forwardedRef}\n      >\n        {children}\n      </ToolbarPrimitive.Root>\n    );\n  },\n);\n\ntype ToolbarButtonProps = ButtonProps;\n\nconst ToolbarButton = forwardRef<HTMLButtonElement, ToolbarButtonProps>((props, forwardedRef) => {\n  return (\n    <ToolbarPrimitive.Button asChild>\n      <Button {...props} ref={forwardedRef} />\n    </ToolbarPrimitive.Button>\n  );\n});\n\ntype ToolbarIconButtonProps = IconButtonProps;\n\nconst ToolbarIconButton = forwardRef<HTMLButtonElement, ToolbarIconButtonProps>((props, forwardedRef) => {\n  return (\n    <ToolbarPrimitive.Button asChild>\n      <IconButton {...props} ref={forwardedRef} />\n    </ToolbarPrimitive.Button>\n  );\n});\n\ntype ToolbarToggleProps = ToggleProps;\n\nconst ToolbarToggle = forwardRef<HTMLButtonElement, ToolbarToggleProps>((props, forwardedRef) => {\n  return (\n    <ToolbarPrimitive.Button asChild>\n      <Toggle {...props} ref={forwardedRef} />\n    </ToolbarPrimitive.Button>\n  );\n});\n\ntype ToolbarLinkProps = LinkProps;\n\nconst ToolbarLink = forwardRef<HTMLAnchorElement, ToolbarLinkProps>((props, forwardedRef) => {\n  return (\n    <ToolbarPrimitive.Link asChild>\n      <Link {...props} ref={forwardedRef} />\n    </ToolbarPrimitive.Link>\n  );\n});\n\ntype ToolbarToggleGroupProps = (\n  | Omit<ToolbarPrimitive.ToolbarToggleGroupSingleProps, 'className'>\n  | Omit<ToolbarPrimitive.ToolbarToggleGroupMultipleProps, 'className'>\n) &\n  ButtonGroupProps;\n\nconst ToolbarToggleGroup = forwardRef<HTMLDivElement, ToolbarToggleGroupProps>(\n  ({ classNames, children, elevation, ...props }, forwardedRef) => {\n    return (\n      <ToolbarPrimitive.ToolbarToggleGroup {...props} asChild>\n        <ButtonGroup {...{ classNames, children, elevation }} ref={forwardedRef} />\n      </ToolbarPrimitive.ToolbarToggleGroup>\n    );\n  },\n);\n\ntype ToolbarToggleGroupItemProps = ToggleGroupItemProps;\n\nconst ToolbarToggleGroupItem = forwardRef<HTMLButtonElement, ToolbarToggleGroupItemProps>(\n  ({ variant, density, elevation, classNames, children, ...props }, forwardedRef) => {\n    return (\n      <ToolbarPrimitive.ToolbarToggleItem {...props} asChild>\n        <Button {...{ variant, density, elevation, classNames, children }} ref={forwardedRef} />\n      </ToolbarPrimitive.ToolbarToggleItem>\n    );\n  },\n);\n\ntype ToolbarToggleGroupIconItemProps = Omit<ToggleGroupItemPrimitiveProps, 'className'> & IconButtonProps;\n\nconst ToolbarToggleGroupIconItem = forwardRef<HTMLButtonElement, ToolbarToggleGroupIconItemProps>(\n  ({ variant, density, elevation, classNames, icon, label, iconOnly, ...props }, forwardedRef) => {\n    return (\n      <ToolbarPrimitive.ToolbarToggleItem {...props} asChild>\n        <IconButton {...{ variant, density, elevation, classNames, icon, label, iconOnly }} ref={forwardedRef} />\n      </ToolbarPrimitive.ToolbarToggleItem>\n    );\n  },\n);\n\ntype ToolbarSeparatorProps = SeparatorProps & { variant?: 'gap' | 'line' };\n\nconst ToolbarSeparator = forwardRef<HTMLDivElement, ToolbarSeparatorProps>(\n  ({ variant = 'line', ...props }, forwardedRef) => {\n    return variant === 'line' ? (\n      <ToolbarPrimitive.Separator asChild>\n        <Separator {...props} ref={forwardedRef} />\n      </ToolbarPrimitive.Separator>\n    ) : (\n      <ToolbarPrimitive.Separator className='grow' ref={forwardedRef} />\n    );\n  },\n);\n\nexport const Toolbar = {\n  Root: ToolbarRoot,\n  Button: ToolbarButton,\n  IconButton: ToolbarIconButton,\n  Link: ToolbarLink,\n  Toggle: ToolbarToggle,\n  ToggleGroup: ToolbarToggleGroup,\n  ToggleGroupItem: ToolbarToggleGroupItem,\n  ToggleGroupIconItem: ToolbarToggleGroupIconItem,\n  Separator: ToolbarSeparator,\n};\n\nexport type {\n  ToolbarRootProps,\n  ToolbarButtonProps,\n  ToolbarIconButtonProps,\n  ToolbarLinkProps,\n  ToolbarToggleProps,\n  ToolbarToggleGroupProps,\n  ToolbarToggleGroupItemProps,\n  ToolbarToggleGroupIconItemProps,\n  ToolbarSeparatorProps,\n};\n"],
  "mappings": "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",
  "names": ["useContext", "Primitive", "Slot", "React", "forwardRef", "useContext", "useElevationContext", "propsElevation", "elevation", "useContext", "ElevationContext", "useContext", "raise", "useThemeContext", "useContext", "ThemeContext", "raise", "Error", "ICONS_URL", "useIconHref", "icon", "noCache", "useThemeContext", "url", "Date", "getMinutes", "undefined", "useCallback", "useState", "useResize", "initialSafeArea", "top", "NaN", "right", "bottom", "left", "useSafeArea", "padding", "setPadding", "useState", "handleResize", "useCallback", "parseFloat", "getComputedStyle", "document", "documentElement", "getPropertyValue", "useResize", "useContext", "enUS", "dtLocaleEnUs", "i18Next", "React", "useEffect", "createContext", "useState", "Suspense", "useContext", "initReactI18next", "useTranslation", "useI18NextTranslation", "initialLng", "initialNs", "initialDtLocale", "dtLocaleEnUs", "isLabel", "o", "Array", "isArray", "length", "ns", "toLocalizedString", "label", "t", "resources", "i18Next", "use", "initReactI18next", "init", "lng", "defaultNS", "interpolation", "escapeValue", "TranslationsContext", "createContext", "appNs", "dtLocale", "useTranslation", "args", "result", "useI18NextTranslation", "useContext", "TranslationsProvider", "fallback", "resourceExtensions", "children", "loaded", "setLoaded", "useState", "useEffect", "forEach", "resource", "Object", "keys", "language", "addResourceBundle", "Provider", "value", "Suspense", "useTranslationsContext", "useContext", "TranslationsContext", "useCallback", "useState", "useResize", "useVisualViewport", "deps", "width", "setWidth", "useState", "height", "setHeight", "handleResize", "useCallback", "window", "visualViewport", "useResize", "AnchoredOverflowRoot", "forwardRef", "asChild", "classNames", "children", "props", "forwardedRef", "tx", "useThemeContext", "Root", "Slot", "Primitive", "div", "React", "role", "className", "ref", "AnchoredOverflowAnchor", "AnchoredOverflow", "Anchor", "createContext", "Primitive", "Slot", "React", "forwardRef", "DxAvatar", "useId", "mx", "AVATAR_NAME", "AvatarProvider", "useAvatarContext", "createContext", "AvatarRoot", "children", "labelId", "propsLabelId", "descriptionId", "propsDescriptionId", "useId", "React", "AvatarContent", "forwardRef", "icon", "classNames", "props", "forwardedRef", "href", "useIconHref", "DxAvatar", "aria-labelledby", "aria-describedby", "rootClassName", "mx", "ref", "AvatarLabel", "asChild", "srOnly", "Root", "Slot", "Primitive", "span", "tx", "useThemeContext", "id", "className", "AvatarDescription", "Avatar", "Content", "Label", "Description", "Dot", "Primitive", "Slot", "React", "forwardRef", "Primitive", "Slot", "React", "forwardRef", "Link", "forwardRef", "asChild", "variant", "classNames", "props", "forwardedRef", "tx", "useThemeContext", "Root", "Slot", "Primitive", "a", "React", "className", "ref", "BreadcrumbRoot", "forwardRef", "asChild", "classNames", "props", "forwardedRef", "tx", "useThemeContext", "Root", "Slot", "Primitive", "div", "React", "role", "className", "ref", "BreadcrumbList", "ol", "BreadcrumbListItem", "li", "BreadcrumbLink", "Link", "BreadcrumbCurrent", "aria-current", "BreadcrumbSeparator", "children", "span", "aria-hidden", "Dot", "weight", "Breadcrumb", "List", "ListItem", "Current", "Separator", "createContext", "Primitive", "Slot", "React", "forwardRef", "memo", "BUTTON_GROUP_NAME", "BUTTON_NAME", "ButtonGroupProvider", "useButtonGroupContext", "createContext", "inGroup", "Button", "memo", "forwardRef", "classNames", "children", "density", "propsDensity", "elevation", "propsElevation", "variant", "asChild", "props", "ref", "tx", "useThemeContext", "useElevationContext", "useDensityContext", "Root", "Slot", "Primitive", "button", "React", "data-variant", "data-density", "data-props", "className", "disabled", "displayName", "ButtonGroup", "forwardedRef", "div", "role", "React", "forwardRef", "React", "forwardRef", "memo", "Icon", "memo", "forwardRef", "icon", "classNames", "size", "props", "forwardedRef", "tx", "useThemeContext", "href", "useIconHref", "React", "svg", "className", "ref", "use", "composeEventHandlers", "useComposedRefs", "createContextScope", "DismissableLayer", "useId", "PopperPrimitive", "createPopperScope", "Portal", "PortalPrimitive", "Presence", "Primitive", "Slottable", "useControllableState", "VisuallyHiddenPrimitive", "React", "forwardRef", "useCallback", "useEffect", "useMemo", "useRef", "useState", "createTooltipContext", "createTooltipScope", "createContextScope", "createPopperScope", "usePopperScope", "DEFAULT_DELAY_DURATION", "TOOLTIP_OPEN", "TOOLTIP_NAME", "TooltipContextProvider", "useTooltipContext", "TooltipProvider", "props", "__scopeTooltip", "children", "open", "openProp", "defaultOpen", "onOpenChange", "disableHoverableContent", "delayDuration", "skipDelayDuration", "isOpenDelayedRef", "useRef", "isPointerInTransitRef", "skipDelayTimerRef", "useEffect", "skipDelayTimer", "current", "window", "clearTimeout", "popperScope", "trigger", "setTrigger", "useState", "content", "setContent", "side", "setSide", "undefined", "triggerRef", "handleTriggerChange", "useCallback", "nextTrigger", "getAttribute", "contentId", "useId", "openTimerRef", "wasOpenDelayedRef", "handleOpenChange", "document", "dispatchEvent", "CustomEvent", "setTimeout", "setOpen", "useControllableState", "prop", "defaultProp", "onChange", "stateAttribute", "useMemo", "handleOpen", "handleClose", "handleDelayedOpen", "tx", "useThemeContext", "elevation", "useElevationContext", "React", "Root", "scope", "onTriggerChange", "onTriggerEnter", "onTriggerLeave", "onOpen", "onClose", "onPointerInTransitChange", "inTransit", "TooltipContent", "className", "TooltipArrow", "TooltipVirtualTrigger", "virtualRef", "displayName", "Anchor", "asChild", "TRIGGER_NAME", "TooltipTrigger", "forwardRef", "forwardedRef", "onInteract", "_delayDuration", "triggerProps", "context", "ref", "composedRefs", "useComposedRefs", "isPointerDownRef", "hasPointerMoveOpenedRef", "handlePointerUp", "removeEventListener", "Primitive", "button", "aria-describedby", "data-state", "data-tooltip-content", "data-tooltip-side", "onPointerMove", "composeEventHandlers", "event", "pointerType", "defaultPrevented", "onPointerLeave", "onPointerDown", "addEventListener", "once", "onFocus", "onBlur", "onClick", "PORTAL_NAME", "PortalProvider", "usePortalContext", "forceMount", "TooltipPortal", "container", "Presence", "present", "PortalPrimitive", "CONTENT_NAME", "portalContext", "contentProps", "TooltipContentImpl", "TooltipContentHoverable", "pointerGraceArea", "setPointerGraceArea", "handleRemoveGraceArea", "handleCreateGraceArea", "hoverTarget", "currentTarget", "exitPoint", "x", "clientX", "y", "clientY", "exitSide", "getExitSideFromRect", "getBoundingClientRect", "paddedExitPoints", "getPaddedExitPoints", "hoverTargetPoints", "getPointsFromRect", "graceArea", "getHull", "handleTriggerLeave", "handleContentLeave", "handleTrackPointerGrace", "target", "pointerPosition", "hasEnteredTarget", "contains", "isPointerOutsideGraceArea", "isPointInPolygon", "VisuallyHiddenContentContextProvider", "useVisuallyHiddenContentContext", "isInside", "ariaLabel", "onEscapeKeyDown", "onPointerDownOutside", "handleScroll", "capture", "DismissableLayer", "disableOutsidePointerEvents", "onFocusOutside", "preventDefault", "onDismiss", "Content", "style", "Slottable", "id", "role", "ARROW_NAME", "arrowProps", "visuallyHiddenContentContext", "Arrow", "point", "rect", "top", "Math", "abs", "bottom", "right", "left", "min", "Error", "padding", "push", "polygon", "inside", "i", "j", "length", "xi", "yi", "xj", "yj", "intersect", "points", "newPoints", "slice", "sort", "a", "b", "getHullPresorted", "upperHull", "p", "q", "r", "pop", "lowerHull", "concat", "Tooltip", "Provider", "Trigger", "IconOnlyButton", "forwardRef", "noTooltip", "tooltipPortal", "tooltipSide", "props", "forwardedRef", "React", "LabelledIconButton", "ref", "Tooltip", "Trigger", "asChild", "content", "label", "side", "icon", "size", "iconOnly", "classNames", "iconClassNames", "caretDown", "tx", "useThemeContext", "Button", "Icon", "span", "className", "undefined", "IconButton", "Toggle", "TogglePrimitive", "React", "forwardRef", "Toggle", "forwardRef", "defaultPressed", "pressed", "onPressedChange", "props", "forwardedRef", "React", "TogglePrimitive", "asChild", "Button", "ref", "ToggleGroup", "ToggleGroupPrimitive", "ToggleGroupItem", "ToggleGroupItemPrimitive", "React", "forwardRef", "ToggleGroup", "forwardRef", "classNames", "children", "props", "forwardedRef", "React", "ToggleGroupPrimitive", "asChild", "ButtonGroup", "ref", "ToggleGroupItem", "variant", "elevation", "density", "ToggleGroupItemPrimitive", "Button", "React", "createContext", "useCallback", "useContext", "useState", "ClipboardContext", "createContext", "textValue", "setTextValue", "_", "useClipboard", "useContext", "ClipboardProvider", "children", "setInternalTextValue", "useState", "useCallback", "nextValue", "navigator", "clipboard", "writeText", "React", "Provider", "value", "React", "mx", "createKeyborg", "React", "createContext", "useEffect", "useMemo", "hasIosKeyboard", "navigator", "userAgent", "match", "React", "createContext", "DensityContext", "createContext", "density", "DensityProvider", "children", "React", "Provider", "value", "React", "createContext", "ElevationContext", "createContext", "elevation", "ElevationProvider", "children", "React", "Provider", "value", "ThemeContext", "createContext", "undefined", "ThemeProvider", "children", "fallback", "resourceExtensions", "appNs", "tx", "_path", "defaultClassName", "_styleProps", "_options", "themeMode", "rootDensity", "rest", "useEffect", "document", "defaultView", "kb", "createKeyborg", "subscribe", "handleInputModalityChange", "unsubscribe", "safeAreaPadding", "useSafeArea", "contextValue", "useMemo", "hasIosKeyboard", "React", "Provider", "value", "TranslationsProvider", "ElevationProvider", "elevation", "DensityProvider", "density", "isUsingKeyboard", "body", "setAttribute", "removeAttribute", "inactiveLabelStyles", "CopyButton", "value", "classNames", "iconProps", "props", "t", "useTranslation", "textValue", "setTextValue", "useClipboard", "isCopied", "React", "Button", "onClick", "data-testid", "div", "role", "className", "mx", "span", "Icon", "icon", "size", "CopyButtonIconOnly", "__scopeTooltip", "variant", "label", "onOpen", "useTooltipContext", "IconButton", "iconOnly", "then", "Clipboard", "Button", "CopyButton", "IconButton", "CopyButtonIconOnly", "Provider", "ClipboardProvider", "createContext", "Root", "DialogRootPrimitive", "DialogTrigger", "DialogTriggerPrimitive", "DialogPortal", "DialogPortalPrimitive", "DialogOverlay", "DialogOverlayPrimitive", "DialogTitle", "DialogTitlePrimitive", "DialogDescription", "DialogDescriptionPrimitive", "DialogClose", "DialogClosePrimitive", "DialogContent", "DialogContentPrimitive", "React", "forwardRef", "DialogRoot", "props", "React", "ElevationProvider", "elevation", "DialogRootPrimitive", "DialogTrigger", "DialogTriggerPrimitive", "DialogPortal", "DialogPortalPrimitive", "DialogTitle", "forwardRef", "classNames", "srOnly", "forwardedRef", "tx", "useThemeContext", "DialogTitlePrimitive", "className", "ref", "DialogDescription", "DialogDescriptionPrimitive", "DialogClose", "DialogClosePrimitive", "DIALOG_OVERLAY_NAME", "DIALOG_CONTENT_NAME", "OverlayLayoutProvider", "useOverlayLayoutContext", "createContext", "DialogOverlay", "children", "blockAlign", "DialogOverlayPrimitive", "data-block-align", "inOverlayLayout", "displayName", "DialogContent", "propsInOverlayLayout", "DialogContentPrimitive", "aria-describedby", "undefined", "Dialog", "Root", "Trigger", "Portal", "Overlay", "Content", "Title", "Description", "Close", "Root", "AlertDialogRootPrimitive", "AlertDialogTrigger", "AlertDialogTriggerPrimitive", "AlertDialogPortal", "AlertDialogPortalPrimitive", "AlertDialogOverlay", "AlertDialogOverlayPrimitive", "AlertDialogTitle", "AlertDialogTitlePrimitive", "AlertDialogDescription", "AlertDialogDescriptionPrimitive", "AlertDialogAction", "AlertDialogActionPrimitive", "AlertDialogCancel", "AlertDialogCancelPrimitive", "AlertDialogContent", "AlertDialogContentPrimitive", "createContext", "React", "forwardRef", "AlertDialogRoot", "props", "React", "ElevationProvider", "elevation", "AlertDialogRootPrimitive", "AlertDialogTrigger", "AlertDialogTriggerPrimitive", "AlertDialogPortal", "AlertDialogPortalPrimitive", "AlertDialogCancel", "AlertDialogCancelPrimitive", "AlertDialogAction", "AlertDialogActionPrimitive", "AlertDialogTitle", "forwardRef", "classNames", "srOnly", "forwardedRef", "tx", "useThemeContext", "AlertDialogTitlePrimitive", "className", "ref", "AlertDialogDescription", "AlertDialogDescriptionPrimitive", "ALERT_DIALOG_OVERLAY_NAME", "ALERT_DIALOG_CONTENT_NAME", "OverlayLayoutProvider", "useOverlayLayoutContext", "createContext", "inOverlayLayout", "AlertDialogOverlay", "children", "blockAlign", "AlertDialogOverlayPrimitive", "data-block-align", "displayName", "AlertDialogContent", "AlertDialogContentPrimitive", "AlertDialog", "Root", "Trigger", "Portal", "Overlay", "Content", "Title", "Description", "Cancel", "Action", "Root", "CheckboxPrimitive", "useControllableState", "React", "forwardRef", "useCallback", "InputRoot", "PinInput", "PinInputPrimitive", "TextInput", "TextInputPrimitive", "TextArea", "TextAreaPrimitive", "useInputContext", "INPUT_NAME", "Description", "DescriptionPrimitive", "DescriptionAndValidation", "DescriptionAndValidationPrimitive", "Label", "LabelPrimitive", "Validation", "ValidationPrimitive", "mx", "Label", "forwardRef", "srOnly", "classNames", "children", "props", "forwardedRef", "tx", "useThemeContext", "React", "LabelPrimitive", "className", "ref", "Description", "DescriptionPrimitive", "Validation", "__inputScope", "validationValence", "useInputContext", "INPUT_NAME", "ValidationPrimitive", "DescriptionAndValidation", "DescriptionAndValidationPrimitive", "PinInput", "density", "propsDensity", "elevation", "propsElevation", "segmentClassName", "propsSegmentClassName", "inputClassName", "variant", "hasIosKeyboard", "useDensityContext", "useElevationContext", "useCallback", "focused", "disabled", "PinInputPrimitive", "autoFocus", "TextInput", "themeContextValue", "TextInputPrimitive", "TextArea", "TextAreaPrimitive", "Checkbox", "checked", "propsChecked", "defaultChecked", "propsDefaultChecked", "onCheckedChange", "propsOnCheckedChange", "size", "weight", "useControllableState", "prop", "defaultProp", "onChange", "id", "descriptionId", "errorMessageId", "CheckboxPrimitive", "Icon", "icon", "Switch", "input", "type", "mx", "event", "target", "aria-describedby", "Input", "Root", "InputRoot", "CaretDown", "CaretRight", "Slot", "React", "forwardRef", "List", "ListPrimitive", "ListItemHeading", "ListPrimitiveItemHeading", "ListItemOpenTrigger", "ListPrimitiveItemOpenTrigger", "ListItemCollapsibleContent", "ListItem", "ListPrimitiveItem", "LIST_NAME", "LIST_ITEM_NAME", "useListContext", "useListItemContext", "React", "edgeToOrientationMap", "top", "bottom", "left", "right", "orientationStyles", "horizontal", "vertical", "edgeStyles", "strokeSize", "terminalSize", "offsetToAlignTerminalWithLine", "ListDropIndicator", "edge", "gap", "lineInset", "terminalInset", "orientation", "React", "div", "role", "style", "className", "List", "forwardRef", "classNames", "children", "props", "forwardedRef", "tx", "useThemeContext", "density", "useDensityContext", "React", "DensityProvider", "ListPrimitive", "className", "ref", "ListItemEndcap", "asChild", "Root", "Slot", "role", "MockListItemOpenTrigger", "div", "ListItemHeading", "ListPrimitiveItemHeading", "ListItemOpenTrigger", "__listItemScope", "open", "useListItemContext", "LIST_ITEM_NAME", "Icon", "CaretDown", "CaretRight", "ListPrimitiveItemOpenTrigger", "weight", "ListItemRoot", "ListPrimitiveItem", "collapsible", "ListItem", "Endcap", "Heading", "OpenTrigger", "CollapsibleContent", "ListItemCollapsibleContent", "MockOpenTrigger", "DropIndicator", "ListDropIndicator", "React", "forwardRef", "React", "edgeToOrientationMap", "reparent", "orientationStyles", "sibling", "child", "instructionStyles", "strokeSize", "terminalSize", "offsetToAlignTerminalWithLine", "TreeDropIndicator", "instruction", "gap", "lineOffset", "isBlocked", "type", "desiredInstruction", "desired", "orientation", "React", "div", "style", "currentLevel", "indentPerLevel", "className", "TreeRoot", "forwardRef", "props", "forwardedRef", "React", "List", "ref", "TreeBranch", "__listScope", "headingId", "useListItemContext", "LIST_ITEM_NAME", "aria-labelledby", "TreeItemRoot", "ListItem", "Root", "role", "TreeItemHeading", "Heading", "TreeItemOpenTrigger", "OpenTrigger", "MockTreeItemOpenTrigger", "MockOpenTrigger", "TreeItemBody", "CollapsibleContent", "Tree", "Branch", "TreeItem", "Body", "DropIndicator", "TreeDropIndicator", "useArrowNavigationGroup", "useFocusableGroup", "createContextScope", "Primitive", "Slot", "useControllableState", "React", "forwardRef", "TREEGRID_ROW_NAME", "createTreegridRowContext", "createTreegridRowScope", "createContextScope", "TreegridRowProvider", "useTreegridRowContext", "PATH_SEPARATOR", "PARENT_OF_SEPARATOR", "TreegridRoot", "forwardRef", "asChild", "classNames", "children", "style", "gridTemplateColumns", "props", "forwardedRef", "tx", "useThemeContext", "Root", "Slot", "Primitive", "div", "arrowNavigationAttrs", "useArrowNavigationGroup", "axis", "tabbable", "circular", "React", "role", "className", "ref", "TreegridRow", "__treegridRowScope", "id", "parentOf", "open", "propsOpen", "defaultOpen", "onOpenChange", "propsOnOpenChange", "pathParts", "split", "level", "length", "useControllableState", "prop", "onChange", "defaultProp", "focusableGroupAttrs", "useFocusableGroup", "tabBehavior", "arrowGroupAttrs", "memorizeCurrent", "scope", "aria-level", "tabIndex", "TreegridCell", "indent", "Treegrid", "Row", "Cell", "createContext", "Root", "DialogRoot", "DialogContent", "DialogTitle", "Primitive", "Slot", "useControllableState", "React", "forwardRef", "useCallback", "useEffect", "useRef", "useState", "log", "useMediaQuery", "useForwardedRef", "useCallback", "useEffect", "useState", "useSwipeToDismiss", "ref", "onDismiss", "dismissThreshold", "debounceThreshold", "offset", "$root", "current", "motionState", "setMotionState", "useState", "gestureStartX", "setGestureStartX", "setIdle", "useCallback", "style", "removeProperty", "setProperty", "setFollowing", "handlePointerDown", "screenX", "handlePointerMove", "delta", "Math", "min", "abs", "handlePointerUp", "useEffect", "addEventListener", "removeEventListener", "document", "documentElement", "MAIN_ROOT_NAME", "NAVIGATION_SIDEBAR_NAME", "COMPLEMENTARY_SIDEBAR_NAME", "MAIN_NAME", "GENERIC_CONSUMER_NAME", "landmarkAttr", "useLandmarkMover", "propsOnKeyDown", "landmark", "handleKeyDown", "useCallback", "event", "target", "currentTarget", "key", "hasAttribute", "preventDefault", "landmarks", "Array", "from", "document", "querySelectorAll", "map", "el", "parseInt", "getAttribute", "NaN", "sort", "l", "length", "cursor", "indexOf", "nextLandmark", "getModifierState", "querySelector", "focus", "focusableGroupAttrs", "window", "tabBehavior", "ignoreDefaultKeydown", "Tab", "onKeyDown", "tabIndex", "MainProvider", "useMainContext", "createContext", "resizing", "navigationSidebarState", "setNavigationSidebarState", "nextState", "log", "warn", "complementarySidebarState", "setComplementarySidebarState", "useSidebars", "consumerName", "toggleNavigationSidebar", "openNavigationSidebar", "collapseNavigationSidebar", "closeNavigationSidebar", "toggleComplementarySidebar", "openComplementarySidebar", "collapseComplementarySidebar", "closeComplementarySidebar", "resizeDebounce", "MainRoot", "propsNavigationSidebarState", "defaultNavigationSidebarState", "onNavigationSidebarStateChange", "propsComplementarySidebarState", "defaultComplementarySidebarState", "onComplementarySidebarStateChange", "children", "props", "isLg", "useMediaQuery", "ssr", "useControllableState", "prop", "defaultProp", "onChange", "setResizing", "useState", "resizeInterval", "useRef", "handleResize", "current", "clearTimeout", "setTimeout", "useEffect", "addEventListener", "removeEventListener", "React", "displayName", "handleOpenAutoFocus", "body", "MainSidebar", "forwardRef", "classNames", "swipeToDismiss", "onOpenAutoFocus", "state", "onStateChange", "side", "label", "forwardedRef", "tx", "useThemeContext", "t", "useTranslation", "ref", "useForwardedRef", "noopRef", "useSwipeToDismiss", "onDismiss", "closest", "Root", "Primitive", "div", "DialogContent", "DialogRoot", "open", "aria-label", "toLocalizedString", "modal", "DialogTitle", "className", "forceMount", "data-side", "data-state", "data-resizing", "inert", "MainNavigationSidebar", "mover", "MainComplementarySidebar", "MainContent", "asChild", "bounce", "handlesFocus", "role", "Slot", "data-sidebar-inline-start-state", "data-sidebar-inline-end-state", "data-handles-focus", "MainOverlay", "onClick", "inlineStartSidebarOpen", "inlineEndSidebarOpen", "aria-hidden", "Main", "Content", "Overlay", "NavigationSidebar", "ComplementarySidebar", "ContextMenuPrimitive", "Primitive", "Slot", "React", "forwardRef", "useMemo", "propIsNumber", "prop", "Number", "isFinite", "propsIsRecord", "safePadding", "propsPadding", "side", "useSafeCollisionPadding", "collisionPadding", "safeAreaPadding", "useThemeContext", "useMemo", "top", "right", "bottom", "left", "ContextMenuRoot", "ContextMenu", "ContextMenuTrigger", "Trigger", "ContextMenuPortal", "Portal", "ContextMenuContent", "forwardRef", "classNames", "children", "collisionPadding", "props", "forwardedRef", "tx", "useThemeContext", "elevation", "useElevationContext", "safeCollisionPadding", "useSafeCollisionPadding", "React", "Content", "className", "ref", "ContextMenuViewport", "asChild", "Root", "Slot", "Primitive", "div", "ContextMenuArrow", "Arrow", "ContextMenuGroup", "Group", "ContextMenuItemIndicator", "ItemIndicator", "ContextMenuItem", "Item", "ContextMenuCheckboxItem", "CheckboxItem", "ContextMenuSeparator", "Separator", "ContextMenuGroupLabel", "Label", "Viewport", "GroupLabel", "composeEventHandlers", "composeRefs", "createContextScope", "useId", "MenuPrimitive", "createMenuScope", "Primitive", "Slot", "useControllableState", "React", "useRef", "useCallback", "forwardRef", "useEffect", "DROPDOWN_MENU_NAME", "createDropdownMenuContext", "createDropdownMenuScope", "createContextScope", "createMenuScope", "useMenuScope", "DropdownMenuProvider", "useDropdownMenuContext", "DropdownMenuRoot", "props", "__scopeDropdownMenu", "children", "dir", "open", "openProp", "defaultOpen", "onOpenChange", "modal", "menuScope", "triggerRef", "useRef", "setOpen", "useControllableState", "prop", "defaultProp", "onChange", "React", "scope", "triggerId", "useId", "contentId", "onOpenToggle", "useCallback", "prevOpen", "Root", "displayName", "TRIGGER_NAME", "DropdownMenuTrigger", "forwardRef", "forwardedRef", "disabled", "triggerProps", "context", "Anchor", "asChild", "Primitive", "button", "type", "id", "aria-haspopup", "aria-expanded", "aria-controls", "undefined", "data-state", "data-disabled", "ref", "composeRefs", "onPointerDown", "composeEventHandlers", "event", "ctrlKey", "preventDefault", "onKeyDown", "includes", "key", "VIRTUAL_TRIGGER_NAME", "DropdownMenuVirtualTrigger", "virtualRef", "useEffect", "current", "PORTAL_NAME", "DropdownMenuPortal", "portalProps", "Portal", "DropdownMenuViewport", "classNames", "tx", "useThemeContext", "Slot", "div", "className", "CONTENT_NAME", "DropdownMenuContent", "collisionPadding", "contentProps", "elevation", "useElevationContext", "hasInteractedOutsideRef", "safeCollisionPadding", "useSafeCollisionPadding", "Content", "aria-labelledby", "onCloseAutoFocus", "focus", "onInteractOutside", "originalEvent", "detail", "ctrlLeftClick", "isRightClick", "style", "GROUP_NAME", "DropdownMenuGroup", "groupProps", "Group", "LABEL_NAME", "DropdownMenuGroupLabel", "labelProps", "Label", "ITEM_NAME", "DropdownMenuItem", "itemProps", "Item", "CHECKBOX_ITEM_NAME", "DropdownMenuCheckboxItem", "checkboxItemProps", "CheckboxItem", "RADIO_GROUP_NAME", "DropdownMenuRadioGroup", "radioGroupProps", "RadioGroup", "RADIO_ITEM_NAME", "DropdownMenuRadioItem", "radioItemProps", "RadioItem", "INDICATOR_NAME", "DropdownMenuItemIndicator", "itemIndicatorProps", "ItemIndicator", "SEPARATOR_NAME", "DropdownMenuSeparator", "separatorProps", "Separator", "ARROW_NAME", "DropdownMenuArrow", "arrowProps", "Arrow", "DropdownMenuSub", "Sub", "SUB_TRIGGER_NAME", "DropdownMenuSubTrigger", "subTriggerProps", "SubTrigger", "SUB_CONTENT_NAME", "DropdownMenuSubContent", "subContentProps", "SubContent", "DropdownMenu", "Trigger", "VirtualTrigger", "Viewport", "GroupLabel", "useDropdownMenuMenuScope", "createContext", "Primitive", "Slot", "React", "forwardRef", "useId", "messageIcons", "success", "info", "warning", "error", "neutral", "MESSAGE_NAME", "MessageProvider", "useMessageContext", "createContext", "MessageRoot", "forwardRef", "asChild", "valence", "elevation", "propsElevation", "classNames", "titleId", "propsTitleId", "descriptionId", "propsDescriptionId", "children", "props", "forwardedRef", "tx", "useThemeContext", "useId", "useElevationContext", "Root", "Slot", "Primitive", "div", "React", "role", "className", "aria-labelledby", "aria-describedby", "ref", "displayName", "MESSAGE_TITLE_NAME", "MessageTitle", "icon", "h2", "id", "Icon", "size", "span", "MESSAGE_BODY_NAME", "MessageContent", "p", "Message", "Title", "Content", "Callout", "composeEventHandlers", "useComposedRefs", "createContextScope", "DismissableLayer", "useFocusGuards", "FocusScope", "useId", "PopperPrimitive", "createPopperScope", "Portal", "PortalPrimitive", "Presence", "Primitive", "Slot", "useControllableState", "hideOthers", "React", "forwardRef", "useRef", "useCallback", "useState", "useEffect", "RemoveScroll", "POPOVER_NAME", "createPopoverContext", "createPopoverScope", "createContextScope", "createPopperScope", "usePopperScope", "PopoverProvider", "usePopoverContext", "PopoverRoot", "props", "__scopePopover", "children", "open", "openProp", "defaultOpen", "onOpenChange", "modal", "popperScope", "triggerRef", "useRef", "hasCustomAnchor", "setHasCustomAnchor", "useState", "setOpen", "useControllableState", "prop", "defaultProp", "onChange", "React", "Root", "scope", "contentId", "useId", "onOpenToggle", "useCallback", "prevOpen", "onCustomAnchorAdd", "onCustomAnchorRemove", "displayName", "ANCHOR_NAME", "PopoverAnchor", "forwardRef", "forwardedRef", "anchorProps", "context", "useEffect", "Anchor", "ref", "TRIGGER_NAME", "PopoverTrigger", "triggerProps", "composedTriggerRef", "useComposedRefs", "trigger", "Primitive", "button", "type", "aria-haspopup", "aria-expanded", "aria-controls", "data-state", "getState", "onClick", "composeEventHandlers", "asChild", "VIRTUAL_TRIGGER_NAME", "PopoverVirtualTrigger", "virtualRef", "current", "PORTAL_NAME", "PortalProvider", "usePortalContext", "forceMount", "undefined", "PopoverPortal", "container", "Presence", "present", "PortalPrimitive", "CONTENT_NAME", "PopoverContent", "portalContext", "contentProps", "PopoverContentModal", "PopoverContentNonModal", "contentRef", "composedRefs", "isRightClickOutsideRef", "content", "hideOthers", "RemoveScroll", "as", "Slot", "allowPinchZoom", "PopoverContentImpl", "trapFocus", "disableOutsidePointerEvents", "onCloseAutoFocus", "event", "preventDefault", "focus", "onPointerDownOutside", "originalEvent", "detail", "ctrlLeftClick", "ctrlKey", "isRightClick", "checkForDefaultPrevented", "onFocusOutside", "hasInteractedOutsideRef", "hasPointerDownOutsideRef", "defaultPrevented", "onInteractOutside", "target", "targetIsTrigger", "contains", "onOpenAutoFocus", "onEscapeKeyDown", "collisionPadding", "classNames", "tx", "useThemeContext", "elevation", "useElevationContext", "safeCollisionPadding", "useSafeCollisionPadding", "useFocusGuards", "FocusScope", "loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus", "DismissableLayer", "onDismiss", "Content", "role", "id", "className", "style", "CLOSE_NAME", "PopoverClose", "closeProps", "ARROW_NAME", "PopoverArrow", "arrowProps", "Arrow", "PopoverViewport", "constrainInline", "constrainBlock", "div", "Popover", "Trigger", "VirtualTrigger", "Portal", "Close", "Viewport", "React", "forwardRef", "Status", "forwardRef", "classNames", "children", "progress", "indeterminate", "variant", "props", "forwardedRef", "tx", "useThemeContext", "React", "span", "role", "className", "ref", "style", "width", "Math", "round", "Root", "ScrollAreaPrimitiveRoot", "Viewport", "ScrollAreaPrimitiveViewport", "Scrollbar", "ScrollAreaPrimitiveScrollbar", "Thumb", "ScrollAreaPrimitiveThumb", "Corner", "ScrollAreaPrimitiveCorner", "React", "forwardRef", "ScrollAreaRoot", "forwardRef", "classNames", "props", "forwardedRef", "tx", "useThemeContext", "React", "ScrollAreaPrimitiveRoot", "className", "ref", "ScrollAreaViewport", "ScrollAreaPrimitiveViewport", "ScrollAreaScrollbar", "variant", "ScrollAreaPrimitiveScrollbar", "data-variant", "ScrollAreaThumb", "ScrollAreaPrimitiveThumb", "ScrollAreaCorner", "ScrollAreaPrimitiveCorner", "ScrollArea", "Root", "Viewport", "Scrollbar", "Thumb", "Corner", "CaretDown", "CaretUp", "SelectPrimitive", "React", "forwardRef", "SelectRoot", "Root", "SelectTrigger", "Trigger", "SelectValue", "Value", "SelectIcon", "Icon", "SelectPortal", "Portal", "SelectTriggerButton", "forwardRef", "children", "placeholder", "props", "forwardedRef", "tx", "useThemeContext", "React", "asChild", "ref", "Button", "span", "className", "CaretDown", "weight", "SelectContent", "classNames", "collisionPadding", "elevation", "useElevationContext", "safeCollisionPadding", "useSafeCollisionPadding", "Content", "position", "SelectScrollUpButton", "CaretUp", "SelectScrollDownButton", "SelectViewport", "SelectItem", "Item", "SelectItemText", "ItemText", "SelectItemIndicator", "ItemIndicator", "SelectOption", "icon", "SelectGroup", "Group", "SelectLabel", "Label", "SelectSeparator", "Separator", "SelectArrow", "Arrow", "Select", "TriggerButton", "ScrollUpButton", "ScrollDownButton", "Viewport", "Option", "Separator", "SeparatorPrimitive", "React", "forwardRef", "Separator", "forwardRef", "classNames", "orientation", "subdued", "props", "forwardedRef", "tx", "useThemeContext", "React", "SeparatorPrimitive", "className", "ref", "Primitive", "Slot", "React", "forwardRef", "Tag", "forwardRef", "asChild", "palette", "classNames", "props", "forwardedRef", "tx", "useThemeContext", "Root", "Slot", "Primitive", "span", "React", "className", "data-hue", "ref", "Primitive", "Slot", "ToastProvider", "ToastProviderPrimitive", "ToastViewport", "ToastViewportPrimitive", "Root", "ToastRootPrimitive", "ToastTitle", "ToastTitlePrimitive", "ToastDescription", "ToastDescriptionPrimitive", "ToastAction", "ToastActionPrimitive", "ToastClose", "ToastClosePrimitive", "React", "forwardRef", "ToastProvider", "ToastProviderPrimitive", "ToastViewport", "forwardRef", "classNames", "props", "forwardedRef", "tx", "useThemeContext", "React", "ToastViewportPrimitive", "className", "ref", "ToastRoot", "children", "ToastRootPrimitive", "ElevationProvider", "elevation", "ToastBody", "asChild", "Root", "Slot", "Primitive", "div", "ToastTitle", "ToastTitlePrimitive", "ToastDescription", "ToastDescriptionPrimitive", "ToastActions", "ToastAction", "ToastActionPrimitive", "ToastClose", "ToastClosePrimitive", "Toast", "Provider", "Viewport", "Body", "Title", "Description", "Actions", "Action", "Close", "ToolbarPrimitive", "React", "forwardRef", "ToolbarRoot", "forwardRef", "classNames", "children", "layoutManaged", "props", "forwardedRef", "tx", "useThemeContext", "React", "Root", "className", "ref", "ToolbarButton", "Button", "asChild", "ToolbarIconButton", "IconButton", "ToolbarToggle", "Toggle", "ToolbarLink", "Link", "ToolbarToggleGroup", "elevation", "ButtonGroup", "ToolbarToggleGroupItem", "variant", "density", "ToolbarToggleItem", "ToolbarToggleGroupIconItem", "icon", "label", "iconOnly", "ToolbarSeparator", "Separator", "Toolbar", "ToggleGroup", "ToggleGroupItem", "ToggleGroupIconItem", "useDensityContext", "propsDensity", "density", "useContext", "DensityContext"]
}
