"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var node_exports = {};
__export(node_exports, {
  AlertDialog: () => import_chunk_3E3QKWX4.AlertDialog,
  AnchoredOverflow: () => import_chunk_3E3QKWX4.AnchoredOverflow,
  Avatar: () => import_chunk_3E3QKWX4.Avatar,
  BUTTON_GROUP_NAME: () => import_chunk_3E3QKWX4.BUTTON_GROUP_NAME,
  Breadcrumb: () => import_chunk_3E3QKWX4.Breadcrumb,
  Button: () => import_chunk_3E3QKWX4.Button,
  ButtonGroup: () => import_chunk_3E3QKWX4.ButtonGroup,
  Callout: () => import_chunk_3E3QKWX4.Callout,
  Clipboard: () => import_chunk_3E3QKWX4.Clipboard,
  ContextMenu: () => import_chunk_3E3QKWX4.ContextMenu,
  DensityContext: () => import_chunk_3E3QKWX4.DensityContext,
  DensityProvider: () => import_chunk_3E3QKWX4.DensityProvider,
  Dialog: () => import_chunk_3E3QKWX4.Dialog,
  DropdownMenu: () => import_chunk_3E3QKWX4.DropdownMenu,
  ElevationContext: () => import_chunk_3E3QKWX4.ElevationContext,
  ElevationProvider: () => import_chunk_3E3QKWX4.ElevationProvider,
  Icon: () => import_chunk_3E3QKWX4.Icon,
  IconButton: () => import_chunk_3E3QKWX4.IconButton,
  Input: () => import_chunk_3E3QKWX4.Input,
  LIST_ITEM_NAME: () => import_chunk_3E3QKWX4.LIST_ITEM_NAME,
  LIST_NAME: () => import_chunk_3E3QKWX4.LIST_NAME,
  Link: () => import_chunk_3E3QKWX4.Link,
  List: () => import_chunk_3E3QKWX4.List,
  ListItem: () => import_chunk_3E3QKWX4.ListItem,
  Main: () => import_chunk_3E3QKWX4.Main,
  Message: () => import_chunk_3E3QKWX4.Message,
  Popover: () => import_chunk_3E3QKWX4.Popover,
  ScrollArea: () => import_chunk_3E3QKWX4.ScrollArea,
  Select: () => import_chunk_3E3QKWX4.Select,
  Separator: () => import_chunk_3E3QKWX4.Separator,
  Status: () => import_chunk_3E3QKWX4.Status,
  Tag: () => import_chunk_3E3QKWX4.Tag,
  ThemeContext: () => import_chunk_3E3QKWX4.ThemeContext,
  ThemeProvider: () => import_chunk_3E3QKWX4.ThemeProvider,
  Toast: () => import_chunk_3E3QKWX4.Toast,
  Toggle: () => import_chunk_3E3QKWX4.Toggle,
  ToggleGroup: () => import_chunk_3E3QKWX4.ToggleGroup,
  ToggleGroupItem: () => import_chunk_3E3QKWX4.ToggleGroupItem,
  Toolbar: () => import_chunk_3E3QKWX4.Toolbar,
  Tooltip: () => import_chunk_3E3QKWX4.Tooltip,
  Trans: () => import_react_i18next.Trans,
  Tree: () => import_chunk_3E3QKWX4.Tree,
  TreeItem: () => import_chunk_3E3QKWX4.TreeItem,
  Treegrid: () => import_chunk_3E3QKWX4.Treegrid,
  createDropdownMenuScope: () => import_chunk_3E3QKWX4.createDropdownMenuScope,
  createPopoverScope: () => import_chunk_3E3QKWX4.createPopoverScope,
  createTooltipScope: () => import_chunk_3E3QKWX4.createTooltipScope,
  hasIosKeyboard: () => import_chunk_3E3QKWX4.hasIosKeyboard,
  initialSafeArea: () => import_chunk_3E3QKWX4.initialSafeArea,
  isLabel: () => import_chunk_3E3QKWX4.isLabel,
  messageIcons: () => import_chunk_3E3QKWX4.messageIcons,
  toLocalizedString: () => import_chunk_3E3QKWX4.toLocalizedString,
  useAvatarContext: () => import_chunk_3E3QKWX4.useAvatarContext,
  useButtonGroupContext: () => import_chunk_3E3QKWX4.useButtonGroupContext,
  useClipboard: () => import_chunk_3E3QKWX4.useClipboard,
  useDensityContext: () => import_chunk_3E3QKWX4.useDensityContext,
  useDropdownMenuContext: () => import_chunk_3E3QKWX4.useDropdownMenuContext,
  useDropdownMenuMenuScope: () => import_chunk_3E3QKWX4.useDropdownMenuMenuScope,
  useElevationContext: () => import_chunk_3E3QKWX4.useElevationContext,
  useIconHref: () => import_chunk_3E3QKWX4.useIconHref,
  useLandmarkMover: () => import_chunk_3E3QKWX4.useLandmarkMover,
  useListContext: () => import_chunk_3E3QKWX4.useListContext,
  useListItemContext: () => import_chunk_3E3QKWX4.useListItemContext,
  useMainContext: () => import_chunk_3E3QKWX4.useMainContext,
  useSafeArea: () => import_chunk_3E3QKWX4.useSafeArea,
  useSidebars: () => import_chunk_3E3QKWX4.useSidebars,
  useThemeContext: () => import_chunk_3E3QKWX4.useThemeContext,
  useTooltipContext: () => import_chunk_3E3QKWX4.useTooltipContext,
  useTranslation: () => import_chunk_3E3QKWX4.useTranslation,
  useTranslationsContext: () => import_chunk_3E3QKWX4.useTranslationsContext,
  useVisualViewport: () => import_chunk_3E3QKWX4.useVisualViewport
});
module.exports = __toCommonJS(node_exports);
var import_chunk_3E3QKWX4 = require("./chunk-3E3QKWX4.cjs");
var import_react_i18next = require("react-i18next");
__reExport(node_exports, require("@dxos/react-hooks"), module.exports);
__reExport(node_exports, require("@dxos/react-ui-types"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertDialog,
  AnchoredOverflow,
  Avatar,
  BUTTON_GROUP_NAME,
  Breadcrumb,
  Button,
  ButtonGroup,
  Callout,
  Clipboard,
  ContextMenu,
  DensityContext,
  DensityProvider,
  Dialog,
  DropdownMenu,
  ElevationContext,
  ElevationProvider,
  Icon,
  IconButton,
  Input,
  LIST_ITEM_NAME,
  LIST_NAME,
  Link,
  List,
  ListItem,
  Main,
  Message,
  Popover,
  ScrollArea,
  Select,
  Separator,
  Status,
  Tag,
  ThemeContext,
  ThemeProvider,
  Toast,
  Toggle,
  ToggleGroup,
  ToggleGroupItem,
  Toolbar,
  Tooltip,
  Trans,
  Tree,
  TreeItem,
  Treegrid,
  createDropdownMenuScope,
  createPopoverScope,
  createTooltipScope,
  hasIosKeyboard,
  initialSafeArea,
  isLabel,
  messageIcons,
  toLocalizedString,
  useAvatarContext,
  useButtonGroupContext,
  useClipboard,
  useDensityContext,
  useDropdownMenuContext,
  useDropdownMenuMenuScope,
  useElevationContext,
  useIconHref,
  useLandmarkMover,
  useListContext,
  useListItemContext,
  useMainContext,
  useSafeArea,
  useSidebars,
  useThemeContext,
  useTooltipContext,
  useTranslation,
  useTranslationsContext,
  useVisualViewport,
  ...require("@dxos/react-hooks"),
  ...require("@dxos/react-ui-types")
});
//# sourceMappingURL=index.cjs.map
