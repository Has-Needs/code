import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentPropsWithRef } from 'react';
import { type Density, type Elevation } from '@dxos/react-ui-types';
import { type ThemedClassName } from '../../util';
interface ButtonProps extends ThemedClassName<ComponentPropsWithRef<typeof Primitive.button>> {
    variant?: 'default' | 'primary' | 'outline' | 'ghost' | 'destructive';
    density?: Density;
    elevation?: Elevation;
    asChild?: boolean;
}
type ButtonGroupContextValue = {
    inGroup?: boolean;
};
declare const BUTTON_GROUP_NAME = "ButtonGroup";
declare const useButtonGroupContext: (consumerName: string) => ButtonGroupContextValue;
declare const Button: React.MemoExoticComponent<React.ForwardRefExoticComponent<Omit<ButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>>;
type ButtonGroupProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    elevation?: Elevation;
    asChild?: boolean;
};
declare const ButtonGroup: React.ForwardRefExoticComponent<Omit<ButtonGroupProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
export { Button, ButtonGroup, BUTTON_GROUP_NAME, useButtonGroupContext };
export type { ButtonProps, ButtonGroupProps };
//# sourceMappingURL=Button.d.ts.map