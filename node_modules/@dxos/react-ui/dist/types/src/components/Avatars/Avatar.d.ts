import '@dxos/lit-ui/dx-avatar.pcss';
import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentProps, type ComponentPropsWithRef, type PropsWithChildren } from 'react';
import { type AvatarVariant, type AvatarStatus, type AvatarAnimation, type DxAvatar as NaturalDxAvatar } from '@dxos/lit-ui';
import { DxAvatar } from '@dxos/lit-ui/react';
import { type ThemedClassName } from '../../util';
export type AvatarRootProps = PropsWithChildren<Partial<AvatarContextValue>>;
type AvatarContextValue = {
    labelId: string;
    descriptionId: string;
};
declare const useAvatarContext: (consumerName: string) => AvatarContextValue;
type AvatarContentProps = ThemedClassName<Omit<ComponentProps<typeof DxAvatar>, 'children'>>;
type AvatarLabelProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'>> & {
    asChild?: boolean;
    srOnly?: boolean;
};
type AvatarDescriptionProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.span>, 'id'>> & {
    asChild?: boolean;
    srOnly?: boolean;
};
export declare const Avatar: {
    Root: ({ children, labelId: propsLabelId, descriptionId: propsDescriptionId }: AvatarRootProps) => React.JSX.Element;
    Content: React.ForwardRefExoticComponent<Omit<AvatarContentProps, "ref"> & React.RefAttributes<NaturalDxAvatar>>;
    Label: React.ForwardRefExoticComponent<Omit<AvatarLabelProps, "ref"> & React.RefAttributes<HTMLSpanElement>>;
    Description: React.ForwardRefExoticComponent<Omit<AvatarDescriptionProps, "ref"> & React.RefAttributes<HTMLSpanElement>>;
};
export { useAvatarContext };
export type { AvatarStatus, AvatarVariant, AvatarAnimation, AvatarContentProps, AvatarLabelProps, AvatarDescriptionProps, NaturalDxAvatar as DxAvatar, };
//# sourceMappingURL=Avatar.d.ts.map