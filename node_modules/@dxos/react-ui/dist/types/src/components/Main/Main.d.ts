import { DialogContent } from '@radix-ui/react-dialog';
import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentPropsWithRef, type Dispatch, type PropsWithChildren, type SetStateAction, type KeyboardEvent, type ComponentPropsWithoutRef } from 'react';
import { type ThemedClassName } from '../../util';
import { type Label } from '../ThemeProvider';
type SidebarState = 'expanded' | 'collapsed' | 'closed';
type MainContextValue = {
    resizing: boolean;
    navigationSidebarState: SidebarState;
    setNavigationSidebarState: Dispatch<SetStateAction<SidebarState | undefined>>;
    complementarySidebarState: SidebarState;
    setComplementarySidebarState: Dispatch<SetStateAction<SidebarState | undefined>>;
};
/**
 * Facilitates moving focus between landmarks.
 * Ref https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role
 */
declare const useLandmarkMover: (propsOnKeyDown: ComponentPropsWithoutRef<"div">["onKeyDown"], landmark: string) => {
    tabBehavior?: undefined;
    ignoreDefaultKeydown?: undefined;
    onKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;
    "data-main-landmark": string;
    tabIndex: number;
} | {
    tabBehavior: string;
    ignoreDefaultKeydown: {
        Tab: boolean;
    };
    onKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;
    "data-main-landmark": string;
    tabIndex: number;
};
declare const useMainContext: (consumerName: string) => MainContextValue;
declare const useSidebars: (consumerName?: string) => {
    navigationSidebarState: SidebarState;
    setNavigationSidebarState: React.Dispatch<React.SetStateAction<SidebarState | undefined>>;
    toggleNavigationSidebar: () => void;
    openNavigationSidebar: () => void;
    collapseNavigationSidebar: () => void;
    closeNavigationSidebar: () => void;
    complementarySidebarState: SidebarState;
    setComplementarySidebarState: React.Dispatch<React.SetStateAction<SidebarState | undefined>>;
    toggleComplementarySidebar: () => void;
    openComplementarySidebar: () => void;
    collapseComplementarySidebar: () => void;
    closeComplementarySidebar: () => void;
};
type MainRootProps = PropsWithChildren<{
    navigationSidebarState?: SidebarState;
    defaultNavigationSidebarState?: SidebarState;
    onNavigationSidebarStateChange?: (nextState: SidebarState) => void;
    complementarySidebarState?: SidebarState;
    defaultComplementarySidebarState?: SidebarState;
    onComplementarySidebarStateChange?: (nextState: SidebarState) => void;
}>;
type MainSidebarProps = ThemedClassName<ComponentPropsWithRef<typeof DialogContent>> & {
    swipeToDismiss?: boolean;
    state?: SidebarState;
    resizing?: boolean;
    onStateChange?: (nextState: SidebarState) => void;
    side: 'inline-start' | 'inline-end';
    label: Label;
};
type MainNavigationSidebarProps = Omit<MainSidebarProps, 'expanded' | 'side'>;
type MainComplementarySidebarProps = Omit<MainSidebarProps, 'expanded' | 'side'>;
type MainProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    asChild?: boolean;
    bounce?: boolean;
    handlesFocus?: boolean;
};
type MainOverlayProps = ThemedClassName<Omit<ComponentPropsWithRef<typeof Primitive.div>, 'children'>>;
export declare const Main: {
    Root: {
        ({ navigationSidebarState: propsNavigationSidebarState, defaultNavigationSidebarState, onNavigationSidebarStateChange, complementarySidebarState: propsComplementarySidebarState, defaultComplementarySidebarState, onComplementarySidebarStateChange, children, ...props }: MainRootProps): React.JSX.Element;
        displayName: string;
    };
    Content: React.ForwardRefExoticComponent<Omit<MainProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Overlay: React.ForwardRefExoticComponent<Omit<MainOverlayProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    NavigationSidebar: React.ForwardRefExoticComponent<Omit<MainNavigationSidebarProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    ComplementarySidebar: React.ForwardRefExoticComponent<Omit<MainComplementarySidebarProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
};
export { useMainContext, useSidebars, useLandmarkMover };
export type { MainRootProps, MainProps, MainOverlayProps, MainNavigationSidebarProps, SidebarState };
//# sourceMappingURL=Main.d.ts.map