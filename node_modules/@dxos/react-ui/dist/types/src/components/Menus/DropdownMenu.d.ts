import type { Scope } from '@radix-ui/react-context';
import * as MenuPrimitive from '@radix-ui/react-menu';
import { Primitive } from '@radix-ui/react-primitive';
import React, { type ReactNode, type ElementRef, type ComponentPropsWithoutRef, type ComponentPropsWithRef, type MutableRefObject, type RefObject } from 'react';
import { type ThemedClassName } from '../../util';
type Direction = 'ltr' | 'rtl';
type ScopedProps<P> = P & {
    __scopeDropdownMenu?: Scope;
};
declare const createDropdownMenuScope: import("@radix-ui/react-context").CreateScope;
type DropdownMenuContextValue = {
    triggerId: string;
    triggerRef: MutableRefObject<HTMLButtonElement | null>;
    contentId: string;
    open: boolean;
    onOpenChange(open: boolean): void;
    onOpenToggle(): void;
    modal: boolean;
};
declare const useDropdownMenuContext: (consumerName: string, scope: Scope<DropdownMenuContextValue | undefined>) => DropdownMenuContextValue;
interface DropdownMenuRootProps {
    children?: ReactNode;
    dir?: Direction;
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?(open: boolean): void;
    modal?: boolean;
}
type DropdownMenuTriggerElement = ElementRef<typeof Primitive.button>;
type PrimitiveButtonProps = ComponentPropsWithoutRef<typeof Primitive.button>;
interface DropdownMenuTriggerProps extends PrimitiveButtonProps {
}
interface DropdownMenuVirtualTriggerProps {
    virtualRef: RefObject<DropdownMenuTriggerElement>;
}
type MenuPortalProps = ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;
interface DropdownMenuPortalProps extends MenuPortalProps {
}
type DropdownMenuViewportProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    asChild?: boolean;
};
type MenuContentProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Content>>;
interface DropdownMenuContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {
}
type MenuGroupProps = ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;
interface DropdownMenuGroupProps extends MenuGroupProps {
}
type MenuLabelProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Label>>;
interface DropdownMenuLabelProps extends MenuLabelProps {
}
type MenuItemProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Item>>;
interface DropdownMenuItemProps extends MenuItemProps {
}
type MenuCheckboxItemProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>>;
interface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {
}
type MenuRadioGroupProps = ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;
interface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {
}
type MenuRadioItemProps = ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;
interface DropdownMenuRadioItemProps extends MenuRadioItemProps {
}
type MenuItemIndicatorProps = ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;
interface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {
}
type MenuSeparatorProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>>;
interface DropdownMenuSeparatorProps extends MenuSeparatorProps {
}
type MenuArrowProps = ThemedClassName<ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>>;
interface DropdownMenuArrowProps extends MenuArrowProps {
}
interface DropdownMenuSubProps {
    children?: ReactNode;
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?(open: boolean): void;
}
type MenuSubTriggerProps = ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;
interface DropdownMenuSubTriggerProps extends MenuSubTriggerProps {
}
type MenuSubContentProps = ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;
interface DropdownMenuSubContentProps extends MenuSubContentProps {
}
export declare const DropdownMenu: {
    Root: React.FC<DropdownMenuRootProps>;
    Trigger: React.ForwardRefExoticComponent<DropdownMenuTriggerProps & React.RefAttributes<HTMLButtonElement>>;
    VirtualTrigger: {
        (props: ScopedProps<DropdownMenuVirtualTriggerProps>): React.JSX.Element;
        displayName: string;
    };
    Portal: React.FC<DropdownMenuPortalProps>;
    Content: React.ForwardRefExoticComponent<DropdownMenuContentProps & React.RefAttributes<HTMLDivElement>>;
    Viewport: React.ForwardRefExoticComponent<Omit<DropdownMenuViewportProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Group: React.ForwardRefExoticComponent<DropdownMenuGroupProps & React.RefAttributes<HTMLDivElement>>;
    GroupLabel: React.ForwardRefExoticComponent<DropdownMenuLabelProps & React.RefAttributes<HTMLDivElement>>;
    Item: React.ForwardRefExoticComponent<DropdownMenuItemProps & React.RefAttributes<HTMLDivElement>>;
    CheckboxItem: React.ForwardRefExoticComponent<DropdownMenuCheckboxItemProps & React.RefAttributes<HTMLDivElement>>;
    RadioGroup: React.ForwardRefExoticComponent<DropdownMenuRadioGroupProps & React.RefAttributes<HTMLDivElement>>;
    RadioItem: React.ForwardRefExoticComponent<DropdownMenuRadioItemProps & React.RefAttributes<HTMLDivElement>>;
    ItemIndicator: React.ForwardRefExoticComponent<DropdownMenuItemIndicatorProps & React.RefAttributes<HTMLSpanElement>>;
    Separator: React.ForwardRefExoticComponent<DropdownMenuSeparatorProps & React.RefAttributes<HTMLDivElement>>;
    Arrow: React.ForwardRefExoticComponent<DropdownMenuArrowProps & React.RefAttributes<SVGSVGElement>>;
    Sub: React.FC<DropdownMenuSubProps>;
    SubTrigger: React.ForwardRefExoticComponent<DropdownMenuSubTriggerProps & React.RefAttributes<HTMLDivElement>>;
    SubContent: React.ForwardRefExoticComponent<DropdownMenuSubContentProps & React.RefAttributes<HTMLDivElement>>;
};
declare const useDropdownMenuMenuScope: (scope: Scope) => {
    [__scopeProp: string]: Scope;
};
export { createDropdownMenuScope, useDropdownMenuContext, useDropdownMenuMenuScope };
export type { DropdownMenuRootProps, DropdownMenuTriggerProps, DropdownMenuVirtualTriggerProps, DropdownMenuPortalProps, DropdownMenuContentProps, DropdownMenuViewportProps, DropdownMenuGroupProps, DropdownMenuLabelProps, DropdownMenuItemProps, DropdownMenuCheckboxItemProps, DropdownMenuRadioGroupProps, DropdownMenuRadioItemProps, DropdownMenuItemIndicatorProps, DropdownMenuSeparatorProps, DropdownMenuArrowProps, DropdownMenuSubProps, DropdownMenuSubTriggerProps, DropdownMenuSubContentProps, };
//# sourceMappingURL=DropdownMenu.d.ts.map