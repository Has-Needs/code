import '@dxos-theme';
import React from 'react';
type StoryProps = {
    tooltips: {
        label: string;
        content: string;
    }[];
    defaultOpen?: boolean;
};
declare const _default: {
    title: string;
    component: {
        Provider: React.FC<import("./Tooltip").TooltipProviderProps>;
        Trigger: React.ForwardRefExoticComponent<Omit<Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
            ref?: ((instance: HTMLButtonElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<HTMLButtonElement> | null | undefined;
        } & {
            asChild?: boolean;
        }, "ref"> & Pick<import("@radix-ui/react-tooltip").TooltipProps, "delayDuration"> & {
            content?: string;
            side?: import("./Tooltip").TooltipSide;
            onInteract?: (event: React.SyntheticEvent) => void;
        } & React.RefAttributes<HTMLButtonElement>>;
    };
    render: ({ tooltips, defaultOpen }: StoryProps) => React.JSX.Element;
    decorators: import("@storybook/react").Decorator[];
    parameters: {
        chromatic: {
            disableSnapshot: boolean;
        };
    };
};
export default _default;
export declare const Default: {
    args: {
        tooltips: {
            label: string;
            content: string;
        }[];
    };
    parameters: {
        chromatic: {
            delay: number;
        };
    };
};
export declare const DefaultOpen: {
    args: {
        defaultOption: boolean;
        tooltips: {
            label: string;
            content: string;
        }[];
    };
    parameters: {
        chromatic: {
            delay: number;
        };
    };
};
export declare const StressTest: {
    args: {
        defaultOption: boolean;
        tooltips: {
            label: string;
            content: string;
        }[];
    };
    parameters: {
        chromatic: {
            disableSnapshot: boolean;
        };
    };
};
//# sourceMappingURL=Tooltip.stories.d.ts.map