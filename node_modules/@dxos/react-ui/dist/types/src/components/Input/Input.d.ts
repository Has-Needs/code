import { type IconWeight } from '@phosphor-icons/react';
import { type CheckboxProps as CheckboxPrimitiveProps } from '@radix-ui/react-checkbox';
import React, { type ComponentPropsWithRef } from 'react';
import { type InputRootProps, type PinInputProps as PinInputPrimitiveProps, type TextInputProps as TextInputPrimitiveProps, type TextAreaProps as TextAreaPrimitiveProps, type InputScopedProps, type DescriptionAndValidationProps as DescriptionAndValidationPrimitiveProps, type DescriptionProps as DescriptionPrimitiveProps, type LabelProps as LabelPrimitiveProps, type ValidationProps as ValidationPrimitiveProps } from '@dxos/react-input';
import { type Density, type Elevation, type ClassNameValue, type Size } from '@dxos/react-ui-types';
import { type ThemedClassName } from '../../util';
type InputVariant = 'default' | 'subdued';
type InputSharedProps = Partial<{
    density: Density;
    elevation: Elevation;
    variant: InputVariant;
}>;
type LabelProps = ThemedClassName<LabelPrimitiveProps> & {
    srOnly?: boolean;
};
type DescriptionProps = ThemedClassName<DescriptionPrimitiveProps> & {
    srOnly?: boolean;
};
type ValidationProps = ThemedClassName<ValidationPrimitiveProps> & {
    srOnly?: boolean;
};
type DescriptionAndValidationProps = ThemedClassName<DescriptionAndValidationPrimitiveProps> & {
    srOnly?: boolean;
};
type PinInputProps = InputSharedProps & Omit<PinInputPrimitiveProps, 'segmentClassName' | 'inputClassName'> & {
    segmentClassName?: ClassNameValue;
    inputClassName?: ClassNameValue;
};
type TextInputProps = InputSharedProps & ThemedClassName<TextInputPrimitiveProps>;
type TextAreaProps = InputSharedProps & ThemedClassName<TextAreaPrimitiveProps>;
type CheckboxProps = ThemedClassName<Omit<CheckboxPrimitiveProps, 'children'>> & {
    size?: Size;
    weight?: IconWeight;
};
type SwitchProps = ThemedClassName<Omit<ComponentPropsWithRef<'input'>, 'children' | 'onChange'> & {
    onCheckedChange?: (checked: boolean) => void;
}>;
export declare const Input: {
    Root: {
        ({ __inputScope, id: propsId, descriptionId: propsDescriptionId, errorMessageId: propsErrorMessageId, validationValence, children, }: InputScopedProps<InputRootProps>): React.JSX.Element;
        displayName: string;
    };
    PinInput: React.ForwardRefExoticComponent<Omit<PinInputProps, "ref"> & React.RefAttributes<HTMLInputElement>>;
    TextInput: React.ForwardRefExoticComponent<Omit<InputScopedProps<TextInputProps>, "ref"> & React.RefAttributes<HTMLInputElement>>;
    TextArea: React.ForwardRefExoticComponent<Omit<InputScopedProps<TextAreaProps>, "ref"> & React.RefAttributes<HTMLTextAreaElement>>;
    Checkbox: React.ForwardRefExoticComponent<CheckboxProps>;
    Switch: React.ForwardRefExoticComponent<Omit<InputScopedProps<SwitchProps>, "ref"> & React.RefAttributes<HTMLInputElement>>;
    Label: React.ForwardRefExoticComponent<Omit<LabelProps, "ref"> & React.RefAttributes<HTMLLabelElement>>;
    Description: React.ForwardRefExoticComponent<Omit<DescriptionProps, "ref"> & React.RefAttributes<HTMLSpanElement>>;
    Validation: React.ForwardRefExoticComponent<Omit<InputScopedProps<ValidationProps>, "ref"> & React.RefAttributes<HTMLSpanElement>>;
    DescriptionAndValidation: React.ForwardRefExoticComponent<Omit<DescriptionAndValidationProps, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
};
export type { InputVariant, InputRootProps, InputSharedProps, PinInputProps, TextInputProps, TextAreaProps, CheckboxProps, SwitchProps, LabelProps, DescriptionProps, ValidationProps, DescriptionAndValidationProps, };
//# sourceMappingURL=Input.d.ts.map