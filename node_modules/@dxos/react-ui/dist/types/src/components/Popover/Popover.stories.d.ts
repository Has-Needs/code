import '@dxos-theme';
import React, { type PropsWithChildren, type ReactNode } from 'react';
declare const _default: {
    title: string;
    component: {
        Root: React.FC<import("./Popover").PopoverRootProps>;
        Anchor: React.ForwardRefExoticComponent<import("./Popover").PopoverAnchorProps & React.RefAttributes<HTMLDivElement>>;
        Trigger: React.ForwardRefExoticComponent<import("./Popover").PopoverTriggerProps & React.RefAttributes<HTMLButtonElement>>;
        VirtualTrigger: {
            (props: import("./Popover").PopoverVirtualTriggerProps & {
                __scopePopover?: import("@radix-ui/react-context").Scope;
            }): React.JSX.Element;
            displayName: string;
        };
        Portal: React.FC<import("./Popover").PopoverPortalProps>;
        Content: React.ForwardRefExoticComponent<Omit<import("./Popover").PopoverContentTypeProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & {
            forceMount?: boolean;
        } & React.RefAttributes<HTMLDivElement>>;
        Close: React.ForwardRefExoticComponent<import("./Popover").PopoverCloseProps & React.RefAttributes<HTMLButtonElement>>;
        Arrow: React.ForwardRefExoticComponent<import("./Popover").PopoverArrowProps & React.RefAttributes<SVGSVGElement>>;
        Viewport: React.ForwardRefExoticComponent<Omit<import("./Popover").PopoverViewportProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    };
    render: ({ openTrigger, children }: PropsWithChildren<{
        openTrigger: ReactNode;
    }>) => React.JSX.Element;
    decorators: import("@storybook/react").Decorator[];
    parameters: {
        chromatic: {
            disableSnapshot: boolean;
        };
    };
};
export default _default;
export declare const Default: {
    args: {
        openTrigger: React.JSX.Element;
        children: string;
    };
};
export declare const VirtualTrigger: {
    render: () => React.JSX.Element;
};
//# sourceMappingURL=Popover.stories.d.ts.map