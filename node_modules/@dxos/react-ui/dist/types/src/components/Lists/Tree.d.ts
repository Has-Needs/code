import React, { type ComponentPropsWithoutRef, type FC, type ForwardRefExoticComponent } from 'react';
import { type ListItemCollapsibleContentProps, type ListItemHeadingProps, type ListItemOpenTriggerProps, type ListItemRootProps, type ListProps, type ListScopedProps } from './List';
import { TreeDropIndicator } from './TreeDropIndicator';
import { type ThemedClassName } from '../../util';
type TreeRootProps = ListProps;
type TreeItemProps = ListItemRootProps;
type TreeItemHeadingProps = ListItemHeadingProps;
type TreeItemOpenTriggerProps = ListItemOpenTriggerProps;
type TreeItemBodyProps = ListItemCollapsibleContentProps;
export declare const Tree: {
    Root: React.ForwardRefExoticComponent<Omit<ListProps, "ref"> & React.RefAttributes<HTMLOListElement>>;
    Branch: React.ForwardRefExoticComponent<Omit<ListScopedProps<ListProps>, "ref"> & React.RefAttributes<HTMLOListElement>>;
};
export declare const TreeItem: {
    Root: ForwardRefExoticComponent<TreeItemProps>;
    Heading: ForwardRefExoticComponent<TreeItemHeadingProps>;
    Body: ForwardRefExoticComponent<TreeItemBodyProps>;
    OpenTrigger: ForwardRefExoticComponent<TreeItemOpenTriggerProps>;
    MockOpenTrigger: FC<ThemedClassName<Omit<ComponentPropsWithoutRef<'div'>, 'children'>>>;
    DropIndicator: typeof TreeDropIndicator;
};
export type { TreeRootProps, TreeItemProps, TreeItemHeadingProps, TreeItemBodyProps, TreeItemOpenTriggerProps };
//# sourceMappingURL=Tree.d.ts.map