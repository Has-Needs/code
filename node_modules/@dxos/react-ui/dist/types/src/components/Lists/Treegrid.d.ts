import { type Scope } from '@radix-ui/react-context';
import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentPropsWithRef, type CSSProperties } from 'react';
import { type ThemedClassName } from '../../util';
type TreegridRowScopedProps<P> = P & {
    __treegridRowScope?: Scope;
};
type TreegridRowContextValue = {
    open?: boolean;
    onOpenChange?: (nextOpen: boolean) => void;
};
type TreegridRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    gridTemplateColumns: CSSProperties['gridTemplateColumns'];
    asChild?: boolean;
};
type TreegridRowProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    id: string;
    asChild?: boolean;
    parentOf?: string;
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?(open: boolean): void;
};
type TreegridCellProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    indent?: boolean;
};
export type { TreegridRootProps, TreegridRowProps };
export declare const Treegrid: {
    Root: React.ForwardRefExoticComponent<Omit<TreegridRootProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Row: React.ForwardRefExoticComponent<Omit<TreegridRowScopedProps<TreegridRowProps>, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Cell: React.ForwardRefExoticComponent<Omit<TreegridCellProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    PARENT_OF_SEPARATOR: string;
    PATH_SEPARATOR: string;
    createTreegridRowScope: import("@radix-ui/react-context").CreateScope;
    useTreegridRowContext: (consumerName: string, scope: Scope<TreegridRowContextValue | undefined>) => TreegridRowContextValue;
};
//# sourceMappingURL=Treegrid.d.ts.map