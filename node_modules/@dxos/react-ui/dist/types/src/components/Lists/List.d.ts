import React, { type ComponentPropsWithoutRef, type FC, type ForwardRefExoticComponent } from 'react';
import { type ListProps as ListPrimitiveProps, type ListScopedProps, type ListItemHeadingProps as ListPrimitiveItemHeadingProps, type ListItemOpenTriggerProps as ListPrimitiveItemOpenTriggerProps, type ListItemCollapsibleContentProps, type ListItemProps as ListPrimitiveItemProps, type ListItemScopedProps, LIST_NAME, LIST_ITEM_NAME, useListContext, useListItemContext } from '@dxos/react-list';
import { type Density } from '@dxos/react-ui-types';
import { ListDropIndicator } from './ListDropIndicator';
import { type ThemedClassName } from '../../util';
type ListProps = ThemedClassName<ListPrimitiveProps> & {
    density?: Density;
};
declare const List: React.ForwardRefExoticComponent<Omit<ListProps, "ref"> & React.RefAttributes<HTMLOListElement>>;
type ListItemEndcapProps = ThemedClassName<ComponentPropsWithoutRef<'div'>> & {
    asChild?: boolean;
};
type ListItemHeadingProps = ThemedClassName<ListPrimitiveItemHeadingProps>;
type ListItemOpenTriggerProps = ThemedClassName<ListPrimitiveItemOpenTriggerProps>;
type ListItemRootProps = ThemedClassName<ListPrimitiveItemProps>;
export declare const ListItem: {
    Root: ForwardRefExoticComponent<ListItemRootProps>;
    Endcap: ForwardRefExoticComponent<ListItemEndcapProps>;
    Heading: ForwardRefExoticComponent<ListItemHeadingProps>;
    OpenTrigger: ForwardRefExoticComponent<ListItemOpenTriggerProps>;
    CollapsibleContent: ForwardRefExoticComponent<ListItemCollapsibleContentProps>;
    MockOpenTrigger: FC<ThemedClassName<Omit<ComponentPropsWithoutRef<'div'>, 'children'>>>;
    DropIndicator: typeof ListDropIndicator;
};
export { List, useListContext, useListItemContext, LIST_NAME, LIST_ITEM_NAME };
export type { ListProps, ListScopedProps, ListItemRootProps, ListItemScopedProps, ListItemEndcapProps, ListItemHeadingProps, ListItemOpenTriggerProps, ListItemCollapsibleContentProps, };
//# sourceMappingURL=List.d.ts.map