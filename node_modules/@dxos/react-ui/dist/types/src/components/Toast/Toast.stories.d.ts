import '@dxos-theme';
import React, { type ReactNode } from 'react';
type ActionTriggerProps = {
    altText: string;
    trigger: ReactNode;
};
type StorybookToastProps = Partial<{
    title: string;
    description: string;
    actionTriggers: ActionTriggerProps[];
    openTrigger: string;
    closeTrigger: ReactNode;
}>;
declare const _default: {
    title: string;
    component: {
        Provider: React.FunctionComponent<import("@radix-ui/react-toast").ToastProviderProps>;
        Viewport: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-toast").ToastViewportProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & React.RefAttributes<HTMLOListElement>>;
        Root: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-toast").ToastProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & React.RefAttributes<HTMLLIElement>>;
        Body: React.ForwardRefExoticComponent<Omit<import("./Toast").ToastBodyProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
        Title: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-toast").ToastTitleProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & React.RefAttributes<HTMLHeadingElement>>;
        Description: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-toast").ToastDescriptionProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & React.RefAttributes<HTMLParagraphElement>>;
        Actions: React.ForwardRefExoticComponent<Omit<import("./Toast").ToastActionsProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
        Action: React.FunctionComponent<import("@radix-ui/react-toast").ToastActionProps>;
        Close: React.FunctionComponent<import("@radix-ui/react-toast").ToastCloseProps>;
    };
    render: ({ title, description, actionTriggers, openTrigger, closeTrigger }: StorybookToastProps) => React.JSX.Element;
    decorators: import("@storybook/react").Decorator[];
    parameters: {
        chromatic: {
            disableSnapshot: boolean;
        };
    };
};
export default _default;
export declare const Default: {
    args: {
        openTrigger: string;
        title: string;
        description: string;
        actionTriggers: {
            altText: string;
            trigger: React.JSX.Element;
        }[];
        closeTrigger: React.JSX.Element;
    };
    parameters: {
        chromatic: {
            delay: number;
        };
    };
};
//# sourceMappingURL=Toast.stories.d.ts.map