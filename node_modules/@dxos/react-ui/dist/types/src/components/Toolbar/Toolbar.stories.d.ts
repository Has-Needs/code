import '@dxos-theme';
import React from 'react';
type StorybookToolbarProps = {};
declare const _default: {
    title: string;
    component: {
        Root: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-toolbar").ToolbarProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & {
            layoutManaged?: boolean;
        } & React.RefAttributes<HTMLDivElement>>;
        Button: React.ForwardRefExoticComponent<Omit<import("..").ButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
        IconButton: React.ForwardRefExoticComponent<Omit<import("..").IconButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
        Link: React.ForwardRefExoticComponent<Omit<import("..").LinkProps, "ref"> & React.RefAttributes<HTMLAnchorElement>>;
        Toggle: React.ForwardRefExoticComponent<Omit<import("..").ToggleProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
        ToggleGroup: React.ForwardRefExoticComponent<(Omit<Omit<import("@radix-ui/react-toolbar").ToolbarToggleGroupSingleProps, "className"> & Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
            ref?: ((instance: HTMLDivElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<HTMLDivElement> | null | undefined;
        } & {
            asChild?: boolean;
        }, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & {
            elevation?: import("@dxos/react-ui-types").Elevation;
            asChild?: boolean;
        }, "ref"> | Omit<Omit<import("@radix-ui/react-toolbar").ToolbarToggleGroupMultipleProps, "className"> & Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
            ref?: ((instance: HTMLDivElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<HTMLDivElement> | null | undefined;
        } & {
            asChild?: boolean;
        }, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & {
            elevation?: import("@dxos/react-ui-types").Elevation;
            asChild?: boolean;
        }, "ref">) & React.RefAttributes<HTMLDivElement>>;
        ToggleGroupItem: React.ForwardRefExoticComponent<Omit<import("..").ToggleGroupItemProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
        ToggleGroupIconItem: React.ForwardRefExoticComponent<Omit<import("./Toolbar").ToolbarToggleGroupIconItemProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
        Separator: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-separator").SeparatorProps, "className"> & {
            classNames?: import("@dxos/react-ui-types").ClassNameValue;
        } & {
            subdued?: boolean;
        } & {
            variant?: "gap" | "line";
        } & React.RefAttributes<HTMLDivElement>>;
    };
    render: (props: StorybookToolbarProps) => React.JSX.Element;
    decorators: import("@storybook/react").Decorator[];
    parameters: {
        chromatic: {
            disableSnapshot: boolean;
        };
    };
};
export default _default;
export declare const Default: {
    args: {};
};
//# sourceMappingURL=Toolbar.stories.d.ts.map