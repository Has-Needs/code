import type { ToggleGroupItemProps as ToggleGroupItemPrimitiveProps } from '@radix-ui/react-toggle-group';
import * as ToolbarPrimitive from '@radix-ui/react-toolbar';
import React from 'react';
import { type ThemedClassName } from '../../util';
import { type ButtonGroupProps, type ButtonProps, type ToggleGroupItemProps, type ToggleProps, type IconButtonProps } from '../Buttons';
import { type LinkProps } from '../Link';
import { type SeparatorProps } from '../Separator';
type ToolbarRootProps = ThemedClassName<ToolbarPrimitive.ToolbarProps> & {
    layoutManaged?: boolean;
};
type ToolbarButtonProps = ButtonProps;
type ToolbarIconButtonProps = IconButtonProps;
type ToolbarToggleProps = ToggleProps;
type ToolbarLinkProps = LinkProps;
type ToolbarToggleGroupProps = (Omit<ToolbarPrimitive.ToolbarToggleGroupSingleProps, 'className'> | Omit<ToolbarPrimitive.ToolbarToggleGroupMultipleProps, 'className'>) & ButtonGroupProps;
type ToolbarToggleGroupItemProps = ToggleGroupItemProps;
type ToolbarToggleGroupIconItemProps = Omit<ToggleGroupItemPrimitiveProps, 'className'> & IconButtonProps;
type ToolbarSeparatorProps = SeparatorProps & {
    variant?: 'gap' | 'line';
};
export declare const Toolbar: {
    Root: React.ForwardRefExoticComponent<Omit<ToolbarPrimitive.ToolbarProps, "className"> & {
        classNames?: import("@dxos/react-ui-types").ClassNameValue;
    } & {
        layoutManaged?: boolean;
    } & React.RefAttributes<HTMLDivElement>>;
    Button: React.ForwardRefExoticComponent<Omit<ButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
    IconButton: React.ForwardRefExoticComponent<Omit<IconButtonProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
    Link: React.ForwardRefExoticComponent<Omit<LinkProps, "ref"> & React.RefAttributes<HTMLAnchorElement>>;
    Toggle: React.ForwardRefExoticComponent<Omit<ToggleProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
    ToggleGroup: React.ForwardRefExoticComponent<(Omit<Omit<ToolbarPrimitive.ToolbarToggleGroupSingleProps, "className"> & Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<HTMLDivElement> | null | undefined;
    } & {
        asChild?: boolean;
    }, "className"> & {
        classNames?: import("@dxos/react-ui-types").ClassNameValue;
    } & {
        elevation?: import("@dxos/react-ui-types").Elevation;
        asChild?: boolean;
    }, "ref"> | Omit<Omit<ToolbarPrimitive.ToolbarToggleGroupMultipleProps, "className"> & Omit<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<HTMLDivElement> | null | undefined;
    } & {
        asChild?: boolean;
    }, "className"> & {
        classNames?: import("@dxos/react-ui-types").ClassNameValue;
    } & {
        elevation?: import("@dxos/react-ui-types").Elevation;
        asChild?: boolean;
    }, "ref">) & React.RefAttributes<HTMLDivElement>>;
    ToggleGroupItem: React.ForwardRefExoticComponent<Omit<ToggleGroupItemProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
    ToggleGroupIconItem: React.ForwardRefExoticComponent<Omit<ToolbarToggleGroupIconItemProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;
    Separator: React.ForwardRefExoticComponent<Omit<import("@radix-ui/react-separator").SeparatorProps, "className"> & {
        classNames?: import("@dxos/react-ui-types").ClassNameValue;
    } & {
        subdued?: boolean;
    } & {
        variant?: "gap" | "line";
    } & React.RefAttributes<HTMLDivElement>>;
};
export type { ToolbarRootProps, ToolbarButtonProps, ToolbarIconButtonProps, ToolbarLinkProps, ToolbarToggleProps, ToolbarToggleGroupProps, ToolbarToggleGroupItemProps, ToolbarToggleGroupIconItemProps, ToolbarSeparatorProps, };
//# sourceMappingURL=Toolbar.d.ts.map