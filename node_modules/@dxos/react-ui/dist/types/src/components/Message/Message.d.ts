import { Primitive } from '@radix-ui/react-primitive';
import React, { type ComponentPropsWithRef } from 'react';
import { type MessageValence, type Elevation } from '@dxos/react-ui-types';
import { type ThemedClassName } from '../../util';
declare const messageIcons: Record<MessageValence, string>;
type MessageRootProps = ThemedClassName<ComponentPropsWithRef<typeof Primitive.div>> & {
    valence?: MessageValence;
    elevation?: Elevation;
    asChild?: boolean;
    titleId?: string;
    descriptionId?: string;
};
type MessageTitleProps = Omit<ThemedClassName<ComponentPropsWithRef<typeof Primitive.h2>>, 'id'> & {
    asChild?: boolean;
    icon?: string;
};
type MessageContentProps = Omit<ThemedClassName<ComponentPropsWithRef<typeof Primitive.h2>>, 'id'> & {
    asChild?: boolean;
};
export declare const Message: {
    Root: React.ForwardRefExoticComponent<Omit<MessageRootProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Title: React.ForwardRefExoticComponent<Omit<MessageTitleProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Content: React.ForwardRefExoticComponent<Omit<MessageContentProps, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
};
export declare const Callout: {
    Root: React.ForwardRefExoticComponent<Omit<MessageRootProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
    Title: React.ForwardRefExoticComponent<Omit<MessageTitleProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Content: React.ForwardRefExoticComponent<Omit<MessageContentProps, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
};
export type { MessageRootProps, MessageTitleProps, MessageContentProps };
export { messageIcons };
//# sourceMappingURL=Message.d.ts.map