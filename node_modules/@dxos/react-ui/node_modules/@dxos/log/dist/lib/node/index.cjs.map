{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../src/config.ts", "../../../src/scope.ts", "../../../src/context.ts", "../../../src/decorators.ts", "../../../src/options.ts", "../../../src/platform/node/index.ts", "../../../src/processors/console-processor.ts", "../../../src/processors/common.ts", "../../../src/processors/debug-processor.ts", "../../../src/processors/browser-processor.ts", "../../../src/processors/file-processor.ts", "../../../src/log.ts", "../../../src/experimental/ownership.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport omit from 'lodash.omit';\n\nimport { pick } from '@dxos/util';\n\nexport { omit, pick };\n\nexport * from './config';\nexport * from './context';\nexport * from './log';\nexport { parseFilter } from './options';\nexport * from './processors';\nexport * from './scope';\nexport * from './meta';\n\nexport { getCurrentOwnershipScope } from './experimental/ownership';\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { type LogProcessor } from './context';\n\n/**\n * Standard levels.\n */\n// NOTE: Keep aligned with LogLevel in @dxos/protocols.\n// TODO(burdon): Update numbers?\nexport enum LogLevel {\n  TRACE = 5,\n  DEBUG = 10,\n  VERBOSE = 11,\n  INFO = 12,\n  WARN = 13,\n  ERROR = 14,\n}\n\nexport const levels: { [index: string]: LogLevel } = {\n  trace: LogLevel.TRACE,\n  debug: LogLevel.DEBUG,\n  verbose: LogLevel.VERBOSE,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n};\n\nexport const shortLevelName = {\n  [LogLevel.TRACE]: 'T',\n  [LogLevel.DEBUG]: 'D',\n  [LogLevel.VERBOSE]: 'V',\n  [LogLevel.INFO]: 'I',\n  [LogLevel.WARN]: 'W',\n  [LogLevel.ERROR]: 'E',\n};\n\nexport enum LogProcessorType {\n  CONSOLE = 'console',\n  BROWSER = 'browser',\n  DEBUG = 'debug',\n}\n\n/**\n * Individual filter condition.\n */\nexport type LogFilter = {\n  level: LogLevel;\n  pattern?: string;\n};\n\n/**\n * Options to set inline or load from the YML file.\n */\nexport type LogOptions = {\n  file?: string;\n  filter?: string | string[] | LogLevel;\n  captureFilter?: string | string[] | LogLevel;\n  depth?: number; // Context object depth.\n  processor?: string | LogProcessorType;\n  formatter?: {\n    column: number;\n    timestamp: boolean;\n    timestampFirst: boolean;\n  };\n  prefix?: string;\n};\n\n/**\n * Runtime config.\n */\nexport interface LogConfig {\n  options: LogOptions;\n  filters?: LogFilter[];\n  captureFilters?: LogFilter[];\n  processors: LogProcessor[];\n  prefix?: string;\n}\n", "//\n// Copyright 2022 DXOS.org\n//\n\nconst logInfoProperties = Symbol('logInfoProperties');\n\n/**\n * Decorate fields, properties, or methods to automatically include their values in log messages.\n *\n * Example:\n *\n * ```typescript\n * class Example {\n *   @logInfo\n *   peerId: PublicKey;\n * }\n * ```\n */\nexport const logInfo = (target: any, propertyKey: string, descriptor?: PropertyDescriptor) => {\n  // console.log(target, propertyKey, descriptor);\n  (target[logInfoProperties] ??= []).push(propertyKey);\n};\n\n/**\n * Introspects class instance to find decorated metadata.\n * @param scope Class instance.\n */\nexport const gatherLogInfoFromScope = (scope: any): Record<string, any> => {\n  if (!scope) {\n    return {};\n  }\n\n  const res: Record<string, any> = {};\n\n  const prototype = Object.getPrototypeOf(scope);\n  const infoProps = prototype[logInfoProperties] ?? [];\n  for (const prop of infoProps) {\n    try {\n      res[prop] = typeof scope[prop] === 'function' ? scope[prop]() : scope[prop];\n    } catch (err: any) {\n      res[prop] = err.message;\n    }\n  }\n\n  return res;\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { type LogConfig, type LogFilter, type LogLevel } from './config';\nimport { type CallMetadata } from './meta';\nimport { gatherLogInfoFromScope } from './scope';\n\n/**\n * Optional object passed to the logging API.\n */\nexport type LogContext = Record<string, any> | Error | any;\n\n/**\n * Record for current log line.\n */\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  meta?: CallMetadata;\n  error?: Error;\n}\n\n/**\n * Processes (e.g., prints, forwards) log entries.\n */\nexport type LogProcessor = (config: LogConfig, entry: LogEntry) => void;\n\nconst matchFilter = (filter: LogFilter, level: LogLevel, path: string) => {\n  return level >= filter.level && (!filter.pattern || path.includes(filter.pattern));\n};\n\n/**\n * Determines if the current line should be logged (called by the processor).\n */\nexport const shouldLog = (entry: LogEntry, filters?: LogFilter[]): boolean => {\n  if (filters === undefined) {\n    return true;\n  } else {\n    return filters.some((filter) => matchFilter(filter, entry.level, entry.meta?.F ?? ''));\n  }\n};\n\nexport const getContextFromEntry = (entry: LogEntry): Record<string, any> | undefined => {\n  let context;\n  if (entry.meta) {\n    const scopeInfo = gatherLogInfoFromScope(entry.meta.S);\n    if (Object.keys(scopeInfo).length > 0) {\n      context = Object.assign(context ?? {}, scopeInfo);\n    }\n  }\n\n  const entryContext = typeof entry.context === 'function' ? entry.context() : entry.context;\n  if (entryContext) {\n    if (entryContext instanceof Error) {\n      // Additional context from Error.\n      const c = (entryContext as any).context;\n      // If ERROR then show stacktrace.\n      context = Object.assign(context ?? {}, { error: entryContext.stack, ...c });\n    } else if (typeof entryContext === 'object') {\n      context = Object.assign(context ?? {}, entryContext);\n    }\n  }\n\n  if (entry.error) {\n    const errorContext = (entry.error as any).context;\n    context = Object.assign(context ?? {}, { error: entry.error, ...errorContext });\n  }\n\n  return context && Object.keys(context).length > 0 ? context : undefined;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport chalk from 'chalk';\nimport { inspect } from 'node:util';\n\nimport type { LogMethods } from './log';\nimport { type CallMetadata } from './meta';\n\nlet nextPromiseId = 0;\n\nexport const createMethodLogDecorator =\n  (log: LogMethods) =>\n  (arg0?: never, arg1?: never, meta?: CallMetadata): MethodDecorator =>\n  (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const method = descriptor.value!;\n    const methodName = propertyKey as string;\n    descriptor.value = function (this: any, ...args: any) {\n      const combinedMeta = {\n        F: '',\n        L: 0,\n        ...(meta ?? {}),\n        S: this as any,\n      } as CallMetadata;\n\n      const formattedArgs = args.map((arg: any) => inspect(arg, false, 1, true)).join(', ');\n\n      try {\n        const startTime = performance.now();\n        const result = method.apply(this, args);\n\n        if (isThenable(result)) {\n          const id = nextPromiseId++;\n          logAsyncBegin(log, methodName, formattedArgs, id, combinedMeta);\n          result.then(\n            (resolvedValue) => {\n              logAsyncResolved(log, methodName, resolvedValue, id, startTime, combinedMeta);\n            },\n            (err) => {\n              logAsyncRejected(log, methodName, err, id, startTime, combinedMeta);\n            },\n          );\n        } else {\n          logSyncCall(log, methodName, formattedArgs, result, combinedMeta);\n        }\n\n        return result;\n      } catch (err: any) {\n        logSyncError(log, methodName, formattedArgs, err, combinedMeta);\n        throw err;\n      }\n    };\n    Object.defineProperty(descriptor.value, 'name', { value: methodName + '$log' });\n  };\n\nexport const createFunctionLogDecorator =\n  (log: LogMethods) =>\n  <F extends (...args: any[]) => any>(\n    name: string,\n    fn: F,\n    opts: { transformOutput?: (result: ReturnType<F>) => Promise<any> | any } = {},\n  ): F => {\n    const decoratedFn = function (this: any, ...args: any) {\n      const combinedMeta = {\n        F: '',\n        L: 0,\n      } as CallMetadata;\n\n      const formattedArgs = args.map((arg: any) => inspect(arg, false, 1, true)).join(', ');\n\n      try {\n        const startTime = performance.now();\n        const result = fn.apply(this, args);\n\n        let transformedResult = result;\n        if (opts.transformOutput) {\n          if (isThenable(result)) {\n            transformedResult = result.then(opts.transformOutput as any);\n          } else {\n            transformedResult = opts.transformOutput(result);\n          }\n        }\n\n        if (isThenable(transformedResult)) {\n          const id = nextPromiseId++;\n          logAsyncBegin(log, name, formattedArgs, id, combinedMeta);\n          transformedResult.then(\n            (resolvedValue) => {\n              logAsyncResolved(log, name, resolvedValue, id, startTime, combinedMeta);\n            },\n            (err) => {\n              logAsyncRejected(log, name, err, id, startTime, combinedMeta);\n            },\n          );\n        } else {\n          logSyncCall(log, name, formattedArgs, transformedResult, combinedMeta);\n        }\n\n        return result;\n      } catch (err: any) {\n        logSyncError(log, name, formattedArgs, err, combinedMeta);\n        throw err;\n      }\n    };\n    Object.defineProperty(decoratedFn, 'name', { value: name + '$log' });\n    return decoratedFn as F;\n  };\n\nconst isThenable = (obj: any): obj is Promise<unknown> => obj && typeof obj.then === 'function';\n\nconst logSyncCall = (\n  log: LogMethods,\n  methodName: string,\n  formattedArgs: string,\n  result: unknown,\n  combinedMeta: CallMetadata,\n) => {\n  log.info(\n    `.${formatFunction(methodName)} (${formattedArgs}) ${chalk.gray('=>')} ${inspect(result, false, 1, true)}`,\n    {},\n    combinedMeta,\n  );\n};\n\nconst logSyncError = (\n  log: LogMethods,\n  methodName: string,\n  formattedArgs: string,\n  err: Error,\n  combinedMeta: CallMetadata,\n) => {\n  log.error(`.${formatFunction(methodName)} (${formattedArgs}) 🔥 ${err}`, {}, combinedMeta);\n};\n\nconst logAsyncBegin = (\n  log: LogMethods,\n  methodName: string,\n  formattedArgs: string,\n  promiseId: number,\n  combinedMeta: CallMetadata,\n) => {\n  log.info(\n    `.${formatFunction(methodName)} ↴ (${formattedArgs}) ${chalk.gray('=>')} ${formatPromise(promiseId)}`,\n    {},\n    combinedMeta,\n  );\n};\n\nconst logAsyncResolved = (\n  log: LogMethods,\n  methodName: string,\n  resolvedValue: unknown | undefined,\n  promiseId: number,\n  startTime: number,\n  combinedMeta: CallMetadata,\n) => {\n  if (resolvedValue !== undefined) {\n    log.info(\n      `.${formatFunction(methodName)} ↲ ${greenCheck} ${chalk.gray('resolve')} ${formatPromise(promiseId)} ${formatTimeElapsed(startTime)} ${chalk.gray('=>')} ${inspect(\n        resolvedValue,\n        false,\n        1,\n        true,\n      )}`,\n      {},\n      combinedMeta,\n    );\n  } else {\n    log.info(\n      `.${formatFunction(methodName)} ↲ ${greenCheck} ${chalk.gray('resolve')} ${formatPromise(promiseId)} ${formatTimeElapsed(startTime)}`,\n      {},\n      combinedMeta,\n    );\n  }\n};\n\nconst logAsyncRejected = (\n  log: LogMethods,\n  methodName: string,\n  err: Error,\n  promiseId: number,\n  startTime: number,\n  combinedMeta: CallMetadata,\n) => {\n  log.info(\n    `.${formatFunction(methodName)} ↲ 🔥 ${chalk.gray('reject')} ${formatPromise(promiseId)} ${formatTimeElapsed(startTime)} ${chalk.gray('=>')} ${err}`,\n    {},\n    combinedMeta,\n  );\n};\n\n// https://github.com/dxos/dxos/issues/7286\nconst greenCheck = typeof chalk.green === 'function' ? chalk.green('✔') : '✔';\n\nconst formatTimeElapsed = (startTime: number) => chalk.gray(`${(performance.now() - startTime).toFixed(0)}ms`);\n\nconst COLOR_FUNCTION = [220, 220, 170] as const;\n\nconst formatFunction = (name: string) => chalk.bold(chalk.rgb(...COLOR_FUNCTION)(name));\n\nconst formatPromise = (id: number) => chalk.blue(`Promise#${id}`);\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport defaultsDeep from 'lodash.defaultsdeep';\n\nimport { type LogConfig, type LogFilter, LogLevel, type LogOptions, LogProcessorType, levels } from './config';\nimport { type LogProcessor } from './context';\nimport { loadOptions } from './platform';\nimport { CONSOLE_PROCESSOR, DEBUG_PROCESSOR, BROWSER_PROCESSOR } from './processors';\n\n/**\n * Processor variants.\n */\nexport const processors: { [index: string]: LogProcessor } = {\n  [LogProcessorType.CONSOLE]: CONSOLE_PROCESSOR,\n  [LogProcessorType.BROWSER]: BROWSER_PROCESSOR,\n  [LogProcessorType.DEBUG]: DEBUG_PROCESSOR,\n};\n\nconst IS_BROWSER = typeof window !== 'undefined' || typeof navigator !== 'undefined';\n\nexport const DEFAULT_PROCESSORS = [IS_BROWSER ? BROWSER_PROCESSOR : CONSOLE_PROCESSOR];\n\nexport const parseFilter = (filter: string | string[] | LogLevel): LogFilter[] => {\n  if (typeof filter === 'number') {\n    return [{ level: filter }];\n  }\n\n  const parseLogLevel = (level: string, defValue = LogLevel.WARN) => levels[level.toLowerCase()] ?? defValue;\n\n  const lines = typeof filter === 'string' ? filter.split(/,\\s*/) : filter;\n  return lines.map((filter) => {\n    const [pattern, level] = filter.split(':');\n    return level ? { level: parseLogLevel(level), pattern } : { level: parseLogLevel(pattern) };\n  });\n};\n\nexport const getConfig = (options?: LogOptions): LogConfig => {\n  const nodeOptions: LogOptions | undefined =\n    'process' in globalThis\n      ? {\n          file: process!.env.LOG_CONFIG,\n          filter: process!.env.LOG_FILTER,\n          processor: process!.env.LOG_PROCESSOR,\n        }\n      : undefined;\n\n  const mergedOptions: LogOptions = defaultsDeep({}, loadOptions(nodeOptions?.file), nodeOptions, options);\n  return {\n    options: mergedOptions,\n    filters: parseFilter(mergedOptions.filter ?? LogLevel.INFO),\n    captureFilters: parseFilter(mergedOptions.captureFilter ?? LogLevel.WARN),\n    processors: mergedOptions.processor ? [processors[mergedOptions.processor]] : DEFAULT_PROCESSORS,\n    prefix: mergedOptions.prefix,\n  };\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport yaml from 'js-yaml';\nimport fs from 'node:fs';\n\nimport { type LogOptions } from '../../config';\n\n/**\n * Node config loader.\n */\nexport const loadOptions = (filepath?: string): LogOptions | undefined => {\n  if (filepath) {\n    // console.log(`Log file: ${fullpath}`);\n    try {\n      const text = fs.readFileSync(filepath, 'utf-8');\n      if (text) {\n        return yaml.load(text) as LogOptions;\n      }\n    } catch (err) {\n      console.warn(`Invalid log file: ${filepath}`);\n    }\n  }\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport chalk from 'chalk';\nimport { inspect } from 'node:util';\n\nimport { getPrototypeSpecificInstanceId, pickBy } from '@dxos/util';\n\nimport { getRelativeFilename } from './common';\nimport { type LogConfig, LogLevel, shortLevelName } from '../config';\nimport { getContextFromEntry, type LogProcessor, shouldLog } from '../context';\n\nconst LEVEL_COLORS: Record<LogLevel, typeof chalk.ForegroundColor> = {\n  [LogLevel.TRACE]: 'gray',\n  [LogLevel.DEBUG]: 'gray',\n  [LogLevel.VERBOSE]: 'gray',\n  [LogLevel.INFO]: 'white',\n  [LogLevel.WARN]: 'yellow',\n  [LogLevel.ERROR]: 'red',\n};\n\nexport const truncate = (text?: string, length = 0, right = false) => {\n  const str = text && length ? (right ? text.slice(-length) : text.substring(0, length)) : text ?? '';\n  return right ? str.padStart(length, ' ') : str.padEnd(length, ' ');\n};\n\n// TODO(burdon): Optional package name.\n// TODO(burdon): Show exceptions on one line.\nexport type FormatParts = {\n  path?: string;\n  line?: number;\n  timestamp?: string;\n  level: LogLevel;\n  message: string;\n  context?: any;\n  error?: Error;\n  scope?: any;\n};\n\nexport type Formatter = (config: LogConfig, parts: FormatParts) => (string | undefined)[];\n\nexport const DEFAULT_FORMATTER: Formatter = (\n  config,\n  { path, line, level, message, context, error, scope },\n): string[] => {\n  const column = config.options?.formatter?.column;\n  const filepath = path !== undefined && line !== undefined ? chalk.grey(`${path}:${line}`) : undefined;\n\n  let instance;\n  if (scope) {\n    const prototype = Object.getPrototypeOf(scope);\n    const id = getPrototypeSpecificInstanceId(scope);\n    instance = chalk.magentaBright(`${prototype.constructor.name}#${id}`);\n  }\n\n  const formattedTimestamp = config.options?.formatter?.timestamp ? new Date().toISOString() : undefined;\n  const formattedLevel = chalk[LEVEL_COLORS[level]](column ? shortLevelName[level] : LogLevel[level]);\n  const padding = column && filepath ? ''.padStart(column - filepath.length) : undefined;\n\n  return config.options?.formatter?.timestampFirst\n    ? [formattedTimestamp, filepath, padding, formattedLevel, instance, message, context, error]\n    : [\n        // NOTE: File path must come fist for console hyperlinks.\n        // Must not truncate for terminal output.\n        filepath,\n        padding,\n        formattedTimestamp,\n        formattedLevel,\n        instance,\n        message,\n        context,\n        error,\n      ];\n};\n\nexport const SHORT_FORMATTER: Formatter = (config, { path, level, message }) => {\n  return [\n    chalk.grey(truncate(path, 16, true)), // NOTE: Breaks terminal linking.\n    chalk[LEVEL_COLORS[level]](shortLevelName[level]),\n    message,\n  ];\n};\n\n// TODO(burdon): Config option.\nconst formatter = DEFAULT_FORMATTER;\n\nexport const CONSOLE_PROCESSOR: LogProcessor = (config, entry) => {\n  const { level, message, meta, error } = entry;\n  if (!shouldLog(entry, config.filters)) {\n    return;\n  }\n\n  const parts: FormatParts = {\n    level,\n    message,\n    error,\n    path: undefined,\n    line: undefined,\n    scope: undefined,\n    context: undefined,\n  };\n\n  if (meta) {\n    parts.path = getRelativeFilename(meta.F);\n    parts.line = meta.L;\n    parts.scope = meta.S;\n  }\n\n  const context = getContextFromEntry(entry);\n  if (context) {\n    // Remove undefined fields.\n    // https://nodejs.org/api/util.html#utilinspectobject-options\n    parts.context = inspect(\n      pickBy(context, (value?: unknown) => value !== undefined),\n      { depth: config.options.depth, colors: true, maxArrayLength: 8, sorted: false },\n    );\n  }\n\n  const line = formatter(config, parts).filter(Boolean).join(' ');\n  console.log(line);\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nexport const getRelativeFilename = (filename: string) => {\n  // TODO(burdon): Hack uses \"packages\" as an anchor (pre-parse NX?)\n  // Including `packages/` part of the path so that excluded paths (e.g. from dist) are clickable in vscode.\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n\n  return filename;\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { inspect } from 'node:util';\n\nimport { type LogProcessor } from '../context';\n\nexport const DEBUG_PROCESSOR: LogProcessor = (config, entry) => {\n  console.log(inspect(entry, false, null, true));\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { getDebugName, safariCheck } from '@dxos/util';\n\nimport { LogLevel } from '../config';\nimport { getContextFromEntry, type LogProcessor, shouldLog } from '../context';\n\nconst getRelativeFilename = (filename: string) => {\n  // TODO(burdon): Hack uses \"packages\" as an anchor (pre-parse NX?)\n  // Including `packages/` part of the path so that excluded paths (e.g. from dist) are clickable in vscode.\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n\n  return filename;\n};\n\ntype Config = {\n  useTestProcessor: boolean;\n  printFileLinks: boolean;\n};\n\nconst CONFIG: Config = {\n  useTestProcessor: false,\n  printFileLinks: false,\n};\n\n/**\n * For running apps in the browser normally.\n */\nconst APP_BROWSER_PROCESSOR: LogProcessor = (config, entry) => {\n  if (!shouldLog(entry, config.filters)) {\n    return;\n  }\n\n  // Example local editor prefix: 'vscode://file/Users/burdon/Code/dxos/dxos/'.\n  const LOG_BROWSER_PREFIX = config.prefix ?? 'https://vscode.dev/github.com/dxos/dxos/blob/main/';\n\n  // TODO(burdon): CSS breaks formatting (e.g., [Object] rather than expandable property).\n  // TODO(burdon): Consider custom formatters.\n  //  https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\n  // NOTE: Cannot change color of link (from bright white).\n  // const LOG_BROWSER_CSS = ['color:gray; font-size:10px; padding-bottom: 4px', 'color:#B97852; font-size:14px;'];\n  const LOG_BROWSER_CSS: string[] = [];\n\n  let link = '';\n  if (entry.meta) {\n    const filename = getRelativeFilename(entry.meta.F);\n    const filepath = `${LOG_BROWSER_PREFIX.replace(/\\/$/, '')}/${filename}`;\n    // TODO(burdon): Line numbers not working for app link, even with colons.\n    //  https://stackoverflow.com/a/54459820/2804332\n    link = `${filepath}#L${entry.meta.L}`;\n  }\n\n  let args = [];\n\n  if (entry.meta?.S) {\n    const scope = entry.meta?.S;\n    const scopeName = scope.name || getDebugName(scope);\n    const processPrefix = entry.meta.S?.hostSessionId ? '[worker] ' : '';\n    // TODO(dmaretskyi): Those can be made clickable with a custom formatter.\n    args.push(`%c${processPrefix}${scopeName}`, 'color:#C026D3;font-weight:bold');\n  }\n\n  args.push(entry.message);\n\n  const context = getContextFromEntry(entry);\n  if (context) {\n    if (Object.keys(context).length === 1 && 'error' in context) {\n      args.push(context.error);\n    } else {\n      args.push(context);\n    }\n  }\n\n  // https://github.com/cloudflare/workers-sdk/issues/5591\n  const levels: any = {\n    [LogLevel.ERROR]: console.error.bind(console),\n    [LogLevel.WARN]: console.warn.bind(console),\n    [LogLevel.DEBUG]: console.log.bind(console),\n  };\n\n  // Safari prints source code location as this file, not the caller.\n  if (CONFIG.printFileLinks || safariCheck()) {\n    if (LOG_BROWSER_CSS?.length) {\n      args = [`%c${link}\\n%c${args.join(' ')}`, ...LOG_BROWSER_CSS];\n    } else {\n      args = [link + '\\n', ...args];\n    }\n  }\n\n  // https://github.com/cloudflare/workers-sdk/issues/5591\n  const level = levels[entry.level] ?? console.log.bind(console);\n  if (typeof entry.meta?.C === 'function') {\n    entry.meta.C(level, args);\n  } else {\n    level(...args);\n  }\n};\n\n/**\n * For running unit tests in the headless browser.\n */\nconst TEST_BROWSER_PROCESSOR: LogProcessor = (config, entry) => {\n  if (!shouldLog(entry, config.filters)) {\n    return;\n  }\n\n  let path = '';\n  if (entry.meta) {\n    path = `${getRelativeFilename(entry.meta.F)}:${entry.meta.L}`;\n  }\n\n  let args = [];\n\n  const processPrefix = entry.meta?.S?.hostSessionId ? '[worker] ' : '';\n  args.push(`${processPrefix}${entry.message}`);\n\n  const context = getContextFromEntry(entry);\n  if (context) {\n    args.push(context);\n  }\n\n  const levels: any = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log,\n  };\n\n  if (CONFIG.printFileLinks) {\n    args = [path, ...args];\n  }\n\n  const level = levels[entry.level] ?? console.log;\n  if (typeof entry.meta?.C === 'function') {\n    entry.meta.C(level, args);\n  } else {\n    level(...args);\n  }\n};\n\nexport const BROWSER_PROCESSOR: LogProcessor = CONFIG.useTestProcessor ? TEST_BROWSER_PROCESSOR : APP_BROWSER_PROCESSOR;\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { appendFileSync, mkdirSync, openSync } from 'node:fs';\nimport { dirname } from 'node:path';\n\nimport { jsonlogify } from '@dxos/util';\n\nimport { getRelativeFilename } from './common';\nimport { type LogFilter, LogLevel } from '../config';\nimport { type LogProcessor, getContextFromEntry, shouldLog } from '../context';\n\n// Amount of time to retry writing after encountering EAGAIN before giving up.\nconst EAGAIN_MAX_DURATION = 1000;\n/**\n * Create a file processor.\n * @param path - Path to log file to create or append to, or existing open file descriptor e.g. stdout.\n * @param levels - Log levels to process. Takes preference over Filters.\n * @param filters - Filters to apply.\n */\nexport const createFileProcessor = ({\n  pathOrFd,\n  levels,\n  filters,\n}: {\n  pathOrFd: string | number;\n  levels: LogLevel[];\n  filters?: LogFilter[];\n}): LogProcessor => {\n  let fd: number | undefined;\n\n  return (config, entry) => {\n    if (levels.length > 0 && !levels.includes(entry.level)) {\n      return;\n    }\n    if (!shouldLog(entry, filters)) {\n      return;\n    }\n    if (typeof pathOrFd === 'number') {\n      fd = pathOrFd;\n    } else {\n      try {\n        mkdirSync(dirname(pathOrFd));\n      } catch {}\n      fd = openSync(pathOrFd, 'a');\n    }\n\n    const record = {\n      ...entry,\n      timestamp: Date.now(),\n      ...(entry.meta ? { meta: { file: getRelativeFilename(entry.meta.F), line: entry.meta.L } } : {}),\n      context: jsonlogify(getContextFromEntry(entry)),\n    };\n    let retryTS: number = 0;\n\n    // Retry writing if EAGAIN is encountered.\n    //\n    // Node may set stdout and stderr to non-blocking. https://github.com/nodejs/node/issues/42826\n    // This can cause EAGAIN errors when writing to them.\n    // In order to not drop logs, make log methods asynchronous, or deal with buffering/delayed writes, spin until write succeeds.\n\n    while (true) {\n      try {\n        return appendFileSync(fd, JSON.stringify(record) + '\\n');\n      } catch (err: any) {\n        if (err.code !== 'EAGAIN') {\n          throw err;\n        }\n        if (retryTS === 0) {\n          retryTS = performance.now();\n        } else {\n          if (performance.now() - retryTS > EAGAIN_MAX_DURATION) {\n            console.log(`could not write after ${EAGAIN_MAX_DURATION}ms of EAGAIN failures, giving up`);\n            throw err;\n          }\n        }\n      }\n    }\n  };\n};\n\nlet logFilePath: string | undefined;\nconst getLogFilePath = () => {\n  logFilePath ??=\n    process.env.LOG_FILE ??\n    (process.env.HOME ? `${process.env.HOME}/.dxlog/${new Date().toISOString()}.log` : undefined);\n\n  return logFilePath!;\n};\n\nexport const FILE_PROCESSOR: LogProcessor = createFileProcessor({\n  pathOrFd: getLogFilePath(),\n  levels: [LogLevel.ERROR, LogLevel.WARN, LogLevel.INFO, LogLevel.TRACE],\n});\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { type LogConfig, LogLevel, type LogOptions } from './config';\nimport { type LogContext, type LogProcessor } from './context';\nimport { createFunctionLogDecorator, createMethodLogDecorator } from './decorators';\nimport { type CallMetadata } from './meta';\nimport { getConfig, DEFAULT_PROCESSORS } from './options';\n\n/**\n * Logging function.\n */\ntype LogFunction = (message: string, context?: LogContext, meta?: CallMetadata) => void;\n\n/**\n * Logging methods.\n */\nexport interface LogMethods {\n  trace: LogFunction;\n  debug: LogFunction;\n  verbose: LogFunction;\n  info: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n  catch: (error: Error | any, context?: LogContext, meta?: CallMetadata) => void;\n  break: () => void;\n  stack: (message?: string, context?: never, meta?: CallMetadata) => void;\n  method: (arg0?: never, arg1?: never, meta?: CallMetadata) => MethodDecorator;\n  func: <F extends (...args: any[]) => any>(\n    name: string,\n    fn: F,\n    opts?: { transformOutput?: (result: ReturnType<F>) => Promise<any> | any },\n  ) => F;\n}\n\n/**\n * Properties accessible on the logging function.\n */\ninterface Log extends LogMethods, LogFunction {\n  config: (options: LogOptions) => void;\n  addProcessor: (processor: LogProcessor) => void;\n  runtimeConfig: LogConfig;\n}\n\ninterface LogImp extends Log {\n  _config: LogConfig;\n}\n\nconst createLog = (): LogImp => {\n  const log: LogImp = ((...params) => processLog(LogLevel.DEBUG, ...params)) as LogImp;\n\n  log._config = getConfig();\n  Object.defineProperty(log, 'runtimeConfig', { get: () => log._config });\n\n  log.addProcessor = (processor: LogProcessor) => {\n    if (DEFAULT_PROCESSORS.filter((p) => p === processor).length === 0) {\n      DEFAULT_PROCESSORS.push(processor);\n    }\n    if (log._config.processors.filter((p) => p === processor).length === 0) {\n      log._config.processors.push(processor);\n    }\n  };\n\n  // Set config.\n  log.config = (options: LogOptions) => {\n    log._config = getConfig(options);\n  };\n\n  // TODO(burdon): API to set context and separate error object.\n  //  E.g., log.warn('failed', { key: 123 }, err);\n\n  log.trace = (...params) => processLog(LogLevel.TRACE, ...params);\n  log.debug = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log.verbose = (...params) => processLog(LogLevel.VERBOSE, ...params);\n  log.info = (...params) => processLog(LogLevel.INFO, ...params);\n  log.warn = (...params) => processLog(LogLevel.WARN, ...params);\n  log.error = (...params) => processLog(LogLevel.ERROR, ...params);\n\n  // Catch only shows error message, not stacktrace.\n  log.catch = (error: Error | any, context, meta) =>\n    processLog(LogLevel.ERROR, error?.message ?? String(error), context, meta, error);\n\n  // Show break.\n  log.break = () => log.info('——————————————————————————————————————————————————');\n\n  log.stack = (message, context, meta) =>\n    processLog(LogLevel.INFO, `${message ?? 'Stack Dump'}\\n${getFormattedStackTrace()}`, context, meta);\n\n  log.method = createMethodLogDecorator(log);\n  log.func = createFunctionLogDecorator(log);\n\n  /**\n   * Process the current log call.\n   */\n  const processLog = (\n    level: LogLevel,\n    message: string,\n    context: LogContext = {},\n    meta?: CallMetadata,\n    error?: Error,\n  ) => {\n    log._config.processors.forEach((processor) => processor(log._config, { level, message, context, meta, error }));\n  };\n\n  return log;\n};\n\n/**\n * Global logging function.\n */\nexport const log: Log = ((globalThis as any).dx_log ??= createLog());\n\nconst start = Date.now();\nlet last = start;\n\n/**\n * Log debug stack.\n */\nexport const debug = (label?: any, args?: any) => {\n  const now = Date.now();\n  const err = new Error();\n  console.group(\n    `DEBUG[${label}]`,\n    JSON.stringify({ t: Number(now - start).toLocaleString(), dt: Number(now - last).toLocaleString(), ...args }),\n  );\n  console.warn(err.stack);\n  console.groupEnd();\n  last = Date.now();\n};\n\n/**\n * Accessible from browser console.\n */\ndeclare global {\n  // eslint-disable-next-line camelcase\n  const dx_log: Log;\n}\n\nconst getFormattedStackTrace = () => new Error().stack!.split('\\n').slice(3).join('\\n');\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { inspect } from 'node:util';\n\nconst kOwnershipScope = Symbol('kOwnershipScope');\nconst kCurrentOwnershipScope = Symbol('kCurrentOwnershipScope');\nconst kDebugInfoProperties = Symbol('kDebugInfoProperties');\n\n/**\n *\n */\n// TODO(burdon): Document.\nexport class OwnershipScope {\n  public instance: any;\n\n  constructor(\n    public constr: any,\n    public parent?: OwnershipScope,\n  ) {}\n\n  getInfo() {\n    if (!this.instance) {\n      return {};\n    }\n    const props = this.constr.prototype[kDebugInfoProperties] ?? [];\n    const info: any = {};\n    for (const prop of props) {\n      info[prop] = this.instance[prop];\n    }\n    return info;\n  }\n\n  [inspect.custom]() {\n    return {\n      className: this.constr.name,\n      info: this.getInfo(),\n      parent: this.parent,\n    };\n  }\n}\n\nfunction decorateMethodWeakReturnOwnership(prototype: any, key: string) {\n  const original = prototype[key];\n  prototype[key] = function (...args: any) {\n    const res = original.apply(this, ...args);\n\n    if (res && typeof res.then === 'function') {\n      res.then((value: any) => {\n        if (kOwnershipScope in value) {\n          value[kOwnershipScope].parent ??= this[kOwnershipScope];\n        }\n      });\n    } else {\n      if (res && kOwnershipScope in res) {\n        res[kOwnershipScope].parent ??= this[kOwnershipScope];\n      }\n    }\n\n    return res;\n  };\n}\n\nexport function ownershipClass<T extends { new (...args: any[]): {} }>(constr: T) {\n  for (const key of Object.getOwnPropertyNames(constr.prototype)) {\n    if (key !== 'constructor' && typeof constr.prototype[key] === 'function') {\n      decorateMethodWeakReturnOwnership(constr.prototype, key);\n    }\n  }\n\n  return class extends constr {\n    constructor(...args: any[]) {\n      const currentCausality = (globalThis as any)[kCurrentOwnershipScope];\n      (globalThis as any)[kCurrentOwnershipScope] = new OwnershipScope(constr, currentCausality);\n      super(...args);\n      (this as any)[kOwnershipScope] = (globalThis as any)[kCurrentOwnershipScope];\n      (this as any)[kOwnershipScope].instance = this;\n      (globalThis as any)[kCurrentOwnershipScope] = currentCausality;\n    }\n  };\n}\n\nexport const debugInfo = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n  // console.log(target, propertyKey, descriptor);\n  (target[kDebugInfoProperties] ??= []).push(propertyKey);\n};\n\nexport const getCurrentOwnershipScope = (thisRef: any) => thisRef;\n"],
  "mappings": "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",
  "names": ["import_lodash", "import_chalk", "import_node_util", "import_util", "import_node_fs", "LogLevel", "levels", "trace", "debug", "verbose", "info", "warn", "error", "shortLevelName", "LogProcessorType", "logInfoProperties", "Symbol", "logInfo", "target", "propertyKey", "descriptor", "push", "gatherLogInfoFromScope", "scope", "res", "prototype", "Object", "getPrototypeOf", "infoProps", "prop", "err", "message", "matchFilter", "filter", "level", "path", "pattern", "includes", "shouldLog", "entry", "filters", "undefined", "some", "meta", "F", "getContextFromEntry", "context", "scopeInfo", "S", "keys", "length", "assign", "entryContext", "Error", "c", "stack", "errorContext", "nextPromiseId", "createMethodLogDecorator", "log", "arg0", "arg1", "method", "value", "methodName", "args", "combinedMeta", "L", "formattedArgs", "map", "arg", "inspect", "join", "startTime", "performance", "now", "result", "apply", "isThenable", "id", "logAsyncBegin", "then", "resolvedValue", "logAsyncResolved", "logAsyncRejected", "logSyncCall", "logSyncError", "defineProperty", "createFunctionLogDecorator", "name", "fn", "opts", "decoratedFn", "transformedResult", "transformOutput", "obj", "formatFunction", "chalk", "gray", "promiseId", "formatPromise", "greenCheck", "formatTimeElapsed", "green", "toFixed", "COLOR_FUNCTION", "bold", "rgb", "blue", "loadOptions", "filepath", "text", "fs", "readFileSync", "yaml", "load", "console", "getRelativeFilename", "filename", "match", "filePath", "LEVEL_COLORS", "TRACE", "DEBUG", "VERBOSE", "INFO", "WARN", "ERROR", "truncate", "right", "str", "slice", "substring", "padStart", "padEnd", "DEFAULT_FORMATTER", "config", "line", "column", "options", "formatter", "grey", "instance", "getPrototypeSpecificInstanceId", "magentaBright", "formattedTimestamp", "timestamp", "Date", "toISOString", "formattedLevel", "padding", "timestampFirst", "SHORT_FORMATTER", "CONSOLE_PROCESSOR", "parts", "pickBy", "depth", "colors", "maxArrayLength", "sorted", "Boolean", "DEBUG_PROCESSOR", "CONFIG", "useTestProcessor", "printFileLinks", "APP_BROWSER_PROCESSOR", "LOG_BROWSER_PREFIX", "prefix", "LOG_BROWSER_CSS", "link", "replace", "scopeName", "getDebugName", "processPrefix", "hostSessionId", "bind", "safariCheck", "C", "TEST_BROWSER_PROCESSOR", "BROWSER_PROCESSOR", "EAGAIN_MAX_DURATION", "createFileProcessor", "pathOrFd", "fd", "mkdirSync", "dirname", "openSync", "record", "file", "jsonlogify", "retryTS", "appendFileSync", "JSON", "stringify", "code", "logFilePath", "getLogFilePath", "process", "env", "LOG_FILE", "HOME", "FILE_PROCESSOR", "processors", "CONSOLE", "BROWSER", "IS_BROWSER", "window", "navigator", "DEFAULT_PROCESSORS", "parseFilter", "parseLogLevel", "defValue", "toLowerCase", "lines", "split", "getConfig", "nodeOptions", "globalThis", "LOG_CONFIG", "LOG_FILTER", "processor", "LOG_PROCESSOR", "mergedOptions", "defaultsDeep", "captureFilters", "captureFilter", "createLog", "params", "processLog", "_config", "get", "addProcessor", "p", "catch", "String", "break", "getFormattedStackTrace", "func", "forEach", "dx_log", "start", "last", "label", "group", "t", "Number", "toLocaleString", "dt", "groupEnd", "kOwnershipScope", "kCurrentOwnershipScope", "kDebugInfoProperties", "OwnershipScope", "constr", "parent", "getInfo", "props", "custom", "className", "getCurrentOwnershipScope", "thisRef"]
}
