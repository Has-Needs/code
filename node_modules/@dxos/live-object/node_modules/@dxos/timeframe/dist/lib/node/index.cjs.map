{
  "version": 3,
  "sources": ["../../../src/timeframe.ts"],
  "sourcesContent": ["//\n// Copyright 2020 DXOS.org\n//\n\nimport { inspect } from 'node:util';\n\nimport { equalsSymbol, type Equatable } from '@dxos/debug';\nimport { type PublicKey } from '@dxos/keys';\n\ntype Entry = {\n  key: PublicKey;\n  seq: number;\n};\n\n/**\n * A vector clock that implements ordering over a set of feed messages.\n */\nexport class Timeframe implements Equatable {\n  private readonly _frames = new Map<string, Entry>();\n\n  constructor(frames: [PublicKey, number][] = []) {\n    for (const [key, seq] of frames) {\n      this.set(key, seq);\n    }\n  }\n\n  toJSON(): Record<string, number> {\n    return this.frames().reduce((frames: Record<string, number>, [key, seq]) => {\n      frames[key.truncate()] = seq;\n      return frames;\n    }, {});\n  }\n\n  toString(): string {\n    return `(${this.frames()\n      .map(([key, seq]) => `${key.truncate()}[${seq}]`)\n      .join(', ')})`;\n  }\n\n  equals(object: Timeframe): boolean {\n    return this.size() === object.size() && this.frames().every(([key, seq]) => object.get(key) === seq);\n  }\n\n  // TODO(burdon): Rename getFrame.\n  get(key: PublicKey): number | undefined {\n    return this._frames.get(key.toHex())?.seq;\n  }\n\n  // TODO(burdon): Rename setFrame.\n  set(key: PublicKey, seq: number): void {\n    const hex = key.toHex();\n    this._frames.set(hex, { key, seq });\n  }\n\n  // TODO(burdon): Change to getter.\n  frames(): [PublicKey, number][] {\n    return Array.from(this._frames.values()).map(({ key, seq }) => [key, seq]);\n  }\n\n  // TODO(burdon): Change to getter.\n  size(): number {\n    return this._frames.size;\n  }\n\n  // TODO(burdon): Change to getter (empty).\n  isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  /**\n   * Returns a new timeframe with specified keys removed.\n   * @param keys\n   */\n  withoutKeys(keys: PublicKey[]): Timeframe {\n    return new Timeframe(this.frames().filter(([frameKey]) => keys.every((key) => !key.equals(frameKey))));\n  }\n\n  map(fn: (frame: [key: PublicKey, seq: number]) => [PublicKey, number]): Timeframe {\n    return new Timeframe(this.frames().map(fn));\n  }\n\n  /**\n   * Returns a total amount of messages represented by this timeframe.\n   */\n  totalMessages(): number {\n    return Array.from(this._frames.values()).reduce((result, { seq }) => result + seq + 1, 0);\n  }\n\n  /**\n   * Returns a total amount of messages that are present in this timeframe but are missing in `base`.\n   */\n  newMessages(base: Timeframe): number {\n    return Array.from(this._frames.entries()).reduce(\n      (result, [hex, { seq }]) => result + Math.max(seq - (base._frames.get(hex)?.seq ?? -1), 0),\n      0,\n    );\n  }\n\n  /**\n   * Used by NodeJS to get textual representation of this object in `console.log`.\n   */\n  [inspect.custom](): string {\n    return `Timeframe${this.toString()}`;\n  }\n\n  [equalsSymbol](other: any): boolean {\n    if (!(other instanceof Timeframe)) {\n      return false;\n    }\n\n    return this.equals(other);\n  }\n\n  /**\n   * Merges the values, updating the highest sequence numbers.\n   * @param timeframes\n   */\n  static merge(...timeframes: Timeframe[]): Timeframe {\n    const result = new Timeframe();\n    for (const timeframe of timeframes) {\n      for (const [hex, entry] of timeframe._frames) {\n        const currentEntry = result._frames.get(hex);\n        if (currentEntry === undefined || entry.seq > currentEntry.seq) {\n          result._frames.set(hex, entry);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Compares two timeframes and returns an array of frames from the first timeframe where the sequence number\n   * is greater than the associated sequence number from the second timeframe.\n   */\n  static dependencies(tf1: Timeframe, tf2: Timeframe): Timeframe {\n    const result = new Timeframe();\n    for (const [hex, entry] of tf1._frames) {\n      const otherEntry = tf2._frames.get(hex);\n      if (otherEntry === undefined || otherEntry.seq < entry.seq) {\n        result._frames.set(hex, entry);\n      }\n    }\n\n    return result;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Timeframe", "frames", "_frames", "Map", "key", "seq", "set", "toJSON", "reduce", "truncate", "toString", "map", "join", "equals", "object", "size", "every", "get", "toHex", "hex", "Array", "from", "values", "isEmpty", "withoutKeys", "keys", "filter", "frameKey", "fn", "totalMessages", "result", "newMessages", "base", "entries", "Math", "max", "inspect", "custom", "equalsSymbol", "other", "merge", "timeframes", "timeframe", "entry", "currentEntry", "undefined", "dependencies", "tf1", "tf2", "otherEntry"]
}
