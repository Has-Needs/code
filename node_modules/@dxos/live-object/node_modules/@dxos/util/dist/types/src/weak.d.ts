/**
 * Weak dictionary. It is a map that holds weak references to its values and allows garbage collection of values and keys.
 */
export declare class WeakDictionary<K, V extends object> implements Map<K, V> {
    private readonly _internal;
    private readonly _finalization;
    constructor(entries?: [K, V][]);
    entries(): SetIterator<[K, V]>;
    keys(): SetIterator<K>;
    values(): SetIterator<V>;
    [Symbol.iterator](): SetIterator<[K, V]>;
    get [Symbol.toStringTag](): string;
    get size(): number;
    get(key: K): V | undefined;
    set(key: K, value: V): this;
    has(key: K): boolean;
    delete(key: K): boolean;
    clear(): void;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;
    private _register;
    private _unregister;
}
//# sourceMappingURL=weak.d.ts.map