import { type Context } from '@dxos/context';
/**
 * Times out after delay.
 */
export declare const sleep: (ms: number) => Promise<void>;
/**
 * Can be used in long-running tasks to let other callbacks be invoked.
 */
export declare const asyncReturn: () => Promise<void>;
/**
 * Wait for promise or throw error.
 */
export declare const asyncTimeout: <T>(promise: Promise<T> | (() => Promise<T>), timeout: number, err?: Error | string) => Promise<T>;
/**
 * In Node.JS, `unref` prevents the timeout from blocking the process from exiting. Not available in browsers.
 * https://nodejs.org/api/timers.html#timeoutunref
 */
export declare const unrefTimeout: (timeoutId: NodeJS.Timeout) => void;
export declare const sleepWithContext: (ctx: Context, ms: number) => Promise<void>;
//# sourceMappingURL=timeout.d.ts.map