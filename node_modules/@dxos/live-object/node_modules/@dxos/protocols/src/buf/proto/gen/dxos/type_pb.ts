//
// Copyright 2022 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/type.proto (package dxos.type, syntax proto3)
/* eslint-disable */

// TODO(burdon): Rename `dxos.registry.type`.

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Record_Extension } from "./registry_pb.js";
import { file_dxos_registry } from "./registry_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/type.proto.
 */
export const file_dxos_type: GenFile = /*@__PURE__*/
  fileDesc("Cg9keG9zL3R5cGUucHJvdG8SCWR4b3MudHlwZSIyCgRSZXBvEgwKBG5hbWUYASABKAkSCwoDdXJsGAIgASgJEg8KB3ZlcnNpb24YAyABKAki1QIKA0FwcBIUCgd2ZXJzaW9uGAEgASgJSAGIAQESFAoHbGljZW5zZRgCIAEoCUgCiAEBEh4KBXJlcG9zGAMgAygLMg8uZHhvcy50eXBlLlJlcG8SEwoGYnVuZGxlGAQgASgMSAOIAQESIQoDd2ViGGQgASgLMhIuZHhvcy50eXBlLkFwcC5XZWJIABI4CglleHRlbnNpb24YyAEgASgLMh8uZHhvcy5yZWdpc3RyeS5SZWNvcmQuRXh0ZW5zaW9uSASIAQEaVwoDV2ViEhcKCmluZGV4X2ZpbGUYASABKAlIAIgBARIYCgtlbnRyeV9wb2ludBgCIAEoCUgBiAEBQg0KC19pbmRleF9maWxlQg4KDF9lbnRyeV9wb2ludEIGCgRraW5kQgoKCF92ZXJzaW9uQgoKCF9saWNlbnNlQgkKB19idW5kbGVCDAoKX2V4dGVuc2lvbiKfAQoDQm90Eg8KB3ZlcnNpb24YASABKAkSDwoHbGljZW5zZRgCIAEoCRIeCgVyZXBvcxgDIAMoCzIPLmR4b3MudHlwZS5SZXBvEg4KBmJ1bmRsZRgEIAEoDBISCgpsb2NhbF9wYXRoGAUgASgJEjIKCWV4dGVuc2lvbhhkIAEoCzIfLmR4b3MucmVnaXN0cnkuUmVjb3JkLkV4dGVuc2lvbiKXAQoMU3RhdGVNYWNoaW5lEjcKFm11dGF0aW9uX3Byb3RvYnVmX2RlZnMYASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0EjcKFnNuYXBzaG90X3Byb3RvYnVmX2RlZnMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0EhUKDWNvZGVfaXBmc19jaWQYAyABKAwicwoERmlsZRIUCgxjb250ZW50X3R5cGUYASABKAkSEQoJZmlsZV9uYW1lGAIgASgJEg4KBmJ1bmRsZRgDIAEoDBIyCglleHRlbnNpb24YZCABKAsyHy5keG9zLnJlZ2lzdHJ5LlJlY29yZC5FeHRlbnNpb24iRwoES1VCRRILCgN1cmwYASABKAkSMgoJZXh0ZW5zaW9uGGQgASgLMh8uZHhvcy5yZWdpc3RyeS5SZWNvcmQuRXh0ZW5zaW9uIlkKB1NlcnZpY2USDAoEdHlwZRgBIAEoCRIMCgRrdWJlGAIgASgMEjIKCWV4dGVuc2lvbhhkIAEoCzIfLmR4b3MucmVnaXN0cnkuUmVjb3JkLkV4dGVuc2lvbiJfCgRJUEZTEhAKCHByb3RvY29sGAEgASgJEhEKCWFkZHJlc3NlcxgCIAMoCRIyCglleHRlbnNpb24YZCABKAsyHy5keG9zLnJlZ2lzdHJ5LlJlY29yZC5FeHRlbnNpb24iTwoKQm90RmFjdG9yeRINCgV0b3BpYxgBIAEoCRIyCglleHRlbnNpb24YZCABKAsyHy5keG9zLnJlZ2lzdHJ5LlJlY29yZC5FeHRlbnNpb24iXAoGU2lnbmFsEhEKCWJvb3RzdHJhcBgBIAEoCRILCgN1cmwYAiABKAkSMgoJZXh0ZW5zaW9uGGQgASgLMh8uZHhvcy5yZWdpc3RyeS5SZWNvcmQuRXh0ZW5zaW9uIkwKCUFwcFNlcnZlchILCgN1cmwYASABKAkSMgoJZXh0ZW5zaW9uGGQgASgLMh8uZHhvcy5yZWdpc3RyeS5SZWNvcmQuRXh0ZW5zaW9uYgZwcm90bzM", [file_google_protobuf_struct, file_dxos_registry]);

/**
 * TODO(wittjosiah): Shared with config. Factor out?
 *
 * @generated from message dxos.type.Repo
 */
export type Repo = Message<"dxos.type.Repo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;
};

/**
 * Describes the message dxos.type.Repo.
 * Use `create(RepoSchema)` to create a new message.
 */
export const RepoSchema: GenMessage<Repo> = /*@__PURE__*/
  messageDesc(file_dxos_type, 0);

/**
 *
 * Registered as `type.app`.
 *
 *
 * @generated from message dxos.type.App
 */
export type App = Message<"dxos.type.App"> & {
  /**
   * *
   * Optional **semver 2.0** compliant record version.
   * Should conform to the semver regex (see https://semver.org/).
   *
   * @generated from field: optional string version = 1;
   */
  version?: string;

  /**
   * @generated from field: optional string license = 2;
   */
  license?: string;

  /**
   * @generated from field: repeated dxos.type.Repo repos = 3;
   */
  repos: Repo[];

  /**
   * / App bundle content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
   *
   * @generated from field: optional bytes bundle = 4;
   */
  bundle?: Uint8Array;

  /**
   * @generated from oneof dxos.type.App.kind
   */
  kind: {
    /**
     * @generated from field: dxos.type.App.Web web = 100;
     */
    value: App_Web;
    case: "web";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: optional dxos.registry.Record.Extension extension = 200;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.App.
 * Use `create(AppSchema)` to create a new message.
 */
export const AppSchema: GenMessage<App> = /*@__PURE__*/
  messageDesc(file_dxos_type, 1);

/**
 * @generated from message dxos.type.App.Web
 */
export type App_Web = Message<"dxos.type.App.Web"> & {
  /**
   * / Relative path in resource to entrypoint, defaults to index.html.
   *
   * @generated from field: optional string index_file = 1;
   */
  indexFile?: string;

  /**
   * / Relative path in resource to entrypoint, defaults to main.js.
   *
   * @generated from field: optional string entry_point = 2;
   */
  entryPoint?: string;
};

/**
 * Describes the message dxos.type.App.Web.
 * Use `create(App_WebSchema)` to create a new message.
 */
export const App_WebSchema: GenMessage<App_Web> = /*@__PURE__*/
  messageDesc(file_dxos_type, 1, 0);

/**
 *
 * Registered as `type.bot`.
 *
 *
 * @generated from message dxos.type.Bot
 */
export type Bot = Message<"dxos.type.Bot"> & {
  /**
   * *
   * Optional **semver 2.0** compliant record version.
   * Should conform to the semver regex (see https://semver.org/).
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: string license = 2;
   */
  license: string;

  /**
   * @generated from field: repeated dxos.type.Repo repos = 3;
   */
  repos: Repo[];

  /**
   * / Bot bundle content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
   *
   * @generated from field: bytes bundle = 4;
   */
  bundle: Uint8Array;

  /**
   * / Only for spawning bots that are expected to be vendored with bot-factory.
   * / This would be the path to the bot executable in bot-factory's file-system.
   *
   * @generated from field: string local_path = 5;
   */
  localPath: string;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.Bot.
 * Use `create(BotSchema)` to create a new message.
 */
export const BotSchema: GenMessage<Bot> = /*@__PURE__*/
  messageDesc(file_dxos_type, 2);

/**
 *
 * Registered as `type.state-machine`.
 *
 *
 * @generated from message dxos.type.StateMachine
 */
export type StateMachine = Message<"dxos.type.StateMachine"> & {
  /**
   * / Set of protobuf messages.
   *
   * @generated from field: google.protobuf.Struct mutation_protobuf_defs = 1;
   */
  mutationProtobufDefs?: JsonObject;

  /**
   * / Set of protobuf messages.
   *
   * @generated from field: google.protobuf.Struct snapshot_protobuf_defs = 2;
   */
  snapshotProtobufDefs?: JsonObject;

  /**
   * @generated from field: bytes code_ipfs_cid = 3;
   */
  codeIpfsCid: Uint8Array;
};

/**
 * Describes the message dxos.type.StateMachine.
 * Use `create(StateMachineSchema)` to create a new message.
 */
export const StateMachineSchema: GenMessage<StateMachine> = /*@__PURE__*/
  messageDesc(file_dxos_type, 3);

/**
 *
 * Registered as `type.file`.
 *
 *
 * @generated from message dxos.type.File
 */
export type File = Message<"dxos.type.File"> & {
  /**
   * MIME type of the file content: https://developer.mozilla.org/en-US/docs/Glossary/MIME_type.
   *
   * @generated from field: string content_type = 1;
   */
  contentType: string;

  /**
   * @generated from field: string file_name = 2;
   */
  fileName: string;

  /**
   * / File content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
   *
   * @generated from field: bytes bundle = 3;
   */
  bundle: Uint8Array;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.File.
 * Use `create(FileSchema)` to create a new message.
 */
export const FileSchema: GenMessage<File> = /*@__PURE__*/
  messageDesc(file_dxos_type, 4);

/**
 *
 * Registered as `type.kube`.
 *
 *
 * @generated from message dxos.type.KUBE
 */
export type KUBE = Message<"dxos.type.KUBE"> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.KUBE.
 * Use `create(KUBESchema)` to create a new message.
 */
export const KUBESchema: GenMessage<KUBE> = /*@__PURE__*/
  messageDesc(file_dxos_type, 5);

/**
 *
 * Registered as `type.service`.
 *
 *
 * @generated from message dxos.type.Service
 */
export type Service = Message<"dxos.type.Service"> & {
  /**
   * TODO(dmaretskyi): How are service type's defined?
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * KUBE record's CID that hosts this service.
   *
   * @generated from field: bytes kube = 2;
   */
  kube: Uint8Array;

  /**
   * Extension field's payload depends on service type and has extra data specific to that service.
   * Within this schema extension might be `type.service.ipfs` or `type.service.bot-factory`.
   *
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.Service.
 * Use `create(ServiceSchema)` to create a new message.
 */
export const ServiceSchema: GenMessage<Service> = /*@__PURE__*/
  messageDesc(file_dxos_type, 6);

/**
 *
 * Registered as `type.service.ipfs`.
 *
 *
 * @generated from message dxos.type.IPFS
 */
export type IPFS = Message<"dxos.type.IPFS"> & {
  /**
   * @generated from field: string protocol = 1;
   */
  protocol: string;

  /**
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[];

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.IPFS.
 * Use `create(IPFSSchema)` to create a new message.
 */
export const IPFSSchema: GenMessage<IPFS> = /*@__PURE__*/
  messageDesc(file_dxos_type, 7);

/**
 *
 * Registered as `type.service.bot-factory`.
 *
 *
 * @generated from message dxos.type.BotFactory
 */
export type BotFactory = Message<"dxos.type.BotFactory"> & {
  /**
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.BotFactory.
 * Use `create(BotFactorySchema)` to create a new message.
 */
export const BotFactorySchema: GenMessage<BotFactory> = /*@__PURE__*/
  messageDesc(file_dxos_type, 8);

/**
 *
 * Registered as `type.service.signal`.
 *
 *
 * @generated from message dxos.type.Signal
 */
export type Signal = Message<"dxos.type.Signal"> & {
  /**
   * @generated from field: string bootstrap = 1;
   */
  bootstrap: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.Signal.
 * Use `create(SignalSchema)` to create a new message.
 */
export const SignalSchema: GenMessage<Signal> = /*@__PURE__*/
  messageDesc(file_dxos_type, 9);

/**
 *
 * Registered as `type.service.app-server`.
 *
 *
 * @generated from message dxos.type.AppServer
 */
export type AppServer = Message<"dxos.type.AppServer"> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: dxos.registry.Record.Extension extension = 100;
   */
  extension?: Record_Extension;
};

/**
 * Describes the message dxos.type.AppServer.
 * Use `create(AppServerSchema)` to create a new message.
 */
export const AppServerSchema: GenMessage<AppServer> = /*@__PURE__*/
  messageDesc(file_dxos_type, 10);

