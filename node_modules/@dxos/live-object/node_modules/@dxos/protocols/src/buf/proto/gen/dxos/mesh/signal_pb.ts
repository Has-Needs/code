//
// Copyright 2022 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/mesh/signal.proto (package dxos.mesh.signal, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_empty, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/mesh/signal.proto.
 */
export const file_dxos_mesh_signal: GenFile = /*@__PURE__*/
  fileDesc("ChZkeG9zL21lc2gvc2lnbmFsLnByb3RvEhBkeG9zLm1lc2guc2lnbmFsImcKC0pvaW5SZXF1ZXN0Eg0KBXN3YXJtGAEgASgMEgwKBHBlZXIYAiABKAwSLgoIbWV0YWRhdGEYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0SACIAQFCCwoJX21ldGFkYXRhIpABCgdNZXNzYWdlEg4KBmF1dGhvchgBIAEoDBIRCglyZWNpcGllbnQYAiABKAwSJQoHcGF5bG9hZBgDIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSLgoIbWV0YWRhdGEYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0SACIAQFCCwoJX21ldGFkYXRhIiAKEFJlY2VwdGlvblJlcXVlc3QSDAoEcGVlchgBIAEoDCL0AgoKU3dhcm1FdmVudBJECg5wZWVyX2F2YWlsYWJsZRgBIAEoCzIqLmR4b3MubWVzaC5zaWduYWwuU3dhcm1FdmVudC5QZWVyQXZhaWxhYmxlSAASOgoJcGVlcl9sZWZ0GAIgASgLMiUuZHhvcy5tZXNoLnNpZ25hbC5Td2FybUV2ZW50LlBlZXJMZWZ0SAAawAEKDVBlZXJBdmFpbGFibGUSDAoEcGVlchgBIAEoDBIpCgVzaW5jZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoFdW50aWwYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSACIAQESIgoVYW5ub3VuY2VfYmFja190b19ob3N0GAQgASgMSAGIAQFCCAoGX3VudGlsQhgKFl9hbm5vdW5jZV9iYWNrX3RvX2hvc3QaGAoIUGVlckxlZnQSDAoEcGVlchgBIAEoDEIHCgVldmVudCK6AQoJSG9zdEV2ZW50EkEKDWFubm91bmNlX2JhY2sYASABKAsyKC5keG9zLm1lc2guc2lnbmFsLkhvc3RFdmVudC5Bbm5vdW5jZUJhY2tIABphCgxBbm5vdW5jZUJhY2sSDQoFc3dhcm0YASABKAwSQgoOcGVlcl9hdmFpbGFibGUYAiABKAsyKi5keG9zLm1lc2guc2lnbmFsLlN3YXJtRXZlbnQuUGVlckF2YWlsYWJsZUIHCgVldmVudCJCCglQZWVyRXZlbnQSLAoHbWVzc2FnZRgBIAEoCzIZLmR4b3MubWVzaC5zaWduYWwuTWVzc2FnZUgAQgcKBWV2ZW50KmcKC1NpZ25hbFN0YXRlEg4KCkNPTk5FQ1RJTkcQABIQCgxSRUNPTk5FQ1RJTkcQARINCglDT05ORUNURUQQAhIQCgxESVNDT05ORUNURUQQAxIJCgVFUlJPUhAEEgoKBkNMT1NFRBAFMuUBCgZTaWduYWwSRQoESm9pbhIdLmR4b3MubWVzaC5zaWduYWwuSm9pblJlcXVlc3QaHC5keG9zLm1lc2guc2lnbmFsLlN3YXJtRXZlbnQwARJSCg9SZWNlaXZlTWVzc2FnZXMSIi5keG9zLm1lc2guc2lnbmFsLlJlY2VwdGlvblJlcXVlc3QaGS5keG9zLm1lc2guc2lnbmFsLk1lc3NhZ2UwARJACgtTZW5kTWVzc2FnZRIZLmR4b3MubWVzaC5zaWduYWwuTWVzc2FnZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUIxWi9naXRodWIuY29tL2R4b3MvZHhvcy9wcm90by9kZWYvZHhvcy9tZXNoL3NpZ25hbGIGcHJvdG8z", [file_google_protobuf_any, file_google_protobuf_empty, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.JoinRequest
 */
export type JoinRequest = Message$1<"dxos.mesh.signal.JoinRequest"> & {
  /**
   * @generated from field: bytes swarm = 1;
   */
  swarm: Uint8Array;

  /**
   * @generated from field: bytes peer = 2;
   */
  peer: Uint8Array;

  /**
   * @generated from field: optional google.protobuf.Struct metadata = 3;
   */
  metadata?: JsonObject;
};

/**
 * Describes the message dxos.mesh.signal.JoinRequest.
 * Use `create(JoinRequestSchema)` to create a new message.
 */
export const JoinRequestSchema: GenMessage<JoinRequest> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 0);

/**
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.Message
 */
export type Message = Message$1<"dxos.mesh.signal.Message"> & {
  /**
   * TODO(egor): Rename to `sender`.
   *
   * @generated from field: bytes author = 1;
   */
  author: Uint8Array;

  /**
   * @generated from field: bytes recipient = 2;
   */
  recipient: Uint8Array;

  /**
   * @generated from field: google.protobuf.Any payload = 3;
   */
  payload?: Any;

  /**
   * @generated from field: optional google.protobuf.Struct metadata = 4;
   */
  metadata?: JsonObject;
};

/**
 * Describes the message dxos.mesh.signal.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 1);

/**
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.ReceptionRequest
 */
export type ReceptionRequest = Message$1<"dxos.mesh.signal.ReceptionRequest"> & {
  /**
   * @generated from field: bytes peer = 1;
   */
  peer: Uint8Array;
};

/**
 * Describes the message dxos.mesh.signal.ReceptionRequest.
 * Use `create(ReceptionRequestSchema)` to create a new message.
 */
export const ReceptionRequestSchema: GenMessage<ReceptionRequest> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 2);

/**
 * / Goes on Pub/Sub swarm topic and as a Join stream in RPC.
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.SwarmEvent
 */
export type SwarmEvent = Message$1<"dxos.mesh.signal.SwarmEvent"> & {
  /**
   * @generated from oneof dxos.mesh.signal.SwarmEvent.event
   */
  event: {
    /**
     * / The peer was announced as available on the swarm.
     *
     * @generated from field: dxos.mesh.signal.SwarmEvent.PeerAvailable peer_available = 1;
     */
    value: SwarmEvent_PeerAvailable;
    case: "peerAvailable";
  } | {
    /**
     * / The peer left, or their announcement timed out.
     *
     * @generated from field: dxos.mesh.signal.SwarmEvent.PeerLeft peer_left = 2;
     */
    value: SwarmEvent_PeerLeft;
    case: "peerLeft";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.mesh.signal.SwarmEvent.
 * Use `create(SwarmEventSchema)` to create a new message.
 */
export const SwarmEventSchema: GenMessage<SwarmEvent> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 3);

/**
 * Announce peer available on swarm.
 *
 * @generated from message dxos.mesh.signal.SwarmEvent.PeerAvailable
 */
export type SwarmEvent_PeerAvailable = Message$1<"dxos.mesh.signal.SwarmEvent.PeerAvailable"> & {
  /**
   * @generated from field: bytes peer = 1;
   */
  peer: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp since = 2;
   */
  since?: Timestamp;

  /**
   * When, if at all (handle the default value as not), this availability would expires were it not re-announced, like
   * periodically in Pub/Sub with some margin such that Pub/Sub network partitions lead to offline statuses.
   *
   * @generated from field: optional google.protobuf.Timestamp until = 3;
   */
  until?: Timestamp;

  /**
   * / Only relevant in Pub/Sub. Optional, the host topic to eagerly send PeerAvailable messages back to.
   *
   * @generated from field: optional bytes announce_back_to_host = 4;
   */
  announceBackToHost?: Uint8Array;
};

/**
 * Describes the message dxos.mesh.signal.SwarmEvent.PeerAvailable.
 * Use `create(SwarmEvent_PeerAvailableSchema)` to create a new message.
 */
export const SwarmEvent_PeerAvailableSchema: GenMessage<SwarmEvent_PeerAvailable> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 3, 0);

/**
 * @generated from message dxos.mesh.signal.SwarmEvent.PeerLeft
 */
export type SwarmEvent_PeerLeft = Message$1<"dxos.mesh.signal.SwarmEvent.PeerLeft"> & {
  /**
   * @generated from field: bytes peer = 1;
   */
  peer: Uint8Array;
};

/**
 * Describes the message dxos.mesh.signal.SwarmEvent.PeerLeft.
 * Use `create(SwarmEvent_PeerLeftSchema)` to create a new message.
 */
export const SwarmEvent_PeerLeftSchema: GenMessage<SwarmEvent_PeerLeft> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 3, 1);

/**
 * / Goes on a Pub/Sub host topic.
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.HostEvent
 */
export type HostEvent = Message$1<"dxos.mesh.signal.HostEvent"> & {
  /**
   * @generated from oneof dxos.mesh.signal.HostEvent.event
   */
  event: {
    /**
     * @generated from field: dxos.mesh.signal.HostEvent.AnnounceBack announce_back = 1;
     */
    value: HostEvent_AnnounceBack;
    case: "announceBack";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.mesh.signal.HostEvent.
 * Use `create(HostEventSchema)` to create a new message.
 */
export const HostEventSchema: GenMessage<HostEvent> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 4);

/**
 * @generated from message dxos.mesh.signal.HostEvent.AnnounceBack
 */
export type HostEvent_AnnounceBack = Message$1<"dxos.mesh.signal.HostEvent.AnnounceBack"> & {
  /**
   * @generated from field: bytes swarm = 1;
   */
  swarm: Uint8Array;

  /**
   * @generated from field: dxos.mesh.signal.SwarmEvent.PeerAvailable peer_available = 2;
   */
  peerAvailable?: SwarmEvent_PeerAvailable;
};

/**
 * Describes the message dxos.mesh.signal.HostEvent.AnnounceBack.
 * Use `create(HostEvent_AnnounceBackSchema)` to create a new message.
 */
export const HostEvent_AnnounceBackSchema: GenMessage<HostEvent_AnnounceBack> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 4, 0);

/**
 * / Goes on Pub/Sub peer topic.
 * / @deprecated
 *
 * @generated from message dxos.mesh.signal.PeerEvent
 */
export type PeerEvent = Message$1<"dxos.mesh.signal.PeerEvent"> & {
  /**
   * @generated from oneof dxos.mesh.signal.PeerEvent.event
   */
  event: {
    /**
     * @generated from field: dxos.mesh.signal.Message message = 1;
     */
    value: Message;
    case: "message";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.mesh.signal.PeerEvent.
 * Use `create(PeerEventSchema)` to create a new message.
 */
export const PeerEventSchema: GenMessage<PeerEvent> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_signal, 5);

/**
 * / @deprecated
 *
 * @generated from enum dxos.mesh.signal.SignalState
 */
export enum SignalState {
  /**
   * / Connection is being established.
   *
   * @generated from enum value: CONNECTING = 0;
   */
  CONNECTING = 0,

  /**
   * / Connection is being re-established.
   *
   * @generated from enum value: RECONNECTING = 1;
   */
  RECONNECTING = 1,

  /**
   * / Connected.
   *
   * @generated from enum value: CONNECTED = 2;
   */
  CONNECTED = 2,

  /**
   * / Server terminated the connection. Socket will be reconnected.
   *
   * @generated from enum value: DISCONNECTED = 3;
   */
  DISCONNECTED = 3,

  /**
   * / Server terminated the connection with an ERROR. Socket will be reconnected.
   *
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,

  /**
   * / Socket was closed.
   *
   * @generated from enum value: CLOSED = 5;
   */
  CLOSED = 5,
}

/**
 * Describes the enum dxos.mesh.signal.SignalState.
 */
export const SignalStateSchema: GenEnum<SignalState> = /*@__PURE__*/
  enumDesc(file_dxos_mesh_signal, 0);

/**
 * TOOD(burdon): Rename.
 * / @deprecated
 *
 * @generated from service dxos.mesh.signal.Signal
 */
export const Signal: GenService<{
  /**
   * @generated from rpc dxos.mesh.signal.Signal.Join
   */
  join: {
    methodKind: "server_streaming";
    input: typeof JoinRequestSchema;
    output: typeof SwarmEventSchema;
  },
  /**
   * @generated from rpc dxos.mesh.signal.Signal.ReceiveMessages
   */
  receiveMessages: {
    methodKind: "server_streaming";
    input: typeof ReceptionRequestSchema;
    output: typeof MessageSchema;
  },
  /**
   * @generated from rpc dxos.mesh.signal.Signal.SendMessage
   */
  sendMessage: {
    methodKind: "unary";
    input: typeof MessageSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_dxos_mesh_signal, 0);

