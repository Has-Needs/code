//
// Copyright 2021 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/client/invitation.proto (package dxos.client.services, syntax proto3)
/* eslint-disable */

// TODO(burdon): Reorganize packages (e.g., client.services, echo.database).

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_empty, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_dxos_config } from "../config_pb.js";
import { file_dxos_devtools_swarm } from "../devtools/swarm_pb.js";
import { file_dxos_echo_timeframe } from "../echo/timeframe_pb.js";
import { file_dxos_error } from "../error_pb.js";
import type { SpaceMember_Role } from "../halo/credentials_pb.js";
import { file_dxos_halo_credentials } from "../halo/credentials_pb.js";
import type { PrivateKey, PublicKey } from "../keys_pb.js";
import { file_dxos_keys } from "../keys_pb.js";
import { file_dxos_mesh_signal } from "../mesh/signal_pb.js";
import { file_dxos_mesh_presence } from "../mesh/presence_pb.js";
import { file_dxos_mesh_teleport_gossip } from "../mesh/teleport/gossip_pb.js";
import { file_dxos_value } from "../value_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/client/invitation.proto.
 */
export const file_dxos_client_invitation: GenFile = /*@__PURE__*/
  fileDesc("ChxkeG9zL2NsaWVudC9pbnZpdGF0aW9uLnByb3RvEhRkeG9zLmNsaWVudC5zZXJ2aWNlcyJ9ChBBZG1pc3Npb25LZXlwYWlyEigKCnB1YmxpY19rZXkYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5Ei8KC3ByaXZhdGVfa2V5GAIgASgLMhUuZHhvcy5rZXlzLlByaXZhdGVLZXlIAIgBAUIOCgxfcHJpdmF0ZV9rZXkimgoKCkludml0YXRpb24SFQoNaW52aXRhdGlvbl9pZBgBIAEoCRIzCgR0eXBlGAIgASgOMiUuZHhvcy5jbGllbnQuc2VydmljZXMuSW52aXRhdGlvbi5UeXBlEjMKBGtpbmQYAyABKA4yJS5keG9zLmNsaWVudC5zZXJ2aWNlcy5JbnZpdGF0aW9uLktpbmQSQAoLYXV0aF9tZXRob2QYBCABKA4yKy5keG9zLmNsaWVudC5zZXJ2aWNlcy5JbnZpdGF0aW9uLkF1dGhNZXRob2QSJwoJc3dhcm1fa2V5GAUgASgLMhQuZHhvcy5rZXlzLlB1YmxpY0tleRI1CgVzdGF0ZRgGIAEoDjImLmR4b3MuY2xpZW50LnNlcnZpY2VzLkludml0YXRpb24uU3RhdGUSFAoHdGltZW91dBgHIAEoBUgAiAEBEi8KDGlkZW50aXR5X2tleRgIIAEoCzIULmR4b3Mua2V5cy5QdWJsaWNLZXlIAYgBARIsCglzcGFjZV9rZXkYCSABKAsyFC5keG9zLmtleXMuUHVibGljS2V5SAKIAQESFgoJYXV0aF9jb2RlGAogASgJSAOIAQESEwoGdGFyZ2V0GAsgASgJSASIAQESFwoKcGVyc2lzdGVudBgMIAEoCEgFiAEBEjAKB2NyZWF0ZWQYDSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAaIAQESFQoIbGlmZXRpbWUYDiABKAVIB4gBARIWCgltdWx0aV91c2UYDyABKAhICIgBARJCCg1ndWVzdF9rZXlwYWlyGBAgASgLMiYuZHhvcy5jbGllbnQuc2VydmljZXMuQWRtaXNzaW9uS2V5cGFpckgJiAEBEjsKGGRlbGVnYXRpb25fY3JlZGVudGlhbF9pZBgRIAEoCzIULmR4b3Mua2V5cy5QdWJsaWNLZXlICogBARI6CgRyb2xlGBIgASgOMicuZHhvcy5oYWxvLmNyZWRlbnRpYWxzLlNwYWNlTWVtYmVyLlJvbGVIC4gBARIVCghzcGFjZV9pZBgTIAEoCUgMiAEBIjQKBFR5cGUSDwoLSU5URVJBQ1RJVkUQABINCglERUxFR0FURUQQARIMCghNVUxUSVVTRRACIh0KBEtpbmQSCgoGREVWSUNFEAASCQoFU1BBQ0UQASI/CgpBdXRoTWV0aG9kEggKBE5PTkUQABIRCg1TSEFSRURfU0VDUkVUEAESFAoQS05PV05fUFVCTElDX0tFWRACIqMBCgVTdGF0ZRIICgRJTklUEAASDgoKQ09OTkVDVElORxABEg0KCUNPTk5FQ1RFRBACEhwKGFJFQURZX0ZPUl9BVVRIRU5USUNBVElPThADEhIKDkFVVEhFTlRJQ0FUSU5HEAQSCwoHU1VDQ0VTUxAFEg0KCUNBTkNFTExFRBAGEgsKB1RJTUVPVVQQBxIJCgVFUlJPUhAIEgsKB0VYUElSRUQQCUIKCghfdGltZW91dEIPCg1faWRlbnRpdHlfa2V5QgwKCl9zcGFjZV9rZXlCDAoKX2F1dGhfY29kZUIJCgdfdGFyZ2V0Qg0KC19wZXJzaXN0ZW50QgoKCF9jcmVhdGVkQgsKCV9saWZldGltZUIMCgpfbXVsdGlfdXNlQhAKDl9ndWVzdF9rZXlwYWlyQhsKGV9kZWxlZ2F0aW9uX2NyZWRlbnRpYWxfaWRCBwoFX3JvbGVCCwoJX3NwYWNlX2lkKsEBCgpTcGFjZVN0YXRlEgsKB0lOVkFMSUQQABISCg5TUEFDRV9JTkFDVElWRRACEhAKDFNQQUNFX0FDVElWRRAGEhAKDFNQQUNFX0NMT1NFRBABEhYKElNQQUNFX0NPTlRST0xfT05MWRAHEhYKElNQQUNFX0lOSVRJQUxJWklORxAEEg8KC1NQQUNFX1JFQURZEAMSDwoLU1BBQ0VfRVJST1IQBRIcChhTUEFDRV9SRVFVSVJFU19NSUdSQVRJT04QCGIGcHJvdG8z", [file_google_protobuf_any, file_google_protobuf_empty, file_google_protobuf_struct, file_google_protobuf_timestamp, file_dxos_config, file_dxos_devtools_swarm, file_dxos_echo_timeframe, file_dxos_error, file_dxos_halo_credentials, file_dxos_keys, file_dxos_mesh_signal, file_dxos_mesh_presence, file_dxos_mesh_teleport_gossip, file_dxos_value]);

/**
 * @generated from message dxos.client.services.AdmissionKeypair
 */
export type AdmissionKeypair = Message<"dxos.client.services.AdmissionKeypair"> & {
  /**
   * @generated from field: dxos.keys.PublicKey public_key = 1;
   */
  publicKey?: PublicKey;

  /**
   * @generated from field: optional dxos.keys.PrivateKey private_key = 2;
   */
  privateKey?: PrivateKey;
};

/**
 * Describes the message dxos.client.services.AdmissionKeypair.
 * Use `create(AdmissionKeypairSchema)` to create a new message.
 */
export const AdmissionKeypairSchema: GenMessage<AdmissionKeypair> = /*@__PURE__*/
  messageDesc(file_dxos_client_invitation, 0);

/**
 * *
 * Represents the invitation state passed between client and service.
 *
 * @generated from message dxos.client.services.Invitation
 */
export type Invitation = Message<"dxos.client.services.Invitation"> & {
  /**
   * / Local identifier (random).
   *
   * @generated from field: string invitation_id = 1;
   */
  invitationId: string;

  /**
   * / Determines the behavior of the invitation.
   *
   * @generated from field: dxos.client.services.Invitation.Type type = 2;
   */
  type: Invitation_Type;

  /**
   * / Kind of access the invitation will grant.
   *
   * @generated from field: dxos.client.services.Invitation.Kind kind = 3;
   */
  kind: Invitation_Kind;

  /**
   * / How the invitation is authenticated.
   *
   * @generated from field: dxos.client.services.Invitation.AuthMethod auth_method = 4;
   */
  authMethod: Invitation_AuthMethod;

  /**
   * / Swarm rendezvous (random).
   *
   * @generated from field: dxos.keys.PublicKey swarm_key = 5;
   */
  swarmKey?: PublicKey;

  /**
   * / Local state.
   *
   * @generated from field: dxos.client.services.Invitation.State state = 6;
   */
  state: Invitation_State;

  /**
   * / Timeout for guest to complete invitation once connected (ms).
   *
   * @generated from field: optional int32 timeout = 7;
   */
  timeout?: number;

  /**
   * / Guest's identity.
   *
   * @generated from field: optional dxos.keys.PublicKey identity_key = 8;
   */
  identityKey?: PublicKey;

  /**
   * / Space to join (only present if kind is SPACE).
   *
   * @generated from field: optional dxos.keys.PublicKey space_key = 9;
   */
  spaceKey?: PublicKey;

  /**
   * / Authentication code created by host (only present if auth_method is SHARED_SECRET).
   *
   * @generated from field: optional string auth_code = 10;
   */
  authCode?: string;

  /**
   * / Path or identifier to navigate to after successful authentication.
   *
   * @generated from field: optional string target = 11;
   */
  target?: string;

  /**
   * TODO(nf): should these exist elsewhere since they only have meaning to the host?
   * / Host should resume invitation on startup until timeout.
   *
   * @generated from field: optional bool persistent = 12;
   */
  persistent?: boolean;

  /**
   * @generated from field: optional google.protobuf.Timestamp created = 13;
   */
  created?: Timestamp;

  /**
   * / Number of seconds the host will honor the invitation. 0 means the invitation persists forever.
   * TODO(nf): some feedback mechanism or GC for immortal invitations?
   * TODO(nf): should the creator have a way to make an invitation last as long as the client? this was the previous behavior.
   *
   * @generated from field: optional int32 lifetime = 14;
   */
  lifetime?: number;

  /**
   * / Whether an invitation can be used multiple times.
   *
   * @generated from field: optional bool multi_use = 15;
   */
  multiUse?: boolean;

  /**
   * / Guest's keypair required for AuthMethod.KNOWN_PUBLIC_KEY.
   *
   * @generated from field: optional dxos.client.services.AdmissionKeypair guest_keypair = 16;
   */
  guestKeypair?: AdmissionKeypair;

  /**
   * / Present on Type.DELEGATED invitations.
   *
   * @generated from field: optional dxos.keys.PublicKey delegation_credential_id = 17;
   */
  delegationCredentialId?: PublicKey;

  /**
   * / Role of the admitted member, defaults to ADMIN.
   *
   * @generated from field: optional dxos.halo.credentials.SpaceMember.Role role = 18;
   */
  role?: SpaceMember_Role;

  /**
   * / Id of a the space to join (only present if kind is SPACE).
   *
   * @generated from field: optional string space_id = 19;
   */
  spaceId?: string;
};

/**
 * Describes the message dxos.client.services.Invitation.
 * Use `create(InvitationSchema)` to create a new message.
 */
export const InvitationSchema: GenMessage<Invitation> = /*@__PURE__*/
  messageDesc(file_dxos_client_invitation, 1);

/**
 * @generated from enum dxos.client.services.Invitation.Type
 */
export enum Invitation_Type {
  /**
   * / Requires both to be online to complete key exchange.
   *
   * @generated from enum value: INTERACTIVE = 0;
   */
  INTERACTIVE = 0,

  /**
   * / Invitation can be accepted by any valid peer.
   *
   * @generated from enum value: DELEGATED = 1;
   */
  DELEGATED = 1,

  /**
   * *
   * Multi-use interactive invitations.
   * @deprecated use multiUse flag with type=interactive instead.
   *
   * @generated from enum value: MULTIUSE = 2;
   */
  MULTIUSE = 2,
}

/**
 * Describes the enum dxos.client.services.Invitation.Type.
 */
export const Invitation_TypeSchema: GenEnum<Invitation_Type> = /*@__PURE__*/
  enumDesc(file_dxos_client_invitation, 1, 0);

/**
 * @generated from enum dxos.client.services.Invitation.Kind
 */
export enum Invitation_Kind {
  /**
   * @generated from enum value: DEVICE = 0;
   */
  DEVICE = 0,

  /**
   * @generated from enum value: SPACE = 1;
   */
  SPACE = 1,
}

/**
 * Describes the enum dxos.client.services.Invitation.Kind.
 */
export const Invitation_KindSchema: GenEnum<Invitation_Kind> = /*@__PURE__*/
  enumDesc(file_dxos_client_invitation, 1, 1);

/**
 * @generated from enum dxos.client.services.Invitation.AuthMethod
 */
export enum Invitation_AuthMethod {
  /**
   * / No authentication is required. Guest should not call `Authenticate`.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * / Guest should call `Authenticate` with the shared secret.
   *
   * @generated from enum value: SHARED_SECRET = 1;
   */
  SHARED_SECRET = 1,

  /**
   * / Guest should prove they possess a private key corresponding to the known public key recorded in an invitation.
   *
   * @generated from enum value: KNOWN_PUBLIC_KEY = 2;
   */
  KNOWN_PUBLIC_KEY = 2,
}

/**
 * Describes the enum dxos.client.services.Invitation.AuthMethod.
 */
export const Invitation_AuthMethodSchema: GenEnum<Invitation_AuthMethod> = /*@__PURE__*/
  enumDesc(file_dxos_client_invitation, 1, 2);

/**
 * @generated from enum dxos.client.services.Invitation.State
 */
export enum Invitation_State {
  /**
   * @generated from enum value: INIT = 0;
   */
  INIT = 0,

  /**
   * @generated from enum value: CONNECTING = 1;
   */
  CONNECTING = 1,

  /**
   * @generated from enum value: CONNECTED = 2;
   */
  CONNECTED = 2,

  /**
   * @generated from enum value: READY_FOR_AUTHENTICATION = 3;
   */
  READY_FOR_AUTHENTICATION = 3,

  /**
   * @generated from enum value: AUTHENTICATING = 4;
   */
  AUTHENTICATING = 4,

  /**
   * @generated from enum value: SUCCESS = 5;
   */
  SUCCESS = 5,

  /**
   * @generated from enum value: CANCELLED = 6;
   */
  CANCELLED = 6,

  /**
   * @generated from enum value: TIMEOUT = 7;
   */
  TIMEOUT = 7,

  /**
   * @generated from enum value: ERROR = 8;
   */
  ERROR = 8,

  /**
   * @generated from enum value: EXPIRED = 9;
   */
  EXPIRED = 9,
}

/**
 * Describes the enum dxos.client.services.Invitation.State.
 */
export const Invitation_StateSchema: GenEnum<Invitation_State> = /*@__PURE__*/
  enumDesc(file_dxos_client_invitation, 1, 3);

/**
 * / Runtime state of the space object.
 *
 * @generated from enum dxos.client.services.SpaceState
 */
export enum SpaceState {
  /**
   * @generated from enum value: INVALID = 0;
   */
  INVALID = 0,

  /**
   * / Space is inactive. No swarming or replication will be done.
   *
   * @generated from enum value: SPACE_INACTIVE = 2;
   */
  SPACE_INACTIVE = 2,

  /**
   * / Space is active. Swarming and replication will be done.
   *
   * @generated from enum value: SPACE_ACTIVE = 6;
   */
  SPACE_ACTIVE = 6,

  /**
   * / Space is closed.
   *
   * @generated from enum value: SPACE_CLOSED = 1;
   */
  SPACE_CLOSED = 1,

  /**
   * / Data pipeline is inactive.
   *
   * @generated from enum value: SPACE_CONTROL_ONLY = 7;
   */
  SPACE_CONTROL_ONLY = 7,

  /**
   * / Data pipeline is initializing.
   *
   * @generated from enum value: SPACE_INITIALIZING = 4;
   */
  SPACE_INITIALIZING = 4,

  /**
   * / Data pipeline is ready.
   *
   * @generated from enum value: SPACE_READY = 3;
   */
  SPACE_READY = 3,

  /**
   * / Space errored.
   *
   * @generated from enum value: SPACE_ERROR = 5;
   */
  SPACE_ERROR = 5,

  /**
   * / Data migration is required.
   *
   * @generated from enum value: SPACE_REQUIRES_MIGRATION = 8;
   */
  SPACE_REQUIRES_MIGRATION = 8,
}

/**
 * Describes the enum dxos.client.services.SpaceState.
 */
export const SpaceStateSchema: GenEnum<SpaceState> = /*@__PURE__*/
  enumDesc(file_dxos_client_invitation, 0);

