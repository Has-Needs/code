import substitutions from "../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/filter.proto}
 */
export interface QueryOptions {
    /**
     * Query only in specific spaces.
     */
    spaceIds?: string[];
    /**
     * Controls how deleted items are filtered.
     *
     * Options:
     *   - proto3_optional = true
     */
    deleted?: QueryOptions.ShowDeletedOption;
    /**
     * Query only local spaces, or remote on agent.
     * @default `QueryOptions.DataLocation.LOCAL`
     *
     * Options:
     *   - proto3_optional = true
     */
    dataLocation?: QueryOptions.DataLocation;
    /**
     * References to inline when querying.
     *
     * Options:
     *   - proto3_optional = true
     */
    include?: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
    /**
     * Return only first `limit` results.
     *
     * Options:
     *   - proto3_optional = true
     */
    limit?: number;
    /**
     * Query only in specific spaces.
     * @deprecated Use `spaceIds` instead.
     */
    spaces?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>[];
    /**
     * Filter by model.
     * @default * Only DocumentModel.
     * To querty all models, use `models: ["*"]`.
     * @deprecated
     */
    models?: string[];
}
export declare namespace QueryOptions {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/echo/filter.proto}
     */
    enum ShowDeletedOption {
        HIDE_DELETED = 0,
        SHOW_DELETED = 1,
        SHOW_DELETED_ONLY = 2
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/echo/filter.proto}
     */
    enum DataLocation {
        ALL = 0,
        LOCAL = 1,
        REMOTE = 2
    }
}
/**
 * Protocol for ephemeral Filter serialization.
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/filter.proto}
 */
export interface Filter {
    /**
     * Options:
     *   - proto3_optional = true
     */
    properties?: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
    type?: string[];
    objectIds?: string[];
    /**
     * Options:
     *   - proto3_optional = true
     */
    text?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    not?: boolean;
    and?: Filter[];
    or?: Filter[];
    /**
     * Options:
     *   - proto3_optional = true
     */
    options?: QueryOptions;
}
//# sourceMappingURL=filter.d.ts.map