"use strict";
//
// Copyright 2025 DXOS.org
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRetryableHttpFailure = exports.EdgeAuthChallengeError = exports.EdgeCallFailedError = void 0;
class EdgeCallFailedError extends Error {
    static fromProcessingFailureCause(cause) {
        return new EdgeCallFailedError({
            reason: 'Error processing request.',
            isRetryable: true,
            cause,
        });
    }
    static fromHttpFailure(response) {
        return new EdgeCallFailedError({
            reason: `HTTP code ${response.status}: ${response.statusText}.`,
            isRetryable: isRetryableCode(response.status),
            retryAfterMs: getRetryAfterMillis(response),
        });
    }
    static fromUnsuccessfulResponse(response, body) {
        return new EdgeCallFailedError({
            reason: body.reason,
            errorData: body.errorData,
            isRetryable: body.errorData == null && response.headers.has('Retry-After'),
            retryAfterMs: getRetryAfterMillis(response),
        });
    }
    constructor(args) {
        super(args.reason, { cause: args.cause });
        this.reason = args.reason;
        this.errorData = args.errorData;
        this.retryAfterMs = args.retryAfterMs;
        this.isRetryable = Boolean(args.isRetryable);
    }
}
exports.EdgeCallFailedError = EdgeCallFailedError;
class EdgeAuthChallengeError extends EdgeCallFailedError {
    constructor(challenge, errorData) {
        super({ reason: 'Auth challenge.', errorData, isRetryable: false });
        this.challenge = challenge;
    }
}
exports.EdgeAuthChallengeError = EdgeAuthChallengeError;
const getRetryAfterMillis = (response) => {
    const retryAfter = Number(response.headers.get('Retry-After'));
    return Number.isNaN(retryAfter) || retryAfter === 0 ? undefined : retryAfter * 1000;
};
const createRetryableHttpFailure = (args) => {
    return new Response(JSON.stringify({ success: false, reason: args.reason }), {
        headers: { 'Retry-After': String(args.retryAfterSeconds) },
    });
};
exports.createRetryableHttpFailure = createRetryableHttpFailure;
const isRetryableCode = (status) => {
    if (status === 501) {
        // Not Implemented
        return false;
    }
    return !(status >= 400 && status < 500);
};
//# sourceMappingURL=edge-error.js.map