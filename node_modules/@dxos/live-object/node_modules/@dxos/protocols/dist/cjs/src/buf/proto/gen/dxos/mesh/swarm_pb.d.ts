import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { PublicKey } from "../keys_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/mesh/swarm.proto.
 */
export declare const file_dxos_mesh_swarm: GenFile;
/**
 * *
 * Use for:
 * - Initial peer discovery (initiate session id between two peers).
 * - RTC negotiation (SDP offer/answer and ICE).
 *
 * @generated from message dxos.mesh.swarm.SwarmMessage
 */
export type SwarmMessage = Message<"dxos.mesh.swarm.SwarmMessage"> & {
    /**
     * / Swarm identifier.
     *
     * @generated from field: dxos.keys.PublicKey topic = 3;
     */
    topic?: PublicKey;
    /**
     * / Unique connection identifier.
     *
     * @generated from field: dxos.keys.PublicKey session_id = 4;
     */
    sessionId?: PublicKey;
    /**
     * / Message payload.
     *
     * @generated from field: dxos.mesh.swarm.MessageData data = 5;
     */
    data?: MessageData;
    /**
     * / Unique message identifier. Used for ACK and matching Answers to Offers.
     *
     * @generated from field: dxos.keys.PublicKey message_id = 6;
     */
    messageId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.swarm.SwarmMessage.
 * Use `create(SwarmMessageSchema)` to create a new message.
 */
export declare const SwarmMessageSchema: GenMessage<SwarmMessage>;
/**
 * @generated from message dxos.mesh.swarm.MessageData
 */
export type MessageData = Message<"dxos.mesh.swarm.MessageData"> & {
    /**
     * @generated from oneof dxos.mesh.swarm.MessageData.payload
     */
    payload: {
        /**
         * @generated from field: dxos.mesh.swarm.Offer offer = 1;
         */
        value: Offer;
        case: "offer";
    } | {
        /**
         * @generated from field: dxos.mesh.swarm.Answer answer = 2;
         */
        value: Answer;
        case: "answer";
    } | {
        /**
         * *
         * @deprecated Use SignalBatch instead.
         *
         * @generated from field: dxos.mesh.swarm.Signal signal = 3;
         */
        value: Signal;
        case: "signal";
    } | {
        /**
         * @generated from field: dxos.mesh.swarm.SignalBatch signal_batch = 4;
         */
        value: SignalBatch;
        case: "signalBatch";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message dxos.mesh.swarm.MessageData.
 * Use `create(MessageDataSchema)` to create a new message.
 */
export declare const MessageDataSchema: GenMessage<MessageData>;
/**
 * @generated from message dxos.mesh.swarm.Offer
 */
export type Offer = Message<"dxos.mesh.swarm.Offer"> & {};
/**
 * Describes the message dxos.mesh.swarm.Offer.
 * Use `create(OfferSchema)` to create a new message.
 */
export declare const OfferSchema: GenMessage<Offer>;
/**
 * @generated from message dxos.mesh.swarm.Answer
 */
export type Answer = Message<"dxos.mesh.swarm.Answer"> & {
    /**
     * @generated from field: bool accept = 1;
     */
    accept: boolean;
    /**
     * / MessageId of the Offer being answered.
     *
     * @generated from field: optional dxos.keys.PublicKey offer_message_id = 2;
     */
    offerMessageId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.swarm.Answer.
 * Use `create(AnswerSchema)` to create a new message.
 */
export declare const AnswerSchema: GenMessage<Answer>;
/**
 * @generated from message dxos.mesh.swarm.Signal
 */
export type Signal = Message<"dxos.mesh.swarm.Signal"> & {
    /**
     * @generated from field: google.protobuf.Struct payload = 1;
     */
    payload?: JsonObject;
};
/**
 * Describes the message dxos.mesh.swarm.Signal.
 * Use `create(SignalSchema)` to create a new message.
 */
export declare const SignalSchema: GenMessage<Signal>;
/**
 * @generated from message dxos.mesh.swarm.SignalBatch
 */
export type SignalBatch = Message<"dxos.mesh.swarm.SignalBatch"> & {
    /**
     * @generated from field: repeated dxos.mesh.swarm.Signal signals = 1;
     */
    signals: Signal[];
};
/**
 * Describes the message dxos.mesh.swarm.SignalBatch.
 * Use `create(SignalBatchSchema)` to create a new message.
 */
export declare const SignalBatchSchema: GenMessage<SignalBatch>;
//# sourceMappingURL=swarm_pb.d.ts.map