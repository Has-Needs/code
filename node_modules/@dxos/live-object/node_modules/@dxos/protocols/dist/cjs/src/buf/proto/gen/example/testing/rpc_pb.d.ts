import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Any, EmptySchema } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file example/testing/rpc.proto.
 */
export declare const file_example_testing_rpc: GenFile;
/**
 * @generated from message example.testing.rpc.TestRpcRequest
 */
export type TestRpcRequest = Message<"example.testing.rpc.TestRpcRequest"> & {
    /**
     * @generated from field: string data = 1;
     */
    data: string;
};
/**
 * Describes the message example.testing.rpc.TestRpcRequest.
 * Use `create(TestRpcRequestSchema)` to create a new message.
 */
export declare const TestRpcRequestSchema: GenMessage<TestRpcRequest>;
/**
 * @generated from message example.testing.rpc.TestRpcResponse
 */
export type TestRpcResponse = Message<"example.testing.rpc.TestRpcResponse"> & {
    /**
     * @generated from field: string data = 1;
     */
    data: string;
};
/**
 * Describes the message example.testing.rpc.TestRpcResponse.
 * Use `create(TestRpcResponseSchema)` to create a new message.
 */
export declare const TestRpcResponseSchema: GenMessage<TestRpcResponse>;
/**
 * @generated from message example.testing.rpc.TestStreamRpcRequest
 */
export type TestStreamRpcRequest = Message<"example.testing.rpc.TestStreamRpcRequest"> & {
    /**
     * @generated from field: string data = 1;
     */
    data: string;
    /**
     * @generated from field: uint32 streamLoadInterval = 2;
     */
    streamLoadInterval: number;
    /**
     * @generated from field: uint32 streamLoadChunkSize = 3;
     */
    streamLoadChunkSize: number;
};
/**
 * Describes the message example.testing.rpc.TestStreamRpcRequest.
 * Use `create(TestStreamRpcRequestSchema)` to create a new message.
 */
export declare const TestStreamRpcRequestSchema: GenMessage<TestStreamRpcRequest>;
/**
 * @generated from message example.testing.rpc.TestStreamRpcResponse
 */
export type TestStreamRpcResponse = Message<"example.testing.rpc.TestStreamRpcResponse"> & {
    /**
     * @generated from field: string data = 1;
     */
    data: string;
    /**
     * @generated from field: uint32 bytesSent = 2;
     */
    bytesSent: number;
    /**
     * @generated from field: uint32 bytesReceived = 3;
     */
    bytesReceived: number;
    /**
     * @generated from field: uint32 sendErrors = 4;
     */
    sendErrors: number;
    /**
     * @generated from field: uint32 receiveErrors = 5;
     */
    receiveErrors: number;
    /**
     * @generated from field: uint32 runningTime = 6;
     */
    runningTime: number;
};
/**
 * Describes the message example.testing.rpc.TestStreamRpcResponse.
 * Use `create(TestStreamRpcResponseSchema)` to create a new message.
 */
export declare const TestStreamRpcResponseSchema: GenMessage<TestStreamRpcResponse>;
/**
 * @generated from message example.testing.rpc.PingRequest
 */
export type PingRequest = Message<"example.testing.rpc.PingRequest"> & {
    /**
     * @generated from field: int32 nonce = 1;
     */
    nonce: number;
};
/**
 * Describes the message example.testing.rpc.PingRequest.
 * Use `create(PingRequestSchema)` to create a new message.
 */
export declare const PingRequestSchema: GenMessage<PingRequest>;
/**
 * @generated from message example.testing.rpc.PingReponse
 */
export type PingReponse = Message<"example.testing.rpc.PingReponse"> & {
    /**
     * @generated from field: int32 nonce = 1;
     */
    nonce: number;
};
/**
 * Describes the message example.testing.rpc.PingReponse.
 * Use `create(PingReponseSchema)` to create a new message.
 */
export declare const PingReponseSchema: GenMessage<PingReponse>;
/**
 * @generated from message example.testing.rpc.MessageWithAny
 */
export type MessageWithAny = Message<"example.testing.rpc.MessageWithAny"> & {
    /**
     * @generated from field: google.protobuf.Any payload = 1;
     */
    payload?: Any;
};
/**
 * Describes the message example.testing.rpc.MessageWithAny.
 * Use `create(MessageWithAnySchema)` to create a new message.
 */
export declare const MessageWithAnySchema: GenMessage<MessageWithAny>;
/**
 * @generated from service example.testing.rpc.TestService
 */
export declare const TestService: GenService<{
    /**
     * @generated from rpc example.testing.rpc.TestService.TestCall
     */
    testCall: {
        methodKind: "unary";
        input: typeof TestRpcRequestSchema;
        output: typeof TestRpcResponseSchema;
    };
    /**
     * @generated from rpc example.testing.rpc.TestService.VoidCall
     */
    voidCall: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof EmptySchema;
    };
}>;
/**
 * @generated from service example.testing.rpc.TestStreamService
 */
export declare const TestStreamService: GenService<{
    /**
     * @generated from rpc example.testing.rpc.TestStreamService.TestCall
     */
    testCall: {
        methodKind: "server_streaming";
        input: typeof TestRpcRequestSchema;
        output: typeof TestRpcResponseSchema;
    };
}>;
/**
 * @generated from service example.testing.rpc.TestServiceWithStreams
 */
export declare const TestServiceWithStreams: GenService<{
    /**
     * @generated from rpc example.testing.rpc.TestServiceWithStreams.RequestTestStream
     */
    requestTestStream: {
        methodKind: "unary";
        input: typeof TestStreamRpcRequestSchema;
        output: typeof TestRpcResponseSchema;
    };
    /**
     * @generated from rpc example.testing.rpc.TestServiceWithStreams.CloseTestStream
     */
    closeTestStream: {
        methodKind: "unary";
        input: typeof TestRpcRequestSchema;
        output: typeof TestStreamRpcResponseSchema;
    };
}>;
/**
 * @generated from service example.testing.rpc.PingService
 */
export declare const PingService: GenService<{
    /**
     * @generated from rpc example.testing.rpc.PingService.Ping
     */
    ping: {
        methodKind: "unary";
        input: typeof PingRequestSchema;
        output: typeof PingReponseSchema;
    };
}>;
/**
 * @generated from service example.testing.rpc.TestAnyService
 */
export declare const TestAnyService: GenService<{
    /**
     * @generated from rpc example.testing.rpc.TestAnyService.TestCall
     */
    testCall: {
        methodKind: "unary";
        input: typeof MessageWithAnySchema;
        output: typeof MessageWithAnySchema;
    };
}>;
//# sourceMappingURL=rpc_pb.d.ts.map