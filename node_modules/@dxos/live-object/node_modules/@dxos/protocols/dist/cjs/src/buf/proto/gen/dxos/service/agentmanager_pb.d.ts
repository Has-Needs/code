import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Credential, Presentation } from "../halo/credentials_pb.js";
import type { PublicKey } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/service/agentmanager.proto.
 */
export declare const file_dxos_service_agentmanager: GenFile;
/**
 * @generated from message dxos.service.agentmanager.InitAuthSequenceRequest
 */
export type InitAuthSequenceRequest = Message<"dxos.service.agentmanager.InitAuthSequenceRequest"> & {
    /**
     * Auth token for the agentmanager to validate authorization.
     *
     * @generated from field: optional string auth_token = 1;
     */
    authToken?: string;
};
/**
 * Describes the message dxos.service.agentmanager.InitAuthSequenceRequest.
 * Use `create(InitAuthSequenceRequestSchema)` to create a new message.
 */
export declare const InitAuthSequenceRequestSchema: GenMessage<InitAuthSequenceRequest>;
/**
 * @generated from message dxos.service.agentmanager.InitAuthSequenceResponse
 */
export type InitAuthSequenceResponse = Message<"dxos.service.agentmanager.InitAuthSequenceResponse"> & {
    /**
     * @generated from field: dxos.service.agentmanager.InitAuthSequenceResponse.InitAuthSequenceResult result = 1;
     */
    result: InitAuthSequenceResponse_InitAuthSequenceResult;
    /**
     * @generated from field: optional bytes nonce = 2;
     */
    nonce?: Uint8Array;
    /**
     * @generated from field: optional dxos.keys.PublicKey agentmanager_key = 3;
     */
    agentmanagerKey?: PublicKey;
    /**
     * Reason why initializing the auth sequence failed (e.g. invalid access token)
     *
     * @generated from field: optional string init_auth_response_reason = 4;
     */
    initAuthResponseReason?: string;
};
/**
 * Describes the message dxos.service.agentmanager.InitAuthSequenceResponse.
 * Use `create(InitAuthSequenceResponseSchema)` to create a new message.
 */
export declare const InitAuthSequenceResponseSchema: GenMessage<InitAuthSequenceResponse>;
/**
 * @generated from enum dxos.service.agentmanager.InitAuthSequenceResponse.InitAuthSequenceResult
 */
export declare enum InitAuthSequenceResponse_InitAuthSequenceResult {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from enum value: SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * @generated from enum value: NOT_AUTHORIZED = 2;
     */
    NOT_AUTHORIZED = 2,
    /**
     * @generated from enum value: ERROR = 3;
     */
    ERROR = 3
}
/**
 * Describes the enum dxos.service.agentmanager.InitAuthSequenceResponse.InitAuthSequenceResult.
 */
export declare const InitAuthSequenceResponse_InitAuthSequenceResultSchema: GenEnum<InitAuthSequenceResponse_InitAuthSequenceResult>;
/**
 * @generated from message dxos.service.agentmanager.Authentication
 */
export type Authentication = Message<"dxos.service.agentmanager.Authentication"> & {
    /**
     * @generated from field: dxos.halo.credentials.Presentation presentation = 1;
     */
    presentation?: Presentation;
};
/**
 * Describes the message dxos.service.agentmanager.Authentication.
 * Use `create(AuthenticationSchema)` to create a new message.
 */
export declare const AuthenticationSchema: GenMessage<Authentication>;
/**
 * @generated from message dxos.service.agentmanager.AuthenticateResponse
 */
export type AuthenticateResponse = Message<"dxos.service.agentmanager.AuthenticateResponse"> & {
    /**
     * @generated from field: optional string token = 1;
     */
    token?: string;
    /**
     * @generated from field: optional dxos.halo.credentials.Credential credential = 2;
     */
    credential?: Credential;
};
/**
 * Describes the message dxos.service.agentmanager.AuthenticateResponse.
 * Use `create(AuthenticateResponseSchema)` to create a new message.
 */
export declare const AuthenticateResponseSchema: GenMessage<AuthenticateResponse>;
/**
 * @generated from service dxos.service.agentmanager.AgentManager
 */
export declare const AgentManager: GenService<{
    /**
     * Initialize the authentication sequence. Send an optional authentication token to permit the server to authorize the request.
     * Receive a nonce (challenge) necessary to call Authenticate to prevent replay attacks.
     *
     * @generated from rpc dxos.service.agentmanager.AgentManager.InitAuthSequence
     */
    initAuthSequence: {
        methodKind: "unary";
        input: typeof InitAuthSequenceRequestSchema;
        output: typeof InitAuthSequenceResponseSchema;
    };
    /**
     * @generated from rpc dxos.service.agentmanager.AgentManager.Authenticate
     */
    authenticate: {
        methodKind: "unary";
        input: typeof AuthenticationSchema;
        output: typeof AuthenticateResponseSchema;
    };
}>;
//# sourceMappingURL=agentmanager_pb.d.ts.map