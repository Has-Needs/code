import substitutions from "../../substitutions.js";
export interface Empty {
}
export interface Struct {
    fields?: Partial<Record<string, Value>>;
}
export interface Value {
    nullValue?: NullValue;
    numberValue?: number;
    stringValue?: string;
    boolValue?: boolean;
    structValue?: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
    listValue?: ListValue;
}
export declare enum NullValue {
    NULL_VALUE = 0
}
export interface ListValue {
    values?: Value[];
}
export interface Timestamp {
    seconds: string;
    nanos: number;
}
export interface Any {
    type_url: string;
    value: Uint8Array;
}
export interface FileDescriptorSet {
    file?: FileDescriptorProto[];
}
export interface FileDescriptorProto {
    name: string;
    package: string;
    dependency?: string[];
    /**
     * Options:
     *   - packed = false
     */
    publicDependency?: number[];
    /**
     * Options:
     *   - packed = false
     */
    weakDependency?: number[];
    messageType?: DescriptorProto[];
    enumType?: EnumDescriptorProto[];
    service?: ServiceDescriptorProto[];
    extension?: FieldDescriptorProto[];
    options: FileOptions;
    sourceCodeInfo: SourceCodeInfo;
    syntax: string;
}
export interface DescriptorProto {
    name: string;
    field?: FieldDescriptorProto[];
    extension?: FieldDescriptorProto[];
    nestedType?: DescriptorProto[];
    enumType?: EnumDescriptorProto[];
    extensionRange?: DescriptorProto.ExtensionRange[];
    oneofDecl?: OneofDescriptorProto[];
    options: MessageOptions;
    reservedRange?: DescriptorProto.ReservedRange[];
    reservedName?: string[];
}
export declare namespace DescriptorProto {
    interface ExtensionRange {
        start: number;
        end: number;
    }
    interface ReservedRange {
        start: number;
        end: number;
    }
}
export interface FieldDescriptorProto {
    name: string;
    number: number;
    label: FieldDescriptorProto.Label;
    type: FieldDescriptorProto.Type;
    typeName: string;
    extendee: string;
    defaultValue: string;
    oneofIndex: number;
    jsonName: string;
    options: FieldOptions;
}
export declare namespace FieldDescriptorProto {
    enum Type {
        TYPE_DOUBLE = 1,
        TYPE_FLOAT = 2,
        TYPE_INT64 = 3,
        TYPE_UINT64 = 4,
        TYPE_INT32 = 5,
        TYPE_FIXED64 = 6,
        TYPE_FIXED32 = 7,
        TYPE_BOOL = 8,
        TYPE_STRING = 9,
        TYPE_GROUP = 10,
        TYPE_MESSAGE = 11,
        TYPE_BYTES = 12,
        TYPE_UINT32 = 13,
        TYPE_ENUM = 14,
        TYPE_SFIXED32 = 15,
        TYPE_SFIXED64 = 16,
        TYPE_SINT32 = 17,
        TYPE_SINT64 = 18
    }
    enum Label {
        LABEL_OPTIONAL = 1,
        LABEL_REQUIRED = 2,
        LABEL_REPEATED = 3
    }
}
export interface OneofDescriptorProto {
    name: string;
    options: OneofOptions;
}
export interface EnumDescriptorProto {
    name: string;
    value?: EnumValueDescriptorProto[];
    options: EnumOptions;
}
export interface EnumValueDescriptorProto {
    name: string;
    number: number;
    options: EnumValueOptions;
}
export interface ServiceDescriptorProto {
    name: string;
    method?: MethodDescriptorProto[];
    options: ServiceOptions;
}
export interface MethodDescriptorProto {
    name: string;
    inputType: string;
    outputType: string;
    options: MethodOptions;
    clientStreaming: boolean;
    serverStreaming: boolean;
}
export interface FileOptions {
    javaPackage: string;
    javaOuterClassname: string;
    javaMultipleFiles: boolean;
    /**
     * Options:
     *   - deprecated = true
     */
    javaGenerateEqualsAndHash: boolean;
    javaStringCheckUtf8: boolean;
    /**
     * Options:
     *   - default = "SPEED"
     */
    optimizeFor: FileOptions.OptimizeMode;
    goPackage: string;
    ccGenericServices: boolean;
    javaGenericServices: boolean;
    pyGenericServices: boolean;
    deprecated: boolean;
    ccEnableArenas: boolean;
    objcClassPrefix: string;
    csharpNamespace: string;
    uninterpretedOption?: UninterpretedOption[];
}
export declare namespace FileOptions {
    enum OptimizeMode {
        SPEED = 1,
        CODE_SIZE = 2,
        LITE_RUNTIME = 3
    }
}
export interface MessageOptions {
    messageSetWireFormat: boolean;
    noStandardDescriptorAccessor: boolean;
    deprecated: boolean;
    mapEntry: boolean;
    uninterpretedOption?: UninterpretedOption[];
}
export interface FieldOptions {
    /**
     * Options:
     *   - default = "STRING"
     */
    ctype: FieldOptions.CType;
    packed: boolean;
    /**
     * Options:
     *   - default = "JS_NORMAL"
     */
    jstype: FieldOptions.JSType;
    lazy: boolean;
    deprecated: boolean;
    weak: boolean;
    uninterpretedOption?: UninterpretedOption[];
    /**
     * Options:
     *   - proto3_optional = true
     */
    ".dxos.config.envVar"?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    ".preserveAny"?: boolean;
}
export declare namespace FieldOptions {
    enum CType {
        STRING = 0,
        CORD = 1,
        STRING_PIECE = 2
    }
    enum JSType {
        JS_NORMAL = 0,
        JS_STRING = 1,
        JS_NUMBER = 2
    }
}
export interface OneofOptions {
    uninterpretedOption?: UninterpretedOption[];
}
export interface EnumOptions {
    allowAlias: boolean;
    deprecated: boolean;
    uninterpretedOption?: UninterpretedOption[];
}
export interface EnumValueOptions {
    deprecated: boolean;
    uninterpretedOption?: UninterpretedOption[];
}
export interface ServiceOptions {
    deprecated: boolean;
    uninterpretedOption?: UninterpretedOption[];
}
export interface MethodOptions {
    deprecated: boolean;
    uninterpretedOption?: UninterpretedOption[];
}
export interface UninterpretedOption {
    name?: UninterpretedOption.NamePart[];
    identifierValue: string;
    positiveIntValue: string;
    negativeIntValue: string;
    doubleValue: number;
    stringValue: Uint8Array;
    aggregateValue: string;
}
export declare namespace UninterpretedOption {
    interface NamePart {
        namePart: string;
        isExtension: boolean;
    }
}
export interface SourceCodeInfo {
    location?: SourceCodeInfo.Location[];
}
export declare namespace SourceCodeInfo {
    interface Location {
        path?: number[];
        span?: number[];
        leadingComments: string;
        trailingComments: string;
        leadingDetachedComments?: string[];
    }
}
export interface GeneratedCodeInfo {
    annotation?: GeneratedCodeInfo.Annotation[];
}
export declare namespace GeneratedCodeInfo {
    interface Annotation {
        path?: number[];
        sourceFile: string;
        begin: number;
        end: number;
    }
}
export interface DoubleValue {
    value: number;
}
export interface FloatValue {
    value: number;
}
export interface Int64Value {
    value: string;
}
export interface UInt64Value {
    value: string;
}
export interface Int32Value {
    value: number;
}
export interface UInt32Value {
    value: number;
}
export interface BoolValue {
    value: boolean;
}
export interface StringValue {
    value: string;
}
export interface BytesValue {
    value: Uint8Array;
}
//# sourceMappingURL=protobuf.d.ts.map