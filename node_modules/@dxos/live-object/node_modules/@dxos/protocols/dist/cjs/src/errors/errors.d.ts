import { PublicKey } from '@dxos/keys';
import { ApiError, BaseError, DatabaseError, SystemError } from './base-errors.js';
import type { ObjectId } from '../types.js';
/**
 * Thrown when request was terminated because the RPC endpoint has been closed.
 */
export declare class RpcClosedError extends SystemError {
    constructor();
}
/**
 * Thrown when `request` is called when RPC has not been opened.
 */
export declare class RpcNotOpenError extends SystemError {
    constructor();
}
export declare class CancelledError extends SystemError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class InvalidConfigError extends ApiError {
    constructor(message?: string, context?: Record<string, any>);
}
/**
 * Explicit failure to connect with remote client services.
 */
export declare class RemoteServiceConnectionError extends ApiError {
    constructor(message?: string, context?: Record<string, any>);
}
/**
 * Failed to open a connection to remote client services.
 */
export declare class RemoteServiceConnectionTimeout extends ApiError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class DataCorruptionError extends SystemError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class InvalidInvitationExtensionRoleError extends SystemError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class IdentityNotInitializedError extends DatabaseError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class InvalidInvitationError extends DatabaseError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class AlreadyJoinedError extends DatabaseError {
    constructor(message?: string, context?: Record<string, any>);
}
export declare class ConnectionResetError extends BaseError {
    constructor(message?: string, context?: any);
}
export declare class TimeoutError extends BaseError {
    constructor(message?: string, context?: any);
}
export declare class ProtocolError extends BaseError {
    constructor(message?: string, context?: any);
}
export declare class ConnectivityError extends BaseError {
    constructor(message?: string, context?: any);
}
export declare class RateLimitExceededError extends BaseError {
    constructor(message?: string, context?: any);
}
export declare class UnknownProtocolError extends BaseError {
    constructor(message?: string, innerError?: Error);
}
export declare class InvalidStorageVersionError extends DatabaseError {
    constructor(expected: number, actual: number);
}
export declare class SpaceNotFoundError extends DatabaseError {
    constructor(spaceKey: PublicKey);
}
export declare class EntityNotFoundError extends DatabaseError {
    constructor(entityId: ObjectId);
}
export declare class UnknownModelError extends DatabaseError {
    constructor(model: string);
}
export declare class AuthorizationError extends ApiError {
    constructor(message?: string, context?: any);
}
//# sourceMappingURL=errors.d.ts.map