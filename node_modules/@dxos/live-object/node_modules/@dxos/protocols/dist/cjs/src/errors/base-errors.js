"use strict";
//
// Copyright 2021 DXOS.org
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseError = exports.SystemError = exports.ApiError = exports.BaseError = void 0;
/**
 * NOTE: Messages should be sentences (Start with a capital letter and end with a period).
 * Errors can optionally include a JSON context object.
 */
class BaseError extends Error {
    constructor(code, message, context) {
        // TODO(dmaretskyi): Error.cause.
        super(message !== null && message !== void 0 ? message : code);
        this.code = code;
        this.context = context;
        this.name = code;
        // NOTE: Restores prototype chain (https://stackoverflow.com/a/48342359).
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.BaseError = BaseError;
// TODO(dmaretskyi): Consider common error classes with error codes:
// throw new SystemError(ERROR_CODE_OUT_OF_MEMORY, 'Out of memory', { a: 1, b: 2 });
/**
 * User facing API Errors.
 * E.g., something was misconfigured.
 */
class ApiError extends BaseError {
}
exports.ApiError = ApiError;
/**
 * Internal system errors.
 * E.g., unexpected/unrecoverable runtime error.
 */
class SystemError extends BaseError {
}
exports.SystemError = SystemError;
/**
 * Database errors.
 */
// TODO(wittjosiah): Same as ApiError?
class DatabaseError extends BaseError {
}
exports.DatabaseError = DatabaseError;
//# sourceMappingURL=base-errors.js.map