import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_echo_filter from "./filter.js";
import * as dxos_echo_indexing from "./indexing.js";
import * as dxos_echo_object from "./object.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export interface QueryRequest {
    /**
     * Options:
     *   - proto3_optional = true
     */
    queryId?: string;
    reactivity: QueryReactivity;
    /**
     * JSON-encoded `QueryAST.Query`.
     */
    query: string;
    /**
     * @deprecated Use `query` instead.
     *
     * Options:
     *   - proto3_optional = true
     */
    filter?: dxos_echo_filter.Filter;
}
/**
 * Automerge heads.
 * Used for encoding in Index metadata store.
 * @see https://automerge.org/automerge-repo/types/_automerge_automerge_repo.Heads.html
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export interface Heads {
    hashes?: string[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export interface QueryResult {
    id: string;
    spaceId: string;
    documentId: string;
    rank: number;
    /**
     * Options:
     *   - proto3_optional = true
     */
    documentJson?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    documentAutomerge?: Uint8Array;
    /**
     * @deprecated Use spaceId.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export declare enum QueryReactivity {
    ONE_SHOT = 0,
    REACTIVE = 1
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export interface QueryResponse {
    /**
     * Options:
     *   - proto3_optional = true
     */
    queryId?: string;
    results?: QueryResult[];
    objects?: dxos_echo_object.EchoObject[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/query.proto}
 */
export interface QueryService {
    setConfig: (request: dxos_echo_indexing.IndexConfig, options?: RequestOptions) => Promise<void>;
    execQuery: (request: QueryRequest, options?: RequestOptions) => Stream<QueryResponse>;
    reindex: (request: void, options?: RequestOptions) => Promise<void>;
}
//# sourceMappingURL=query.d.ts.map