import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/gravity.proto.
 */
export declare const file_dxos_gravity: GenFile;
/**
 * / Root specification for Agent.
 *
 * @generated from message dxos.gravity.AgentSpec
 */
export type AgentSpec = Message<"dxos.gravity.AgentSpec"> & {
    /**
     * @generated from field: optional int32 version = 1;
     */
    version?: number;
    /**
     * @generated from field: optional string state_machine = 2;
     */
    stateMachine?: string;
    /**
     * @generated from field: optional dxos.gravity.CommandSequence start_sequence = 3;
     */
    startSequence?: CommandSequence;
    /**
     * @generated from field: optional dxos.gravity.CommandSequence stop_sequence = 4;
     */
    stopSequence?: CommandSequence;
    /**
     * @generated from field: repeated dxos.gravity.CommandSequence test_sequences = 5;
     */
    testSequences: CommandSequence[];
};
/**
 * Describes the message dxos.gravity.AgentSpec.
 * Use `create(AgentSpecSchema)` to create a new message.
 */
export declare const AgentSpecSchema: GenMessage<AgentSpec>;
/**
 * / Commands that must be run sequentially.
 *
 * @generated from message dxos.gravity.CommandSequence
 */
export type CommandSequence = Message<"dxos.gravity.CommandSequence"> & {
    /**
     * @generated from field: repeated dxos.gravity.Command commands = 1;
     */
    commands: Command[];
};
/**
 * Describes the message dxos.gravity.CommandSequence.
 * Use `create(CommandSequenceSchema)` to create a new message.
 */
export declare const CommandSequenceSchema: GenMessage<CommandSequence>;
/**
 * / Atomic async command.
 *
 * @generated from message dxos.gravity.Command
 */
export type Command = Message<"dxos.gravity.Command"> & {
    /**
     * TODO(burdon): oneof vs. any?
     *
     * @generated from oneof dxos.gravity.Command.Cmd
     */
    Cmd: {
        /**
         * @generated from field: dxos.gravity.CreateProfileCommand create_profile = 1;
         */
        value: CreateProfileCommand;
        case: "createProfile";
    } | {
        /**
         * @generated from field: dxos.gravity.CreateSpaceCommand create_space = 2;
         */
        value: CreateSpaceCommand;
        case: "createSpace";
    } | {
        /**
         * @generated from field: dxos.gravity.CreateSpaceInvitationCommand create_space_invitation = 3;
         */
        value: CreateSpaceInvitationCommand;
        case: "createSpaceInvitation";
    } | {
        /**
         * @generated from field: dxos.gravity.AcceptSpaceInvitationCommand accept_space_invitation = 4;
         */
        value: AcceptSpaceInvitationCommand;
        case: "acceptSpaceInvitation";
    } | {
        /**
         * @generated from field: dxos.gravity.SyncServer sync_server = 5;
         */
        value: SyncServer;
        case: "syncServer";
    } | {
        /**
         * @generated from field: dxos.gravity.SyncClient sync_client = 6;
         */
        value: SyncClient;
        case: "syncClient";
    } | {
        /**
         * @generated from field: dxos.gravity.TearDown tear_down = 7;
         */
        value: TearDown;
        case: "tearDown";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message dxos.gravity.Command.
 * Use `create(CommandSchema)` to create a new message.
 */
export declare const CommandSchema: GenMessage<Command>;
/**
 * @generated from message dxos.gravity.CreateProfileCommand
 */
export type CreateProfileCommand = Message<"dxos.gravity.CreateProfileCommand"> & {
    /**
     * @generated from field: optional bool _noop_ = 1;
     */
    Noop?: boolean;
};
/**
 * Describes the message dxos.gravity.CreateProfileCommand.
 * Use `create(CreateProfileCommandSchema)` to create a new message.
 */
export declare const CreateProfileCommandSchema: GenMessage<CreateProfileCommand>;
/**
 * @generated from message dxos.gravity.CreateSpaceCommand
 */
export type CreateSpaceCommand = Message<"dxos.gravity.CreateSpaceCommand"> & {
    /**
     * @generated from field: optional string id = 1;
     */
    id?: string;
};
/**
 * Describes the message dxos.gravity.CreateSpaceCommand.
 * Use `create(CreateSpaceCommandSchema)` to create a new message.
 */
export declare const CreateSpaceCommandSchema: GenMessage<CreateSpaceCommand>;
/**
 * @generated from message dxos.gravity.CreateSpaceInvitationCommand
 */
export type CreateSpaceInvitationCommand = Message<"dxos.gravity.CreateSpaceInvitationCommand"> & {
    /**
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * @generated from field: string swarm_key = 2;
     */
    swarmKey: string;
};
/**
 * Describes the message dxos.gravity.CreateSpaceInvitationCommand.
 * Use `create(CreateSpaceInvitationCommandSchema)` to create a new message.
 */
export declare const CreateSpaceInvitationCommandSchema: GenMessage<CreateSpaceInvitationCommand>;
/**
 * @generated from message dxos.gravity.AcceptSpaceInvitationCommand
 */
export type AcceptSpaceInvitationCommand = Message<"dxos.gravity.AcceptSpaceInvitationCommand"> & {
    /**
     * @generated from field: string swarm_key = 1;
     */
    swarmKey: string;
};
/**
 * Describes the message dxos.gravity.AcceptSpaceInvitationCommand.
 * Use `create(AcceptSpaceInvitationCommandSchema)` to create a new message.
 */
export declare const AcceptSpaceInvitationCommandSchema: GenMessage<AcceptSpaceInvitationCommand>;
/**
 * @generated from message dxos.gravity.SyncServer
 */
export type SyncServer = Message<"dxos.gravity.SyncServer"> & {
    /**
     * server id
     *
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * host name the sync server is running on
     *
     * @generated from field: string host = 2;
     */
    host: string;
    /**
     * port number to bind to
     *
     * @generated from field: uint32 port = 3;
     */
    port: number;
    /**
     * @generated from field: bool verbose = 4;
     */
    verbose: boolean;
};
/**
 * Describes the message dxos.gravity.SyncServer.
 * Use `create(SyncServerSchema)` to create a new message.
 */
export declare const SyncServerSchema: GenMessage<SyncServer>;
/**
 * @generated from message dxos.gravity.SyncClient
 */
export type SyncClient = Message<"dxos.gravity.SyncClient"> & {
    /**
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * @generated from field: string srv_id = 2;
     */
    srvId: string;
    /**
     * @generated from field: string host = 3;
     */
    host: string;
    /**
     * @generated from field: uint32 port = 4;
     */
    port: number;
    /**
     * @generated from field: bool verbose = 5;
     */
    verbose: boolean;
};
/**
 * Describes the message dxos.gravity.SyncClient.
 * Use `create(SyncClientSchema)` to create a new message.
 */
export declare const SyncClientSchema: GenMessage<SyncClient>;
/**
 * @generated from message dxos.gravity.TearDown
 */
export type TearDown = Message<"dxos.gravity.TearDown"> & {
    /**
     * @generated from field: optional bool _noop_ = 1;
     */
    Noop?: boolean;
};
/**
 * Describes the message dxos.gravity.TearDown.
 * Use `create(TearDownSchema)` to create a new message.
 */
export declare const TearDownSchema: GenMessage<TearDown>;
//# sourceMappingURL=gravity_pb.d.ts.map