import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/mesh/teleport/replicator.proto.
 */
export declare const file_dxos_mesh_teleport_replicator: GenFile;
/**
 * @generated from message dxos.mesh.teleport.replicator.FeedInfo
 */
export type FeedInfo = Message<"dxos.mesh.teleport.replicator.FeedInfo"> & {
    /**
     * @generated from field: dxos.keys.PublicKey feed_key = 1;
     */
    feedKey?: PublicKey;
    /**
     * / set if the peer whishes to download the data from the feed.
     *
     * @generated from field: bool download = 2;
     */
    download: boolean;
    /**
     * / set if the peer whishes to updload the data from the feed.
     *
     * @generated from field: bool upload = 3;
     */
    upload: boolean;
};
/**
 * Describes the message dxos.mesh.teleport.replicator.FeedInfo.
 * Use `create(FeedInfoSchema)` to create a new message.
 */
export declare const FeedInfoSchema: GenMessage<FeedInfo>;
/**
 * @generated from message dxos.mesh.teleport.replicator.UpdateFeedsRequest
 */
export type UpdateFeedsRequest = Message<"dxos.mesh.teleport.replicator.UpdateFeedsRequest"> & {
    /**
     * All feeds that the peer is interesed in.
     *
     * @generated from field: repeated dxos.mesh.teleport.replicator.FeedInfo feeds = 1;
     */
    feeds: FeedInfo[];
};
/**
 * Describes the message dxos.mesh.teleport.replicator.UpdateFeedsRequest.
 * Use `create(UpdateFeedsRequestSchema)` to create a new message.
 */
export declare const UpdateFeedsRequestSchema: GenMessage<UpdateFeedsRequest>;
/**
 * @generated from message dxos.mesh.teleport.replicator.StartReplicationRequest
 */
export type StartReplicationRequest = Message<"dxos.mesh.teleport.replicator.StartReplicationRequest"> & {
    /**
     * @generated from field: dxos.mesh.teleport.replicator.FeedInfo info = 1;
     */
    info?: FeedInfo;
};
/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationRequest.
 * Use `create(StartReplicationRequestSchema)` to create a new message.
 */
export declare const StartReplicationRequestSchema: GenMessage<StartReplicationRequest>;
/**
 * @generated from message dxos.mesh.teleport.replicator.StartReplicationResponse
 */
export type StartReplicationResponse = Message<"dxos.mesh.teleport.replicator.StartReplicationResponse"> & {
    /**
     * *
     * Tag of the stream the peers will use for the replication.
     * Set to null or "" (empty string) of the peer does not wish to replicate the feed.
     *
     * A new stream must be open with unique tag to start replicating. Existing streams cannot be reused.
     *
     * @generated from field: optional string stream_tag = 1;
     */
    streamTag?: string;
};
/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationResponse.
 * Use `create(StartReplicationResponseSchema)` to create a new message.
 */
export declare const StartReplicationResponseSchema: GenMessage<StartReplicationResponse>;
/**
 * @generated from message dxos.mesh.teleport.replicator.StopReplicationRequest
 */
export type StopReplicationRequest = Message<"dxos.mesh.teleport.replicator.StopReplicationRequest"> & {
    /**
     * @generated from field: dxos.mesh.teleport.replicator.FeedInfo info = 1;
     */
    info?: FeedInfo;
};
/**
 * Describes the message dxos.mesh.teleport.replicator.StopReplicationRequest.
 * Use `create(StopReplicationRequestSchema)` to create a new message.
 */
export declare const StopReplicationRequestSchema: GenMessage<StopReplicationRequest>;
/**
 * *
 * RPC verbs for replication teleport extension.
 * Assumes one peer is designated an initiator.
 * The initiator will start and stop replication streams.
 * The other peer will send updates using the UpdateFeeds method.
 *
 * @generated from service dxos.mesh.teleport.replicator.ReplicatorService
 */
export declare const ReplicatorService: GenService<{
    /**
     * / Notify about available feeds.
     *
     * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.UpdateFeeds
     */
    updateFeeds: {
        methodKind: "unary";
        input: typeof UpdateFeedsRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * / Start replicating feed. If this feed is already being replicated, the existing replication session must be stopped.
     *
     * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.StartReplication
     */
    startReplication: {
        methodKind: "unary";
        input: typeof StartReplicationRequestSchema;
        output: typeof StartReplicationResponseSchema;
    };
    /**
     * / Stop replicating feed.
     *
     * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.StopReplication
     */
    stopReplication: {
        methodKind: "unary";
        input: typeof StopReplicationRequestSchema;
        output: typeof EmptySchema;
    };
}>;
//# sourceMappingURL=replicator_pb.d.ts.map