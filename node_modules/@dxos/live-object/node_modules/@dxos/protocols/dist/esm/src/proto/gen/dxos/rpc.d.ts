import substitutions from "../../substitutions.js";
import * as dxos_error from "./error.js";
/**
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface RpcMessage {
    request?: Request;
    response?: Response;
    /**
     * Means that the node is trying to open the connection.
     */
    open?: boolean;
    /**
     * Means that the node has received the "open" message and is ready to perform requests.
     */
    openAck?: boolean;
    streamClose?: StreamClose;
    /**
     * Request to close the connection.
     */
    bye?: Bye;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface Request {
    id: number;
    method: string;
    payload: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
    stream: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface Response {
    id: number;
    payload?: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
    error?: dxos_error.Error;
    /**
     * Sent when stream is closed without an error.
     */
    close?: boolean;
    /**
     * Sent when the server has processed a request with a streaming response.
     * Can be skipped by the server.
     * In this case the first payload should be treated as the server being ready.
     */
    streamReady?: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface StreamClose {
    id: number;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface MessageTrace {
    direction: MessageTrace.Direction;
    data: Uint8Array;
}
export declare namespace MessageTrace {
    /**
     * Defined in:
     *   {@link file://./../../dxos/rpc.proto}
     */
    enum Direction {
        INCOMING = 0,
        OUTGOING = 1
    }
}
/**
 * Request to close the connection.
 * Connection is closed once both sides have received the Bye message.
 *
 * Defined in:
 *   {@link file://./../../dxos/rpc.proto}
 */
export interface Bye {
}
//# sourceMappingURL=rpc.d.ts.map