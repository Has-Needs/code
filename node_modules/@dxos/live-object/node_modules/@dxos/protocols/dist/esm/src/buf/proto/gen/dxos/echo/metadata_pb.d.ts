import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Invitation, SpaceState } from "../client/invitation_pb.js";
import type { ObjectSnapshot } from "./model/document_pb.js";
import type { TimeframeVector } from "./timeframe_pb.js";
import type { Credential, ProfileDocument } from "../halo/credentials_pb.js";
import type { PublicKey } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/metadata.proto.
 */
export declare const file_dxos_echo_metadata: GenFile;
/**
 * / Main metadata record.
 *
 * @generated from message dxos.echo.metadata.EchoMetadata
 */
export type EchoMetadata = Message<"dxos.echo.metadata.EchoMetadata"> & {
    /**
     * *
     * Version number that is incremented every time there's a breaking change to the storage schema.
     * This is used to detect if the storage schema has changed since the last time the client was run.
     * Loading data from a different version will might result in an error.
     *
     * @generated from field: int32 version = 1;
     */
    version: number;
    /**
     * @generated from field: google.protobuf.Timestamp created = 2;
     */
    created?: Timestamp;
    /**
     * @generated from field: google.protobuf.Timestamp updated = 3;
     */
    updated?: Timestamp;
    /**
     * TODO(dmaretskyi): Store the device key associated with the identity.
     *
     * @generated from field: optional dxos.echo.metadata.IdentityRecord identity = 10;
     */
    identity?: IdentityRecord;
    /**
     * / List of the data spaces.
     *
     * @generated from field: repeated dxos.echo.metadata.SpaceMetadata spaces = 11;
     */
    spaces: SpaceMetadata[];
    /**
     * TODO(burdon): Circular dep.
     *
     * @generated from field: repeated dxos.client.services.Invitation invitations = 12;
     */
    invitations: Invitation[];
};
/**
 * Describes the message dxos.echo.metadata.EchoMetadata.
 * Use `create(EchoMetadataSchema)` to create a new message.
 */
export declare const EchoMetadataSchema: GenMessage<EchoMetadata>;
/**
 * / Per-space metadata. Frequent updates. Keep small.
 *
 * @generated from message dxos.echo.metadata.SmallSpaceMetadata
 */
export type SmallSpaceMetadata = Message<"dxos.echo.metadata.SmallSpaceMetadata"> & {};
/**
 * Describes the message dxos.echo.metadata.SmallSpaceMetadata.
 * Use `create(SmallSpaceMetadataSchema)` to create a new message.
 */
export declare const SmallSpaceMetadataSchema: GenMessage<SmallSpaceMetadata>;
/**
 * / Per-space metadata. Infrequent updates.
 *
 * @generated from message dxos.echo.metadata.LargeSpaceMetadata
 */
export type LargeSpaceMetadata = Message<"dxos.echo.metadata.LargeSpaceMetadata"> & {
    /**
     * @generated from field: optional dxos.echo.metadata.ControlPipelineSnapshot control_pipeline_snapshot = 1;
     */
    controlPipelineSnapshot?: ControlPipelineSnapshot;
};
/**
 * Describes the message dxos.echo.metadata.LargeSpaceMetadata.
 * Use `create(LargeSpaceMetadataSchema)` to create a new message.
 */
export declare const LargeSpaceMetadataSchema: GenMessage<LargeSpaceMetadata>;
/**
 * @generated from message dxos.echo.metadata.SpaceCache
 */
export type SpaceCache = Message<"dxos.echo.metadata.SpaceCache"> & {
    /**
     * / Properties snapshot.
     *
     * @generated from field: optional dxos.echo.model.document.ObjectSnapshot properties = 1;
     */
    properties?: ObjectSnapshot;
};
/**
 * Describes the message dxos.echo.metadata.SpaceCache.
 * Use `create(SpaceCacheSchema)` to create a new message.
 */
export declare const SpaceCacheSchema: GenMessage<SpaceCache>;
/**
 * TODO(dmaretskyi): Cleanup numbering.
 *
 * @generated from message dxos.echo.metadata.SpaceMetadata
 */
export type SpaceMetadata = Message<"dxos.echo.metadata.SpaceMetadata"> & {
    /**
     * / Space key.
     *
     * @generated from field: dxos.keys.PublicKey key = 1;
     */
    key?: PublicKey;
    /**
     * / ACTIVE, INACTIVE, etc.
     *
     * @generated from field: optional dxos.client.services.SpaceState state = 10;
     */
    state?: SpaceState;
    /**
     * @generated from field: optional dxos.keys.PublicKey genesis_feed_key = 6;
     */
    genesisFeedKey?: PublicKey;
    /**
     * / Key of the writable control feed.
     *
     * @generated from field: optional dxos.keys.PublicKey control_feed_key = 4;
     */
    controlFeedKey?: PublicKey;
    /**
     * / List of all feed associated with the space.
     *
     * @generated from field: repeated dxos.keys.PublicKey feed_keys = 2;
     */
    feedKeys: PublicKey[];
    /**
     * / Key of the writable data feed.
     *
     * @generated from field: optional dxos.keys.PublicKey data_feed_key = 3;
     */
    dataFeedKey?: PublicKey;
    /**
     * Latest control timeframe reached while processing space messages.
     *
     * @generated from field: optional dxos.echo.timeframe.TimeframeVector control_timeframe = 8;
     */
    controlTimeframe?: TimeframeVector;
    /**
     * Latest data timeframe reached while processing space messages.
     *
     * @generated from field: optional dxos.echo.timeframe.TimeframeVector data_timeframe = 5;
     */
    dataTimeframe?: TimeframeVector;
    /**
     * @generated from field: optional dxos.echo.metadata.SpaceCache cache = 9;
     */
    cache?: SpaceCache;
    /**
     * @generated from field: optional dxos.echo.metadata.EdgeReplicationSetting edge_replication = 11;
     */
    edgeReplication?: EdgeReplicationSetting;
};
/**
 * Describes the message dxos.echo.metadata.SpaceMetadata.
 * Use `create(SpaceMetadataSchema)` to create a new message.
 */
export declare const SpaceMetadataSchema: GenMessage<SpaceMetadata>;
/**
 * @generated from message dxos.echo.metadata.ControlPipelineSnapshot
 */
export type ControlPipelineSnapshot = Message<"dxos.echo.metadata.ControlPipelineSnapshot"> & {
    /**
     * / Timeframe of the last message included in the snapshot.
     *
     * @generated from field: dxos.echo.timeframe.TimeframeVector timeframe = 1;
     */
    timeframe?: TimeframeVector;
    /**
     * @generated from field: repeated dxos.echo.metadata.ControlPipelineSnapshot.ControlMessage messages = 2;
     */
    messages: ControlPipelineSnapshot_ControlMessage[];
};
/**
 * Describes the message dxos.echo.metadata.ControlPipelineSnapshot.
 * Use `create(ControlPipelineSnapshotSchema)` to create a new message.
 */
export declare const ControlPipelineSnapshotSchema: GenMessage<ControlPipelineSnapshot>;
/**
 * @generated from message dxos.echo.metadata.ControlPipelineSnapshot.ControlMessage
 */
export type ControlPipelineSnapshot_ControlMessage = Message<"dxos.echo.metadata.ControlPipelineSnapshot.ControlMessage"> & {
    /**
     * @generated from field: dxos.keys.PublicKey feed_key = 1;
     */
    feedKey?: PublicKey;
    /**
     * @generated from field: dxos.halo.credentials.Credential credential = 2;
     */
    credential?: Credential;
};
/**
 * Describes the message dxos.echo.metadata.ControlPipelineSnapshot.ControlMessage.
 * Use `create(ControlPipelineSnapshot_ControlMessageSchema)` to create a new message.
 */
export declare const ControlPipelineSnapshot_ControlMessageSchema: GenMessage<ControlPipelineSnapshot_ControlMessage>;
/**
 * / Information needed to bootstrap an Identity.
 *
 * @generated from message dxos.echo.metadata.IdentityRecord
 */
export type IdentityRecord = Message<"dxos.echo.metadata.IdentityRecord"> & {
    /**
     * @generated from field: dxos.keys.PublicKey identity_key = 1;
     */
    identityKey?: PublicKey;
    /**
     * @generated from field: dxos.keys.PublicKey device_key = 2;
     */
    deviceKey?: PublicKey;
    /**
     * @generated from field: dxos.echo.metadata.SpaceMetadata halo_space = 3;
     */
    haloSpace?: SpaceMetadata;
    /**
     * / Public profile information.
     * / TODO(burdon): Not yet implemented. Must be null.
     *
     * @generated from field: optional dxos.echo.metadata.SpaceMetadata profile_space = 4;
     */
    profileSpace?: SpaceMetadata;
    /**
     * / Cached profile.
     *
     * @generated from field: optional dxos.halo.credentials.ProfileDocument profile = 5;
     */
    profile?: ProfileDocument;
};
/**
 * Describes the message dxos.echo.metadata.IdentityRecord.
 * Use `create(IdentityRecordSchema)` to create a new message.
 */
export declare const IdentityRecordSchema: GenMessage<IdentityRecord>;
/**
 * @generated from enum dxos.echo.metadata.EdgeReplicationSetting
 */
export declare enum EdgeReplicationSetting {
    /**
     * @generated from enum value: DISABLED = 0;
     */
    DISABLED = 0,
    /**
     * @generated from enum value: ENABLED = 1;
     */
    ENABLED = 1
}
/**
 * Describes the enum dxos.echo.metadata.EdgeReplicationSetting.
 */
export declare const EdgeReplicationSettingSchema: GenEnum<EdgeReplicationSetting>;
//# sourceMappingURL=metadata_pb.d.ts.map