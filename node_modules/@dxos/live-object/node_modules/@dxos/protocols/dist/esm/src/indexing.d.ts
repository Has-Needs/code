import { Schema } from 'effect';
export type ObjectPointerDecoded = {
    spaceKey: string | undefined;
    documentId: string;
    objectId: string;
};
/**
 * Encoded object pointer: `#01|${spaceKey}|${documentId}|${objectId}`.
 * Old format without spaceKey: `${documentId}|${objectId}`.
 * The spaceKey is optional and was added in the later version.
 * Space key is encoded in the front to allow prefix iteration.
 */
export type ObjectPointerEncoded = string;
export declare const ObjectPointerEncoded: Schema.SchemaClass<string, string, never>;
export declare enum ObjectPointerVersion {
    /**
     * `${documentId}|${objectId}`
     */
    V0 = 0,
    /**
     * `#01|${spaceKey}|${documentId}|${objectId}`
     */
    V1 = 1
}
export declare const objectPointerCodec: {
    encode: ({ spaceKey, documentId, objectId }: ObjectPointerDecoded) => ObjectPointerEncoded;
    decode: (id: ObjectPointerEncoded) => ObjectPointerDecoded;
    getVersion: (id: ObjectPointerEncoded) => ObjectPointerVersion;
    convertV1ToV0: (id: ObjectPointerEncoded) => ObjectPointerEncoded;
};
//# sourceMappingURL=indexing.d.ts.map