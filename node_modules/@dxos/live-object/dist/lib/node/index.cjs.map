{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../src/snapshot.ts", "../../../src/live.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\n// TODO(dmaretskyi): Remove deprecated exports.\n\nimport * as EchoSchemaModule from '@dxos/echo-schema';\n\nexport * from './proxy';\nexport * from './snapshot';\nexport * from './object';\nexport * from './live';\n\n/**\n * @deprecated Use {@link Ref.make} instead.\n */\nexport const makeRef = EchoSchemaModule.Ref.make;\n\n/**\n * @deprecated Use {@link Ref.fromDXN} instead.\n */\nexport const refFromDXN = EchoSchemaModule.Ref.fromDXN;\n\n/**\n * @deprecated Import from `@dxos/echo-schema` instead.\n */\nexport const RefArray = EchoSchemaModule.RefArray;\n\n/**\n * @deprecated Import from `@dxos/echo-schema` instead.\n */\nexport const getObjectMeta = EchoSchemaModule.getObjectMeta;\n\n/**\n * @deprecated Import from `@dxos/echo-schema` instead.\n */\nexport const isDeleted = EchoSchemaModule.isDeleted;\n\n/**\n * @deprecated Import from `@dxos/echo-schema` instead.\n */\nexport const getType = EchoSchemaModule.getType;\n\n/**\n * @deprecated Import from `@dxos/echo-schema` instead.\n */\nexport const getMeta = EchoSchemaModule.getMeta;\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type BaseObject, Ref } from '@dxos/echo-schema';\nimport { deepMapValues } from '@dxos/util';\n\nimport type { Live } from './live';\n\n/**\n * Returns an immutable snapshot of the live object.\n */\nexport const getSnapshot = <T extends BaseObject>(obj: Live<T>): T => {\n  return deepMapValues(obj, (value, recurse) => {\n    // Do not recurse on references.\n    if (Ref.isRef(value)) {\n      return { '/': value.dxn.toString() };\n    }\n\n    return recurse(value);\n  });\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { isProxy } from './proxy/proxy';\n\n// This odd construct only serves one purpose: when you hover over `const x: Live<T>` you'd see `Live<T>` type.\ninterface _Live {}\n\n/**\n * Live reactive object marker interface (does not change the shape of the object.)\n * Accessing properties triggers signal semantics.\n *\n * It is recommended to use explicitly use this type when expecting reactive semantics, e.g. `Live<MyObject>`.\n * One common use case includes React components.\n */\nexport type Live<T> = _Live & T;\n\n/**\n * @returns true if the value is a reactive object.\n */\nexport const isLiveObject = (value: unknown): boolean => isProxy(value);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,uBAAkC;ACFlC,yBAAqC;AACrC,kBAA8B;AAOvB,IAAMA,cAAc,CAAuBC,QAAAA;AAChD,aAAOC,2BAAcD,KAAK,CAACE,OAAOC,YAAAA;AAEhC,QAAIC,uBAAIC,MAAMH,KAAAA,GAAQ;AACpB,aAAO;QAAE,KAAKA,MAAMI,IAAIC,SAAQ;MAAG;IACrC;AAEA,WAAOJ,QAAQD,KAAAA;EACjB,CAAA;AACF;ACAO,IAAMM,eAAe,CAACN,cAA4BO,+BAAQP,KAAAA;AFL1D,IAAMQ,UAA2BN,iBAAAA,IAAIO;AAKrC,IAAMC,aAA8BR,iBAAAA,IAAIS;AAKxC,IAAMC,YAA4BA,iBAAAA;AAKlC,IAAMC,iBAAiCA,iBAAAA;AAKvC,IAAMC,aAA6BA,iBAAAA;AAKnC,IAAMC,WAA2BA,iBAAAA;AAKjC,IAAMC,WAA2BA,iBAAAA;",
  "names": ["getSnapshot", "obj", "deepMapValues", "value", "recurse", "Ref", "isRef", "dxn", "toString", "isLiveObject", "isProxy", "makeRef", "make", "refFromDXN", "fromDXN", "RefArray", "getObjectMeta", "isDeleted", "getType", "getMeta"]
}
