"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  createEchoSchema: () => createEchoSchema
});
module.exports = __toCommonJS(testing_exports);
var import_chunk_G7ZY3KON = require("../chunk-G7ZY3KON.cjs");
var import_signals_core = require("@preact/signals-core");
var import_echo_schema = require("@dxos/echo-schema");
var import_echo_signals = require("@dxos/echo-signals");
var import_invariant = require("@dxos/invariant");
(0, import_echo_signals.registerSignalsRuntime)();
var createEchoSchema = (schema) => {
  const typename = (0, import_echo_schema.getSchemaTypename)(schema);
  (0, import_invariant.assertArgument)(typename, "Schema does not have a typename.");
  const echoSchema = new import_echo_schema.EchoSchema((0, import_chunk_G7ZY3KON.live)(import_echo_schema.StoredSchema, {
    typename,
    version: "0.1.0",
    jsonSchema: (0, import_echo_schema.toJsonSchema)(schema)
  }));
  (0, import_signals_core.effect)(() => {
    const _ = echoSchema.jsonSchema;
    echoSchema._invalidate();
  });
  return echoSchema;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createEchoSchema
});
//# sourceMappingURL=index.cjs.map
