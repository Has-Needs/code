{
  "version": 3,
  "sources": ["../../../../src/testing/echo-schema.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport { effect } from '@preact/signals-core';\nimport { type Schema } from 'effect';\n\nimport { EchoSchema, getSchemaTypename, StoredSchema, toJsonSchema } from '@dxos/echo-schema';\nimport { registerSignalsRuntime } from '@dxos/echo-signals';\nimport { assertArgument } from '@dxos/invariant';\n\nimport { live } from '../object';\n\n// NOTE: Registration is done here is this is the module that calls out to `effect`.\nregisterSignalsRuntime();\n\n/**\n * Create a reactive mutable schema that updates when the JSON schema is updated.\n */\n// TODO(dmaretskyi): Should be replaced by registration of typed object.\nexport const createEchoSchema = (schema: Schema.Schema.AnyNoContext): EchoSchema => {\n  const typename = getSchemaTypename(schema);\n  assertArgument(typename, 'Schema does not have a typename.');\n\n  const echoSchema = new EchoSchema(\n    live(StoredSchema, {\n      typename,\n      version: '0.1.0',\n      jsonSchema: toJsonSchema(schema),\n    }),\n  );\n\n  // TODO(burdon): Unsubscribe is never called.\n  effect(() => {\n    const _ = echoSchema.jsonSchema;\n    echoSchema._invalidate();\n  });\n\n  return echoSchema;\n};\n"],
  "mappings": ";;;;;;AAIA,SAASA,cAAc;AAGvB,SAASC,YAAYC,mBAAmBC,cAAcC,oBAAoB;AAC1E,SAASC,8BAA8B;AACvC,SAASC,sBAAsB;AAK/BC,uBAAAA;AAMO,IAAMC,mBAAmB,CAACC,WAAAA;AAC/B,QAAMC,WAAWC,kBAAkBF,MAAAA;AACnCG,iBAAeF,UAAU,kCAAA;AAEzB,QAAMG,aAAa,IAAIC,WACrBC,KAAKC,cAAc;IACjBN;IACAO,SAAS;IACTC,YAAYC,aAAaV,MAAAA;EAC3B,CAAA,CAAA;AAIFW,SAAO,MAAA;AACL,UAAMC,IAAIR,WAAWK;AACrBL,eAAWS,YAAW;EACxB,CAAA;AAEA,SAAOT;AACT;",
  "names": ["effect", "EchoSchema", "getSchemaTypename", "StoredSchema", "toJsonSchema", "registerSignalsRuntime", "assertArgument", "registerSignalsRuntime", "createEchoSchema", "schema", "typename", "getSchemaTypename", "assertArgument", "echoSchema", "EchoSchema", "live", "StoredSchema", "version", "jsonSchema", "toJsonSchema", "effect", "_", "_invalidate"]
}
