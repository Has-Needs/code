import { Schema } from 'effect';
import { SchemaId, TypeId } from '@dxos/echo-schema';
import { type GenericSignal } from '@dxos/echo-signals/runtime';
import { type ReactiveHandler } from './proxy';
declare const symbolSignal: unique symbol;
declare const symbolPropertySignal: unique symbol;
type ProxyTarget = {
    /**
     * Typename or type DXN.
     */
    [TypeId]: string;
    /**
     * Schema for the root.
     */
    [SchemaId]: Schema.Schema.AnyNoContext;
    /**
     * For get and set operations on value properties.
     */
    [symbolSignal]: GenericSignal;
    /**
     * For modifying the structure of the object.
     */
    [symbolPropertySignal]: GenericSignal;
} & ({
    [key: keyof any]: any;
} | any[]);
/**
 * Typed in-memory reactive store (with Schema).
 */
export declare class TypedReactiveHandler implements ReactiveHandler<ProxyTarget> {
    static readonly instance: ReactiveHandler<any>;
    readonly _proxyMap: WeakMap<object, any>;
    private constructor();
    init(target: ProxyTarget): void;
    get(target: ProxyTarget, prop: string | symbol, receiver: any): any;
    set(target: ProxyTarget, prop: string | symbol, value: any, receiver: any): boolean;
    ownKeys(target: ProxyTarget): ArrayLike<string | symbol>;
    defineProperty(target: ProxyTarget, property: string | symbol, attributes: PropertyDescriptor): boolean;
    private _validateValue;
    private _inspect;
}
export declare const prepareTypedTarget: <T>(target: T, schema: Schema.Schema<T>) => void;
export {};
//# sourceMappingURL=typed-handler.d.ts.map