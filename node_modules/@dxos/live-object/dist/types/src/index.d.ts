import * as EchoSchemaModule from '@dxos/echo-schema';
export * from './proxy';
export * from './snapshot';
export * from './object';
export * from './live';
/**
 * @deprecated Use {@link Ref.make} instead.
 */
export declare const makeRef: <T extends EchoSchemaModule.WithId>(object: T) => EchoSchemaModule.Ref<T>;
/**
 * @deprecated Use {@link Ref.fromDXN} instead.
 */
export declare const refFromDXN: (dxn: import("@dxos/keys").DXN) => EchoSchemaModule.Ref<any>;
/**
 * @deprecated Import from `@dxos/echo-schema` instead.
 */
export declare const RefArray: Readonly<{
    targets: <T extends EchoSchemaModule.AnyEchoObject>(refs: EchoSchemaModule.Ref<T>[]) => T[];
    loadAll: <T extends EchoSchemaModule.AnyEchoObject>(refs: EchoSchemaModule.Ref<T>[]) => Promise<T[]>;
    removeById: (refs: EchoSchemaModule.Ref<EchoSchemaModule.AnyEchoObject>[], id: EchoSchemaModule.ObjectId) => void;
}>;
/**
 * @deprecated Import from `@dxos/echo-schema` instead.
 */
export declare const getObjectMeta: (object: any) => EchoSchemaModule.ObjectMeta;
/**
 * @deprecated Import from `@dxos/echo-schema` instead.
 */
export declare const isDeleted: (obj: EchoSchemaModule.BaseObject) => boolean;
/**
 * @deprecated Import from `@dxos/echo-schema` instead.
 */
export declare const getType: (obj: EchoSchemaModule.BaseObject) => import("@dxos/keys").DXN | undefined;
/**
 * @deprecated Import from `@dxos/echo-schema` instead.
 */
export declare const getMeta: (obj: EchoSchemaModule.BaseObject) => EchoSchemaModule.ObjectMeta;
//# sourceMappingURL=index.d.ts.map