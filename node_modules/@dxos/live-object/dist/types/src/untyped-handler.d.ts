import { type GenericSignal } from '@dxos/echo-signals/runtime';
import { type ReactiveHandler } from './proxy';
declare const symbolSignal: unique symbol;
declare const symbolPropertySignal: unique symbol;
type ProxyTarget = {
    /**
     * For get and set operations on value properties.
     */
    [symbolSignal]: GenericSignal;
    /**
     * For modifying the structure of the object.
     * This is a separate signal so that getter properties are supported.
     */
    [symbolPropertySignal]: GenericSignal;
} & ({
    [key: keyof any]: any;
} | any[]);
/**
 * Untyped in-memory reactive store.
 * Target can be an array or object with any type of values including other reactive proxies.
 */
export declare class UntypedReactiveHandler implements ReactiveHandler<ProxyTarget> {
    static readonly instance: ReactiveHandler<any>;
    readonly _proxyMap: WeakMap<object, any>;
    private constructor();
    init(target: ProxyTarget): void;
    get(target: ProxyTarget, prop: string | symbol, receiver: any): any;
    set(target: ProxyTarget, prop: string | symbol, value: any, receiver: any): boolean;
    ownKeys(target: ProxyTarget): ArrayLike<string | symbol>;
    defineProperty(target: ProxyTarget, property: string | symbol, attributes: PropertyDescriptor): boolean;
}
export {};
//# sourceMappingURL=untyped-handler.d.ts.map