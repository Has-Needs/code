"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  DEFAULT_PORT: () => DEFAULT_PORT,
  createTestEdgeWsServer: () => createTestEdgeWsServer
});
module.exports = __toCommonJS(testing_exports);
var import_chunk_XNHBUTNB = require("../chunk-XNHBUTNB.cjs");
var import_isomorphic_ws = __toESM(require("isomorphic-ws"));
var import_async = require("@dxos/async");
var import_log = require("@dxos/log");
var import_protocols = require("@dxos/protocols");
var import_buf = require("@dxos/protocols/buf");
var import_messenger_pb = require("@dxos/protocols/buf/dxos/edge/messenger_pb");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/core/mesh/edge-client/src/testing/test-utils.ts";
var DEFAULT_PORT = 8080;
var createTestEdgeWsServer = async (port = DEFAULT_PORT, params) => {
  const wsServer = new import_isomorphic_ws.default.Server({
    port,
    verifyClient: createConnectionDelayHandler(params),
    handleProtocols: () => [
      import_protocols.EdgeWebsocketProtocol.V1
    ]
  });
  let connection;
  const messageSink = [];
  const messageSourceLog = [];
  const closeTrigger = new import_async.Trigger();
  const sendResponseMessage = createResponseSender(() => connection.muxer);
  wsServer.on("connection", (ws) => {
    const muxer = new import_chunk_XNHBUTNB.WebSocketMuxer(ws);
    connection = {
      ws,
      muxer
    };
    ws.on("error", (err) => import_log.log.catch(err, void 0, {
      F: __dxlog_file,
      L: 42,
      S: void 0,
      C: (f, a) => f(...a)
    }));
    ws.on("message", async (data) => {
      if (String(data) === "__ping__") {
        ws.send("__pong__");
        return;
      }
      const message = muxer.receiveData(await (0, import_chunk_XNHBUTNB.toUint8Array)(data));
      if (!message) {
        return;
      }
      const { request, requestPayload } = await decodePayload(message, params);
      messageSourceLog.push(request.source);
      if (params?.messageHandler) {
        const responsePayload = await params.messageHandler(requestPayload);
        if (responsePayload && connection) {
          sendResponseMessage(request, responsePayload);
        }
      }
      (0, import_log.log)("message", {
        payload: requestPayload
      }, {
        F: __dxlog_file,
        L: 60,
        S: void 0,
        C: (f, a) => f(...a)
      });
      messageSink.push(requestPayload);
    });
    ws.on("close", () => {
      connection = void 0;
      closeTrigger.wake();
    });
  });
  return {
    server: wsServer,
    messageSink,
    messageSourceLog,
    endpoint: `ws://127.0.0.1:${port}`,
    cleanup: () => wsServer.close(),
    currentConnection: () => connection,
    sendResponseMessage,
    sendMessage: (msg) => {
      return connection.muxer.send(msg);
    },
    closeConnection: () => {
      closeTrigger.reset();
      connection.ws.close(1011);
      return closeTrigger.wait();
    }
  };
};
var createConnectionDelayHandler = (params) => {
  return (_, callback) => {
    if (params?.admitConnection) {
      (0, import_log.log)("delaying edge connection admission", void 0, {
        F: __dxlog_file,
        L: 92,
        S: void 0,
        C: (f, a) => f(...a)
      });
      void params.admitConnection.wait().then(() => {
        callback(true);
        (0, import_log.log)("edge connection admitted", void 0, {
          F: __dxlog_file,
          L: 95,
          S: void 0,
          C: (f, a) => f(...a)
        });
      });
    } else {
      callback(true);
    }
  };
};
var createResponseSender = (connection) => {
  return (request, responsePayload) => {
    const recipient = request.source;
    void connection().send(import_buf.buf.create(import_messenger_pb.MessageSchema, {
      source: {
        identityKey: recipient.identityKey,
        peerKey: recipient.peerKey
      },
      serviceId: request.serviceId,
      payload: {
        value: responsePayload
      }
    }));
  };
};
var decodePayload = async (request, params) => {
  const requestPayload = params?.payloadDecoder ? params.payloadDecoder(request.payload.value) : import_chunk_XNHBUTNB.protocol.getPayload(request, import_messenger_pb.TextMessageSchema);
  return {
    request,
    requestPayload
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_PORT,
  createTestEdgeWsServer
});
//# sourceMappingURL=index.cjs.map
