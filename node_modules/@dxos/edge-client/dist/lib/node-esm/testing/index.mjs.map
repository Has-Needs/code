{
  "version": 3,
  "sources": ["../../../../src/testing/test-utils.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport WebSocket from 'isomorphic-ws';\n\nimport { Trigger } from '@dxos/async';\nimport { log } from '@dxos/log';\nimport { EdgeWebsocketProtocol } from '@dxos/protocols';\nimport { buf } from '@dxos/protocols/buf';\nimport { MessageSchema, TextMessageSchema, type Message } from '@dxos/protocols/buf/dxos/edge/messenger_pb';\n\nimport { protocol } from '../defs';\nimport { WebSocketMuxer } from '../edge-ws-muxer';\nimport { toUint8Array } from '../protocol';\n\nexport const DEFAULT_PORT = 8080;\n\ntype TestEdgeWsServerParams = {\n  admitConnection?: Trigger;\n  payloadDecoder?: (payload: Uint8Array) => any;\n  messageHandler?: (payload: any) => Promise<Uint8Array | undefined>;\n};\n\nexport const createTestEdgeWsServer = async (port = DEFAULT_PORT, params?: TestEdgeWsServerParams) => {\n  const wsServer = new WebSocket.Server({\n    port,\n    verifyClient: createConnectionDelayHandler(params),\n    handleProtocols: () => [EdgeWebsocketProtocol.V1],\n  });\n\n  let connection: { ws: WebSocket; muxer: WebSocketMuxer } | undefined;\n\n  const messageSink: any[] = [];\n  const messageSourceLog: any[] = [];\n  const closeTrigger = new Trigger();\n  const sendResponseMessage = createResponseSender(() => connection!.muxer);\n\n  wsServer.on('connection', (ws) => {\n    const muxer = new WebSocketMuxer(ws);\n    connection = { ws, muxer };\n    ws.on('error', (err) => log.catch(err));\n    ws.on('message', async (data) => {\n      if (String(data) === '__ping__') {\n        ws.send('__pong__');\n        return;\n      }\n      const message = muxer.receiveData(await toUint8Array(data));\n      if (!message) {\n        return;\n      }\n      const { request, requestPayload } = await decodePayload(message, params);\n      messageSourceLog.push(request.source);\n      if (params?.messageHandler) {\n        const responsePayload = await params.messageHandler(requestPayload);\n        if (responsePayload && connection) {\n          sendResponseMessage(request, responsePayload);\n        }\n      }\n      log('message', { payload: requestPayload });\n      messageSink.push(requestPayload);\n    });\n\n    ws.on('close', () => {\n      connection = undefined;\n      closeTrigger.wake();\n    });\n  });\n\n  return {\n    server: wsServer,\n    messageSink,\n    messageSourceLog,\n    endpoint: `ws://127.0.0.1:${port}`,\n    cleanup: () => wsServer.close(),\n    currentConnection: () => connection,\n    sendResponseMessage,\n    sendMessage: (msg: Message) => {\n      return connection!.muxer.send(msg);\n    },\n    closeConnection: () => {\n      closeTrigger.reset();\n      connection!.ws.close(1011);\n      return closeTrigger.wait();\n    },\n  };\n};\n\nconst createConnectionDelayHandler = (params: TestEdgeWsServerParams | undefined) => {\n  return (_: any, callback: (admit: boolean) => void) => {\n    if (params?.admitConnection) {\n      log('delaying edge connection admission');\n      void params.admitConnection.wait().then(() => {\n        callback(true);\n        log('edge connection admitted');\n      });\n    } else {\n      callback(true);\n    }\n  };\n};\n\nconst createResponseSender = (connection: () => WebSocketMuxer) => {\n  return (request: Message, responsePayload: Uint8Array) => {\n    const recipient = request.source!;\n    void connection().send(\n      buf.create(MessageSchema, {\n        source: {\n          identityKey: recipient.identityKey,\n          peerKey: recipient.peerKey,\n        },\n        serviceId: request.serviceId!,\n        payload: { value: responsePayload },\n      }),\n    );\n  };\n};\n\nconst decodePayload = async (request: Message, params: TestEdgeWsServerParams | undefined) => {\n  const requestPayload = params?.payloadDecoder\n    ? params.payloadDecoder(request.payload!.value!)\n    : protocol.getPayload(request, TextMessageSchema);\n  return { request, requestPayload };\n};\n"],
  "mappings": "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",
  "names": ["WebSocket", "Trigger", "log", "EdgeWebsocketProtocol", "buf", "MessageSchema", "TextMessageSchema", "DEFAULT_PORT", "createTestEdgeWsServer", "port", "params", "wsServer", "WebSocket", "Server", "verifyClient", "createConnectionDelayHandler", "handleProtocols", "EdgeWebsocketProtocol", "V1", "connection", "messageSink", "messageSourceLog", "closeTrigger", "Trigger", "sendResponseMessage", "createResponseSender", "muxer", "on", "ws", "WebSocketMuxer", "err", "log", "catch", "data", "String", "send", "message", "receiveData", "toUint8Array", "request", "requestPayload", "decodePayload", "push", "source", "messageHandler", "responsePayload", "payload", "undefined", "wake", "server", "endpoint", "cleanup", "close", "currentConnection", "sendMessage", "msg", "closeConnection", "reset", "wait", "_", "callback", "admitConnection", "then", "recipient", "buf", "create", "MessageSchema", "identityKey", "peerKey", "serviceId", "value", "payloadDecoder", "protocol", "getPayload", "TextMessageSchema"]
}
