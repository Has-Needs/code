import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  WebSocketMuxer,
  protocol,
  toUint8Array
} from "../chunk-HGQUUFIJ.mjs";

// packages/core/mesh/edge-client/src/testing/test-utils.ts
import WebSocket from "isomorphic-ws";
import { Trigger } from "@dxos/async";
import { log } from "@dxos/log";
import { EdgeWebsocketProtocol } from "@dxos/protocols";
import { buf } from "@dxos/protocols/buf";
import { MessageSchema, TextMessageSchema } from "@dxos/protocols/buf/dxos/edge/messenger_pb";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/core/mesh/edge-client/src/testing/test-utils.ts";
var DEFAULT_PORT = 8080;
var createTestEdgeWsServer = async (port = DEFAULT_PORT, params) => {
  const wsServer = new WebSocket.Server({
    port,
    verifyClient: createConnectionDelayHandler(params),
    handleProtocols: () => [
      EdgeWebsocketProtocol.V1
    ]
  });
  let connection;
  const messageSink = [];
  const messageSourceLog = [];
  const closeTrigger = new Trigger();
  const sendResponseMessage = createResponseSender(() => connection.muxer);
  wsServer.on("connection", (ws) => {
    const muxer = new WebSocketMuxer(ws);
    connection = {
      ws,
      muxer
    };
    ws.on("error", (err) => log.catch(err, void 0, {
      F: __dxlog_file,
      L: 42,
      S: void 0,
      C: (f, a) => f(...a)
    }));
    ws.on("message", async (data) => {
      if (String(data) === "__ping__") {
        ws.send("__pong__");
        return;
      }
      const message = muxer.receiveData(await toUint8Array(data));
      if (!message) {
        return;
      }
      const { request, requestPayload } = await decodePayload(message, params);
      messageSourceLog.push(request.source);
      if (params?.messageHandler) {
        const responsePayload = await params.messageHandler(requestPayload);
        if (responsePayload && connection) {
          sendResponseMessage(request, responsePayload);
        }
      }
      log("message", {
        payload: requestPayload
      }, {
        F: __dxlog_file,
        L: 60,
        S: void 0,
        C: (f, a) => f(...a)
      });
      messageSink.push(requestPayload);
    });
    ws.on("close", () => {
      connection = void 0;
      closeTrigger.wake();
    });
  });
  return {
    server: wsServer,
    messageSink,
    messageSourceLog,
    endpoint: `ws://127.0.0.1:${port}`,
    cleanup: () => wsServer.close(),
    currentConnection: () => connection,
    sendResponseMessage,
    sendMessage: (msg) => {
      return connection.muxer.send(msg);
    },
    closeConnection: () => {
      closeTrigger.reset();
      connection.ws.close(1011);
      return closeTrigger.wait();
    }
  };
};
var createConnectionDelayHandler = (params) => {
  return (_, callback) => {
    if (params?.admitConnection) {
      log("delaying edge connection admission", void 0, {
        F: __dxlog_file,
        L: 92,
        S: void 0,
        C: (f, a) => f(...a)
      });
      void params.admitConnection.wait().then(() => {
        callback(true);
        log("edge connection admitted", void 0, {
          F: __dxlog_file,
          L: 95,
          S: void 0,
          C: (f, a) => f(...a)
        });
      });
    } else {
      callback(true);
    }
  };
};
var createResponseSender = (connection) => {
  return (request, responsePayload) => {
    const recipient = request.source;
    void connection().send(buf.create(MessageSchema, {
      source: {
        identityKey: recipient.identityKey,
        peerKey: recipient.peerKey
      },
      serviceId: request.serviceId,
      payload: {
        value: responsePayload
      }
    }));
  };
};
var decodePayload = async (request, params) => {
  const requestPayload = params?.payloadDecoder ? params.payloadDecoder(request.payload.value) : protocol.getPayload(request, TextMessageSchema);
  return {
    request,
    requestPayload
  };
};
export {
  DEFAULT_PORT,
  createTestEdgeWsServer
};
//# sourceMappingURL=index.mjs.map
