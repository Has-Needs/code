import { Event } from '@dxos/async';
import { Resource, type Lifecycle } from '@dxos/context';
import { type Message } from '@dxos/protocols/buf/dxos/edge/messenger_pb';
import { EdgeStatus } from '@dxos/protocols/proto/dxos/client/services';
import { type EdgeIdentity } from './edge-identity';
import { type Protocol } from './protocol';
export type MessageListener = (message: Message) => void;
export type ReconnectListener = () => void;
export interface EdgeConnection extends Required<Lifecycle> {
    statusChanged: Event<EdgeStatus>;
    get info(): any;
    get identityKey(): string;
    get peerKey(): string;
    get isOpen(): boolean;
    get status(): EdgeStatus;
    setIdentity(identity: EdgeIdentity): void;
    onMessage(listener: MessageListener): () => void;
    onReconnected(listener: ReconnectListener): () => void;
    send(message: Message): Promise<void>;
}
export type MessengerConfig = {
    socketEndpoint: string;
    timeout?: number;
    protocol?: Protocol;
    disableAuth?: boolean;
};
/**
 * Messenger client for EDGE:
 *  - While open, uses PersistentLifecycle to keep an open EdgeWsConnection, reconnecting on failures.
 *  - Manages identity and re-create EdgeWsConnection when identity changes.
 *  - Dispatches connection state and message notifications.
 */
export declare class EdgeClient extends Resource implements EdgeConnection {
    private _identity;
    private readonly _config;
    readonly statusChanged: Event<EdgeStatus>;
    private readonly _persistentLifecycle;
    private readonly _messageListeners;
    private readonly _reconnectListeners;
    private readonly _baseWsUrl;
    private readonly _baseHttpUrl;
    private _currentConnection?;
    private _ready;
    constructor(_identity: EdgeIdentity, _config: MessengerConfig);
    get info(): {
        open: boolean;
        status: EdgeStatus;
        identity: string;
        device: string;
    };
    get status(): EdgeStatus;
    get identityKey(): string;
    get peerKey(): string;
    setIdentity(identity: EdgeIdentity): void;
    onMessage(listener: MessageListener): () => void;
    onReconnected(listener: () => void): () => void;
    /**
     * Open connection to messaging service.
     */
    protected _open(): Promise<void>;
    /**
     * Close connection and free resources.
     */
    protected _close(): Promise<void>;
    private _connect;
    private _disconnect;
    private _closeCurrentConnection;
    private _notifyReconnected;
    private _notifyMessageReceived;
    /**
     * Send message.
     * NOTE: The message is guaranteed to be delivered but the service must respond with a message to confirm processing.
     */
    send(message: Message): Promise<void>;
    private _createAuthHeader;
    private _isActive;
}
//# sourceMappingURL=edge-client.d.ts.map