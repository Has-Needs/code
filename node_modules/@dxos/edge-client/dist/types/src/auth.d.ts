import { type Signer } from '@dxos/crypto';
import { PublicKey } from '@dxos/keys';
import { type Chain, type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import type { EdgeIdentity } from './edge-identity';
/**
 * Edge identity backed by a device key without a credential chain.
 */
export declare const createDeviceEdgeIdentity: (signer: Signer, key: PublicKey) => Promise<EdgeIdentity>;
/**
 * Edge identity backed by a chain of credentials.
 */
export declare const createChainEdgeIdentity: (signer: Signer, identityKey: PublicKey, peerKey: PublicKey, chain: Chain | undefined, credentials: Credential[]) => Promise<EdgeIdentity>;
/**
 * Edge identity backed by a random ephemeral key without HALO.
 */
export declare const createEphemeralEdgeIdentity: () => Promise<EdgeIdentity>;
/**
 * Creates a HALO chain of credentials to act as an edge identity.
 */
export declare const createTestHaloEdgeIdentity: (signer: Signer, identityKey: PublicKey, deviceKey: PublicKey) => Promise<EdgeIdentity>;
export declare const createStubEdgeIdentity: () => EdgeIdentity;
//# sourceMappingURL=auth.d.ts.map