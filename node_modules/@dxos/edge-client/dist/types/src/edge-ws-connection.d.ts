import { Resource } from '@dxos/context';
import { type Message } from '@dxos/protocols/buf/dxos/edge/messenger_pb';
import { type EdgeIdentity } from './edge-identity';
export type EdgeWsConnectionCallbacks = {
    onConnected: () => void;
    onMessage: (message: Message) => void;
    onRestartRequired: () => void;
};
export declare class EdgeWsConnection extends Resource {
    private readonly _identity;
    private readonly _connectionInfo;
    private readonly _callbacks;
    private _inactivityTimeoutCtx;
    private _ws;
    private _wsMuxer;
    constructor(_identity: EdgeIdentity, _connectionInfo: {
        url: URL;
        protocolHeader?: string;
    }, _callbacks: EdgeWsConnectionCallbacks);
    get info(): {
        open: boolean;
        identity: string;
        device: string;
    };
    send(message: Message): void;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    private _scheduleHeartbeats;
    private _rescheduleHeartbeatTimeout;
}
//# sourceMappingURL=edge-ws-connection.d.ts.map