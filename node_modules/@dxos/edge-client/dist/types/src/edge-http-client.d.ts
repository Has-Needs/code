import { Context } from '@dxos/context';
import { type PublicKey, type SpaceId } from '@dxos/keys';
import { type GetNotarizationResponseBody, type PostNotarizationRequestBody, type JoinSpaceRequest, type JoinSpaceResponseBody, type CreateAgentResponseBody, type CreateAgentRequestBody, type GetAgentStatusResponseBody, type RecoverIdentityRequest, type RecoverIdentityResponseBody, type UploadFunctionRequest, type UploadFunctionResponseBody, type ObjectId, type ExecuteWorkflowResponseBody, type QueueQuery, type QueryResult, type InitiateOAuthFlowRequest, type InitiateOAuthFlowResponse, type CreateSpaceRequest, type CreateSpaceResponseBody } from '@dxos/protocols';
import { type EdgeIdentity } from './edge-identity';
export declare class EdgeHttpClient {
    private readonly _baseUrl;
    private _edgeIdentity;
    /**
     * Auth header is cached until receiving the next 401 from EDGE, at which point it gets refreshed.
     */
    private _authHeader;
    constructor(baseUrl: string);
    get baseUrl(): string;
    setIdentity(identity: EdgeIdentity): void;
    createAgent(body: CreateAgentRequestBody, args?: EdgeHttpGetArgs): Promise<CreateAgentResponseBody>;
    getAgentStatus(request: {
        ownerIdentityKey: PublicKey;
    }, args?: EdgeHttpGetArgs): Promise<GetAgentStatusResponseBody>;
    getCredentialsForNotarization(spaceId: SpaceId, args?: EdgeHttpGetArgs): Promise<GetNotarizationResponseBody>;
    notarizeCredentials(spaceId: SpaceId, body: PostNotarizationRequestBody, args?: EdgeHttpGetArgs): Promise<void>;
    joinSpaceByInvitation(spaceId: SpaceId, body: JoinSpaceRequest, args?: EdgeHttpGetArgs): Promise<JoinSpaceResponseBody>;
    recoverIdentity(body: RecoverIdentityRequest, args?: EdgeHttpGetArgs): Promise<RecoverIdentityResponseBody>;
    executeWorkflow(spaceId: SpaceId, graphId: ObjectId, input: any, args?: EdgeHttpGetArgs): Promise<ExecuteWorkflowResponseBody>;
    uploadFunction(pathParts: {
        functionId?: string;
    }, body: UploadFunctionRequest, args?: EdgeHttpGetArgs): Promise<UploadFunctionResponseBody>;
    initiateOAuthFlow(body: InitiateOAuthFlowRequest, args?: EdgeHttpGetArgs): Promise<InitiateOAuthFlowResponse>;
    queryQueue(subspaceTag: string, spaceId: SpaceId, query: QueueQuery, args?: EdgeHttpGetArgs): Promise<QueryResult>;
    insertIntoQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objects: unknown[], args?: EdgeHttpGetArgs): Promise<void>;
    deleteFromQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objectIds: ObjectId[], args?: EdgeHttpGetArgs): Promise<void>;
    createSpace(body: CreateSpaceRequest, args?: EdgeHttpGetArgs): Promise<CreateSpaceResponseBody>;
    private _call;
    private _handleUnauthorized;
}
export type RetryConfig = {
    /**
     * A number of call retries, not counting the initial request.
     */
    count: number;
    /**
     * Delay before retries in ms.
     */
    timeout?: number;
    /**
     * A random amount of time before retrying to help prevent large bursts of requests.
     */
    jitter?: number;
};
export type EdgeHttpGetArgs = {
    context?: Context;
    retry?: RetryConfig;
};
export type EdgeHttpPostArgs = {
    context?: Context;
    body?: any;
    retry?: RetryConfig;
};
//# sourceMappingURL=edge-http-client.d.ts.map