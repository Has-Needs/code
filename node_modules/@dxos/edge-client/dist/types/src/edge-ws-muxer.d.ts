import { type Message } from '@dxos/protocols/buf/dxos/edge/messenger_pb';
/**
 * https://developers.cloudflare.com/durable-objects/platform/limits/
 */
export declare const CLOUDFLARE_MESSAGE_MAX_BYTES: number;
export declare const CLOUDFLARE_RPC_MAX_BYTES: number;
export declare class WebSocketMuxer {
    private readonly _ws;
    private readonly _inMessageAccumulator;
    private readonly _outMessageChunks;
    private readonly _outMessageChannelByService;
    private _sendTimeout;
    private readonly _maxChunkLength;
    constructor(_ws: WebSocketCompat, config?: {
        maxChunkLength: number;
    });
    /**
     * Resolves when all the message chunks get enqueued for sending.
     */
    send(message: Message): Promise<void>;
    receiveData(data: Uint8Array): Message | undefined;
    destroy(): void;
    private _sendChunkedMessages;
    private _resolveChannel;
}
type WebSocketCompat = {
    readonly readyState: number;
    /**
     * Not available in workerd.
     */
    bufferedAmount?: number;
    send(message: (ArrayBuffer | ArrayBufferView) | string): void;
};
export {};
//# sourceMappingURL=edge-ws-muxer.d.ts.map