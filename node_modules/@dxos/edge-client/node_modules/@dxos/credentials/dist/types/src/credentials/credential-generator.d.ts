import { type Signer } from '@dxos/crypto';
import { type PublicKey } from '@dxos/keys';
import { type TypedMessage } from '@dxos/protocols/proto';
import { type FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { AdmittedFeed, type Credential, type DeviceProfileDocument, type ProfileDocument, SpaceMember } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type DelegateSpaceInvitation } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type CredentialSigner } from './credential-factory';
/**
 * Utility class for generating credential messages, where the issuer is the current identity or device.
 */
export declare class CredentialGenerator {
    private readonly _signer;
    private readonly _identityKey;
    private readonly _deviceKey;
    constructor(_signer: Signer, _identityKey: PublicKey, _deviceKey: PublicKey);
    /**
     * Create genesis messages for new Space.
     */
    createSpaceGenesis(spaceKey: PublicKey, controlKey: PublicKey, creatorProfile?: ProfileDocument): Promise<Credential[]>;
    /**
     * Create invitation.
     * Admit identity and control and data feeds.
     */
    createMemberInvitation(spaceKey: PublicKey, identityKey: PublicKey, deviceKey: PublicKey, controlKey: PublicKey, dataKey: PublicKey, genesisFeedKey: PublicKey): Promise<Credential[]>;
    /**
     * Add device to space.
     */
    createDeviceAuthorization(deviceKey: PublicKey): Promise<Credential>;
    /**
     * Add device metadata.
     */
    createDeviceProfile(profile: DeviceProfileDocument): Promise<Credential>;
    /**
     * Add feed to space.
     */
    createFeedAdmission(spaceKey: PublicKey, feedKey: PublicKey, designation: AdmittedFeed.Designation): Promise<Credential>;
    createProfileCredential(profile: ProfileDocument): Promise<Credential>;
    createEpochCredential(spaceKey: PublicKey): Promise<Credential>;
}
export declare const createDeviceAuthorization: (signer: CredentialSigner, identityKey: PublicKey, deviceKey: PublicKey) => Promise<TypedMessage[]>;
/**
 * @param signer - invitation signer.
 * @param identityKey - identity key of the admitted member.
 * @param spaceKey - subject space key.
 * @param genesisFeedKey - genesis feed key of the space.
 * @param role - role of the newly added member.
 * @param membershipChainHeads - ids of the last known SpaceMember credentials (branching possible).
 * @param profile - profile of the newly added member.
 * @param invitationCredentialId - id of the delegated invitation credential in case one was used to add the member.
 */
export declare const createAdmissionCredentials: (signer: CredentialSigner, identityKey: PublicKey, spaceKey: PublicKey, genesisFeedKey: PublicKey, role?: SpaceMember.Role, membershipChainHeads?: PublicKey[], profile?: ProfileDocument, invitationCredentialId?: PublicKey) => Promise<FeedMessage.Payload[]>;
export declare const createDelegatedSpaceInvitationCredential: (signer: CredentialSigner, subject: PublicKey, invitation: DelegateSpaceInvitation) => Promise<FeedMessage.Payload>;
/**
 * @param signer - credential issuer.
 * @param subject - key of the space the invitation was for.
 * @param invitationCredentialId id of a dxos.halo.invitations.DelegateSpaceInvitation credential.
 */
export declare const createCancelDelegatedSpaceInvitationCredential: (signer: CredentialSigner, subject: PublicKey, invitationCredentialId: PublicKey) => Promise<FeedMessage.Payload>;
//# sourceMappingURL=credential-generator.d.ts.map