{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/base32-decode@1.0.0/node_modules/base32-decode/index.js", "../../../src/dxn.ts", "../../../src/object-id.ts", "../../../src/space-id.ts", "../../../../../../node_modules/.pnpm/to-data-view@2.0.0/node_modules/to-data-view/index.js", "../../../../../../node_modules/.pnpm/base32-encode@2.0.0/node_modules/base32-encode/index.js", "../../../src/random-bytes.ts", "../../../src/identity-did.ts", "../../../src/public-key.ts"],
  "sourcesContent": ["var RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\nvar RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV'\nvar CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'\n\nfunction readChar (alphabet, char) {\n  var idx = alphabet.indexOf(char)\n\n  if (idx === -1) {\n    throw new Error('Invalid character found: ' + char)\n  }\n\n  return idx\n}\n\nmodule.exports = function base32Decode (input, variant) {\n  var alphabet\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648\n      input = input.replace(/=+$/, '')\n      break\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX\n      input = input.replace(/=+$/, '')\n      break\n    case 'Crockford':\n      alphabet = CROCKFORD\n      input = input.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')\n      break\n    default:\n      throw new Error('Unknown base32 variant: ' + variant)\n  }\n\n  var length = input.length\n\n  var bits = 0\n  var value = 0\n\n  var index = 0\n  var output = new Uint8Array((length * 5 / 8) | 0)\n\n  for (var i = 0; i < length; i++) {\n    value = (value << 5) | readChar(alphabet, input[i])\n    bits += 5\n\n    if (bits >= 8) {\n      output[index++] = (value >>> (bits - 8)) & 255\n      bits -= 8\n    }\n  }\n\n  return output.buffer\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { Schema } from 'effect';\nimport type { inspect, InspectOptionsStylized } from 'node:util';\n\nimport { devtoolsFormatter, type DevtoolsFormatter, inspectCustom } from '@dxos/debug';\nimport { invariant } from '@dxos/invariant';\n\nimport { ObjectId } from './object-id';\nimport { SpaceId } from './space-id';\n\n/**\n * Tags for ECHO DXNs that should resolve the object ID in the local space.\n */\n// TODO(dmaretskyi): Rebrand this as \"unknown location\" to specify objects in the same space or queue. Essentially making the DXN it a URI not URL\n// TODO(dmaretskyi): \"@\" is a separator character in the URI spec.\nexport const LOCAL_SPACE_TAG = '@';\n\n// TODO(burdon): Namespace for.\nexport const QueueSubspaceTags = Object.freeze({\n  DATA: 'data',\n  TRACE: 'trace',\n});\n\nexport type QueueSubspaceTag = (typeof QueueSubspaceTags)[keyof typeof QueueSubspaceTags];\n\n/**\n * DXN unambiguously names a resource like an ECHO object, schema definition, plugin, etc.\n * Each DXN starts with a dxn prefix, followed by a resource kind.\n * Colon Symbol : is used a delimiter between parts.\n * DXNs may contain slashes.\n * '@' in the place of the space id is used to denote that the DXN should be resolved in the local space.\n *\n * @example\n * ```\n * dxn:echo:<space key>:<echo id>\n * dxn:echo:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6\n * dxn:echo:@:01J00J9B45YHYSGZQTQMSKMGJ6\n * dxn:type:dxos.org/type/Calendar\n * dxn:plugin:dxos.org/agent/plugin/functions\n * ```\n */\nexport class DXN {\n  // TODO(dmaretskyi): Should this be a transformation into the DXN type?\n  static Schema = Schema.NonEmptyString.pipe(\n    Schema.pattern(/^dxn:([^:]+):(?:[^:]+:?)+[^:]$/),\n    // TODO(dmaretskyi): To set the format we need to move the annotation IDs out of the echo-schema package.\n    // FormatAnnotation.set(FormatEnum.DXN),\n    Schema.annotations({\n      title: 'DXN',\n      description: 'DXN URI',\n      examples: ['dxn:type:example.com/type/MyType', 'dxn:echo:@:01J00J9B45YHYSGZQTQMSKMGJ6'],\n    }),\n  );\n\n  static hash(dxn: DXN): string {\n    return dxn.toString();\n  }\n\n  /**\n   * Kind constants.\n   */\n  static kind = Object.freeze({\n    /**\n     * dxn:type:<type name>[:<version>]\n     */\n    TYPE: 'type',\n\n    /**\n     * dxn:echo:<space id>:<echo id>\n     * dxn:echo:@:<echo id>\n     */\n    // TODO(burdon): Rename to OBJECT? (BREAKING CHANGE).\n    // TODO(burdon): Add separate Kind for space.\n    ECHO: 'echo',\n\n    /**\n     * The subspace tag enables us to partition queues by usage within the context of a space.\n     * dxn:queue:<subspace_tag>:<space_id>:<queue_id>[:object_id]\n     * dxn:queue:data:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6\n     * dxn:queue:trace:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE:01J00J9B45YHYSGZQTQMSKMGJ6\n     */\n    QUEUE: 'queue',\n  });\n\n  get kind() {\n    return this.#kind;\n  }\n\n  static equals(a: DXN, b: DXN): boolean {\n    return a.kind === b.kind && a.parts.length === b.parts.length && a.parts.every((part, i) => part === b.parts[i]);\n  }\n\n  // TODO(burdon): Rename isValid.\n  static isDXNString(dxn: string): boolean {\n    return dxn.startsWith('dxn:');\n  }\n\n  static parse(dxn: string): DXN {\n    if (typeof dxn !== 'string') {\n      throw new Error(`Invalid DXN: ${dxn}`);\n    }\n    const [prefix, kind, ...parts] = dxn.split(':');\n    if (!(prefix === 'dxn')) {\n      throw new Error(`Invalid DXN: ${dxn}`);\n    }\n    if (!(typeof kind === 'string' && kind.length > 0)) {\n      throw new Error(`Invalid DXN: ${dxn}`);\n    }\n    if (!(parts.length > 0)) {\n      throw new Error(`Invalid DXN: ${dxn}`);\n    }\n\n    return new DXN(kind, parts);\n  }\n\n  static tryParse(dxn: string): DXN | undefined {\n    try {\n      return DXN.parse(dxn);\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  /**\n   * @example `dxn:type:example.com/type/Contact`\n   */\n  static fromTypename(typename: string): DXN {\n    return new DXN(DXN.kind.TYPE, [typename]);\n  }\n\n  /**\n   * @example `dxn:type:example.com/type/Contact:0.1.0`\n   */\n  // TODO(dmaretskyi): Consider using @ as the version separator.\n  static fromTypenameAndVersion(typename: string, version: string): DXN {\n    return new DXN(DXN.kind.TYPE, [typename, version]);\n  }\n\n  /**\n   * @example `dxn:echo:@:01J00J9B45YHYSGZQTQMSKMGJ6`\n   */\n  static fromLocalObjectId(id: string): DXN {\n    return new DXN(DXN.kind.ECHO, [LOCAL_SPACE_TAG, id]);\n  }\n\n  static fromQueue(subspaceTag: QueueSubspaceTag, spaceId: SpaceId, queueId: ObjectId, objectId?: ObjectId) {\n    invariant(SpaceId.isValid(spaceId));\n    invariant(ObjectId.isValid(queueId));\n    invariant(!objectId || ObjectId.isValid(objectId));\n\n    return new DXN(DXN.kind.QUEUE, [subspaceTag, spaceId, queueId, ...(objectId ? [objectId] : [])]);\n  }\n\n  #kind: string;\n  #parts: string[];\n\n  constructor(kind: string, parts: string[]) {\n    invariant(parts.length > 0);\n    invariant(parts.every((part) => typeof part === 'string' && part.length > 0 && part.indexOf(':') === -1));\n\n    // Per-type validation.\n    switch (kind) {\n      case DXN.kind.TYPE:\n        if (parts.length > 2) {\n          throw new Error('Invalid \"type\" DXN');\n        }\n        break;\n      case DXN.kind.ECHO:\n        if (parts.length !== 2) {\n          throw new Error('Invalid \"echo\" DXN');\n        }\n        break;\n    }\n\n    this.#kind = kind;\n    this.#parts = parts;\n  }\n\n  get parts() {\n    return this.#parts;\n  }\n\n  // TODO(burdon): Should getters fail?\n  get typename() {\n    invariant(this.#kind === DXN.kind.TYPE);\n    return this.#parts[0];\n  }\n\n  hasTypenameOf(typename: string): boolean {\n    return this.#kind === DXN.kind.TYPE && this.#parts.length === 1 && this.#parts[0] === typename;\n  }\n\n  isLocalObjectId(): boolean {\n    return this.#kind === DXN.kind.ECHO && this.#parts[0] === LOCAL_SPACE_TAG && this.#parts.length === 2;\n  }\n\n  asTypeDXN(): DXN.TypeDXN | undefined {\n    if (this.kind !== DXN.kind.TYPE) {\n      return undefined;\n    }\n\n    const [type, version] = this.#parts;\n    return {\n      type,\n      version: version as string | undefined,\n    };\n  }\n\n  asEchoDXN(): DXN.EchoDXN | undefined {\n    if (this.kind !== DXN.kind.ECHO) {\n      return undefined;\n    }\n\n    const [spaceId, echoId] = this.#parts;\n    return {\n      spaceId: spaceId === LOCAL_SPACE_TAG ? undefined : (spaceId as SpaceId | undefined),\n      echoId,\n    };\n  }\n\n  asQueueDXN(): DXN.QueueDXN | undefined {\n    if (this.kind !== DXN.kind.QUEUE) {\n      return undefined;\n    }\n\n    const [subspaceTag, spaceId, queueId, objectId] = this.#parts;\n    if (typeof queueId !== 'string') {\n      return undefined;\n    }\n\n    return {\n      subspaceTag,\n      spaceId: spaceId as SpaceId,\n      queueId,\n      objectId: objectId as string | undefined,\n    };\n  }\n\n  toString(): DXN.String {\n    return `dxn:${this.#kind}:${this.#parts.join(':')}` as DXN.String;\n  }\n\n  /**\n   * Used by Node.js to get textual representation of this object when it's printed with a `console.log` statement.\n   */\n  [inspectCustom](depth: number, options: InspectOptionsStylized, inspectFn: typeof inspect): string {\n    const printControlCode = (code: number) => {\n      return `\\x1b[${code}m`;\n    };\n\n    return (\n      printControlCode(inspectFn.colors.blueBright![0]) + this.toString() + printControlCode(inspectFn.colors.reset![0])\n    );\n  }\n\n  get [devtoolsFormatter](): DevtoolsFormatter {\n    return {\n      header: () => {\n        return ['span', { style: 'font-weight: bold;' }, this.toString()];\n      },\n    };\n  }\n}\n\n// TODO(dmaretskyi): Fluent API:\n/*\nclass DXN {\n  ...\nisEchoDXN(): this is EchoDXN {\n  return this.#kind === DXN.kind.ECHO;\n}\n...\n}\n\ninterface EchoDXN extends DXN {\n  objectId: ObjectId;\n}\n\ndeclare const dxn: DXN;\n\ndxn.objectId\n\nif(dxn.isEchoDXN()) {\n  dxn.objectId\n}\n  ```\n\n/**\n * API namespace.\n */\nexport declare namespace DXN {\n  export type TypeDXN = {\n    type: string;\n    version?: string;\n  };\n\n  export type EchoDXN = {\n    spaceId?: SpaceId;\n    // TODO(burdon): Rename objectId.\n    echoId: string; // TODO(dmaretskyi): ObjectId.\n  };\n\n  export type QueueDXN = {\n    subspaceTag: string;\n    spaceId: SpaceId;\n    queueId: string; // TODO(dmaretskyi): ObjectId.\n    objectId?: string; // TODO(dmaretskyi): ObjectId.\n  };\n\n  /**\n   * DXN represented as a javascript string.\n   */\n  export type String = string & { __DXNString: never };\n  // TODO(burdon): Make brand.\n  // export const String = S.String.pipe(S.brand('DXN'));\n  // export type String = S.To(typoeof String);\n}\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { Schema } from 'effect';\nimport { ulid } from 'ulidx';\n\n// TODO(dmaretskyi): Make brand.\n// export const ObjectIdBrand: unique symbol = Symbol('@dxos/echo/ObjectId');\n// export const ObjectIdSchema = Schema.ULID.pipe(S.brand(ObjectIdBrand));\nconst ObjectIdSchema = Schema.String.pipe(Schema.pattern(/^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i)).annotations({\n  description: 'a Universally Unique Lexicographically Sortable Identifier',\n  pattern: '^[0-7][0-9A-HJKMNP-TV-Z]{25}$',\n});\n\nexport type ObjectId = typeof ObjectIdSchema.Type;\n\nexport interface ObjectIdClass extends Schema.SchemaClass<ObjectId, string> {\n  isValid(id: string): id is ObjectId;\n  make(id: string): ObjectId;\n  random(): ObjectId;\n}\n\n/**\n * Randomly generated unique identifier for an object.\n *\n * Follows ULID spec.\n */\nexport const ObjectId: ObjectIdClass = class extends ObjectIdSchema {\n  static isValid(id: string): id is ObjectId {\n    try {\n      Schema.decodeSync(ObjectId)(id);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  static random(): ObjectId {\n    return ulid() as ObjectId;\n  }\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport base32Decode from 'base32-decode';\nimport base32Encode from 'base32-encode';\nimport { Schema } from 'effect';\n\nimport { invariant } from '@dxos/invariant';\n\nimport { randomBytes } from './random-bytes';\n\n/**\n * Denotes RFC4648 base-32 format.\n */\nconst MULTIBASE_PREFIX = 'B';\n\nconst ENCODED_LENGTH = 33;\n\nconst isValid = (value: string): value is SpaceId => {\n  return typeof value === 'string' && value.startsWith(MULTIBASE_PREFIX) && value.length === ENCODED_LENGTH;\n};\n\n/**\n * A unique identifier for a space.\n * Space keys are generated by creating a keypair, and then taking the first 20 bytes of the SHA-256 hash of the public key and encoding them to multibase RFC4648 base-32 format (prefixed with B, see Multibase Table).\n * @example BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE\n */\n// TODO(burdon): Use effect branded type?\nexport type SpaceId = string & { __SpaceId: true };\n\nexport const SpaceId: Schema.Schema<SpaceId, string> & {\n  byteLength: number;\n  encode: (value: Uint8Array) => SpaceId;\n  decode: (value: SpaceId) => Uint8Array;\n  isValid: (value: string) => value is SpaceId;\n  make: (value: string) => SpaceId;\n  random: () => SpaceId;\n} = class extends Schema.String.pipe(Schema.filter(isValid)) {\n  static byteLength = 20;\n\n  static encode = (value: Uint8Array): SpaceId => {\n    invariant(value instanceof Uint8Array, 'Invalid type');\n    invariant(value.length === SpaceId.byteLength, 'Invalid length');\n    return (MULTIBASE_PREFIX + base32Encode(value, 'RFC4648')) as SpaceId;\n  };\n\n  static decode = (value: SpaceId): Uint8Array => {\n    invariant(value.startsWith(MULTIBASE_PREFIX), 'Invalid multibase32 encoding');\n    return new Uint8Array(base32Decode(value.slice(1), 'RFC4648'));\n  };\n\n  static isValid = isValid;\n\n  static random = (): SpaceId => {\n    return SpaceId.encode(randomBytes(SpaceId.byteLength));\n  };\n};\n", "export default function toDataView (data) {\n  if (data instanceof Int8Array || data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n    return new DataView(data.buffer, data.byteOffset, data.byteLength)\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data)\n  }\n\n  throw new TypeError('Expected `data` to be an ArrayBuffer, Buffer, Int8Array, Uint8Array or Uint8ClampedArray')\n}\n", "import toDataView from 'to-data-view'\n\nconst RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\nconst RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV'\nconst CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'\n\nexport default function base32Encode (data, variant, options) {\n  options = options || {}\n  let alphabet, defaultPadding\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648\n      defaultPadding = true\n      break\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX\n      defaultPadding = true\n      break\n    case 'Crockford':\n      alphabet = CROCKFORD\n      defaultPadding = false\n      break\n    default:\n      throw new Error('Unknown base32 variant: ' + variant)\n  }\n\n  const padding = (options.padding !== undefined ? options.padding : defaultPadding)\n  const view = toDataView(data)\n\n  let bits = 0\n  let value = 0\n  let output = ''\n\n  for (let i = 0; i < view.byteLength; i++) {\n    value = (value << 8) | view.getUint8(i)\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nexport const randomBytes = (length: number) => {\n  // globalThis.crypto is not available in Node.js when running in vitest even though the documentation says it should be.\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const webCrypto = globalThis.crypto ?? require('node:crypto').webcrypto;\n\n  const bytes = new Uint8Array(length);\n  webCrypto.getRandomValues(bytes);\n  return bytes;\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport base32Decode from 'base32-decode';\nimport base32Encode from 'base32-encode';\n\nimport { invariant } from '@dxos/invariant';\n\nimport { randomBytes } from './random-bytes';\n\n/**\n * A unique identifier for an identity.\n * Identity DIDs are generated by creating a keypair, and then taking the first 20 bytes of the SHA-256 hash of the public key and encoding them to multibase RFC4648 base-32 format (prefixed with B, see Multibase Table).\n * @example did:halo:BA25QRC2FEWCSAMRP4RZL65LWJ7352CKE\n */\nexport type IdentityDid = string & { __IdentityDid: never };\n\nexport const IdentityDid = Object.freeze({\n  byteLength: 20,\n  encode: (value: Uint8Array): IdentityDid => {\n    invariant(value instanceof Uint8Array, 'Invalid type');\n    invariant(value.length === IdentityDid.byteLength, 'Invalid length');\n\n    return (DID_PREFIX + MULTIBASE_PREFIX + base32Encode(value, 'RFC4648')) as IdentityDid;\n  },\n  decode: (value: IdentityDid): Uint8Array => {\n    invariant(value.startsWith(DID_PREFIX + MULTIBASE_PREFIX), 'Invalid multibase32 encoding');\n\n    return new Uint8Array(base32Decode(value.slice(10), 'RFC4648'));\n  },\n  isValid: (value: string): value is IdentityDid => {\n    return (\n      typeof value === 'string' && value.startsWith(DID_PREFIX + MULTIBASE_PREFIX) && value.length === ENCODED_LENGTH\n    );\n  },\n  random: (): IdentityDid => {\n    return IdentityDid.encode(randomBytes(IdentityDid.byteLength));\n  },\n});\n\n/**\n * Denotes RFC4648 base-32 format.\n */\nconst MULTIBASE_PREFIX = 'B';\n\nconst DID_PREFIX = 'did:halo:';\n\nconst ENCODED_LENGTH = 42;\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport base32Decode from 'base32-decode';\nimport base32Encode from 'base32-encode';\nimport { type inspect, type InspectOptionsStylized } from 'node:util';\n\nimport {\n  devtoolsFormatter,\n  type DevtoolsFormatter,\n  equalsSymbol,\n  type Equatable,\n  inspectCustom,\n  truncateKey,\n} from '@dxos/debug';\nimport { invariant } from '@dxos/invariant';\n\nimport { randomBytes } from './random-bytes';\n\nexport const PUBLIC_KEY_LENGTH = 32;\nexport const SECRET_KEY_LENGTH = 64;\n\n/**\n * All representations that can be converted to a PublicKey.\n */\nexport type PublicKeyLike = PublicKey | Buffer | Uint8Array | ArrayBuffer | string;\n\n/**\n * Vitest with JSDom causes instanceof ArrayBuffer check to fail\n */\nconst isLikeArrayBuffer = (value: any): value is ArrayBuffer =>\n  typeof value === 'object' && value !== null && Object.getPrototypeOf(value).constructor.name === 'ArrayBuffer';\n\n/**\n * The purpose of this class is to assure consistent use of keys throughout the project.\n * Keys should be maintained as buffers in objects and proto definitions, and converted to hex\n * strings as late as possible (eg, to log/display).\n */\nexport class PublicKey implements Equatable {\n  static ZERO = PublicKey.from('00'.repeat(PUBLIC_KEY_LENGTH));\n\n  /**\n   * Creates new instance of PublicKey automatically determining the input format.\n   * @param source A Buffer, or Uint8Array, or hex encoded string, or something with an `asUint8Array` method on it\n   * @returns PublicKey\n   */\n  static from(source: PublicKeyLike): PublicKey {\n    invariant(source);\n    if (source instanceof PublicKey) {\n      return source;\n    } else if (source instanceof Buffer) {\n      return new PublicKey(new Uint8Array(source.buffer, source.byteOffset, source.byteLength));\n    } else if (source instanceof Uint8Array) {\n      return new PublicKey(source);\n    } else if (source instanceof ArrayBuffer || isLikeArrayBuffer(source)) {\n      return new PublicKey(new Uint8Array(source));\n    } else if (typeof source === 'string') {\n      // TODO(burdon): Check length.\n      return PublicKey.fromHex(source);\n    } else if ((<any>source).asUint8Array) {\n      return new PublicKey((<any>source).asUint8Array());\n    } else {\n      throw new TypeError(`Unable to create PublicKey from ${source}`);\n    }\n  }\n\n  /**\n   * Same as `PublicKey.from` but does not throw and instead returns a `{ key: PublicKey }` or `{ error: Error }`\n   * @param source Same PublicKeyLike argument as for `PublicKey.from`\n   * @returns PublicKey\n   */\n  static safeFrom(source?: PublicKeyLike): PublicKey | undefined {\n    if (!source) {\n      return undefined;\n    }\n\n    try {\n      const key = PublicKey.from(source);\n      // TODO(wittjosiah): Space keys don't pass this check.\n      // if (key.length !== PUBLIC_KEY_LENGTH && key.length !== SECRET_KEY_LENGTH) {\n      //   return undefined;\n      // }\n      return key;\n    } catch (err: any) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Creates new instance of PublicKey from hex string.\n   */\n  static fromHex(hex: string): PublicKey {\n    if (hex.startsWith('0x')) {\n      hex = hex.slice(2);\n    }\n\n    const buf = Buffer.from(hex, 'hex');\n    // TODO(burdon): Test if key.\n    return new PublicKey(new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength));\n  }\n\n  /**\n   * Creates a new key.\n   */\n  static random(): PublicKey {\n    // TODO(burdon): Enable seed for debugging.\n    return PublicKey.from(randomBytes(PUBLIC_KEY_LENGTH));\n  }\n\n  static randomOfLength(length: number): PublicKey {\n    return PublicKey.from(randomBytes(length));\n  }\n\n  static *randomSequence(): Generator<PublicKey> {\n    for (let i = 0; i < 1_0000; i++) {\n      // Counter just to protect against infinite loops.\n      yield PublicKey.random();\n    }\n    throw new Error('Too many keys requested');\n  }\n\n  /**\n   * Tests if provided values is an instance of PublicKey.\n   */\n  static isPublicKey(value: any): value is PublicKey {\n    return value instanceof PublicKey;\n  }\n\n  /**\n   * Asserts that provided values is an instance of PublicKey.\n   */\n  static assertValidPublicKey(value: any): asserts value is PublicKey {\n    if (!this.isPublicKey(value)) {\n      throw new TypeError('Invalid PublicKey');\n    }\n  }\n\n  /**\n   * Tests two keys for equality.\n   */\n  static equals(left: PublicKeyLike, right: PublicKeyLike): boolean {\n    return PublicKey.from(left).equals(right);\n  }\n\n  /**\n   * @param str string representation of key.\n   * @return Key buffer.\n   * @deprecated All keys should be represented as instances of PublicKey.\n   */\n  static bufferize(str: string): Buffer {\n    invariant(typeof str === 'string', 'Invalid type');\n    const buffer = Buffer.from(str, 'hex');\n    // invariant(buffer.length === PUBLIC_KEY_LENGTH || buffer.length === SECRET_KEY_LENGTH,\n    //   `Invalid key length: ${buffer.length}`);\n    return buffer;\n  }\n\n  /**\n   * @param key key like data structure (but not PublicKey which should use toString).\n   * @return Hex string representation of key.\n   * @deprecated All keys should be represented as instances of PublicKey.\n   */\n  static stringify(key: Buffer | Uint8Array | ArrayBuffer): string {\n    if (key instanceof PublicKey) {\n      key = key.asBuffer();\n    } else if (key instanceof Uint8Array) {\n      key = Buffer.from(key.buffer, key.byteOffset, key.byteLength);\n    }\n\n    invariant(key instanceof Buffer, 'Invalid type');\n    return key.toString('hex');\n  }\n\n  /**\n   * To be used with ComplexMap and ComplexSet.\n   * Returns a scalar representation for this key.\n   */\n  static hash(key: PublicKey): string {\n    return key.toHex();\n  }\n\n  static fromMultibase32(encoded: string): PublicKey {\n    invariant(encoded.startsWith('B'), 'Invalid multibase32 encoding');\n\n    return new PublicKey(new Uint8Array(base32Decode(encoded.slice(1), 'RFC4648')));\n  }\n\n  constructor(private readonly _value: Uint8Array) {\n    if (!(_value instanceof Uint8Array)) {\n      throw new TypeError(`Expected Uint8Array, got: ${_value}`);\n    }\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  toJSON(): string {\n    return this.toHex();\n  }\n\n  toJSONL(): string {\n    return this.truncate();\n  }\n\n  get length() {\n    return this._value.length;\n  }\n\n  toHex(): string {\n    return this.asBuffer().toString('hex');\n  }\n\n  toMultibase32(): string {\n    return 'B' + base32Encode(this._value, 'RFC4648');\n  }\n\n  truncate(length = undefined): string {\n    return truncateKey(this, length);\n  }\n\n  asBuffer(): Buffer {\n    return Buffer.from(this._value.buffer, this._value.byteOffset, this._value.byteLength);\n  }\n\n  asUint8Array(): Uint8Array {\n    return this._value;\n  }\n\n  getInsecureHash(modulo: number): number {\n    return Math.abs(this._value.reduce((acc, val) => (acc ^ val) | 0, 0)) % modulo;\n  }\n\n  /**\n   * Used by Node.js to get textual representation of this object when it's printed with a `console.log` statement.\n   */\n  [inspectCustom](depth: number, options: InspectOptionsStylized, inspectFn: typeof inspect): string {\n    if (!options.colors || typeof process.stdout.hasColors !== 'function' || !process.stdout.hasColors()) {\n      return `<PublicKey ${this.truncate()}>`;\n    }\n\n    const printControlCode = (code: number) => {\n      return `\\x1b[${code}m`;\n    };\n\n    // NOTE: Keep in sync with formatter colors.\n    const colors = [\n      'red',\n      'green',\n      'yellow',\n      'blue',\n      'magenta',\n      'cyan',\n      'redBright',\n      'greenBright',\n      'yellowBright',\n      'blueBright',\n      'magentaBright',\n      'cyanBright',\n      'whiteBright',\n    ];\n    const color = colors[this.getInsecureHash(colors.length)];\n\n    return `PublicKey(${printControlCode(inspectFn.colors[color]![0])}${this.truncate()}${printControlCode(\n      inspectFn.colors.reset![0],\n    )})`;\n  }\n\n  get [devtoolsFormatter](): DevtoolsFormatter {\n    return {\n      header: () => {\n        // NOTE: Keep in sync with inspect colors.\n        const colors = [\n          'darkred',\n          'green',\n          'orange',\n          'blue',\n          'darkmagenta',\n          'darkcyan',\n          'red',\n          'green',\n          'orange',\n          'blue',\n          'magenta',\n          'darkcyan',\n          'black',\n        ];\n        const color = colors[this.getInsecureHash(colors.length)];\n\n        return [\n          'span',\n          {},\n          ['span', {}, 'PublicKey('],\n          ['span', { style: `color: ${color};` }, this.truncate()],\n          ['span', {}, ')'],\n        ];\n      },\n    };\n  }\n\n  /**\n   * Test this key for equality with some other key.\n   */\n  equals(other: PublicKeyLike): boolean {\n    const otherConverted = PublicKey.from(other);\n    if (this._value.length !== otherConverted._value.length) {\n      return false;\n    }\n\n    let equal = true;\n    for (let i = 0; i < this._value.length; i++) {\n      equal &&= this._value[i] === otherConverted._value[i];\n    }\n\n    return equal;\n  }\n\n  [equalsSymbol](other: any): boolean {\n    if (!PublicKey.isPublicKey(other)) {\n      return false;\n    }\n\n    return this.equals(other);\n  }\n}\n"],
  "mappings": "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",
  "names": ["RFC4648", "RFC4648_HEX", "CROCKFORD", "base32Decode", "Schema", "devtoolsFormatter", "inspectCustom", "invariant", "Schema", "ulid", "ObjectIdSchema", "Schema", "String", "pipe", "pattern", "annotations", "description", "ObjectId", "isValid", "id", "decodeSync", "err", "random", "ulid", "Schema", "invariant", "randomBytes", "length", "webCrypto", "globalThis", "crypto", "require", "webcrypto", "bytes", "Uint8Array", "getRandomValues", "MULTIBASE_PREFIX", "ENCODED_LENGTH", "isValid", "value", "startsWith", "length", "SpaceId", "Schema", "String", "pipe", "filter", "byteLength", "encode", "invariant", "Uint8Array", "base32Encode", "decode", "base32Decode", "slice", "random", "randomBytes", "LOCAL_SPACE_TAG", "QueueSubspaceTags", "Object", "freeze", "DATA", "TRACE", "DXN", "Schema", "NonEmptyString", "pipe", "pattern", "annotations", "title", "description", "examples", "hash", "dxn", "toString", "kind", "TYPE", "ECHO", "QUEUE", "equals", "a", "b", "parts", "length", "every", "part", "i", "isDXNString", "startsWith", "parse", "Error", "prefix", "split", "tryParse", "error", "undefined", "fromTypename", "typename", "fromTypenameAndVersion", "version", "fromLocalObjectId", "id", "fromQueue", "subspaceTag", "spaceId", "queueId", "objectId", "invariant", "SpaceId", "isValid", "ObjectId", "indexOf", "hasTypenameOf", "isLocalObjectId", "asTypeDXN", "type", "asEchoDXN", "echoId", "asQueueDXN", "join", "inspectCustom", "depth", "options", "inspectFn", "printControlCode", "code", "colors", "blueBright", "reset", "devtoolsFormatter", "header", "style", "import_base32_decode", "invariant", "IdentityDid", "Object", "freeze", "byteLength", "encode", "value", "invariant", "Uint8Array", "length", "DID_PREFIX", "MULTIBASE_PREFIX", "base32Encode", "decode", "startsWith", "base32Decode", "slice", "isValid", "ENCODED_LENGTH", "random", "randomBytes", "import_base32_decode", "devtoolsFormatter", "equalsSymbol", "inspectCustom", "truncateKey", "invariant", "PUBLIC_KEY_LENGTH", "SECRET_KEY_LENGTH", "isLikeArrayBuffer", "value", "Object", "getPrototypeOf", "name", "PublicKey", "ZERO", "from", "repeat", "source", "invariant", "Buffer", "Uint8Array", "buffer", "byteOffset", "byteLength", "ArrayBuffer", "fromHex", "asUint8Array", "TypeError", "safeFrom", "undefined", "key", "err", "hex", "startsWith", "slice", "buf", "random", "randomBytes", "randomOfLength", "length", "randomSequence", "i", "Error", "isPublicKey", "assertValidPublicKey", "equals", "left", "right", "bufferize", "str", "stringify", "asBuffer", "toString", "hash", "toHex", "fromMultibase32", "encoded", "base32Decode", "_value", "toJSON", "toJSONL", "truncate", "toMultibase32", "base32Encode", "truncateKey", "getInsecureHash", "modulo", "Math", "abs", "reduce", "acc", "val", "inspectCustom", "depth", "options", "inspectFn", "colors", "process", "stdout", "hasColors", "printControlCode", "code", "color", "reset", "devtoolsFormatter", "header", "style", "other", "otherConverted", "equal", "equalsSymbol"]
}
