import { type LogConfig, type LogFilter, type LogLevel } from './config';
import { type CallMetadata } from './meta';
/**
 * Optional object passed to the logging API.
 */
export type LogContext = Record<string, any> | Error | any;
/**
 * Record for current log line.
 */
export interface LogEntry {
    level: LogLevel;
    message: string;
    context?: LogContext;
    meta?: CallMetadata;
    error?: Error;
}
/**
 * Processes (e.g., prints, forwards) log entries.
 */
export type LogProcessor = (config: LogConfig, entry: LogEntry) => void;
/**
 * Determines if the current line should be logged (called by the processor).
 */
export declare const shouldLog: (entry: LogEntry, filters?: LogFilter[]) => boolean;
export declare const getContextFromEntry: (entry: LogEntry) => Record<string, any> | undefined;
//# sourceMappingURL=context.d.ts.map