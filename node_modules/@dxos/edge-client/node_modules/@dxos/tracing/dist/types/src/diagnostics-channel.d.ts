import { type DiagnosticMetadata, type DiagnosticsData, type DiagnosticsManager, type DiagnosticsRequest } from './diagnostic';
export type DiagnosticChannelMessage = {
    type: 'DIAGNOSTICS_DISCOVER';
} | {
    type: 'DIAGNOSTICS_ANNOUNCE';
    diagnostics: DiagnosticMetadata[];
} | {
    type: 'DIAGNOSTICS_FETCH';
    requestId: string;
    request: DiagnosticsRequest;
} | {
    type: 'DIAGNOSTICS_RESPONSE';
    requestId: string;
    data: DiagnosticsData;
};
export declare class DiagnosticsChannel {
    private readonly _channelName;
    static get supported(): boolean;
    private _ctx;
    private readonly _serveChannel?;
    private readonly _clientChannel?;
    constructor(_channelName?: string);
    destroy(): void;
    /**
     * In node.js, the channel will keep the process alive.
     * This method allows the process to exit.
     * Noop in the browser.
     */
    unref(): void;
    serve(manager: DiagnosticsManager): void;
    discover(): Promise<DiagnosticMetadata[]>;
    fetch(request: DiagnosticsRequest): Promise<DiagnosticsData>;
}
//# sourceMappingURL=diagnostics-channel.d.ts.map