import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestRpcRequest {
    data: string;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestRpcResponse {
    data: string;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestStreamRpcRequest {
    data: string;
    streamLoadInterval: number;
    streamLoadChunkSize: number;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestStreamRpcResponse {
    data: string;
    bytesSent: number;
    bytesReceived: number;
    sendErrors: number;
    receiveErrors: number;
    runningTime: number;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestService {
    testCall: (request: TestRpcRequest, options?: RequestOptions) => Promise<TestRpcResponse>;
    voidCall: (request: void, options?: RequestOptions) => Promise<void>;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestStreamService {
    testCall: (request: TestRpcRequest, options?: RequestOptions) => Stream<TestRpcResponse>;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestServiceWithStreams {
    requestTestStream: (request: TestStreamRpcRequest, options?: RequestOptions) => Promise<TestRpcResponse>;
    closeTestStream: (request: TestRpcRequest, options?: RequestOptions) => Promise<TestStreamRpcResponse>;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface PingRequest {
    nonce: number;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface PingReponse {
    nonce: number;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface PingService {
    ping: (request: PingRequest, options?: RequestOptions) => Promise<PingReponse>;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface MessageWithAny {
    payload: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../example/testing/rpc.proto}
 */
export interface TestAnyService {
    testCall: (request: MessageWithAny, options?: RequestOptions) => Promise<MessageWithAny>;
}
//# sourceMappingURL=rpc.d.ts.map