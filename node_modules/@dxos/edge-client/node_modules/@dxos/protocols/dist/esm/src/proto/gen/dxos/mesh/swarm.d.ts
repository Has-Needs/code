import substitutions from "../../../substitutions.js";
/**
 * Use for:
 * - Initial peer discovery (initiate session id between two peers).
 * - RTC negotiation (SDP offer/answer and ICE).
 *
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface SwarmMessage {
    /**
     * Swarm identifier.
     */
    topic: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Unique connection identifier.
     */
    sessionId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Message payload.
     */
    data: MessageData;
    /**
     * Unique message identifier. Used for ACK and matching Answers to Offers.
     */
    messageId: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface MessageData {
    offer?: Offer;
    answer?: Answer;
    /**
     * @deprecated Use SignalBatch instead.
     */
    signal?: Signal;
    signalBatch?: SignalBatch;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface Offer {
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface Answer {
    accept: boolean;
    /**
     * MessageId of the Offer being answered.
     *
     * Options:
     *   - proto3_optional = true
     */
    offerMessageId?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface Signal {
    payload: ReturnType<(typeof substitutions)["google.protobuf.Struct"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/mesh/swarm.proto}
 */
export interface SignalBatch {
    signals?: Signal[];
}
//# sourceMappingURL=swarm.d.ts.map