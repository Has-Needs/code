import substitutions from "../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/halo/signed.proto}
 */
export interface KeyChain {
    publicKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    message: SignedMessage;
    parents?: KeyChain[];
}
/**
 * A generic container message used whenever messages are signed (e.g. SpaceCredential)
 *
 * Defined in:
 *   {@link file://./../../../dxos/halo/signed.proto}
 */
export interface SignedMessage {
    /**
     * The signed message contents.
     */
    signed: SignedMessage.Signed;
    /**
     * An array of Signatures, one for each key that signed the message.
     */
    signatures?: SignedMessage.Signature[];
}
export declare namespace SignedMessage {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/halo/signed.proto}
     */
    interface Signed {
        /**
         * RFC-3339 datetime string.
         */
        created: string;
        nonce: Uint8Array;
        /**
         * The payload to be signed.
         */
        payload: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/halo/signed.proto}
     */
    interface Signature {
        /**
         * The publicKey of the keypair that made this signature.
         */
        key: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
        /**
         * The bytes of the signature.
         */
        signature: Uint8Array;
        /**
         * The certification chain of SignedMessages for this key.
         *
         * Options:
         *   - proto3_optional = true
         */
        keyChain?: KeyChain;
    }
}
//# sourceMappingURL=signed.d.ts.map