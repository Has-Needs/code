import type { RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_halo_credentials from "../halo/credentials.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/agentmanager.proto}
 */
export interface InitAuthSequenceRequest {
    /**
     * Options:
     *   - proto3_optional = true
     */
    authToken?: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/agentmanager.proto}
 */
export interface InitAuthSequenceResponse {
    result: InitAuthSequenceResponse.InitAuthSequenceResult;
    /**
     * Options:
     *   - proto3_optional = true
     */
    nonce?: Uint8Array;
    /**
     * Options:
     *   - proto3_optional = true
     */
    agentmanagerKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    initAuthResponseReason?: string;
}
export declare namespace InitAuthSequenceResponse {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/service/agentmanager.proto}
     */
    enum InitAuthSequenceResult {
        UNKNOWN = 0,
        SUCCESS = 1,
        NOT_AUTHORIZED = 2,
        ERROR = 3
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/agentmanager.proto}
 */
export interface Authentication {
    presentation: dxos_halo_credentials.Presentation;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/agentmanager.proto}
 */
export interface AuthenticateResponse {
    /**
     * Options:
     *   - proto3_optional = true
     */
    token?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    credential?: dxos_halo_credentials.Credential;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/agentmanager.proto}
 */
export interface AgentManager {
    initAuthSequence: (request: InitAuthSequenceRequest, options?: RequestOptions) => Promise<InitAuthSequenceResponse>;
    authenticate: (request: Authentication, options?: RequestOptions) => Promise<AuthenticateResponse>;
}
//# sourceMappingURL=agentmanager.d.ts.map