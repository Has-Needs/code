import type { RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface FeedInfo {
    feedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * set if the peer whishes to download the data from the feed.
     */
    download: boolean;
    /**
     * set if the peer whishes to updload the data from the feed.
     */
    upload: boolean;
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface UpdateFeedsRequest {
    feeds?: FeedInfo[];
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface StartReplicationRequest {
    info: FeedInfo;
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface StartReplicationResponse {
    /**
     * Tag of the stream the peers will use for the replication.
     * Set to null or "" (empty string) of the peer does not wish to replicate the feed.
     *
     * A new stream must be open with unique tag to start replicating. Existing streams cannot be reused.
     *
     * Options:
     *   - proto3_optional = true
     */
    streamTag?: string;
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface StopReplicationRequest {
    info: FeedInfo;
}
/**
 * RPC verbs for replication teleport extension.
 * Assumes one peer is designated an initiator.
 * The initiator will start and stop replication streams.
 * The other peer will send updates using the UpdateFeeds method.
 *
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/replicator.proto}
 */
export interface ReplicatorService {
    /**
     * Notify about available feeds.
     */
    updateFeeds: (request: UpdateFeedsRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Start replicating feed. If this feed is already being replicated, the existing replication session must be stopped.
     */
    startReplication: (request: StartReplicationRequest, options?: RequestOptions) => Promise<StartReplicationResponse>;
    /**
     * Stop replicating feed.
     */
    stopReplication: (request: StopReplicationRequest, options?: RequestOptions) => Promise<void>;
}
//# sourceMappingURL=replicator.d.ts.map