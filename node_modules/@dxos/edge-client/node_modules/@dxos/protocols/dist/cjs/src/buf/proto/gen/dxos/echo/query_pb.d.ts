import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import type { Filter } from "./filter_pb.js";
import type { EchoObject } from "./object_pb.js";
import type { IndexConfigSchema } from "./indexing_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/query.proto.
 */
export declare const file_dxos_echo_query: GenFile;
/**
 * @generated from message dxos.echo.query.QueryRequest
 */
export type QueryRequest = Message<"dxos.echo.query.QueryRequest"> & {
    /**
     * @generated from field: optional string queryId = 1;
     */
    queryId?: string;
    /**
     * @generated from field: dxos.echo.query.QueryReactivity reactivity = 3;
     */
    reactivity: QueryReactivity;
    /**
     * / JSON-encoded `QueryAST.Query`.
     *
     * @generated from field: string query = 5;
     */
    query: string;
    /**
     * / @deprecated Use `query` instead.
     *
     * @generated from field: optional dxos.echo.filter.Filter filter = 2;
     */
    filter?: Filter;
};
/**
 * Describes the message dxos.echo.query.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export declare const QueryRequestSchema: GenMessage<QueryRequest>;
/**
 * *
 * Automerge heads.
 * Used for encoding in Index metadata store.
 * @see https://automerge.org/automerge-repo/types/_automerge_automerge_repo.Heads.html
 *
 * @generated from message dxos.echo.query.Heads
 */
export type Heads = Message<"dxos.echo.query.Heads"> & {
    /**
     * @generated from field: repeated string hashes = 1;
     */
    hashes: string[];
};
/**
 * Describes the message dxos.echo.query.Heads.
 * Use `create(HeadsSchema)` to create a new message.
 */
export declare const HeadsSchema: GenMessage<Heads>;
/**
 * @generated from message dxos.echo.query.QueryResult
 */
export type QueryResult = Message<"dxos.echo.query.QueryResult"> & {
    /**
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * @generated from field: string spaceId = 4;
     */
    spaceId: string;
    /**
     * @generated from field: string documentId = 5;
     */
    documentId: string;
    /**
     * @generated from field: float rank = 3;
     */
    rank: number;
    /**
     * @generated from field: optional string document_json = 10;
     */
    documentJson?: string;
    /**
     * @generated from field: optional bytes document_automerge = 11;
     */
    documentAutomerge?: Uint8Array;
    /**
     * / @deprecated Use spaceId.
     *
     * @generated from field: optional dxos.keys.PublicKey spaceKey = 2;
     */
    spaceKey?: PublicKey;
};
/**
 * Describes the message dxos.echo.query.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export declare const QueryResultSchema: GenMessage<QueryResult>;
/**
 * @generated from message dxos.echo.query.QueryResponse
 */
export type QueryResponse = Message<"dxos.echo.query.QueryResponse"> & {
    /**
     * @generated from field: optional string queryId = 1;
     */
    queryId?: string;
    /**
     * @generated from field: repeated dxos.echo.query.QueryResult results = 2;
     */
    results: QueryResult[];
    /**
     * @generated from field: repeated dxos.echo.object.EchoObject objects = 3;
     */
    objects: EchoObject[];
};
/**
 * Describes the message dxos.echo.query.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export declare const QueryResponseSchema: GenMessage<QueryResponse>;
/**
 * @generated from enum dxos.echo.query.QueryReactivity
 */
export declare enum QueryReactivity {
    /**
     * / Returns a signle result.
     *
     * @generated from enum value: ONE_SHOT = 0;
     */
    ONE_SHOT = 0,
    /**
     * / Returns the initial result and then incremental reactive updates when the data source changes.
     *
     * @generated from enum value: REACTIVE = 1;
     */
    REACTIVE = 1
}
/**
 * Describes the enum dxos.echo.query.QueryReactivity.
 */
export declare const QueryReactivitySchema: GenEnum<QueryReactivity>;
/**
 * @generated from service dxos.echo.query.QueryService
 */
export declare const QueryService: GenService<{
    /**
     * @generated from rpc dxos.echo.query.QueryService.SetConfig
     */
    setConfig: {
        methodKind: "unary";
        input: typeof IndexConfigSchema;
        output: typeof EmptySchema;
    };
    /**
     * @generated from rpc dxos.echo.query.QueryService.ExecQuery
     */
    execQuery: {
        methodKind: "server_streaming";
        input: typeof QueryRequestSchema;
        output: typeof QueryResponseSchema;
    };
    /**
     * @generated from rpc dxos.echo.query.QueryService.Reindex
     */
    reindex: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof EmptySchema;
    };
}>;
//# sourceMappingURL=query_pb.d.ts.map