import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../substitutions.js";
import * as dxos_client_services from "./client/services.js";
import * as dxos_config from "./config.js";
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface BotPackageSpecifier {
    /**
     * DXN of the bot in the DXNS registry.
     */
    name?: string;
    ipfsCid?: string;
    localPath?: string;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface Bot {
    id: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    status?: Bot.Status;
    /**
     * The state that the bot aims to be in. Can be only either RUNNING or STOPPED.
     *
     * Options:
     *   - proto3_optional = true
     */
    desiredState?: Bot.Status;
    /**
     * Options:
     *   - proto3_optional = true
     */
    attemptsToAchieveDesiredState?: number;
    /**
     * Options:
     *   - proto3_optional = true
     */
    packageSpecifier?: BotPackageSpecifier;
    /**
     * Options:
     *   - proto3_optional = true
     */
    lastStart?: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    runtime?: Bot.Runtime;
    /**
     * Options:
     *   - proto3_optional = true
     */
    report?: BotReport;
}
export declare namespace Bot {
    /**
     * Defined in:
     *   {@link file://./../../dxos/bot.proto}
     */
    enum Status {
        STOPPED = 0,
        STARTING = 1,
        RUNNING = 2,
        STOPPING = 3,
        SPAWNING = 4
    }
    /**
     * Defined in:
     *   {@link file://./../../dxos/bot.proto}
     */
    interface Runtime {
        /**
         * Options:
         *   - proto3_optional = true
         */
        exitCode?: number;
        /**
         * Options:
         *   - proto3_optional = true
         */
        exitSignal?: string;
        /**
         * Options:
         *   - proto3_optional = true
         */
        error?: string;
    }
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface GetBotsResponse {
    bots?: Bot[];
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface SpawnBotRequest {
    /**
     * Options:
     *   - proto3_optional = true
     */
    package?: BotPackageSpecifier;
    /**
     * Invitation for the bot to join the target space.
     *
     * Options:
     *   - proto3_optional = true
     */
    invitation?: dxos_client_services.Invitation;
    /**
     * Key of the space bot is invited to.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface SendCommandRequest {
    /**
     * Options:
     *   - proto3_optional = true
     */
    botId?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    command?: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface SendCommandResponse {
    /**
     * Options:
     *   - proto3_optional = true
     */
    response?: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface GetLogsResponse {
    chunk: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface GetLogsRequest {
    botId: string;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface BotReport {
    /**
     * Details of the space the bot was spawned for.
     *
     * Options:
     *   - proto3_optional = true
     */
    processedTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
}
/**
 * Service that is used by clients to communicate with bot factory.
 *
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface BotFactoryService {
    getBots: (request: void, options?: RequestOptions) => Promise<GetBotsResponse>;
    spawnBot: (request: SpawnBotRequest, options?: RequestOptions) => Promise<Bot>;
    start: (request: Bot, options?: RequestOptions) => Promise<Bot>;
    stop: (request: Bot, options?: RequestOptions) => Promise<Bot>;
    remove: (request: Bot, options?: RequestOptions) => Promise<void>;
    getLogs: (request: GetLogsRequest, options?: RequestOptions) => Stream<GetLogsResponse>;
    sendCommand: (request: SendCommandRequest, options?: RequestOptions) => Promise<SendCommandResponse>;
    removeAll: (request: void, options?: RequestOptions) => Promise<void>;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface InitializeRequest {
    /**
     * Bot runtime configuration.
     *
     * Options:
     *   - proto3_optional = true
     */
    config?: dxos_config.Config;
    /**
     * Invitation for the bot to join the target space.
     *
     * Options:
     *   - proto3_optional = true
     */
    invitation?: dxos_client_services.Invitation;
    /**
     * ID of the bot.
     *
     * Options:
     *   - proto3_optional = true
     */
    id?: string;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface StartRequest {
    /**
     * Bot runtime configuration.
     */
    config: dxos_config.Config;
}
/**
 * Service that is used by bots communicating with bot factory.
 *
 * Defined in:
 *   {@link file://./../../dxos/bot.proto}
 */
export interface BotService {
    /**
     * Initialize Client, create profile, and join a space.
     */
    initialize: (request: InitializeRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Start an initialized bot.
     */
    start: (request: StartRequest, options?: RequestOptions) => Promise<void>;
    /**
     * Custom commands sent to the bot factory.
     */
    command: (request: SendCommandRequest, options?: RequestOptions) => Promise<SendCommandResponse>;
    /**
     * Stop the bot.
     */
    stop: (request: void, options?: RequestOptions) => Promise<void>;
    /**
     * Send periodic reports of the bot's state.
     */
    startReporting: (request: void, options?: RequestOptions) => Stream<BotReport>;
}
//# sourceMappingURL=bot.d.ts.map