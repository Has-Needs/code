//
// Copyright 2020 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/rpc.proto (package dxos.rpc, syntax proto3)
/* eslint-disable */

// TODO(burdon): Move to `dxos.mesh.rpc` (reconcile with @dxos/kube repo).

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Error } from "./error_pb.js";
import { file_dxos_error } from "./error_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/rpc.proto.
 */
export const file_dxos_rpc: GenFile = /*@__PURE__*/
  fileDesc("Cg5keG9zL3JwYy5wcm90bxIIZHhvcy5ycGMi1gEKClJwY01lc3NhZ2USJAoHcmVxdWVzdBgBIAEoCzIRLmR4b3MucnBjLlJlcXVlc3RIABImCghyZXNwb25zZRgCIAEoCzISLmR4b3MucnBjLlJlc3BvbnNlSAASDgoEb3BlbhgDIAEoCEgAEhIKCG9wZW5fYWNrGAQgASgISAASLQoMc3RyZWFtX2Nsb3NlGAUgASgLMhUuZHhvcy5ycGMuU3RyZWFtQ2xvc2VIABIcCgNieWUYBiABKAsyDS5keG9zLnJwYy5CeWVIAEIJCgdjb250ZW50IlwKB1JlcXVlc3QSCgoCaWQYASABKAUSDgoGbWV0aG9kGAIgASgJEiUKB3BheWxvYWQYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55Eg4KBnN0cmVhbRgEIAEoCCKXAQoIUmVzcG9uc2USCgoCaWQYASABKAUSJwoHcGF5bG9hZBgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlIABIiCgVlcnJvchgDIAEoCzIRLmR4b3MuZXJyb3IuRXJyb3JIABIPCgVjbG9zZRgEIAEoCEgAEhYKDHN0cmVhbV9yZWFkeRgFIAEoCEgAQgkKB2NvbnRlbnQiGQoLU3RyZWFtQ2xvc2USCgoCaWQYASABKAUiegoMTWVzc2FnZVRyYWNlEjMKCWRpcmVjdGlvbhgBIAEoDjIgLmR4b3MucnBjLk1lc3NhZ2VUcmFjZS5EaXJlY3Rpb24SDAoEZGF0YRgCIAEoDCInCglEaXJlY3Rpb24SDAoISU5DT01JTkcQABIMCghPVVRHT0lORxABIgUKA0J5ZUIpWidnaXRodWIuY29tL2R4b3MvZHhvcy9wcm90by9kZWYvZHhvcy9ycGNiBnByb3RvMw", [file_google_protobuf_any, file_dxos_error]);

/**
 * @generated from message dxos.rpc.RpcMessage
 */
export type RpcMessage = Message<"dxos.rpc.RpcMessage"> & {
  /**
   * @generated from oneof dxos.rpc.RpcMessage.content
   */
  content: {
    /**
     * @generated from field: dxos.rpc.Request request = 1;
     */
    value: Request;
    case: "request";
  } | {
    /**
     * @generated from field: dxos.rpc.Response response = 2;
     */
    value: Response;
    case: "response";
  } | {
    /**
     * / Means that the node is trying to open the connection.
     *
     * @generated from field: bool open = 3;
     */
    value: boolean;
    case: "open";
  } | {
    /**
     * / Means that the node has received the "open" message and is ready to perform requests.
     *
     * @generated from field: bool open_ack = 4;
     */
    value: boolean;
    case: "openAck";
  } | {
    /**
     * @generated from field: dxos.rpc.StreamClose stream_close = 5;
     */
    value: StreamClose;
    case: "streamClose";
  } | {
    /**
     * / Request to close the connection.
     *
     * @generated from field: dxos.rpc.Bye bye = 6;
     */
    value: Bye;
    case: "bye";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.rpc.RpcMessage.
 * Use `create(RpcMessageSchema)` to create a new message.
 */
export const RpcMessageSchema: GenMessage<RpcMessage> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 0);

/**
 * @generated from message dxos.rpc.Request
 */
export type Request = Message<"dxos.rpc.Request"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * @generated from field: google.protobuf.Any payload = 3;
   */
  payload?: Any;

  /**
   * @generated from field: bool stream = 4;
   */
  stream: boolean;
};

/**
 * Describes the message dxos.rpc.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 1);

/**
 * @generated from message dxos.rpc.Response
 */
export type Response = Message<"dxos.rpc.Response"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from oneof dxos.rpc.Response.content
   */
  content: {
    /**
     * @generated from field: google.protobuf.Any payload = 2;
     */
    value: Any;
    case: "payload";
  } | {
    /**
     * @generated from field: dxos.error.Error error = 3;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * / Sent when stream is closed without an error.
     *
     * @generated from field: bool close = 4;
     */
    value: boolean;
    case: "close";
  } | {
    /**
     * *
     * Sent when the server has processed a request with a streaming response.
     * Can be skipped by the server.
     * In this case the first payload should be treated as the server being ready.
     *
     * @generated from field: bool stream_ready = 5;
     */
    value: boolean;
    case: "streamReady";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.rpc.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 2);

/**
 * TODO(burdon): Generalize to event?
 * Sent by client to end the streaming response.
 *
 * @generated from message dxos.rpc.StreamClose
 */
export type StreamClose = Message<"dxos.rpc.StreamClose"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;
};

/**
 * Describes the message dxos.rpc.StreamClose.
 * Use `create(StreamCloseSchema)` to create a new message.
 */
export const StreamCloseSchema: GenMessage<StreamClose> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 3);

/**
 * TODO(burdon): Rename Trace.
 *
 * @generated from message dxos.rpc.MessageTrace
 */
export type MessageTrace = Message<"dxos.rpc.MessageTrace"> & {
  /**
   * @generated from field: dxos.rpc.MessageTrace.Direction direction = 1;
   */
  direction: MessageTrace_Direction;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message dxos.rpc.MessageTrace.
 * Use `create(MessageTraceSchema)` to create a new message.
 */
export const MessageTraceSchema: GenMessage<MessageTrace> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 4);

/**
 * @generated from enum dxos.rpc.MessageTrace.Direction
 */
export enum MessageTrace_Direction {
  /**
   * @generated from enum value: INCOMING = 0;
   */
  INCOMING = 0,

  /**
   * @generated from enum value: OUTGOING = 1;
   */
  OUTGOING = 1,
}

/**
 * Describes the enum dxos.rpc.MessageTrace.Direction.
 */
export const MessageTrace_DirectionSchema: GenEnum<MessageTrace_Direction> = /*@__PURE__*/
  enumDesc(file_dxos_rpc, 4, 0);

/**
 * *
 * Request to close the connection.
 * Connection is closed once both sides have received the Bye message.
 *
 * @generated from message dxos.rpc.Bye
 */
export type Bye = Message<"dxos.rpc.Bye"> & {
};

/**
 * Describes the message dxos.rpc.Bye.
 * Use `create(ByeSchema)` to create a new message.
 */
export const ByeSchema: GenMessage<Bye> = /*@__PURE__*/
  messageDesc(file_dxos_rpc, 5);

