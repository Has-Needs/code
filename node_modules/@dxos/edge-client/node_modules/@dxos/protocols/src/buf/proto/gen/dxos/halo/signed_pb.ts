//
// Copyright 2020 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/halo/signed.proto (package dxos.halo.signed, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import { file_dxos_keys } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/halo/signed.proto.
 */
export const file_dxos_halo_signed: GenFile = /*@__PURE__*/
  fileDesc("ChZkeG9zL2hhbG8vc2lnbmVkLnByb3RvEhBkeG9zLmhhbG8uc2lnbmVkIpMBCghLZXlDaGFpbhIoCgpwdWJsaWNfa2V5GAEgASgLMhQuZHhvcy5rZXlzLlB1YmxpY0tleRIwCgdtZXNzYWdlGAIgASgLMh8uZHhvcy5oYWxvLnNpZ25lZC5TaWduZWRNZXNzYWdlEisKB3BhcmVudHMYAyADKAsyGi5keG9zLmhhbG8uc2lnbmVkLktleUNoYWluIt0CCg1TaWduZWRNZXNzYWdlEjYKBnNpZ25lZBgBIAEoCzImLmR4b3MuaGFsby5zaWduZWQuU2lnbmVkTWVzc2FnZS5TaWduZWQSPQoKc2lnbmF0dXJlcxgCIAMoCzIpLmR4b3MuaGFsby5zaWduZWQuU2lnbmVkTWVzc2FnZS5TaWduYXR1cmUaTwoGU2lnbmVkEg8KB2NyZWF0ZWQYASABKAkSDQoFbm9uY2UYAiABKAwSJQoHcGF5bG9hZBgKIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkagwEKCVNpZ25hdHVyZRIhCgNrZXkYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5EhEKCXNpZ25hdHVyZRgCIAEoDBIyCglrZXlfY2hhaW4YAyABKAsyGi5keG9zLmhhbG8uc2lnbmVkLktleUNoYWluSACIAQFCDAoKX2tleV9jaGFpbmIGcHJvdG8z", [file_google_protobuf_any, file_dxos_keys]);

/**
 *
 * A key which includes its parent keys and SignedMessages leading back to the root of its authority.
 * For example, if IdentityA signed for DeviceA, which signed for DeviceB, which signed for DeviceC the chain
 * would comprised: DeviceC->DeviceB->DeviceA->IdentityA moving from tip to root.
 *
 *
 * @generated from message dxos.halo.signed.KeyChain
 */
export type KeyChain = Message<"dxos.halo.signed.KeyChain"> & {
  /**
   * @generated from field: dxos.keys.PublicKey public_key = 1;
   */
  publicKey?: PublicKey;

  /**
   * @generated from field: dxos.halo.signed.SignedMessage message = 2;
   */
  message?: SignedMessage;

  /**
   * @generated from field: repeated dxos.halo.signed.KeyChain parents = 3;
   */
  parents: KeyChain[];
};

/**
 * Describes the message dxos.halo.signed.KeyChain.
 * Use `create(KeyChainSchema)` to create a new message.
 */
export const KeyChainSchema: GenMessage<KeyChain> = /*@__PURE__*/
  messageDesc(file_dxos_halo_signed, 0);

/**
 * *
 * A generic container message used whenever messages are signed (e.g. SpaceCredential)
 *
 * @generated from message dxos.halo.signed.SignedMessage
 */
export type SignedMessage = Message<"dxos.halo.signed.SignedMessage"> & {
  /**
   * / The signed message contents.
   *
   * @generated from field: dxos.halo.signed.SignedMessage.Signed signed = 1;
   */
  signed?: SignedMessage_Signed;

  /**
   * / An array of Signatures, one for each key that signed the message.
   *
   * @generated from field: repeated dxos.halo.signed.SignedMessage.Signature signatures = 2;
   */
  signatures: SignedMessage_Signature[];
};

/**
 * Describes the message dxos.halo.signed.SignedMessage.
 * Use `create(SignedMessageSchema)` to create a new message.
 */
export const SignedMessageSchema: GenMessage<SignedMessage> = /*@__PURE__*/
  messageDesc(file_dxos_halo_signed, 1);

/**
 *
 * Provides the common metadata needed for all signed objects.
 *
 *
 * @generated from message dxos.halo.signed.SignedMessage.Signed
 */
export type SignedMessage_Signed = Message<"dxos.halo.signed.SignedMessage.Signed"> & {
  /**
   * / RFC-3339 datetime string.
   *
   * @generated from field: string created = 1;
   */
  created: string;

  /**
   * @generated from field: bytes nonce = 2;
   */
  nonce: Uint8Array;

  /**
   * / The payload to be signed.
   *
   * @generated from field: google.protobuf.Any payload = 10;
   */
  payload?: Any;
};

/**
 * Describes the message dxos.halo.signed.SignedMessage.Signed.
 * Use `create(SignedMessage_SignedSchema)` to create a new message.
 */
export const SignedMessage_SignedSchema: GenMessage<SignedMessage_Signed> = /*@__PURE__*/
  messageDesc(file_dxos_halo_signed, 1, 0);

/**
 *
 * The signature data itself.
 *
 *
 * @generated from message dxos.halo.signed.SignedMessage.Signature
 */
export type SignedMessage_Signature = Message<"dxos.halo.signed.SignedMessage.Signature"> & {
  /**
   * / The publicKey of the keypair that made this signature.
   *
   * @generated from field: dxos.keys.PublicKey key = 1;
   */
  key?: PublicKey;

  /**
   * / The bytes of the signature.
   *
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;

  /**
   * / The certification chain of SignedMessages for this key.
   *
   * @generated from field: optional dxos.halo.signed.KeyChain key_chain = 3;
   */
  keyChain?: KeyChain;
};

/**
 * Describes the message dxos.halo.signed.SignedMessage.Signature.
 * Use `create(SignedMessage_SignatureSchema)` to create a new message.
 */
export const SignedMessage_SignatureSchema: GenMessage<SignedMessage_Signature> = /*@__PURE__*/
  messageDesc(file_dxos_halo_signed, 1, 1);

