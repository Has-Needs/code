//
// Copyright 2022 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/mesh/teleport/replicator.proto (package dxos.mesh.teleport.replicator, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../../keys_pb.js";
import { file_dxos_keys } from "../../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/mesh/teleport/replicator.proto.
 */
export const file_dxos_mesh_teleport_replicator: GenFile = /*@__PURE__*/
  fileDesc("CiNkeG9zL21lc2gvdGVsZXBvcnQvcmVwbGljYXRvci5wcm90bxIdZHhvcy5tZXNoLnRlbGVwb3J0LnJlcGxpY2F0b3IiVAoIRmVlZEluZm8SJgoIZmVlZF9rZXkYASABKAsyFC5keG9zLmtleXMuUHVibGljS2V5EhAKCGRvd25sb2FkGAIgASgIEg4KBnVwbG9hZBgDIAEoCCJMChJVcGRhdGVGZWVkc1JlcXVlc3QSNgoFZmVlZHMYASADKAsyJy5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5GZWVkSW5mbyJQChdTdGFydFJlcGxpY2F0aW9uUmVxdWVzdBI1CgRpbmZvGAEgASgLMicuZHhvcy5tZXNoLnRlbGVwb3J0LnJlcGxpY2F0b3IuRmVlZEluZm8iQgoYU3RhcnRSZXBsaWNhdGlvblJlc3BvbnNlEhcKCnN0cmVhbV90YWcYASABKAlIAIgBAUINCgtfc3RyZWFtX3RhZyJPChZTdG9wUmVwbGljYXRpb25SZXF1ZXN0EjUKBGluZm8YASABKAsyJy5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5GZWVkSW5mbzLVAgoRUmVwbGljYXRvclNlcnZpY2USWAoLVXBkYXRlRmVlZHMSMS5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5VcGRhdGVGZWVkc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSgwEKEFN0YXJ0UmVwbGljYXRpb24SNi5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5TdGFydFJlcGxpY2F0aW9uUmVxdWVzdBo3LmR4b3MubWVzaC50ZWxlcG9ydC5yZXBsaWNhdG9yLlN0YXJ0UmVwbGljYXRpb25SZXNwb25zZRJgCg9TdG9wUmVwbGljYXRpb24SNS5keG9zLm1lc2gudGVsZXBvcnQucmVwbGljYXRvci5TdG9wUmVwbGljYXRpb25SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5YgZwcm90bzM", [file_google_protobuf_empty, file_dxos_keys]);

/**
 * @generated from message dxos.mesh.teleport.replicator.FeedInfo
 */
export type FeedInfo = Message<"dxos.mesh.teleport.replicator.FeedInfo"> & {
  /**
   * @generated from field: dxos.keys.PublicKey feed_key = 1;
   */
  feedKey?: PublicKey;

  /**
   * / set if the peer whishes to download the data from the feed.
   *
   * @generated from field: bool download = 2;
   */
  download: boolean;

  /**
   * / set if the peer whishes to updload the data from the feed.
   *
   * @generated from field: bool upload = 3;
   */
  upload: boolean;
};

/**
 * Describes the message dxos.mesh.teleport.replicator.FeedInfo.
 * Use `create(FeedInfoSchema)` to create a new message.
 */
export const FeedInfoSchema: GenMessage<FeedInfo> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_replicator, 0);

/**
 * @generated from message dxos.mesh.teleport.replicator.UpdateFeedsRequest
 */
export type UpdateFeedsRequest = Message<"dxos.mesh.teleport.replicator.UpdateFeedsRequest"> & {
  /**
   * All feeds that the peer is interesed in.
   *
   * @generated from field: repeated dxos.mesh.teleport.replicator.FeedInfo feeds = 1;
   */
  feeds: FeedInfo[];
};

/**
 * Describes the message dxos.mesh.teleport.replicator.UpdateFeedsRequest.
 * Use `create(UpdateFeedsRequestSchema)` to create a new message.
 */
export const UpdateFeedsRequestSchema: GenMessage<UpdateFeedsRequest> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_replicator, 1);

/**
 * @generated from message dxos.mesh.teleport.replicator.StartReplicationRequest
 */
export type StartReplicationRequest = Message<"dxos.mesh.teleport.replicator.StartReplicationRequest"> & {
  /**
   * @generated from field: dxos.mesh.teleport.replicator.FeedInfo info = 1;
   */
  info?: FeedInfo;
};

/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationRequest.
 * Use `create(StartReplicationRequestSchema)` to create a new message.
 */
export const StartReplicationRequestSchema: GenMessage<StartReplicationRequest> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_replicator, 2);

/**
 * @generated from message dxos.mesh.teleport.replicator.StartReplicationResponse
 */
export type StartReplicationResponse = Message<"dxos.mesh.teleport.replicator.StartReplicationResponse"> & {
  /**
   * *
   * Tag of the stream the peers will use for the replication. 
   * Set to null or "" (empty string) of the peer does not wish to replicate the feed.
   *
   * A new stream must be open with unique tag to start replicating. Existing streams cannot be reused.
   *
   * @generated from field: optional string stream_tag = 1;
   */
  streamTag?: string;
};

/**
 * Describes the message dxos.mesh.teleport.replicator.StartReplicationResponse.
 * Use `create(StartReplicationResponseSchema)` to create a new message.
 */
export const StartReplicationResponseSchema: GenMessage<StartReplicationResponse> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_replicator, 3);

/**
 * @generated from message dxos.mesh.teleport.replicator.StopReplicationRequest
 */
export type StopReplicationRequest = Message<"dxos.mesh.teleport.replicator.StopReplicationRequest"> & {
  /**
   * @generated from field: dxos.mesh.teleport.replicator.FeedInfo info = 1;
   */
  info?: FeedInfo;
};

/**
 * Describes the message dxos.mesh.teleport.replicator.StopReplicationRequest.
 * Use `create(StopReplicationRequestSchema)` to create a new message.
 */
export const StopReplicationRequestSchema: GenMessage<StopReplicationRequest> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_replicator, 4);

/**
 * *
 * RPC verbs for replication teleport extension.
 * Assumes one peer is designated an initiator. 
 * The initiator will start and stop replication streams.
 * The other peer will send updates using the UpdateFeeds method.
 *
 * @generated from service dxos.mesh.teleport.replicator.ReplicatorService
 */
export const ReplicatorService: GenService<{
  /**
   * / Notify about available feeds.
   *
   * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.UpdateFeeds
   */
  updateFeeds: {
    methodKind: "unary";
    input: typeof UpdateFeedsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * / Start replicating feed. If this feed is already being replicated, the existing replication session must be stopped.
   *
   * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.StartReplication
   */
  startReplication: {
    methodKind: "unary";
    input: typeof StartReplicationRequestSchema;
    output: typeof StartReplicationResponseSchema;
  },
  /**
   * / Stop replicating feed.
   *
   * @generated from rpc dxos.mesh.teleport.replicator.ReplicatorService.StopReplication
   */
  stopReplication: {
    methodKind: "unary";
    input: typeof StopReplicationRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_dxos_mesh_teleport_replicator, 0);

