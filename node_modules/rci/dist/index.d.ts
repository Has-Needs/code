import React from "react";
import { useCodeInput, SelectionState } from "use-code-input";
type SelectionValue = ReturnType<typeof useCodeInput>;
declare const useLengthContext: () => number;
declare const useSelectionContext: () => import("use-code-input").SelectionState | null;
type ContextProps = {
    length: number;
    selection: SelectionValue;
};
type SegmentStateValue = "cursor" | "selected" | null;
type SegmentPositionValue = -1 | 0 | 1;
/** @public */
type SegmentProps = {
    index: number;
    state: SegmentStateValue;
    position: SegmentPositionValue;
    selection: SelectionState;
};
type RenderSegmentFn = (segmentProps: SegmentProps) => React.ReactNode;
type InputProps = Omit<React.ComponentPropsWithRef<"input">, "maxLength" | "children">;
type CodeInputProps = InputProps & {
    inputRef: React.RefObject<HTMLInputElement>;
    renderSegment: RenderSegmentFn;
    length?: number;
    fontFamily?: string;
    fontSize?: string;
    padding?: string;
    paddingY?: string;
    paddingX?: string;
    spacing?: string;
    /** advanced: for browsers which don't support "ch" unit */
    characterWidth?: string;
    /** advanced: very few valid reasons to override this for CodeInput */
    segmentWidth?: string;
    /** advanced: can be used if input needs to be larger (example: auto-fill buttons are overlapping input) */
    inputWidth?: string;
    inputClassName?: InputProps["className"];
    inputStyle?: InputProps["style"];
};
declare const CodeInput: ({ renderSegment, length, fontFamily, fontSize, padding, paddingY, paddingX, spacing, characterWidth, style, className, inputClassName, inputStyle, segmentWidth, inputWidth, inputRef, ...rest }: CodeInputProps) => JSX.Element;
declare namespace RCI {
    type SegmentStateValue = "cursor" | "selected" | null;
    type SegmentPositionValue = -1 | 0 | 1;
    /** @public */
    type SegmentProps = {
        index: number;
        state: SegmentStateValue;
        position: SegmentPositionValue;
        selection: SelectionState;
    };
    type RenderSegmentFn = (segmentProps: SegmentProps) => React.ReactNode;
    type SelectionValue = ReturnType<typeof useCodeInput>;
    const useLengthContext: () => number;
    const useSelectionContext: () => import("use-code-input").SelectionState | null;
    type ContextProps = {
        length: number;
        selection: SelectionValue;
    };
    const Context: React.FC<ContextProps>;
    const Root: (props: React.ComponentPropsWithoutRef<"div">) => JSX.Element;
    const Absolute: (props: React.ComponentPropsWithoutRef<"div">) => JSX.Element;
    type CodeInputInputScrollWrapperProps = React.ComponentProps<"div">;
    const InputScrollWrapper: (props: CodeInputInputScrollWrapperProps) => JSX.Element;
    type InputProps = Omit<React.ComponentPropsWithRef<"input">, "maxLength" | "children">;
    const Input: React.ForwardRefExoticComponent<Pick<InputProps, "value" | "form" | "slot" | "style" | "title" | "pattern" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "accept" | "alt" | "autoComplete" | "autoFocus" | "capture" | "checked" | "crossOrigin" | "disabled" | "enterKeyHint" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "height" | "list" | "max" | "min" | "minLength" | "multiple" | "name" | "readOnly" | "required" | "size" | "src" | "step" | "type" | "width"> & React.RefAttributes<HTMLInputElement>>;
    const SegmentRenderer: (props: {
        children: RenderSegmentFn;
    }) => JSX.Element;
}
/** paddingX must be a valid [CSS length](https://developer.mozilla.org/en-US/docs/Web/CSS/length). */
declare const getSegmentCssWidth: (paddingX: string) => string;
export { useCodeInput } from 'use-code-input';
export { useLengthContext, useSelectionContext, CodeInput, RCI, getSegmentCssWidth };
export type { SegmentProps };
