import { useCodeInput } from 'use-code-input';
export { useCodeInput } from 'use-code-input';
import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import React, { useContext } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var LengthContext = React.createContext(6);
var useLengthContext = function () { return useContext(LengthContext); };
var SelectionContext = React.createContext(null);
var useSelectionContext = function () { return useContext(SelectionContext); };
var Context = function (props) { return (jsx(LengthContext.Provider, __assign({ value: props.length }, { children: jsx(SelectionContext.Provider, __assign({ value: props.selection }, { children: props.children }), void 0) }), void 0)); };

var getSegmentState = function (index, _a) {
    var start = _a[0], end = _a[1];
    if (typeof start !== 'number')
        return null;
    if (typeof end !== 'number')
        return null;
    if (start === end && start === index)
        return 'cursor';
    if (index >= start && index < end)
        return 'selected';
    return null;
};
var getSegmentPosition = function (index, _a) {
    var start = _a[0], end = _a[1];
    return index < start ? -1 : index >= end ? 1 : 0;
};
var getSegmentArray = function (size, selection) {
    var array = Array(size).fill(null);
    return array.map(function (_, index) { return ({
        state: getSegmentState(index, selection),
        position: getSegmentPosition(index, selection)
    }); });
};

var Root = function (props) { return (jsx("div", __assign({}, props, { "data-code-input": 'root' }), void 0)); };
var Absolute = function (props) { return (jsx("div", __assign({}, props, { "data-code-input": 'absolute', style: __assign({ position: 'absolute', left: 0, right: 0, top: 0, bottom: 0, display: 'flex', justifyContent: 'space-between' }, props.style) }), void 0)); };
var handleScroll = function (event) {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.scrollTop = 0;
    event.currentTarget.scrollLeft = 0;
};
var InputScrollWrapper = function (props) {
    return (jsx("div", __assign({}, props, { "data-code-input": 'input-scroll-wrapper', onScroll: handleScroll, style: __assign(__assign({}, props.style), { height: '100%', overflow: 'hidden' }) }), void 0));
};
var Input = React.forwardRef(function (props, ref) {
    var _a;
    var length = useLengthContext();
    return (jsx("input", __assign({}, props, { width: undefined, "data-code-input": 'input', minLength: length, maxLength: length, ref: ref, style: __assign(__assign({}, props.style), { font: 'inherit', letterSpacing: 'inherit', textIndent: 'inherit', background: 'transparent', appearance: 'none', display: 'block', width: (_a = props.width) !== null && _a !== void 0 ? _a : '200%', padding: '0', margin: '0', border: '0 solid transparent', outline: 'none' }) }), void 0));
});
var SegmentRenderer = function (props) {
    var selection = useSelectionContext();
    var length = useLengthContext();
    // TODO: fix non-null assertion
    var _selection = selection;
    var segmentArray = getSegmentArray(length, _selection);
    var content = segmentArray.map(function (_a, index) {
        var state = _a.state, position = _a.position;
        return props.children({ index: index, state: state, position: position, selection: _selection });
    });
    return jsx(Fragment, { children: content }, void 0);
};

var RCI = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Root: Root,
    Absolute: Absolute,
    InputScrollWrapper: InputScrollWrapper,
    Input: Input,
    SegmentRenderer: SegmentRenderer,
    Context: Context
});

var CodeInput = function (_a) {
    var renderSegment = _a.renderSegment, _b = _a.length, length = _b === void 0 ? 6 : _b, _c = _a.fontFamily, fontFamily = _c === void 0 ? "'SF Mono', SFMono-Regular, ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono', 'Roboto Mono', monospace" : _c, _d = _a.fontSize, fontSize = _d === void 0 ? '2rem' : _d, _e = _a.padding, padding = _e === void 0 ? '0.25rem' : _e, _f = _a.paddingY, paddingY = _f === void 0 ? padding : _f, _g = _a.paddingX, paddingX = _g === void 0 ? padding : _g, _h = _a.spacing, spacing = _h === void 0 ? '0.5rem' : _h, _j = _a.characterWidth, characterWidth = _j === void 0 ? '1ch' : _j, style = _a.style, className = _a.className, inputClassName = _a.inputClassName, inputStyle = _a.inputStyle, _k = _a.segmentWidth, segmentWidth = _k === void 0 ? "calc(".concat(characterWidth, " + ").concat(paddingX, " * 2)") : _k, _l = _a.inputWidth, inputWidth = _l === void 0 ? "calc(100% + ".concat(segmentWidth, " + ").concat(spacing, ")") : _l, inputRef = _a.inputRef, rest = __rest(_a, ["renderSegment", "length", "fontFamily", "fontSize", "padding", "paddingY", "paddingX", "spacing", "characterWidth", "style", "className", "inputClassName", "inputStyle", "segmentWidth", "inputWidth", "inputRef"]);
    var selection = useCodeInput(inputRef);
    var rootStyle = __assign(__assign({}, style), { position: 'relative', width: "calc(".concat(segmentWidth, " * ").concat(length, " + ").concat(spacing, " * ").concat(length - 1, ")"), fontFamily: fontFamily, fontSize: fontSize, textIndent: paddingX, letterSpacing: "calc(".concat(paddingX, " * 2 + ").concat(spacing, ")"), lineHeight: "calc(".concat(fontSize, " + ").concat(paddingY, " * 2)"), zIndex: 0 });
    var inputProps = {
        className: inputClassName,
        style: inputStyle,
        ref: inputRef
    };
    return (jsx(Context, __assign({ length: length, selection: selection }, { children: jsxs(Root, __assign({ style: rootStyle, className: className }, { children: [jsx(Absolute, __assign({ "aria-hidden": true, style: { zIndex: -1 } }, { children: jsx(SegmentRenderer, { children: renderSegment }, void 0) }), void 0), jsx(InputScrollWrapper, __assign({ onMouseDownCapture: function (event) {
                        var _a, _b;
                        if (event.button !== 0 || event.ctrlKey)
                            return;
                        if (event.shiftKey || event.metaKey)
                            return;
                        if (!(event.currentTarget instanceof HTMLElement))
                            return;
                        if (!(inputRef.current instanceof HTMLInputElement))
                            return;
                        event.stopPropagation();
                        event.preventDefault();
                        var _c = event.currentTarget.getBoundingClientRect(), left = _c.left, width = _c.width;
                        var eventX = event.clientX - left;
                        var index = Math.floor((eventX / width) * length);
                        if (document.activeElement !== inputRef.current) {
                            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                        }
                        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.setSelectionRange(index, index + 1);
                    }, onDoubleClickCapture: function () {
                        var _a;
                        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, length);
                    } }, { children: jsx(Input, __assign({ width: inputWidth }, rest, inputProps), void 0) }), void 0)] }), void 0) }), void 0));
};

/** paddingX must be a valid [CSS length](https://developer.mozilla.org/en-US/docs/Web/CSS/length). */
var getSegmentCssWidth = function (paddingX) {
    return "calc(1ch + ".concat(paddingX, " * 2)");
};

export { CodeInput, RCI, getSegmentCssWidth, useLengthContext, useSelectionContext };
//# sourceMappingURL=index.js.map
