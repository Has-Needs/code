import { ResolvedHelicalArcSeries } from './types';
import { Facet } from './facet';
export type TokenSet = Record<string, Facet>;
export declare const defaultColorDefs: {
    accompanyingSeries: {
        emissiveRelation: {
            initial: number;
            slope: number;
            method: string;
        };
    };
    series: {
        neutralArc: ResolvedHelicalArcSeries;
        accentArc: ResolvedHelicalArcSeries;
    };
};
export declare const defaultPhysicalColors: {
    definitions: {
        accompanyingSeries: {
            emissiveRelation: {
                initial: number;
                slope: number;
                method: string;
            };
        };
        series: {
            neutralArc: ResolvedHelicalArcSeries;
            accentArc: ResolvedHelicalArcSeries;
        };
    };
    conditions: {
        srgb: string[];
        p3: string[];
        rec2020: string[];
    };
    series: {
        neutral: {
            srgb: {
                extends: string;
            };
            p3: {
                extends: string;
            };
            rec2020: {
                extends: string;
            };
        };
        accent: {
            srgb: {
                extends: string;
            };
            p3: {
                extends: string;
            };
            rec2020: {
                extends: string;
            };
        };
    };
    namespace: string;
};
export declare const defaultSemanticColors: {
    conditions: {
        light: string[];
        dark: string[];
    };
    sememes: {
        'bg-base': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-input': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-hover': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-accent': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-accentHover': {
            light: [string, number];
            dark: [string, number];
        };
        'fg-accent': {
            light: [string, number];
            dark: [string, number];
        };
        'fg-accentHover': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-neutral': {
            light: [string, number];
            dark: [string, number];
        };
        'bg-neutralHover': {
            light: [string, number];
            dark: [string, number];
        };
        'fg-base': {
            light: [string, number];
            dark: [string, number];
        };
        'fg-separator': {
            light: [string, number];
            dark: [string, number];
        };
        'fg-description': {
            light: [string, number];
            dark: [string, number];
        };
    };
    namespace: string;
};
export declare const defaultTokenSet: {
    colors: {
        physical: {
            definitions: {
                accompanyingSeries: {
                    emissiveRelation: {
                        initial: number;
                        slope: number;
                        method: string;
                    };
                };
                series: {
                    neutralArc: ResolvedHelicalArcSeries;
                    accentArc: ResolvedHelicalArcSeries;
                };
            };
            conditions: {
                srgb: string[];
                p3: string[];
                rec2020: string[];
            };
            series: {
                neutral: {
                    srgb: {
                        extends: string;
                    };
                    p3: {
                        extends: string;
                    };
                    rec2020: {
                        extends: string;
                    };
                };
                accent: {
                    srgb: {
                        extends: string;
                    };
                    p3: {
                        extends: string;
                    };
                    rec2020: {
                        extends: string;
                    };
                };
            };
            namespace: string;
        };
        semantic: {
            conditions: {
                light: string[];
                dark: string[];
            };
            sememes: {
                'bg-base': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-input': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-hover': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-accent': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-accentHover': {
                    light: [string, number];
                    dark: [string, number];
                };
                'fg-accent': {
                    light: [string, number];
                    dark: [string, number];
                };
                'fg-accentHover': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-neutral': {
                    light: [string, number];
                    dark: [string, number];
                };
                'bg-neutralHover': {
                    light: [string, number];
                    dark: [string, number];
                };
                'fg-base': {
                    light: [string, number];
                    dark: [string, number];
                };
                'fg-separator': {
                    light: [string, number];
                    dark: [string, number];
                };
                'fg-description': {
                    light: [string, number];
                    dark: [string, number];
                };
            };
            namespace: string;
        };
    };
    fontSizes: {
        physical: {
            conditions: {
                base: string[];
            };
            series: {
                'text-size': {
                    base: {
                        initial: number;
                        unit: string;
                        base: number;
                        naming: {
                            '2xs': number;
                            xs: number;
                            s: number;
                            base: number;
                            lg: number;
                            xl: number;
                            '2xl': number;
                            '3xl': number;
                            '4xl': number;
                        };
                    };
                };
            };
            namespace: string;
        };
    };
    lineHeights: {
        physical: {
            conditions: {
                base: string[];
            };
            series: {
                'system-leading': {
                    base: {
                        initial: number;
                        unit: string;
                        base: number;
                        naming: {
                            '2xs': number;
                            xs: number;
                            s: number;
                            base: number;
                            lg: number;
                            xl: number;
                            '2xl': number;
                            '3xl': number;
                            '4xl': number;
                        };
                        snapTo: {
                            method: "ceil";
                            initial: number;
                            slope: number;
                        };
                    };
                };
                'prose-leading': {
                    base: {
                        initial: number;
                        unit: string;
                        base: number;
                        naming: {
                            '2xs': number;
                            xs: number;
                            s: number;
                            base: number;
                            lg: number;
                            xl: number;
                            '2xl': number;
                            '3xl': number;
                            '4xl': number;
                        };
                        snapTo: {
                            method: "ceil";
                            initial: number;
                            slope: number;
                        };
                    };
                };
            };
            namespace: string;
        };
    };
    lengths: {
        physical: {
            conditions: {
                base: string[];
            };
            series: {
                gap: {
                    base: {
                        initial: number;
                        unit: string;
                        base: number;
                        naming: {
                            hairline: number;
                            half: number;
                            '1': number;
                            '2': number;
                            '3': number;
                            '4': number;
                            '5': number;
                            '6': number;
                            '7': number;
                            '8': number;
                        };
                    };
                };
            };
            namespace: string;
        };
    };
};
export declare const renderTokenSet: (tokenSet: TokenSet) => string;
