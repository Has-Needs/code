import { ColorsPhysicalLayer, ExponentialPhysicalLayer, LinearPhysicalLayer } from './physical-layer';
import { AliasLayer, AuditOptions, Definitions, PhysicalLayer, SemanticLayer, Series, ValueOfSeries } from './types';
export type Facet<K extends string = string, P extends string = string, L extends PhysicalLayer<string, Series<any>> = ExponentialPhysicalLayer<P> | LinearPhysicalLayer<P> | ColorsPhysicalLayer, Q extends string = string> = {
    physical: L;
    semantic?: SemanticLayer<K, P, ValueOfSeries<L['series']>, Q>;
    alias?: AliasLayer<Q>;
    definitions?: Definitions<Series<ValueOfSeries<L['series']>>>;
};
export declare const isColorPhysicalLayer: (layer: PhysicalLayer<string, Series<any>>, firstSeriesInLayer: Series) => layer is ColorsPhysicalLayer;
export declare const isExponentialLayer: (layer: PhysicalLayer, firstSeriesInLayer: Series) => layer is ExponentialPhysicalLayer;
export declare const isLinearLayer: (layer: PhysicalLayer, firstSeriesInLayer: Series) => layer is LinearPhysicalLayer;
export declare const getFirstSeriesInPhysicalLayer: (layer: PhysicalLayer<string, Series<any>>, ...definitions: Definitions[]) => Series;
export declare const renderFacet: ({ physical, semantic, alias, definitions, }: Facet) => string;
export declare const auditFacet: ({ physical, semantic, definitions }: Facet, auditOptions: AuditOptions) => Record<string, import("./types").TokenAudit[]>;
