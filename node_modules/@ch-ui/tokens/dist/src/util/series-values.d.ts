import { ResolvedNaming, SemanticLayer, SemanticValues, Series, FacetAnnotatedValues, SemanticAnnotatedValues, ResolvedAccompanyingSeries } from '../types';
/**
 * Produces all unique values of a series
 */
export declare const seriesValues: <V = number>({ values, naming }: Series<V>, semanticValues?: SemanticAnnotatedValues<V> | undefined) => FacetAnnotatedValues<V>;
export declare const facetSemanticValues: <K extends string = string, S extends string = string, V = number>(semanticLayer?: SemanticLayer<K, S, V> | undefined) => SemanticValues<S, V>;
export declare const physicalValueFromValueRelation: (value: number, { initial, slope }?: ResolvedAccompanyingSeries) => number;
export declare const resolveNaming: (naming?: Series['naming']) => ResolvedNaming;
export declare const escapeValue: (value: string) => string;
export declare const nameFromValue: (value: number | string, resolvedNaming: ResolvedNaming) => string;
export declare const variableNameFromValue: (value: number | string, resolvedNaming: ResolvedNaming, seriesId: string, namespace?: string) => string;
