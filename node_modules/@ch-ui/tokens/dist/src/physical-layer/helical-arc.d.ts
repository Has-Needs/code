import { type HelicalArcConfig, type Gamut, parseAlphaLuminosity } from '@ch-ui/colors';
import { AuditOptions, HelicalArcSeries, PhysicalLayer, SemanticValues, AuditTokens, RenderTokens, ResolvedHelicalArcSeries, Definitions } from '../types';
export type ColorsPhysicalLayer = PhysicalLayer<Gamut, HelicalArcSeries>;
export declare const renderHelicalArcTokens: RenderTokens<ResolvedHelicalArcSeries>;
export declare const renderPhysicalColorLayer: (layer: ColorsPhysicalLayer, semanticValues?: SemanticValues, ...definitions: Definitions[]) => string;
export declare const auditHelicalArcTokens: AuditTokens<ResolvedHelicalArcSeries>;
export declare const auditPhysicalColorLayer: (layer: ColorsPhysicalLayer, auditOptions: AuditOptions, semanticValues?: SemanticValues, ...definitions: Definitions[]) => Record<string, import("../types").TokenAudit[]>;
export declare const constellationFromPalette: (helicalArcConfig: HelicalArcConfig, curveDepth?: number) => import("@ch-ui/colors").Vec3[];
export { parseAlphaLuminosity };
