{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// Required notice: Copyright (c) 2024, Will Shown <ch-ui@willshown.com>\n\nimport {\n  OptionalConfig,\n  CustomThemeConfig as TwTheme,\n} from 'tailwindcss/types/config';\nimport {\n  TokenSet,\n  Facet,\n  facetSemanticValues,\n  PhysicalLayer,\n  SemanticLayer,\n  SemanticValues,\n  resolveNaming,\n  resolveDefinition,\n  seriesValues,\n  variableNameFromValue,\n  nameFromValue,\n  Series,\n  AliasLayer,\n  Definitions,\n} from '@ch-ui/tokens';\n\ntype TwKey = keyof TwTheme;\n\nexport type TailwindAdapterFacet = {\n  facet: string;\n  disposition?: 'extend' | 'overwrite';\n  tokenization?: 'keep-series' | 'omit-series' | 'recursive';\n  seriesValueSeparator?: string;\n};\n\nexport type TailwindAdapterConfig = Partial<\n  Record<TwKey, TailwindAdapterFacet>\n>;\n\ntype Mapping = Record<string, string | Record<string, string>>;\n\nconst defaultAdapterConfig = {} satisfies TailwindAdapterConfig;\n\nconst renderPhysicalMappings = (\n  config: TailwindAdapterFacet,\n  {\n    conditions,\n    series,\n    namespace,\n    definitions: layerDefinitions = {},\n  }: PhysicalLayer<string, Series<any>>,\n  semanticValues?: SemanticValues,\n  ...ancestorDefinitions: Definitions[]\n): Mapping =>\n  Object.entries(conditions).reduce(\n    (acc: Mapping, [conditionId, _statements]) =>\n      Object.entries(series).reduce(\n        (acc: Mapping, [seriesId, { [conditionId]: series }]) => {\n          const resolvedSeries = resolveDefinition<Series<any>, Series<any>>(\n            series!,\n            'series',\n            () => true,\n            layerDefinitions,\n            ...ancestorDefinitions,\n          );\n          const resolvedNaming = resolveNaming(resolvedSeries.naming);\n          const tokenization = config.tokenization ?? 'keep-series';\n          const separator = config.seriesValueSeparator ?? '-';\n          if (tokenization === 'recursive') {\n            acc[seriesId] = Array.from(\n              seriesValues(resolvedSeries, semanticValues?.[seriesId]).keys(),\n            ).reduce((acc: Record<string, string>, value) => {\n              acc[\n                `${nameFromValue(value, resolvedNaming)}`\n              ] = `var(${variableNameFromValue(\n                value,\n                resolvedNaming,\n                seriesId,\n                namespace,\n              )})`;\n              return acc;\n            }, {});\n          } else {\n            acc = {\n              ...acc,\n              ...Array.from(\n                seriesValues(series!, semanticValues?.[seriesId]).keys(),\n              ).reduce((acc, value) => {\n                const tokenName =\n                  tokenization === 'keep-series'\n                    ? `${seriesId}${separator}${nameFromValue(\n                        value,\n                        resolvedNaming,\n                      )}`\n                    : nameFromValue(value, resolvedNaming);\n                acc[tokenName] = `var(${variableNameFromValue(\n                  value,\n                  resolvedNaming,\n                  seriesId,\n                  namespace,\n                )})`;\n                return acc;\n              }, {}),\n            };\n          }\n          return acc;\n        },\n        acc,\n      ),\n    {},\n  );\n\nconst renderSemanticMappings = (\n  config: TailwindAdapterFacet,\n  semantic?: SemanticLayer,\n): Mapping => {\n  if (!semantic) {\n    return {};\n  } else {\n    const { conditions, sememes, namespace } = semantic;\n    return Object.entries(conditions).reduce(\n      (acc: Mapping, [conditionId, statements]) =>\n        Object.keys(sememes).reduce((acc: Mapping, sememeName) => {\n          acc[sememeName] = `var(--${namespace}${sememeName})`;\n          return acc;\n        }, acc),\n      {},\n    );\n  }\n};\n\nconst renderAliasMappings = (\n  config: TailwindAdapterFacet,\n  alias?: AliasLayer,\n): Mapping => {\n  if (!alias) {\n    return {};\n  } else {\n    const { namespace, aliases } = alias;\n    return Object.entries(aliases).reduce(\n      (acc: Mapping, [sememeName, sememeAliases]) => {\n        return Object.entries(sememeAliases).reduce(\n          (acc, [conditionId, aliasNames]) => {\n            return aliasNames.reduce((acc, aliasName) => {\n              acc[aliasName] = `var(--${namespace}${aliasName})`;\n              return acc;\n            }, acc);\n          },\n          acc,\n        );\n      },\n      {},\n    );\n  }\n};\n\nconst renderTailwindFacet = (\n  config: TailwindAdapterFacet,\n  { physical, semantic, alias, definitions: facetDefinitions = {} }: Facet,\n): Mapping => {\n  const semanticValues = facetSemanticValues(semantic) as SemanticValues;\n  // TODO(thure): Need case(s) for Tailwind\u2019s `fontSize`.\n  return {\n    ...renderPhysicalMappings(\n      config,\n      physical,\n      semanticValues,\n      facetDefinitions as Definitions,\n    ),\n    ...renderSemanticMappings(config, semantic as SemanticLayer),\n    ...renderAliasMappings(config, alias),\n  };\n};\n\nexport default (\n  tokensConfig: TokenSet,\n  adapterConfig: TailwindAdapterConfig = defaultAdapterConfig,\n): OptionalConfig['theme'] =>\n  Object.entries(adapterConfig).reduce(\n    (acc: OptionalConfig['theme'], entry) => {\n      const [twKey, config] = entry as [TwKey, TailwindAdapterFacet];\n      if (config.facet in tokensConfig) {\n        const twFacet = renderTailwindFacet(config, tokensConfig[config.facet]);\n        if (config.disposition === 'extend') {\n          acc.extend ??= {};\n          acc.extend[twKey] = twFacet;\n        } else {\n          acc[twKey] = twFacet;\n        }\n      }\n      return acc;\n    },\n    {},\n  );\n"],
  "mappings": "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",
  "names": ["acc", "series"]
}
