import { HocTransformer } from './handlers/hocTransformer.mjs';
import { MimicToNewComponentHandler } from './handlers/mimicToNewComponent.mjs';
import { wrapPropsTransformer, wrapComponentIntoHoc } from './internals.mjs';
import { isString } from './shared.mjs';

const paramsToDisplayNameTransformer = (params) => {
  var _a;
  if (isString(params.namePrefix)) {
    return {
      type: "prefix",
      value: params.namePrefix
    };
  }
  if (isString(params.nameRewrite)) {
    return {
      type: "rewrite",
      value: params.nameRewrite
    };
  }
  return (_a = params.displayNameTransform) != null ? _a : null;
};
const createHoc = (params) => {
  var _a;
  const proxyObject = new HocTransformer(
    params.propsTransformer ? wrapPropsTransformer(params.propsTransformer) : null,
    params.resultTransformer,
    paramsToDisplayNameTransformer(params)
  );
  const mimicToHandler = ((_a = params == null ? void 0 : params.mimicToNewComponent) != null ? _a : false) ? new MimicToNewComponentHandler() : null;
  return (component) => wrapComponentIntoHoc(
    component,
    proxyObject,
    mimicToHandler
  );
};

export { createHoc };
//# sourceMappingURL=createHoc.mjs.map
