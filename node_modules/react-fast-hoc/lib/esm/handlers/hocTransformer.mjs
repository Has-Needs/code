import { getComponentName } from '../shared.mjs';

const calculateDisplayNameTransform = (prevName, displayNameTransform) => {
  if (displayNameTransform.type === "prefix") {
    return displayNameTransform.value + prevName;
  }
  if (displayNameTransform.type === "rewrite") {
    return displayNameTransform.value;
  }
  if (displayNameTransform.type === "rewrite-dynamic") {
    return displayNameTransform.value(prevName);
  }
  return prevName;
};
class HocTransformer {
  constructor(transformer, resultTransformer, displayNameTransform) {
    this.transformer = transformer;
    this.resultTransformer = resultTransformer;
    this.displayNameTransform = displayNameTransform;
    this._displayNameField = Symbol("displayName");
  }
  apply(target, self, args) {
    const result = target.apply(
      self,
      this.transformer ? this.transformer(args) : args
    );
    return this.resultTransformer ? this.resultTransformer(result) : result;
  }
  get(target, p, receiver) {
    if (process.env.NODE_ENV === "production" || p !== "displayName" || !this.displayNameTransform) {
      return Reflect.get(target, p, receiver);
    }
    if (!(this._displayNameField in target)) {
      target[this._displayNameField] = calculateDisplayNameTransform(
        getComponentName(target),
        this.displayNameTransform
      );
    }
    return target[this._displayNameField];
  }
  set(target, p, value) {
    if (process.env.NODE_ENV !== "production" && p === "displayName") {
      target[this._displayNameField] = value;
      return true;
    }
    return Reflect.set(target, p, value);
  }
}

export { HocTransformer };
//# sourceMappingURL=hocTransformer.mjs.map
