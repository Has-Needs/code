{"version":3,"file":"createTransformProps.mjs","sources":["../../src/createTransformProps.ts"],"sourcesContent":["import type { ComposeLeft, Fn, Identity } from \"hotscript\";\nimport { createHoc } from \"./createHoc\";\nimport type {\n  CreateHocComponentOptions,\n  CreateTransformPropsOptions,\n  HocTypeTransform,\n  PropsBase,\n  PropsTransformer,\n} from \"./type\";\n\nconst DEFAULT_TRANSFORM_OPTIONS = { namePrefix: \"Transformed\" } as const;\n/**\n *\n * @description create a hoc that automagically applies proxy to component. *Transformations is not typesafe, you should [hotscript](https://github.com/gvergnaud/HOTScript) for type transformation*\n * @example\n * ```tsx\n * const withProps = createTransformProps<[], { newProp: string }>((props) => ({\n *  ...props,\n *  newProp: props?.newProp ?? \"newProp\",\n * }));\n * ```\n * @param propsTransformer You can use react hooks in the transformer function\n * @param options\n * @returns\n */\nexport const createTransformProps = <\n  TPipeTransform extends Fn[] | HocTypeTransform<any, any> = HocTypeTransform<\n    \"props\",\n    Identity\n  >,\n  ComponentPropsExtends extends PropsBase = PropsBase,\n  TActualTransform extends HocTypeTransform<\n    any,\n    any\n  > = TPipeTransform extends Fn[]\n    ? HocTypeTransform<\"props\", ComposeLeft<TPipeTransform>>\n    : TPipeTransform\n>(\n  propsTransformer: PropsTransformer,\n  options?: CreateTransformPropsOptions\n) =>\n  createHoc<TActualTransform, ComponentPropsExtends>({\n    propsTransformer,\n    resultTransformer: null,\n    ...((options ?? DEFAULT_TRANSFORM_OPTIONS) as CreateHocComponentOptions),\n  });\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAUA,MAAM,yBAAA,GAA4B,EAAE,UAAA,EAAY,aAAc,EAAA,CAAA;AAevD,MAAM,oBAAuB,GAAA,CAalC,gBACA,EAAA,OAAA,KAEA,SAAmD,CAAA,cAAA,CAAA;AAAA,EACjD,gBAAA;AAAA,EACA,iBAAmB,EAAA,IAAA;AAAA,CAAA,EACd,4BAAW,yBACjB,CAAA;;;;"}