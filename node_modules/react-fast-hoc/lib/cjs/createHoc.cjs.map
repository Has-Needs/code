{"version":3,"file":"createHoc.cjs","sources":["../../src/createHoc.ts"],"sourcesContent":["import type { ComposeLeft, Fn } from \"hotscript\";\nimport type { ComponentType } from \"react\";\nimport { HocTransformer, MimicToNewComponentHandler } from \"./handlers\";\nimport { wrapComponentIntoHoc, wrapPropsTransformer } from \"./internals\";\nimport type {\n  CreateHocNameOption,\n  CreateHocOptions,\n  CreateHocReturn,\n  DisplayNameTransform,\n  HocTypeTransform,\n  PropsBase,\n} from \"./type\";\nimport { UnionToIntersection } from \"type-fest\";\nimport { isString } from \"./shared\";\n\nconst paramsToDisplayNameTransformer = (\n  params: Partial<UnionToIntersection<CreateHocNameOption>>\n): DisplayNameTransform | null => {\n  if (isString(params.namePrefix)) {\n    return {\n      type: \"prefix\",\n      value: params.namePrefix,\n    };\n  }\n  if (isString(params.nameRewrite)) {\n    return {\n      type: \"rewrite\",\n      value: params.nameRewrite,\n    };\n  }\n\n  return params.displayNameTransform ?? null;\n};\n\n/**\n * @description *Transformations is not typesafe, you should [hotscript](https://github.com/gvergnaud/HOTScript) for type transformation*\n * @param propsTransformer You can use react hooks in the transformer function.\n * @param displayNamePrefix\n * @returns\n */\nexport const createHoc = <\n  TPipeTransform extends Fn[] | HocTypeTransform<any, any>,\n  TComponentPropsExtends extends PropsBase = PropsBase,\n  TActualTransform extends HocTypeTransform<\n    any,\n    any\n  > = TPipeTransform extends Fn[]\n    ? HocTypeTransform<\"props\", ComposeLeft<TPipeTransform>>\n    : TPipeTransform\n>(\n  params: CreateHocOptions\n) => {\n  const proxyObject = new HocTransformer(\n    params.propsTransformer\n      ? wrapPropsTransformer(params.propsTransformer)\n      : null,\n    params.resultTransformer,\n    paramsToDisplayNameTransformer(params)\n  );\n  const mimicToHandler =\n    params?.mimicToNewComponent ?? false\n      ? new MimicToNewComponentHandler()\n      : null;\n\n  return ((component: ComponentType<unknown>) =>\n    wrapComponentIntoHoc(\n      component,\n      proxyObject,\n      mimicToHandler\n    )) as CreateHocReturn<TActualTransform, TComponentPropsExtends>;\n};\n"],"names":["isString","HocTransformer","wrapPropsTransformer","MimicToNewComponentHandler","wrapComponentIntoHoc"],"mappings":";;;;;;;AAeA,MAAM,8BAAA,GAAiC,CACrC,MACgC,KAAA;AAjBlC,EAAA,IAAA,EAAA,CAAA;AAkBE,EAAI,IAAAA,eAAA,CAAS,MAAO,CAAA,UAAU,CAAG,EAAA;AAC/B,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,OAAO,MAAO,CAAA,UAAA;AAAA,KAChB,CAAA;AAAA,GACF;AACA,EAAI,IAAAA,eAAA,CAAS,MAAO,CAAA,WAAW,CAAG,EAAA;AAChC,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,SAAA;AAAA,MACN,OAAO,MAAO,CAAA,WAAA;AAAA,KAChB,CAAA;AAAA,GACF;AAEA,EAAO,OAAA,CAAA,EAAA,GAAA,MAAA,CAAO,yBAAP,IAA+B,GAAA,EAAA,GAAA,IAAA,CAAA;AACxC,CAAA,CAAA;AAQa,MAAA,SAAA,GAAY,CAUvB,MACG,KAAA;AAnDL,EAAA,IAAA,EAAA,CAAA;AAoDE,EAAA,MAAM,cAAc,IAAIC,6BAAA;AAAA,IACtB,MAAO,CAAA,gBAAA,GACHC,8BAAqB,CAAA,MAAA,CAAO,gBAAgB,CAC5C,GAAA,IAAA;AAAA,IACJ,MAAO,CAAA,iBAAA;AAAA,IACP,+BAA+B,MAAM,CAAA;AAAA,GACvC,CAAA;AACA,EAAA,MAAM,mBACJ,EAAQ,GAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,mBAAA,KAAR,YAA+B,KAC3B,IAAA,IAAIC,gDACJ,GAAA,IAAA,CAAA;AAEN,EAAA,OAAQ,CAAC,SACP,KAAAC,8BAAA;AAAA,IACE,SAAA;AAAA,IACA,WAAA;AAAA,IACA,cAAA;AAAA,GACF,CAAA;AACJ;;;;"}