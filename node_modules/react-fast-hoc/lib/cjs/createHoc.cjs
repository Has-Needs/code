'use strict';

const hocTransformer = require('./handlers/hocTransformer.cjs');
const mimicToNewComponent = require('./handlers/mimicToNewComponent.cjs');
const internals = require('./internals.cjs');
const shared = require('./shared.cjs');

const paramsToDisplayNameTransformer = (params) => {
  var _a;
  if (shared.isString(params.namePrefix)) {
    return {
      type: "prefix",
      value: params.namePrefix
    };
  }
  if (shared.isString(params.nameRewrite)) {
    return {
      type: "rewrite",
      value: params.nameRewrite
    };
  }
  return (_a = params.displayNameTransform) != null ? _a : null;
};
const createHoc = (params) => {
  var _a;
  const proxyObject = new hocTransformer.HocTransformer(
    params.propsTransformer ? internals.wrapPropsTransformer(params.propsTransformer) : null,
    params.resultTransformer,
    paramsToDisplayNameTransformer(params)
  );
  const mimicToHandler = ((_a = params == null ? void 0 : params.mimicToNewComponent) != null ? _a : false) ? new mimicToNewComponent.MimicToNewComponentHandler() : null;
  return (component) => internals.wrapComponentIntoHoc(
    component,
    proxyObject,
    mimicToHandler
  );
};

exports.createHoc = createHoc;
//# sourceMappingURL=createHoc.cjs.map
