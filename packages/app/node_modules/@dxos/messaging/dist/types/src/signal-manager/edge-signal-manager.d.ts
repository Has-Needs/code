import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type EdgeConnection } from '@dxos/edge-client';
import { PublicKey } from '@dxos/keys';
import { type SwarmResponse } from '@dxos/protocols/proto/dxos/edge/messenger';
import { type SignalManager } from './signal-manager';
import { type PeerInfo, type Message, type SwarmEvent } from '../signal-methods';
export declare class EdgeSignalManager extends Resource implements SignalManager {
    /**
     * @deprecated
     */
    swarmEvent: Event<SwarmEvent>;
    swarmState: Event<SwarmResponse>;
    onMessage: Event<Message>;
    /**
     * Swarm key -> { peer: <own state payload>, joinedPeers: <state of swarm> }.
     */
    private readonly _swarmPeers;
    private readonly _edgeConnection;
    constructor({ edgeConnection }: {
        edgeConnection: EdgeConnection;
    });
    protected _open(): Promise<void>;
    /**
     * Warning: PeerInfo is inferred from edgeConnection.
     */
    join({ topic, peer }: {
        topic: PublicKey;
        peer: PeerInfo;
    }): Promise<void>;
    leave({ topic, peer }: {
        topic: PublicKey;
        peer: PeerInfo;
    }): Promise<void>;
    query({ topic }: {
        topic: PublicKey;
    }): Promise<SwarmResponse>;
    sendMessage(message: Message): Promise<void>;
    subscribeMessages(peerInfo: PeerInfo): Promise<void>;
    unsubscribeMessages(peerInfo: PeerInfo): Promise<void>;
    private _onMessage;
    private _processSwarmResponse;
    private _processMessage;
    private _matchSelfPeerInfo;
    private _rejoinAllSwarms;
}
//# sourceMappingURL=edge-signal-manager.d.ts.map