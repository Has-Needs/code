import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type SwarmResponse } from '@dxos/protocols/proto/dxos/edge/messenger';
import { type QueryRequest, type JoinRequest, type LeaveRequest } from '@dxos/protocols/proto/dxos/edge/signal';
import { type PeerInfo, type Message, type SignalClientMethods, type SignalStatus, type SwarmEvent } from '../signal-methods';
/**
 * KUBE-specific signaling client.
 * Establishes a websocket connection to signal server and provides RPC methods.
 * Subscription state updates are executed immediately against the local state which
 * is reconciled periodically.
 * TODO(mykola): Delete.
 * @deprecated
 */
export declare class SignalClient extends Resource implements SignalClientMethods {
    private readonly _host;
    private readonly _getMetadata?;
    private readonly _monitor;
    private _state;
    private _lastError?;
    private _lastReconciliationFailed;
    private readonly _clientReady;
    private _connectionCtx?;
    private _client?;
    private _reconcileTask?;
    private _reconnectTask?;
    /**
     * Number of milliseconds after which the connection will be attempted again in case of error.
     */
    private _reconnectAfter;
    private readonly _instanceId;
    readonly statusChanged: Event<SignalStatus>;
    readonly onMessage: Event<Message>;
    readonly swarmEvent: Event<SwarmEvent>;
    /**
     * @param _host Signal server websocket URL.
     * @param onMessage called when a new message is received.
     * @param onSwarmEvent called when a new swarm event is received.
     * @param _getMetadata signal-message metadata provider, called for every message.
     */
    constructor(_host: string, _getMetadata?: (() => any) | undefined);
    protected _open(): Promise<void>;
    protected _catch(err: Error): Promise<void>;
    protected _close(): Promise<void>;
    getStatus(): SignalStatus;
    join(args: JoinRequest): Promise<void>;
    leave(args: LeaveRequest): Promise<void>;
    query(params: QueryRequest): Promise<SwarmResponse>;
    sendMessage(msg: Message): Promise<void>;
    subscribeMessages(peer: PeerInfo): Promise<void>;
    unsubscribeMessages(peer: PeerInfo): Promise<void>;
    private _scheduleReconcileAfterError;
    private _createClient;
    private _reconnect;
    private _onConnected;
    private _onDisconnected;
    private _setState;
    private _updateReconnectTimeout;
    private _safeResetClient;
}
//# sourceMappingURL=signal-client.d.ts.map