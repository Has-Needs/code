import { Schema } from 'effect';
import { Type } from '@dxos/echo';
export declare const TYPE_PROPERTIES = "dxos.org/type/Properties";
declare const PropertiesType_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    name: Schema.optional<typeof Schema.String>;
    hue: Schema.optional<typeof Schema.String>;
    icon: Schema.optional<typeof Schema.String>;
    invocationTraceQueue: Schema.optional<Type.ref<Schema.Schema<Type.Expando, {
        [x: string]: any;
        id: string;
    }, never>>>;
}, {
    record: true;
}>, Schema.Struct.Encoded<{
    name: Schema.optional<typeof Schema.String>;
    hue: Schema.optional<typeof Schema.String>;
    icon: Schema.optional<typeof Schema.String>;
    invocationTraceQueue: Schema.optional<Type.ref<Schema.Schema<Type.Expando, {
        [x: string]: any;
        id: string;
    }, never>>>;
}>>;
export declare class PropertiesType extends PropertiesType_base {
}
export type PropertiesTypeProps = Pick<PropertiesType, 'name' | 'hue' | 'icon' | 'invocationTraceQueue'>;
export {};
//# sourceMappingURL=schema.d.ts.map