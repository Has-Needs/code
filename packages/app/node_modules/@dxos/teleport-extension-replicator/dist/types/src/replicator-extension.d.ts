import { type FeedWrapper } from '@dxos/feed-store';
import { type ExtensionContext, type TeleportExtension } from '@dxos/teleport';
export type ReplicationOptions = {
    upload: boolean;
};
/**
 * Manages replication between a set of feeds for a single teleport session.
 */
export declare class ReplicatorExtension implements TeleportExtension {
    private readonly _ctx;
    private readonly _feeds;
    private readonly _streams;
    private _rpc?;
    private _extensionContext?;
    private _options;
    private readonly _updateTask;
    private get extensionInfo();
    setOptions(options: ReplicationOptions): this;
    addFeed(feed: FeedWrapper<any>): void;
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(err?: Error | undefined): Promise<void>;
    onAbort(err?: Error | undefined): Promise<void>;
    private _reevaluateFeeds;
    /**
     * Try to initiate feed replication.
     */
    private _initiateReplication;
    /**
     * Respond to a remote request to replicate a feed.
     * @returns A stream tag for the replication stream or `undefined` if we don't want to replicate.
     */
    private _acceptReplication;
    private _replicateFeed;
    private _stopReplication;
}
//# sourceMappingURL=replicator-extension.d.ts.map