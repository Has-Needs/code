{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../src/faker.ts", "../../../src/data.ts", "../../../src/util.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nexport * from '@ngneat/falso';\n\nexport * from './faker';\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport {\n  rand,\n  randChanceBoolean,\n  randCompanyName,\n  randEmail,\n  randFirstName,\n  randFloat,\n  randFullName,\n  randHexaDecimal,\n  randImg,\n  randNumber,\n  randParagraph,\n  randProductName,\n  randRecentDate,\n  randSentence,\n  randUrl,\n  randUuid,\n  randWord,\n  seed,\n} from '@ngneat/falso';\n\nimport { idEmoji, idHue } from '@dxos/util';\n\nimport { airports, icons } from './data';\nimport { type Range, getCount, multiple, toRange, uniqueArray } from './util';\n\n// Fake faker.\nexport const faker = {\n  //\n  // Util\n  //\n  seed: (value: number) => seed(String(value)),\n  helpers: {\n    arrayElement: <T>(a: T[]) => rand(a),\n    multiple: <T>(f: () => T, { count }: { count: number | { min: number; max: number } }) =>\n      multiple(f, typeof count === 'number' ? count : getCount(count)),\n    uniqueArray: <T>(f: T[] | (() => T), n: number) => uniqueArray(f, n),\n    randomSubset: <T>(array: T[], count?: number | { min: number; max: number }) => {\n      const length =\n        count === undefined\n          ? Math.floor(Math.random() * (array.length + 1))\n          : Math.min(typeof count === 'number' ? count : getCount(count), array.length);\n\n      if (length === 0) {\n        return [];\n      }\n      return uniqueArray(() => rand(array), length);\n    },\n  },\n\n  //\n  // Type\n  //\n  number: {\n    float: (range?: number | Range) => randFloat(range ? toRange(range) : undefined),\n    int: (range?: number | Range) => randNumber(range ? toRange(range) : undefined),\n  },\n  datatype: {\n    boolean: (p?: { probability: number }) => randChanceBoolean({ chanceTrue: p?.probability ?? 0.5 }),\n  },\n  date: {\n    recent: () => randRecentDate(),\n    iso8601: () => randRecentDate().toISOString(),\n  },\n  image: {\n    url: () => randImg(),\n  },\n\n  //\n  // Text\n  //\n  lorem: {\n    word: () => randWord(),\n    words: (n: number | Range = 1) => randWord({ length: getCount(n) }).join(' '),\n    sentence: (n: number | Range = 1) => {\n      if (n) {\n        const text = randWord({ length: getCount(n) }).join(' ');\n        return text.charAt(0).toUpperCase() + text.slice(1) + '.';\n      }\n\n      return randSentence();\n    },\n    sentences: (n: number | Range = 1) => randSentence({ length: getCount(n) }).join(' '),\n    paragraph: (n: number | Range = 1) => {\n      if (n) {\n        return randSentence({ length: getCount(n) }).join(' ');\n      }\n\n      return randParagraph();\n    },\n    paragraphs: (n: number | Range = 1) => randParagraph({ length: getCount(n) }).join('\\n'),\n  },\n\n  //\n  // String\n  //\n  string: {\n    hexadecimal: (l?: { length: number }) => randHexaDecimal(l).join(''),\n    uuid: () => randUuid(),\n  },\n\n  //\n  // Custom\n  //\n  internet: {\n    email: () => randEmail(),\n    url: () => randUrl(),\n  },\n  person: {\n    firstName: () => randFirstName(),\n    fullName: () => randFullName(),\n  },\n  company: {\n    name: () => randCompanyName(),\n  },\n  commerce: {\n    productName: () => randProductName(),\n  },\n  geo: {\n    airport: () => rand(airports),\n    location: () => rand(airports).location,\n  },\n  email: {},\n  properties: {\n    emoji: () => rand(idEmoji),\n    hue: () => rand(idHue),\n    icon: () => rand(icons),\n  },\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nexport const airports = [\n  { name: 'Atlanta', code: 'ATL', location: [-84.4277, 33.6407] },\n  { name: 'Dubai', code: 'DXB', location: [55.3644, 25.2532] },\n  { name: 'Dallas', code: 'DFW', location: [-97.0403, 32.8998] },\n  { name: 'London', code: 'LHR', location: [-0.4543, 51.47] },\n  { name: 'Tokyo', code: 'HND', location: [139.7811, 35.5494] },\n  { name: 'Denver', code: 'DEN', location: [-104.6737, 39.8561] },\n  { name: 'Istanbul', code: 'IST', location: [28.8153, 41.2753] },\n  { name: 'Los Angeles', code: 'LAX', location: [-118.4085, 33.9416] },\n  { name: 'Paris', code: 'CDG', location: [2.55, 49.0097] },\n  { name: 'Guangzhou', code: 'CAN', location: [113.2971, 23.3924] },\n  { name: 'Frankfurt', code: 'FRA', location: [8.5706, 50.0333] },\n  { name: 'Delhi', code: 'DEL', location: [77.1031, 28.5562] },\n  { name: 'Singapore', code: 'SIN', location: [103.994, 1.3644] },\n  { name: 'Amsterdam', code: 'AMS', location: [4.7639, 52.3105] },\n  { name: 'Seoul', code: 'ICN', location: [126.4505, 37.4602] },\n  { name: 'Jakarta', code: 'CGK', location: [106.6559, -6.1256] },\n  { name: 'Bangkok', code: 'BKK', location: [100.7501, 13.6899] },\n  { name: 'Hong Kong', code: 'HKG', location: [113.9185, 22.308] },\n  { name: 'Madrid', code: 'MAD', location: [-3.5676, 40.4936] },\n  { name: 'San Francisco', code: 'SFO', location: [-122.379, 37.6213] },\n  { name: 'New York', code: 'JFK', location: [-73.7781, 40.6413] },\n  { name: 'Chicago', code: 'ORD', location: [-87.9048, 41.9742] },\n  { name: 'Shanghai', code: 'PVG', location: [121.8083, 31.1434] },\n  { name: 'Beijing', code: 'PEK', location: [116.4074, 39.9042] },\n  { name: 'Miami', code: 'MIA', location: [-80.2906, 25.7959] },\n  { name: 'Houston', code: 'IAH', location: [-95.3414, 29.9844] },\n  { name: 'Munich', code: 'MUC', location: [11.7861, 48.3538] },\n  { name: 'Toronto', code: 'YYZ', location: [-79.6306, 43.6777] },\n  { name: 'Sydney', code: 'SYD', location: [151.1799, -33.9399] },\n  { name: 'Melbourne', code: 'MEL', location: [144.843, -37.6733] },\n  { name: 'Rome', code: 'FCO', location: [12.2508, 41.8003] },\n  { name: 'Barcelona', code: 'BCN', location: [2.0759, 41.2974] },\n  { name: 'Kuala Lumpur', code: 'KUL', location: [101.7099, 2.7456] },\n  { name: 'Doha', code: 'DOH', location: [51.6136, 25.2731] },\n  { name: 'Vienna', code: 'VIE', location: [16.5697, 48.1103] },\n  { name: 'Zurich', code: 'ZRH', location: [8.5492, 47.4583] },\n  { name: 'Brussels', code: 'BRU', location: [4.4844, 50.901] },\n  { name: 'Copenhagen', code: 'CPH', location: [12.6508, 55.6181] },\n  { name: 'Oslo', code: 'OSL', location: [11.1004, 60.1939] },\n  { name: 'Stockholm', code: 'ARN', location: [17.9186, 59.6519] },\n  { name: 'Helsinki', code: 'HEL', location: [24.9633, 60.3172] },\n  { name: 'Lisbon', code: 'LIS', location: [-9.1359, 38.7742] },\n  { name: 'Athens', code: 'ATH', location: [23.9445, 37.9364] },\n  { name: 'Warsaw', code: 'WAW', location: [20.9671, 52.1657] },\n  { name: 'Budapest', code: 'BUD', location: [19.261, 47.433] },\n  { name: 'Prague', code: 'PRG', location: [14.2632, 50.1008] },\n  { name: 'Moscow', code: 'SVO', location: [37.4146, 55.9726] },\n  { name: 'Dubai', code: 'DXB', location: [55.3644, 25.2532] },\n];\n\nexport const icons = [\n  'ph--air-traffic-control--regular',\n  'ph--asterisk--regular',\n  'ph--atom--regular',\n  'ph--basketball--regular',\n  'ph--butterfly--regular',\n  'ph--cactus--regular',\n  'ph--cake--regular',\n  'ph--calendar-dots--regular',\n  'ph--campfire--regular',\n  'ph--command--regular',\n  'ph--confetti--regular',\n  'ph--detective--regular',\n  'ph--disco-ball--regular',\n  'ph--dna--regular',\n  'ph--factory--regular',\n  'ph--flag-banner-fold--regular',\n  'ph--flask--regular',\n  'ph--flower-lotus--regular',\n  'ph--flying-saucer--regular',\n  'ph--game-controller--regular',\n  'ph--gavel--regular',\n  'ph--gift--regular',\n  'ph--guitar--regular',\n  'ph--hamburger--regular',\n  'ph--handshake--regular',\n  'ph--heart--regular',\n  'ph--lightbulb--regular',\n  'ph--lock--regular',\n  'ph--martini--regular',\n  'ph--medal-military--regular',\n  'ph--moped-front--regular',\n  'ph--office-chair--regular',\n  'ph--paint-brush-household--regular',\n  'ph--peace--regular',\n  'ph--person-simple-hike--regular',\n  'ph--piggy-bank--regular',\n  'ph--potted-plant--regular',\n  'ph--radioactive--regular',\n  'ph--rocket-launch--regular',\n  'ph--shield-star--regular',\n  'ph--shopping-cart--regular',\n  'ph--stethoscope--regular',\n  'ph--student--regular',\n  'ph--sun--regular',\n  'ph--tote--regular',\n  'ph--tree--regular',\n  'ph--users-three--regular',\n  'ph--yin-yang--regular',\n];\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { randNumber } from '@ngneat/falso';\n\nexport type Range = { min?: number; max?: number; count?: number };\n\nexport const toRange = (range: number | Range, min = 0) => (typeof range === 'number' ? { min, max: range } : range);\n\nexport const getCount = (range?: number | Range) => (typeof range === 'number' ? range : randNumber(range));\n\nexport const multiple = <T>(fn: (i: number) => T, n: number): T[] => {\n  return Array.from({ length: n }).map((_, i) => fn(i));\n};\n\nexport const uniqueArray = <T>(values: T[] | (() => T), n: number): T[] => {\n  if (Array.isArray(values)) {\n    const results: T[] = [];\n    const selection = Array.from(new Set<T>(values));\n    for (let i = 0; i < n; i++) {\n      if (selection.length === 0) {\n        break;\n      }\n      results.push(selection.splice(Math.floor(Math.random() * selection.length), 1)[0]);\n    }\n    return results;\n  } else {\n    const results = new Set<T>();\n    // TODO(burdon): Set timeout.\n    while (results.size < n) {\n      results.add(values());\n    }\n\n    return Array.from(results);\n  }\n};\n"],
  "mappings": "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",
  "names": ["rand", "randChanceBoolean", "randCompanyName", "randEmail", "randFirstName", "randFloat", "randFullName", "randHexaDecimal", "randImg", "randNumber", "randParagraph", "randProductName", "randRecentDate", "randSentence", "randUrl", "randUuid", "randWord", "seed", "idEmoji", "idHue", "airports", "name", "code", "location", "icons", "randNumber", "toRange", "range", "min", "max", "getCount", "randNumber", "multiple", "fn", "n", "Array", "from", "length", "map", "_", "i", "uniqueArray", "values", "isArray", "results", "selection", "Set", "push", "splice", "Math", "floor", "random", "size", "add", "faker", "seed", "value", "String", "helpers", "arrayElement", "a", "rand", "multiple", "f", "count", "getCount", "uniqueArray", "n", "randomSubset", "array", "length", "undefined", "Math", "floor", "random", "min", "number", "float", "range", "randFloat", "toRange", "int", "randNumber", "datatype", "boolean", "p", "randChanceBoolean", "chanceTrue", "probability", "date", "recent", "randRecentDate", "iso8601", "toISOString", "image", "url", "randImg", "lorem", "word", "randWord", "words", "join", "sentence", "text", "charAt", "toUpperCase", "slice", "randSentence", "sentences", "paragraph", "randParagraph", "paragraphs", "string", "hexadecimal", "l", "randHexaDecimal", "uuid", "randUuid", "internet", "email", "randEmail", "randUrl", "person", "firstName", "randFirstName", "fullName", "randFullName", "company", "name", "randCompanyName", "commerce", "productName", "randProductName", "geo", "airport", "airports", "location", "properties", "emoji", "idEmoji", "hue", "idHue", "icon", "icons"]
}
