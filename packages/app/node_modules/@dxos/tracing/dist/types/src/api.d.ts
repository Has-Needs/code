import { type MaybePromise } from '@dxos/util';
import { type TraceSpanParams } from './trace-processor';
export interface TimeAware {
    tick(timeMs: number): void;
}
export type InfoOptions = {
    /**
     * Value is of enum type and should be converted to string.
     *
     * Example:
     *
     * ```ts
     * @trace.info({ enum: SpaceState })
     * get state(): SpaceState { ... }
     * ```
     */
    enum?: Record<string, any>;
    /**
     * Max depth of the object to be included in the resource info section.
     *
     * null means no limit (a limit of 8 nested objects is still imposed).
     *
     * Default: 0 - objects will be stringified with toString.
     */
    depth?: number | null;
};
export type SpanOptions = {
    showInBrowserTimeline?: boolean;
    op?: string;
    attributes?: Record<string, any>;
};
export type AddLinkOptions = {};
export type TraceDiagnosticParams<T> = {
    /**
     * Unique ID.
     */
    id: string;
    /**
     * Human-readable name.
     * @defaults Defaults to `id`
     */
    name?: string;
    /**
     * Function that will be called to fetch the diagnostic data.
     */
    fetch: () => MaybePromise<T>;
};
export interface TraceDiagnostic {
    id: string;
    unregister(): void;
}
export declare const trace: {
    addLink: (parent: any, child: any, opts?: AddLinkOptions) => void;
    diagnostic: <T>(params: TraceDiagnosticParams<T>) => TraceDiagnostic;
    info: (opts?: InfoOptions) => (target: any, propertyKey: string, descriptor?: PropertyDescriptor) => void;
    mark: (name: string) => void;
    metricsCounter: () => (target: any, propertyKey: string, descriptor?: PropertyDescriptor) => void;
    resource: (options?: {
        annotation?: symbol;
    }) => <T extends {
        new (...args: any[]): {};
    }>(constructor: T) => {
        new (...rest: any[]): {};
    } & T;
    span: ({ showInBrowserTimeline, op, attributes }?: SpanOptions) => (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: any) => any>) => void;
    spanStart: (params: TraceSpanParams & {
        id: string;
    }) => void;
    spanEnd: (id: string) => void;
    metrics: import("./remote").RemoteMetrics;
};
//# sourceMappingURL=api.d.ts.map