import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { Error } from "./error_pb.js";
import type { LogEntry } from "./client/logging_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/tracing.proto.
 */
export declare const file_dxos_tracing: GenFile;
/**
 * @generated from message dxos.tracing.Resource
 */
export type Resource = Message<"dxos.tracing.Resource"> & {
    /**
     * @generated from field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from field: string class_name = 2;
     */
    className: string;
    /**
     * @generated from field: int32 instance_id = 3;
     */
    instanceId: number;
    /**
     * @generated from field: google.protobuf.Struct info = 4;
     */
    info?: JsonObject;
    /**
     * @generated from field: repeated dxos.tracing.ResourceLink links = 5;
     */
    links: ResourceLink[];
    /**
     * @generated from field: repeated dxos.tracing.Metric metrics = 6;
     */
    metrics: Metric[];
};
/**
 * Describes the message dxos.tracing.Resource.
 * Use `create(ResourceSchema)` to create a new message.
 */
export declare const ResourceSchema: GenMessage<Resource>;
/**
 * @generated from message dxos.tracing.ResourceLink
 */
export type ResourceLink = Message<"dxos.tracing.ResourceLink"> & {
    /**
     * @generated from field: int32 from = 1;
     */
    from: number;
    /**
     * @generated from field: int32 to = 2;
     */
    to: number;
    /**
     * @generated from field: google.protobuf.Struct attributes = 4;
     */
    attributes?: JsonObject;
};
/**
 * Describes the message dxos.tracing.ResourceLink.
 * Use `create(ResourceLinkSchema)` to create a new message.
 */
export declare const ResourceLinkSchema: GenMessage<ResourceLink>;
/**
 * @generated from message dxos.tracing.Span
 */
export type Span = Message<"dxos.tracing.Span"> & {
    /**
     * @generated from field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from field: optional int32 parent_id = 2;
     */
    parentId?: number;
    /**
     * @generated from field: optional int32 resource_id = 3;
     */
    resourceId?: number;
    /**
     * @generated from field: string method_name = 4;
     */
    methodName: string;
    /**
     * TODO(dmaretskyi): Figure out proper sub-millisecond timestamp type.
     *
     * @generated from field: string start_ts = 5;
     */
    startTs: string;
    /**
     * @generated from field: optional string end_ts = 6;
     */
    endTs?: string;
    /**
     * @generated from field: optional dxos.error.Error error = 11;
     */
    error?: Error;
};
/**
 * Describes the message dxos.tracing.Span.
 * Use `create(SpanSchema)` to create a new message.
 */
export declare const SpanSchema: GenMessage<Span>;
/**
 * @generated from message dxos.tracing.StreamTraceEvent
 */
export type StreamTraceEvent = Message<"dxos.tracing.StreamTraceEvent"> & {
    /**
     * @generated from field: repeated dxos.tracing.StreamTraceEvent.ResourceAdded resource_added = 1;
     */
    resourceAdded: StreamTraceEvent_ResourceAdded[];
    /**
     * @generated from field: repeated dxos.tracing.StreamTraceEvent.ResourceRemoved resource_removed = 2;
     */
    resourceRemoved: StreamTraceEvent_ResourceRemoved[];
    /**
     * @generated from field: repeated dxos.tracing.StreamTraceEvent.SpanAdded span_added = 3;
     */
    spanAdded: StreamTraceEvent_SpanAdded[];
    /**
     * @generated from field: repeated dxos.tracing.StreamTraceEvent.LogAdded log_added = 4;
     */
    logAdded: StreamTraceEvent_LogAdded[];
};
/**
 * Describes the message dxos.tracing.StreamTraceEvent.
 * Use `create(StreamTraceEventSchema)` to create a new message.
 */
export declare const StreamTraceEventSchema: GenMessage<StreamTraceEvent>;
/**
 * @generated from message dxos.tracing.StreamTraceEvent.ResourceAdded
 */
export type StreamTraceEvent_ResourceAdded = Message<"dxos.tracing.StreamTraceEvent.ResourceAdded"> & {
    /**
     * @generated from field: dxos.tracing.Resource resource = 1;
     */
    resource?: Resource;
};
/**
 * Describes the message dxos.tracing.StreamTraceEvent.ResourceAdded.
 * Use `create(StreamTraceEvent_ResourceAddedSchema)` to create a new message.
 */
export declare const StreamTraceEvent_ResourceAddedSchema: GenMessage<StreamTraceEvent_ResourceAdded>;
/**
 * @generated from message dxos.tracing.StreamTraceEvent.ResourceRemoved
 */
export type StreamTraceEvent_ResourceRemoved = Message<"dxos.tracing.StreamTraceEvent.ResourceRemoved"> & {
    /**
     * @generated from field: int32 id = 1;
     */
    id: number;
};
/**
 * Describes the message dxos.tracing.StreamTraceEvent.ResourceRemoved.
 * Use `create(StreamTraceEvent_ResourceRemovedSchema)` to create a new message.
 */
export declare const StreamTraceEvent_ResourceRemovedSchema: GenMessage<StreamTraceEvent_ResourceRemoved>;
/**
 * @generated from message dxos.tracing.StreamTraceEvent.SpanAdded
 */
export type StreamTraceEvent_SpanAdded = Message<"dxos.tracing.StreamTraceEvent.SpanAdded"> & {
    /**
     * @generated from field: dxos.tracing.Span span = 1;
     */
    span?: Span;
};
/**
 * Describes the message dxos.tracing.StreamTraceEvent.SpanAdded.
 * Use `create(StreamTraceEvent_SpanAddedSchema)` to create a new message.
 */
export declare const StreamTraceEvent_SpanAddedSchema: GenMessage<StreamTraceEvent_SpanAdded>;
/**
 * @generated from message dxos.tracing.StreamTraceEvent.LogAdded
 */
export type StreamTraceEvent_LogAdded = Message<"dxos.tracing.StreamTraceEvent.LogAdded"> & {
    /**
     * @generated from field: dxos.client.services.LogEntry log = 1;
     */
    log?: LogEntry;
};
/**
 * Describes the message dxos.tracing.StreamTraceEvent.LogAdded.
 * Use `create(StreamTraceEvent_LogAddedSchema)` to create a new message.
 */
export declare const StreamTraceEvent_LogAddedSchema: GenMessage<StreamTraceEvent_LogAdded>;
/**
 * @generated from message dxos.tracing.Metric
 */
export type Metric = Message<"dxos.tracing.Metric"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * @generated from oneof dxos.tracing.Metric.Value
     */
    Value: {
        /**
         * @generated from field: dxos.tracing.Metric.Counter counter = 100;
         */
        value: Metric_Counter;
        case: "counter";
    } | {
        /**
         * @generated from field: dxos.tracing.Metric.TimeSeries time_series = 101;
         */
        value: Metric_TimeSeries;
        case: "timeSeries";
    } | {
        /**
         * @generated from field: dxos.tracing.Metric.MultiCounter multi_counter = 102;
         */
        value: Metric_MultiCounter;
        case: "multiCounter";
    } | {
        /**
         * @generated from field: dxos.tracing.Metric.Custom custom = 199;
         */
        value: Metric_Custom;
        case: "custom";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message dxos.tracing.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export declare const MetricSchema: GenMessage<Metric>;
/**
 * @generated from message dxos.tracing.Metric.Counter
 */
export type Metric_Counter = Message<"dxos.tracing.Metric.Counter"> & {
    /**
     * @generated from field: double value = 1;
     */
    value: number;
    /**
     * @generated from field: optional string units = 2;
     */
    units?: string;
};
/**
 * Describes the message dxos.tracing.Metric.Counter.
 * Use `create(Metric_CounterSchema)` to create a new message.
 */
export declare const Metric_CounterSchema: GenMessage<Metric_Counter>;
/**
 * @generated from message dxos.tracing.Metric.MultiCounter
 */
export type Metric_MultiCounter = Message<"dxos.tracing.Metric.MultiCounter"> & {
    /**
     * @generated from field: repeated dxos.tracing.Metric.MultiCounter.Record records = 1;
     */
    records: Metric_MultiCounter_Record[];
    /**
     * @generated from field: optional string units = 2;
     */
    units?: string;
};
/**
 * Describes the message dxos.tracing.Metric.MultiCounter.
 * Use `create(Metric_MultiCounterSchema)` to create a new message.
 */
export declare const Metric_MultiCounterSchema: GenMessage<Metric_MultiCounter>;
/**
 * @generated from message dxos.tracing.Metric.MultiCounter.Record
 */
export type Metric_MultiCounter_Record = Message<"dxos.tracing.Metric.MultiCounter.Record"> & {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * @generated from field: double value = 2;
     */
    value: number;
};
/**
 * Describes the message dxos.tracing.Metric.MultiCounter.Record.
 * Use `create(Metric_MultiCounter_RecordSchema)` to create a new message.
 */
export declare const Metric_MultiCounter_RecordSchema: GenMessage<Metric_MultiCounter_Record>;
/**
 * @generated from message dxos.tracing.Metric.TimeSeries
 */
export type Metric_TimeSeries = Message<"dxos.tracing.Metric.TimeSeries"> & {
    /**
     * @generated from field: repeated dxos.tracing.Metric.TimeSeries.Track tracks = 1;
     */
    tracks: Metric_TimeSeries_Track[];
};
/**
 * Describes the message dxos.tracing.Metric.TimeSeries.
 * Use `create(Metric_TimeSeriesSchema)` to create a new message.
 */
export declare const Metric_TimeSeriesSchema: GenMessage<Metric_TimeSeries>;
/**
 * @generated from message dxos.tracing.Metric.TimeSeries.Point
 */
export type Metric_TimeSeries_Point = Message<"dxos.tracing.Metric.TimeSeries.Point"> & {
    /**
     * @generated from field: double value = 1;
     */
    value: number;
};
/**
 * Describes the message dxos.tracing.Metric.TimeSeries.Point.
 * Use `create(Metric_TimeSeries_PointSchema)` to create a new message.
 */
export declare const Metric_TimeSeries_PointSchema: GenMessage<Metric_TimeSeries_Point>;
/**
 * @generated from message dxos.tracing.Metric.TimeSeries.Track
 */
export type Metric_TimeSeries_Track = Message<"dxos.tracing.Metric.TimeSeries.Track"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * @generated from field: optional string units = 2;
     */
    units?: string;
    /**
     * @generated from field: repeated dxos.tracing.Metric.TimeSeries.Point points = 10;
     */
    points: Metric_TimeSeries_Point[];
    /**
     * @generated from field: double total = 11;
     */
    total: number;
};
/**
 * Describes the message dxos.tracing.Metric.TimeSeries.Track.
 * Use `create(Metric_TimeSeries_TrackSchema)` to create a new message.
 */
export declare const Metric_TimeSeries_TrackSchema: GenMessage<Metric_TimeSeries_Track>;
/**
 * @generated from message dxos.tracing.Metric.Custom
 */
export type Metric_Custom = Message<"dxos.tracing.Metric.Custom"> & {
    /**
     * @generated from field: google.protobuf.Struct payload = 1;
     */
    payload?: JsonObject;
};
/**
 * Describes the message dxos.tracing.Metric.Custom.
 * Use `create(Metric_CustomSchema)` to create a new message.
 */
export declare const Metric_CustomSchema: GenMessage<Metric_Custom>;
/**
 * @generated from enum dxos.tracing.TraceLevel
 */
export declare enum TraceLevel {
    /**
     * @generated from enum value: DISABLED = 0;
     */
    DISABLED = 0,
    /**
     * @generated from enum value: PRODUCTION = 10;
     */
    PRODUCTION = 10,
    /**
     * @generated from enum value: DEVELOPMENT = 20;
     */
    DEVELOPMENT = 20,
    /**
     * @generated from enum value: DEBUG = 30;
     */
    DEBUG = 30
}
/**
 * Describes the enum dxos.tracing.TraceLevel.
 */
export declare const TraceLevelSchema: GenEnum<TraceLevel>;
/**
 * @generated from service dxos.tracing.TracingService
 */
export declare const TracingService: GenService<{
    /**
     * @generated from rpc dxos.tracing.TracingService.StreamTrace
     */
    streamTrace: {
        methodKind: "server_streaming";
        input: typeof EmptySchema;
        output: typeof StreamTraceEventSchema;
    };
}>;
//# sourceMappingURL=tracing_pb.d.ts.map