import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/timeframe.proto.
 */
export declare const file_dxos_echo_timeframe: GenFile;
/**
 * *
 * Vector timestamp used to order messages.
 *
 * @generated from message dxos.echo.timeframe.TimeframeVector
 */
export type TimeframeVector = Message<"dxos.echo.timeframe.TimeframeVector"> & {
    /**
     * @generated from field: repeated dxos.echo.timeframe.TimeframeVector.Frame frames = 1;
     */
    frames: TimeframeVector_Frame[];
};
/**
 * Describes the message dxos.echo.timeframe.TimeframeVector.
 * Use `create(TimeframeVectorSchema)` to create a new message.
 */
export declare const TimeframeVectorSchema: GenMessage<TimeframeVector>;
/**
 * @generated from message dxos.echo.timeframe.TimeframeVector.Frame
 */
export type TimeframeVector_Frame = Message<"dxos.echo.timeframe.TimeframeVector.Frame"> & {
    /**
     * TODO(dmaretskyi): Compress using numeric feed indexes.
     * TODO(burdon): Determine if admit DAG can be ordered. Requires space messages to be ordered (by lexical feed key).
     *
     * @generated from field: bytes feed_key = 1;
     */
    feedKey: Uint8Array;
    /**
     * @generated from field: int32 seq = 3;
     */
    seq: number;
};
/**
 * Describes the message dxos.echo.timeframe.TimeframeVector.Frame.
 * Use `create(TimeframeVector_FrameSchema)` to create a new message.
 */
export declare const TimeframeVector_FrameSchema: GenMessage<TimeframeVector_Frame>;
//# sourceMappingURL=timeframe_pb.d.ts.map