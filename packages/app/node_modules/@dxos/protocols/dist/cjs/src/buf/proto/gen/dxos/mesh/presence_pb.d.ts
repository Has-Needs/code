import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { PublicKey } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/mesh/presence.proto.
 */
export declare const file_dxos_mesh_presence: GenFile;
/**
 * @generated from message dxos.mesh.presence.PeerState
 */
export type PeerState = Message<"dxos.mesh.presence.PeerState"> & {
    /**
     * / Will be used to build network graph
     *
     * @generated from field: repeated dxos.keys.PublicKey connections = 1;
     */
    connections: PublicKey[];
    /**
     * TODO(mykola): Remove once IdentityKey can be obtained from DeviceKey.
     *
     * @generated from field: dxos.keys.PublicKey identity_key = 2;
     */
    identityKey?: PublicKey;
    /**
     * / Omitted when sent over the network.
     *
     * @generated from field: optional dxos.keys.PublicKey peer_id = 3;
     */
    peerId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.presence.PeerState.
 * Use `create(PeerStateSchema)` to create a new message.
 */
export declare const PeerStateSchema: GenMessage<PeerState>;
//# sourceMappingURL=presence_pb.d.ts.map