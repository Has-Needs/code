"use strict";
//
// Copyright 2024 DXOS.org
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeWebsocketProtocol = exports.InitiateOAuthFlowRequestSchema = exports.OAuthProvider = exports.EdgeAgentStatus = exports.EdgeService = void 0;
const effect_1 = require("effect");
const keys_1 = require("@dxos/keys");
// TODO(burdon): Rename EdgerRouterEndpoint?
var EdgeService;
(function (EdgeService) {
    EdgeService["AUTOMERGE_REPLICATOR"] = "automerge-replicator";
    EdgeService["FEED_REPLICATOR"] = "feed-replicator";
    EdgeService["SWARM"] = "swarm";
    EdgeService["SIGNAL"] = "signal";
})(EdgeService || (exports.EdgeService = EdgeService = {}));
var EdgeAgentStatus;
(function (EdgeAgentStatus) {
    EdgeAgentStatus["ACTIVE"] = "active";
    EdgeAgentStatus["INACTIVE"] = "inactive";
    EdgeAgentStatus["NOT_FOUND"] = "not_found";
})(EdgeAgentStatus || (exports.EdgeAgentStatus = EdgeAgentStatus = {}));
var OAuthProvider;
(function (OAuthProvider) {
    OAuthProvider["GOOGLE"] = "google";
    OAuthProvider["BLUESKY"] = "bluesky";
})(OAuthProvider || (exports.OAuthProvider = OAuthProvider = {}));
exports.InitiateOAuthFlowRequestSchema = effect_1.Schema.Struct({
    provider: effect_1.Schema.Enums(OAuthProvider),
    spaceId: effect_1.Schema.String.pipe(effect_1.Schema.filter(keys_1.SpaceId.isValid)), // TODO(burdon): Use SpaceId.
    accessTokenId: effect_1.Schema.String,
    scopes: effect_1.Schema.mutable(effect_1.Schema.Array(effect_1.Schema.String)),
    // Set to true if we don't want periodic token refreshes in background, for cases like account connect
    noRefresh: effect_1.Schema.optional(effect_1.Schema.Boolean),
    // Provider-specific (user handle or did for bluesky) hint for auth server resolution
    loginHint: effect_1.Schema.optional(effect_1.Schema.String),
});
var EdgeWebsocketProtocol;
(function (EdgeWebsocketProtocol) {
    EdgeWebsocketProtocol["V0"] = "edge-ws-v0";
    /**
     * Enables message framing and muxing by service-id.
     */
    EdgeWebsocketProtocol["V1"] = "edge-ws-v1";
})(EdgeWebsocketProtocol || (exports.EdgeWebsocketProtocol = EdgeWebsocketProtocol = {}));
//# sourceMappingURL=edge.js.map