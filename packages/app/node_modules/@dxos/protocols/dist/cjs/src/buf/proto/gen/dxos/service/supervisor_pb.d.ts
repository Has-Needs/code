import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { Config } from "../config_pb.js";
import type { Credential, Presentation } from "../halo/credentials_pb.js";
import type { PublicKey } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/service/supervisor.proto.
 */
export declare const file_dxos_service_supervisor: GenFile;
/**
 * @generated from message dxos.service.supervisor.Service
 */
export type Service = Message<"dxos.service.supervisor.Service"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * @generated from field: dxos.service.supervisor.Service.Status status = 2;
     */
    status: Service_Status;
    /**
     * @generated from field: repeated string addresses = 4;
     */
    addresses: string[];
    /**
     * @generated from field: dxos.service.supervisor.Service.Type type = 5;
     */
    type: Service_Type;
    /**
     * @generated from field: repeated dxos.service.supervisor.WellKnown well_knowns = 6;
     */
    wellKnowns: WellKnown[];
};
/**
 * Describes the message dxos.service.supervisor.Service.
 * Use `create(ServiceSchema)` to create a new message.
 */
export declare const ServiceSchema: GenMessage<Service>;
/**
 * @generated from enum dxos.service.supervisor.Service.Status
 */
export declare enum Service_Status {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from enum value: STARTED = 1;
     */
    STARTED = 1,
    /**
     * @generated from enum value: STOPPED = 2;
     */
    STOPPED = 2,
    /**
     * @generated from enum value: FAILED = 3;
     */
    FAILED = 3
}
/**
 * Describes the enum dxos.service.supervisor.Service.Status.
 */
export declare const Service_StatusSchema: GenEnum<Service_Status>;
/**
 * @generated from enum dxos.service.supervisor.Service.Type
 */
export declare enum Service_Type {
    /**
     * @generated from enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from enum value: PROCESS = 1;
     */
    PROCESS = 1,
    /**
     * @generated from enum value: SERVICE = 2;
     */
    SERVICE = 2
}
/**
 * Describes the enum dxos.service.supervisor.Service.Type.
 */
export declare const Service_TypeSchema: GenEnum<Service_Type>;
/**
 * Public .well-known endpoint.
 *
 * @generated from message dxos.service.supervisor.Services
 */
export type Services = Message<"dxos.service.supervisor.Services"> & {
    /**
     * @generated from field: repeated dxos.service.supervisor.Service services = 1;
     */
    services: Service[];
};
/**
 * Describes the message dxos.service.supervisor.Services.
 * Use `create(ServicesSchema)` to create a new message.
 */
export declare const ServicesSchema: GenMessage<Services>;
/**
 * @generated from message dxos.service.supervisor.WellKnown
 */
export type WellKnown = Message<"dxos.service.supervisor.WellKnown"> & {
    /**
     * @generated from field: string url = 1;
     */
    url: string;
    /**
     * @generated from field: string description = 2;
     */
    description: string;
};
/**
 * Describes the message dxos.service.supervisor.WellKnown.
 * Use `create(WellKnownSchema)` to create a new message.
 */
export declare const WellKnownSchema: GenMessage<WellKnown>;
/**
 * @generated from message dxos.service.supervisor.WellKnowns
 */
export type WellKnowns = Message<"dxos.service.supervisor.WellKnowns"> & {
    /**
     * @generated from field: repeated dxos.service.supervisor.WellKnowns.WellKnownsByService well_knowns = 1;
     */
    wellKnowns: WellKnowns_WellKnownsByService[];
};
/**
 * Describes the message dxos.service.supervisor.WellKnowns.
 * Use `create(WellKnownsSchema)` to create a new message.
 */
export declare const WellKnownsSchema: GenMessage<WellKnowns>;
/**
 * @generated from message dxos.service.supervisor.WellKnowns.WellKnownsByService
 */
export type WellKnowns_WellKnownsByService = Message<"dxos.service.supervisor.WellKnowns.WellKnownsByService"> & {
    /**
     * @generated from field: string service_name = 1;
     */
    serviceName: string;
    /**
     * @generated from field: repeated dxos.service.supervisor.WellKnown well_knowns = 2;
     */
    wellKnowns: WellKnown[];
};
/**
 * Describes the message dxos.service.supervisor.WellKnowns.WellKnownsByService.
 * Use `create(WellKnowns_WellKnownsByServiceSchema)` to create a new message.
 */
export declare const WellKnowns_WellKnownsByServiceSchema: GenMessage<WellKnowns_WellKnownsByService>;
/**
 * @generated from message dxos.service.supervisor.ConfigPair
 */
export type ConfigPair = Message<"dxos.service.supervisor.ConfigPair"> & {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * @generated from field: string value = 2;
     */
    value: string;
};
/**
 * Describes the message dxos.service.supervisor.ConfigPair.
 * Use `create(ConfigPairSchema)` to create a new message.
 */
export declare const ConfigPairSchema: GenMessage<ConfigPair>;
/**
 * @generated from message dxos.service.supervisor.GetConfigResponse
 */
export type GetConfigResponse = Message<"dxos.service.supervisor.GetConfigResponse"> & {
    /**
     * @generated from field: dxos.config.Config config = 1;
     */
    config?: Config;
};
/**
 * Describes the message dxos.service.supervisor.GetConfigResponse.
 * Use `create(GetConfigResponseSchema)` to create a new message.
 */
export declare const GetConfigResponseSchema: GenMessage<GetConfigResponse>;
/**
 * @generated from message dxos.service.supervisor.SetConfigRequest
 */
export type SetConfigRequest = Message<"dxos.service.supervisor.SetConfigRequest"> & {
    /**
     * @generated from field: dxos.service.supervisor.ConfigPair config = 1;
     */
    config?: ConfigPair;
};
/**
 * Describes the message dxos.service.supervisor.SetConfigRequest.
 * Use `create(SetConfigRequestSchema)` to create a new message.
 */
export declare const SetConfigRequestSchema: GenMessage<SetConfigRequest>;
/**
 * @generated from message dxos.service.supervisor.SetConfigResponse
 */
export type SetConfigResponse = Message<"dxos.service.supervisor.SetConfigResponse"> & {
    /**
     * @generated from field: dxos.service.supervisor.ConfigPair config = 1;
     */
    config?: ConfigPair;
};
/**
 * Describes the message dxos.service.supervisor.SetConfigResponse.
 * Use `create(SetConfigResponseSchema)` to create a new message.
 */
export declare const SetConfigResponseSchema: GenMessage<SetConfigResponse>;
/**
 * @generated from message dxos.service.supervisor.InitAuthSequenceResponse
 */
export type InitAuthSequenceResponse = Message<"dxos.service.supervisor.InitAuthSequenceResponse"> & {
    /**
     * @generated from field: bytes nonce = 1;
     */
    nonce: Uint8Array;
    /**
     * @generated from field: dxos.keys.PublicKey kube_key = 2;
     */
    kubeKey?: PublicKey;
};
/**
 * Describes the message dxos.service.supervisor.InitAuthSequenceResponse.
 * Use `create(InitAuthSequenceResponseSchema)` to create a new message.
 */
export declare const InitAuthSequenceResponseSchema: GenMessage<InitAuthSequenceResponse>;
/**
 * @generated from message dxos.service.supervisor.Authentication
 */
export type Authentication = Message<"dxos.service.supervisor.Authentication"> & {
    /**
     * @generated from field: dxos.halo.credentials.Presentation presentation = 1;
     */
    presentation?: Presentation;
};
/**
 * Describes the message dxos.service.supervisor.Authentication.
 * Use `create(AuthenticationSchema)` to create a new message.
 */
export declare const AuthenticationSchema: GenMessage<Authentication>;
/**
 * @generated from message dxos.service.supervisor.AuthenticateResponse
 */
export type AuthenticateResponse = Message<"dxos.service.supervisor.AuthenticateResponse"> & {
    /**
     * @generated from field: optional string token = 1;
     */
    token?: string;
    /**
     * TODO(egorgripasov): Remove. KubeAccess credential for POC.
     *
     * @generated from field: optional dxos.halo.credentials.Credential credential = 2;
     */
    credential?: Credential;
};
/**
 * Describes the message dxos.service.supervisor.AuthenticateResponse.
 * Use `create(AuthenticateResponseSchema)` to create a new message.
 */
export declare const AuthenticateResponseSchema: GenMessage<AuthenticateResponse>;
/**
 * @generated from service dxos.service.supervisor.Supervisor
 */
export declare const Supervisor: GenService<{
    /**
     * Authenticate with KUBE.
     *
     * @generated from rpc dxos.service.supervisor.Supervisor.Authenticate
     */
    authenticate: {
        methodKind: "unary";
        input: typeof AuthenticationSchema;
        output: typeof AuthenticateResponseSchema;
    };
    /**
     * Init authentication sequence. Used to obtain nonce & KUBE identity (public key).
     *
     * @generated from rpc dxos.service.supervisor.Supervisor.InitAuthSequence
     */
    initAuthSequence: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof InitAuthSequenceResponseSchema;
    };
    /**
     * Read KUBE config.
     *
     * @generated from rpc dxos.service.supervisor.Supervisor.GetConfig
     */
    getConfig: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof GetConfigResponseSchema;
    };
    /**
     * Set KUBE config.
     *
     * @generated from rpc dxos.service.supervisor.Supervisor.SetConfig
     */
    setConfig: {
        methodKind: "unary";
        input: typeof SetConfigRequestSchema;
        output: typeof SetConfigResponseSchema;
    };
    /**
     * Obtain KUBE status & list running services.
     *
     * @generated from rpc dxos.service.supervisor.Supervisor.Status
     */
    status: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof ServicesSchema;
    };
}>;
//# sourceMappingURL=supervisor_pb.d.ts.map