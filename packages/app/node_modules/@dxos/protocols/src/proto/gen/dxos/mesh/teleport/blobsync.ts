import type { Stream, RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../../substitutions.js";
import * as dxos_agent_dashboard from "../../agent/dashboard.js";
import * as dxos_agent_echoproxy from "../../agent/echoproxy.js";
import * as dxos_agent_epoch from "../../agent/epoch.js";
import * as dxos_agent_functions from "../../agent/functions.js";
import * as dxos_bot from "../../bot.js";
import * as dxos_client_services from "../../client/services.js";
import * as dxos_config from "../../config.js";
import * as dxos_devtools_host from "../../devtools/host.js";
import * as dxos_devtools_swarm from "../../devtools/swarm.js";
import * as dxos_echo_blob from "../../echo/blob.js";
import * as dxos_echo_feed from "../../echo/feed.js";
import * as dxos_echo_filter from "../../echo/filter.js";
import * as dxos_echo_indexing from "../../echo/indexing.js";
import * as dxos_echo_metadata from "../../echo/metadata.js";
import * as dxos_echo_model_document from "../../echo/model/document.js";
import * as dxos_echo_model_messenger from "../../echo/model/messenger.js";
import * as dxos_echo_model_text from "../../echo/model/text.js";
import * as dxos_echo_object from "../../echo/object.js";
import * as dxos_echo_query from "../../echo/query.js";
import * as dxos_echo_service from "../../echo/service.js";
import * as dxos_echo_snapshot from "../../echo/snapshot.js";
import * as dxos_echo_timeframe from "../../echo/timeframe.js";
import * as dxos_edge_calls from "../../edge/calls.js";
import * as dxos_edge_messenger from "../../edge/messenger.js";
import * as dxos_edge_signal from "../../edge/signal.js";
import * as dxos_error from "../../error.js";
import * as dxos_gravity from "../../gravity.js";
import * as dxos_halo_credentials from "../../halo/credentials.js";
import * as dxos_halo_credentials_auth from "../../halo/credentials/auth.js";
import * as dxos_halo_credentials_greet from "../../halo/credentials/greet.js";
import * as dxos_halo_credentials_identity from "../../halo/credentials/identity.js";
import * as dxos_halo_invitations from "../../halo/invitations.js";
import * as dxos_halo_keyring from "../../halo/keyring.js";
import * as dxos_halo_keys from "../../halo/keys.js";
import * as dxos_halo_signed from "../../halo/signed.js";
import * as dxos_iframe from "../../iframe.js";
import * as dxos_keys from "../../keys.js";
import * as dxos_mesh_bridge from "../bridge.js";
import * as dxos_mesh_broadcast from "../broadcast.js";
import * as dxos_mesh_messaging from "../messaging.js";
import * as dxos_mesh_muxer from "../muxer.js";
import * as dxos_mesh_presence from "../presence.js";
import * as dxos_mesh_protocol from "../protocol.js";
import * as dxos_mesh_replicator from "../replicator.js";
import * as dxos_mesh_signal from "../signal.js";
import * as dxos_mesh_swarm from "../swarm.js";
import * as dxos_mesh_teleport from "../teleport.js";
import * as dxos_mesh_teleport_auth from "./auth.js";
import * as dxos_mesh_teleport_automerge from "./automerge.js";
import * as dxos_mesh_teleport_control from "./control.js";
import * as dxos_mesh_teleport_gossip from "./gossip.js";
import * as dxos_mesh_teleport_notarization from "./notarization.js";
import * as dxos_mesh_teleport_replicator from "./replicator.js";
import * as dxos_registry from "../../registry.js";
import * as dxos_rpc from "../../rpc.js";
import * as dxos_service_agentmanager from "../../service/agentmanager.js";
import * as dxos_service_publisher from "../../service/publisher.js";
import * as dxos_service_supervisor from "../../service/supervisor.js";
import * as dxos_service_tunnel from "../../service/tunnel.js";
import * as dxos_tracing from "../../tracing.js";
import * as dxos_type from "../../type.js";
import * as dxos_value from "../../value.js";
import * as example_testing_data from "../../../example/testing/data.js";
import * as example_testing_rpc from "../../../example/testing/rpc.js";
import * as google_protobuf from "../../../google/protobuf.js";
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface WantList {
    /**
     * Requested blobs. If bitfield is empty, all chunks are requested.
     */
    blobs?: WantList.Entry[];
}
export namespace WantList {
    /**
     * Defined in:
     *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
     */
    export interface Entry {
        id: Uint8Array;
        /**
         * Size of chunk in bytes. Must be a power of 2. Default is 4096.
         * If chunk_size is missing, host will provide it.
         *
         * Options:
         *   - proto3_optional = true
         */
        chunkSize?: number;
        /**
         * Bitfield of requested chunks.
         * Every bit represents a chunk.
         * Chunks are indexed from MSB to LSB.
         *
         * If bitfield is missing, all chunks are requested.
         *
         * Options:
         *   - proto3_optional = true
         */
        bitfield?: Uint8Array;
    }
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface BlobChunk {
    id: Uint8Array;
    /**
     * In bytes
     *
     * Options:
     *   - proto3_optional = true
     */
    chunkSize?: number;
    /**
     * Offset from the start of blob in bytes.
     *
     * Options:
     *   - proto3_optional = true
     */
    chunkOffset?: number;
    /**
     * Total length of blob.
     *
     * Options:
     *   - proto3_optional = true
     */
    totalLength?: number;
    payload: Uint8Array;
}
/**
 * Allows synchronization of opaque data objects between two peers.
 * Loosely based on Bittorrent protocol.
 *
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface BlobSyncService {
    /**
     * Notify the peer that we want to receive specified objects.
     */
    want: (request: WantList, options?: RequestOptions) => Promise<void>;
    /**
     * Send an object to the peer.
     */
    push: (request: BlobChunk, options?: RequestOptions) => Promise<void>;
}
