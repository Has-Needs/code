import { BlobMeta } from '@dxos/protocols/proto/dxos/echo/blob';
import { type BlobChunk } from '@dxos/protocols/proto/dxos/mesh/teleport/blobsync';
import { type Directory } from '@dxos/random-access-storage';
export type GetOptions = {
    offset?: number;
    length?: number;
};
export declare const DEFAULT_CHUNK_SIZE = 4096;
export declare class BlobStore {
    private readonly _directory;
    constructor(_directory: Directory);
    getMeta(id: Uint8Array): Promise<BlobMeta | undefined>;
    /**
     * @throws If range is not available.
     */
    get(id: Uint8Array, options?: GetOptions): Promise<Uint8Array>;
    list(): Promise<BlobMeta[]>;
    set(data: Uint8Array): Promise<BlobMeta>;
    setChunk(chunk: BlobChunk): Promise<BlobMeta>;
    private _writeMeta;
    private _getMeta;
    private _getMetaFile;
    private _getDataFile;
}
//# sourceMappingURL=blob-store.d.ts.map