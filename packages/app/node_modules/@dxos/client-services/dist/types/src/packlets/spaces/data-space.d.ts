import { Event } from '@dxos/async';
import type { SpecificCredential } from '@dxos/credentials';
import { type EchoHost, type DatabaseRoot, type MetadataStore, type Space } from '@dxos/echo-pipeline';
import type { EdgeConnection, EdgeHttpClient } from '@dxos/edge-client';
import { type FeedStore } from '@dxos/feed-store';
import { type Keyring } from '@dxos/keyring';
import { PublicKey } from '@dxos/keys';
import { type CreateEpochRequest, SpaceState, type Space as SpaceProto } from '@dxos/protocols/proto/dxos/client/services';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type SpaceCache } from '@dxos/protocols/proto/dxos/echo/metadata';
import { type Epoch, type ProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type GossipMessage } from '@dxos/protocols/proto/dxos/mesh/teleport/gossip';
import { type Gossip, type Presence } from '@dxos/teleport-extension-gossip';
import { Timeframe } from '@dxos/timeframe';
import { CallbackCollection, type AsyncCallback } from '@dxos/util';
import { AutomergeSpaceState } from './automerge-space-state';
import { type SigningContext } from './data-space-manager';
import { NotarizationPlugin } from './notarization-plugin';
import { TrustedKeySetAuthVerifier } from '../identity';
export type DataSpaceCallbacks = {
    /**
     * Called before transitioning to the ready state.
     */
    beforeReady?: () => Promise<void>;
    /**
     * Called after transitioning to the ready state.
     */
    afterReady?: () => Promise<void>;
    /**
     * Called before space gets closed.
     */
    beforeClose?: () => Promise<void>;
};
export type DataSpaceParams = {
    initialState: SpaceState;
    inner: Space;
    metadataStore: MetadataStore;
    gossip: Gossip;
    presence: Presence;
    keyring: Keyring;
    feedStore: FeedStore<FeedMessage>;
    echoHost: EchoHost;
    signingContext: SigningContext;
    callbacks?: DataSpaceCallbacks;
    cache?: SpaceCache;
    edgeConnection?: EdgeConnection;
    edgeHttpClient?: EdgeHttpClient;
    edgeFeatures?: Runtime.Client.EdgeFeatures;
    activeEdgeNotarizationPollingInterval?: number;
};
export type CreateEpochOptions = {
    migration?: CreateEpochRequest.Migration;
    newAutomergeRoot?: string;
};
export declare class DataSpace {
    private _ctx;
    private readonly _inner;
    private readonly _gossip;
    private readonly _presence;
    private readonly _keyring;
    private readonly _feedStore;
    private readonly _metadataStore;
    private readonly _signingContext;
    private readonly _notarizationPlugin;
    private readonly _callbacks;
    private readonly _cache?;
    private readonly _echoHost;
    private readonly _edgeFeedReplicator?;
    private readonly _automergeSpaceState;
    private readonly _epochProcessingMutex;
    private _state;
    private _databaseRoot;
    /**
     * Error for _state === SpaceState.SPACE_ERROR.
     */
    error: Error | undefined;
    readonly authVerifier: TrustedKeySetAuthVerifier;
    readonly stateUpdate: Event<void>;
    readonly postOpen: CallbackCollection<AsyncCallback<void>>;
    readonly preClose: CallbackCollection<AsyncCallback<void>>;
    metrics: SpaceProto.Metrics;
    constructor(params: DataSpaceParams);
    get id(): import("@dxos/keys").SpaceId;
    get key(): PublicKey;
    get isOpen(): boolean;
    get state(): SpaceState;
    get inner(): Space;
    get presence(): Presence;
    get notarizationPlugin(): NotarizationPlugin;
    get cache(): SpaceCache | undefined;
    get automergeSpaceState(): AutomergeSpaceState;
    get databaseRoot(): DatabaseRoot | null;
    private get _automergeInfo();
    open(): Promise<void>;
    private _open;
    close(): Promise<void>;
    private _close;
    postMessage(channel: string, message: any): Promise<void>;
    listen(channel: string, callback: (message: GossipMessage) => void): {
        unsubscribe: () => void;
    };
    /**
     * Initialize the data pipeline in a separate task.
     */
    initializeDataPipelineAsync(): void;
    initializeDataPipeline(): Promise<void>;
    getAllDocuments(): AsyncIterable<[string, Uint8Array]>;
    private _enterReadyState;
    private _initializeAndReadControlPipeline;
    private _createWritableFeeds;
    private _onNewAutomergeRoot;
    updateOwnProfile(profile: ProfileDocument): Promise<void>;
    createEpoch(options?: CreateEpochOptions): Promise<CreateEpochResult | null>;
    activate(): Promise<void>;
    deactivate(): Promise<void>;
    getEdgeReplicationSetting(): import("@dxos/protocols/proto/dxos/echo/metadata").EdgeReplicationSetting | undefined;
    private _onFeedAdded;
}
type CreateEpochResult = {
    credential: SpecificCredential<Epoch>;
    timeframe: Timeframe;
};
export {};
//# sourceMappingURL=data-space.d.ts.map