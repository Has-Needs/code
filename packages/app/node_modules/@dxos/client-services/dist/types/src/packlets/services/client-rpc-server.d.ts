import { type ClientServices } from '@dxos/client-protocol';
import { type Any, Stream } from '@dxos/codec-protobuf';
import { type RpcPeerOptions } from '@dxos/rpc';
import { type MaybePromise } from '@dxos/util';
import { type ServiceRegistry } from './service-registry';
export type ClientRpcServerParams = {
    serviceRegistry: ServiceRegistry<ClientServices>;
    handleCall?: (method: string, params: Any, handler: (method: string, params: Any) => MaybePromise<Any>) => Promise<Any>;
    handleStream?: (method: string, params: Any, handler: (method: string, params: Any) => Stream<Any>) => MaybePromise<Stream<Any>>;
} & Omit<RpcPeerOptions, 'callHandler' | 'streamHandler'>;
export declare class ClientRpcServer {
    private readonly _serviceRegistry;
    private readonly _rpcPeer;
    private readonly _handlerCache;
    private readonly _handleCall;
    private readonly _handleStream;
    private readonly _callMetrics;
    private get _services();
    constructor(params: ClientRpcServerParams);
    open(): Promise<void>;
    close(): Promise<void>;
    private _getServiceHandler;
}
//# sourceMappingURL=client-rpc-server.d.ts.map