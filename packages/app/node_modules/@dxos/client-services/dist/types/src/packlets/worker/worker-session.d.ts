import { Trigger } from '@dxos/async';
import { type BridgeService } from '@dxos/protocols/proto/dxos/mesh/bridge';
import { type RpcPort } from '@dxos/rpc';
import { Callback } from '@dxos/util';
import { type ClientServicesHost } from '../services';
export type WorkerSessionParams = {
    serviceHost: ClientServicesHost;
    systemPort: RpcPort;
    appPort: RpcPort;
    shellPort?: RpcPort;
    readySignal: Trigger<Error | undefined>;
};
/**
 * Represents a tab connection within the worker.
 */
export declare class WorkerSession {
    private readonly _clientRpc;
    private readonly _shellClientRpc?;
    private readonly _iframeRpc;
    private readonly _startTrigger;
    private readonly _serviceHost;
    readonly onClose: Callback<() => Promise<void>>;
    origin?: string;
    observabilityGroup?: string;
    signalTelemetryEnabled?: boolean;
    lockKey?: string;
    bridgeService?: BridgeService;
    constructor({ serviceHost, systemPort, appPort, shellPort, readySignal }: WorkerSessionParams);
    open(): Promise<void>;
    close(): Promise<void>;
    private _maybeOpenShell;
    private _afterLockReleases;
}
//# sourceMappingURL=worker-session.d.ts.map