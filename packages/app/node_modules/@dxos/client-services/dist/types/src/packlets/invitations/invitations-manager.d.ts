import { Event } from '@dxos/async';
import { AuthenticatingInvitation, CancellableInvitation } from '@dxos/client-protocol';
import { Context } from '@dxos/context';
import { type MetadataStore } from '@dxos/echo-pipeline';
import { type AcceptInvitationRequest, type AuthenticationRequest, Invitation } from '@dxos/protocols/proto/dxos/client/services';
import type { InvitationProtocol } from './invitation-protocol';
import { type InvitationsHandler } from './invitations-handler';
/**
 * Entry point for creating and accepting invitations, keeps track of existing invitation set and
 * emits events when the set changes.
 */
export declare class InvitationsManager {
    private readonly _invitationsHandler;
    private readonly _getHandler;
    private readonly _metadataStore;
    private readonly _createInvitations;
    private readonly _acceptInvitations;
    readonly invitationCreated: Event<Invitation>;
    readonly invitationAccepted: Event<Invitation>;
    readonly removedCreated: Event<Invitation>;
    readonly removedAccepted: Event<Invitation>;
    readonly saved: Event<Invitation>;
    private readonly _persistentInvitationsLoadedEvent;
    private _persistentInvitationsLoaded;
    constructor(_invitationsHandler: InvitationsHandler, _getHandler: (invitation: Partial<Invitation> & Pick<Invitation, 'kind'>) => InvitationProtocol, _metadataStore: MetadataStore);
    createInvitation(options: Partial<Invitation> & Pick<Invitation, 'kind'>): Promise<CancellableInvitation>;
    loadPersistentInvitations(): Promise<{
        invitations: Invitation[];
    }>;
    acceptInvitation(request: AcceptInvitationRequest): AuthenticatingInvitation;
    authenticate({ invitationId, authCode }: AuthenticationRequest): Promise<void>;
    cancelInvitation({ invitationId }: {
        invitationId: string;
    }): Promise<void>;
    getCreatedInvitations(): Invitation[];
    getAcceptedInvitations(): Invitation[];
    onPersistentInvitationsLoaded(ctx: Context, callback: () => void): void;
    private _createInvitation;
    private _createObservableInvitation;
    private _createObservableAcceptingInvitation;
    private _persistIfRequired;
    private _safeDeleteInvitation;
    private _onInvitationComplete;
}
//# sourceMappingURL=invitations-manager.d.ts.map