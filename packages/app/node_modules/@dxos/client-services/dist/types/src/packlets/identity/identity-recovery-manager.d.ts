import { type EdgeHttpClient } from '@dxos/edge-client';
import { type Keyring } from '@dxos/keyring';
import { PublicKey } from '@dxos/keys';
import { type CreateRecoveryCredentialRequest, type RecoverIdentityRequest } from '@dxos/protocols/proto/dxos/client/services';
import { type Identity } from './identity';
import { type JoinIdentityParams } from './identity-manager';
export declare class EdgeIdentityRecoveryManager {
    private readonly _keyring;
    private readonly _edgeClient;
    private readonly _identityProvider;
    private readonly _acceptRecoveredIdentity;
    constructor(_keyring: Keyring, _edgeClient: EdgeHttpClient | undefined, _identityProvider: () => Identity | undefined, _acceptRecoveredIdentity: (params: JoinIdentityParams) => Promise<Identity>);
    createRecoveryCredential({ data, }: CreateRecoveryCredentialRequest): Promise<{
        recoveryCode: string | undefined;
    }>;
    requestRecoveryChallenge(): Promise<{
        deviceKey: PublicKey;
        controlFeedKey: PublicKey;
        challenge: string;
    }>;
    recoverIdentityWithExternalSignature({ lookupKey, deviceKey, controlFeedKey, signature, clientDataJson, authenticatorData, }: RecoverIdentityRequest.ExternalSignature): Promise<void>;
    /**
     * Recovery identity using an opaque token sent to the user's email.
     */
    recoverIdentityWithToken({ token }: {
        token: string;
    }): Promise<void>;
    recoverIdentity({ recoveryCode }: {
        recoveryCode: string;
    }): Promise<void>;
}
//# sourceMappingURL=identity-recovery-manager.d.ts.map