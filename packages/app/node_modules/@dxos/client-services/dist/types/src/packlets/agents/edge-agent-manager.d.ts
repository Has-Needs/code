import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type EdgeHttpClient } from '@dxos/edge-client';
import { PublicKey } from '@dxos/keys';
import { EdgeAgentStatus } from '@dxos/protocols';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type Identity } from '../identity';
import { type DataSpaceManager } from '../spaces';
export type EdgeAgentManagerConfig = {};
export declare class EdgeAgentManager extends Resource {
    private readonly _edgeFeatures;
    private readonly _edgeHttpClient;
    private readonly _dataSpaceManager;
    private readonly _identity;
    agentStatusChanged: Event<EdgeAgentStatus>;
    private _agentDeviceKey;
    private _agentStatus;
    private _lastKnownDeviceCount;
    private _fetchAgentStatusTask;
    constructor(_edgeFeatures: Runtime.Client.EdgeFeatures | undefined, _edgeHttpClient: EdgeHttpClient | undefined, _dataSpaceManager: DataSpaceManager, _identity: Identity);
    get agentStatus(): EdgeAgentStatus | undefined;
    get agentExists(): boolean | undefined;
    createAgent(): Promise<void>;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    protected _fetchAgentStatus(): Promise<void>;
    /**
     * We don't want notarization plugin to always actively poll edge looking for credentials to notarize,
     * because most of the time we'll be getting an empty response.
     * Instead, we stay in active polling mode while there are spaces where we don't see our agent's feed.
     */
    protected _ensureAgentIsInSpaces(agentDeviceKey: PublicKey): void;
    private _updateStatus;
}
//# sourceMappingURL=edge-agent-manager.d.ts.map