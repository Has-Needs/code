import { Stream } from '@dxos/codec-protobuf/stream';
import { Resource } from '@dxos/context';
import { type Keyring } from '@dxos/keyring';
import { type CreateIdentityRequest, type CreateRecoveryCredentialRequest, type Identity as IdentityProto, type IdentityService, type QueryIdentityResponse, type RecoverIdentityRequest, type SignPresentationRequest } from '@dxos/protocols/proto/dxos/client/services';
import { type Presentation, type ProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Identity } from './identity';
import { type CreateIdentityOptions, type IdentityManager } from './identity-manager';
import { type EdgeIdentityRecoveryManager } from './identity-recovery-manager';
import { type DataSpaceManager } from '../spaces';
export declare class IdentityServiceImpl extends Resource implements IdentityService {
    private readonly _identityManager;
    private readonly _recoveryManager;
    private readonly _keyring;
    private readonly _dataSpaceManagerProvider;
    private readonly _createIdentity;
    private readonly _onProfileUpdate?;
    constructor(_identityManager: IdentityManager, _recoveryManager: EdgeIdentityRecoveryManager, _keyring: Keyring, _dataSpaceManagerProvider: () => DataSpaceManager, _createIdentity: (params: CreateIdentityOptions) => Promise<Identity>, _onProfileUpdate?: ((profile: ProfileDocument | undefined) => Promise<void>) | undefined);
    protected _open(): Promise<void>;
    createIdentity(request: CreateIdentityRequest): Promise<IdentityProto>;
    private _createDefaultSpace;
    queryIdentity(): Stream<QueryIdentityResponse>;
    private _getIdentity;
    updateProfile(profile: ProfileDocument): Promise<IdentityProto>;
    createRecoveryCredential(request: CreateRecoveryCredentialRequest): Promise<{
        recoveryCode: string | undefined;
    }>;
    requestRecoveryChallenge(): Promise<{
        deviceKey: import("@dxos/keys").PublicKey;
        controlFeedKey: import("@dxos/keys").PublicKey;
        challenge: string;
    }>;
    recoverIdentity(request: RecoverIdentityRequest): Promise<IdentityProto>;
    signPresentation({ presentation, nonce }: SignPresentationRequest): Promise<Presentation>;
    createAuthCredential(): Promise<import("@dxos/protocols/proto/dxos/halo/credentials").Credential>;
    private _fixIdentityWithoutDefaultSpace;
}
//# sourceMappingURL=identity-service.d.ts.map