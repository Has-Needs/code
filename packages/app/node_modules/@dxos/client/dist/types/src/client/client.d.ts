import { type Schema } from 'effect';
import { inspect } from 'node:util';
import { Event, MulticastObservable } from '@dxos/async';
import { type ClientServicesProvider, type Echo, type Halo } from '@dxos/client-protocol';
import { Config } from '@dxos/config';
import { type Hypergraph } from '@dxos/echo-db';
import { EdgeHttpClient } from '@dxos/edge-client';
import { SystemStatus } from '@dxos/protocols/proto/dxos/client/services';
import { type JsonKeyOptions, type MaybePromise } from '@dxos/util';
import { type MeshProxy } from '../mesh/mesh-proxy';
import type { Shell } from '../services';
/**
 * This options object configures the DXOS Client.
 */
export type ClientOptions = {
    /** Client configuration object. */
    config?: Config;
    /** Custom services provider. */
    services?: MaybePromise<ClientServicesProvider>;
    /** ECHO schema. */
    types?: Schema.Schema.AnyNoContext[];
    /** Shell path. */
    shell?: string;
    /** Create client worker. */
    createWorker?: () => SharedWorker;
};
/**
 * The Client class encapsulates the core client-side API of DXOS.
 */
export declare class Client {
    /**
     * Emitted after the client is reset and the services have finished restarting.
     */
    readonly reloaded: Event<void>;
    private readonly _statusUpdate;
    private readonly _status;
    private readonly _echoClient;
    private readonly _options;
    /**
     * Unique id of the Client, local to the current peer.
     */
    private readonly _instanceId;
    /**
     * The version of this client API.
     */
    readonly version = "0.8.3";
    private _services?;
    private _initialized;
    private _resetting;
    private _runtime?;
    private _ctx;
    private _config?;
    private _statusStream?;
    private _statusTimeout?;
    private _iframeManager?;
    private _shellManager?;
    private _shellClientProxy?;
    private _edgeClient?;
    private _queuesService?;
    constructor(options?: ClientOptions);
    [inspect.custom](): string;
    toString(): string;
    toJSON(): {
        initialized: boolean;
        spaces: import("../echo/space-list").SpaceList | undefined;
        halo: import("../halo/halo-proxy").HaloProxy | undefined;
        mesh: MeshProxy | undefined;
    };
    /**
     * Current configuration object.
     */
    get config(): Config;
    /**
     * Current client services provider.
     */
    get services(): ClientServicesProvider;
    /**
     * Returns true if the client has been initialized. Initialize by calling `.initialize()`.
     */
    get initialized(): boolean;
    /**
     * Client services system status.
     */
    get status(): MulticastObservable<SystemStatus | null>;
    /**
     * ECHO Spaces.
     */
    get spaces(): Echo;
    /**
     * HALO credentials.
     */
    get halo(): Halo;
    /**
     * MESH networking.
     */
    get mesh(): MeshProxy;
    /**
     * EDGE client.
     * This API is experimental and subject to change.
     */
    get edge(): EdgeHttpClient;
    /**
     * @deprecated Temporary.
     */
    get graph(): Hypergraph;
    /**
     * Shell API.
     */
    get shell(): Shell;
    /**
     * Add schema types to the client.
     */
    addTypes(types: Schema.Schema.AnyNoContext[]): this;
    /**
     * Get client diagnostics data.
     */
    diagnostics(options?: JsonKeyOptions): Promise<any>;
    /**
     * Test and repair database.
     */
    repair(): Promise<any>;
    /**
     * Initializes internal resources in an idempotent way.
     * Required before using the Client instance.
     */
    initialize(): Promise<void>;
    private _open;
    /**
     * Cleanup, release resources.
     * Open/close is re-entrant.
     */
    destroy(): Promise<void>;
    private _close;
    /**
     * Reinitialized the client session with the remote service host.
     * This is useful when connecting to a host running behind a resource lock
     * (e.g., HALO when SharedWorker is unavailable).
     */
    resumeHostServices(): Promise<void>;
    /**
     * Resets and destroys client storage.
     * This will currently leave the client in a closed state.
     * Re-using the client after reset is not currently supported.
     */
    reset(): Promise<void>;
}
//# sourceMappingURL=client.d.ts.map