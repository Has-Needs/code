import { inspect } from 'node:util';
import { MulticastObservable } from '@dxos/async';
import { type ClientServicesProvider, type Halo } from '@dxos/client-protocol';
import { PublicKey } from '@dxos/keys';
import { type Contact, type Device, type Identity, Invitation } from '@dxos/protocols/proto/dxos/client/services';
import { type Credential, type Presentation, type ProfileDocument, type DeviceProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
export declare class HaloProxy implements Halo {
    private readonly _serviceProvider;
    private readonly _instanceId;
    private readonly _subscriptions;
    private readonly _identityChanged;
    private readonly _devicesChanged;
    private readonly _contactsChanged;
    private readonly _credentialsChanged;
    private readonly _identity;
    private readonly _devices;
    private readonly _contacts;
    private readonly _credentials;
    private _invitationProxy?;
    private _haloCredentialStream?;
    constructor(_serviceProvider: ClientServicesProvider, 
    /**
     * @internal
     */
    _traceParent?: string | undefined);
    [inspect.custom](): string;
    toJSON(): {
        identityKey: string | undefined;
        deviceKey: string | undefined;
    };
    /**
     * User identity info.
     */
    get identity(): MulticastObservable<Identity | null>;
    get devices(): MulticastObservable<Device[]>;
    get device(): Device | undefined;
    get contacts(): MulticastObservable<Contact[]>;
    get credentials(): MulticastObservable<Credential[]>;
    get invitations(): MulticastObservable<import("@dxos/client-protocol").CancellableInvitation[]>;
    get opened(): boolean;
    /**
     * Create Identity.
     * Then initializes profile with given display name.
     * @param profile - optional display name
     * @param deviceProfile - optional device profile that will be merged with defaults
     */
    createIdentity(profile?: ProfileDocument, deviceProfile?: DeviceProfileDocument): Promise<Identity>;
    recoverIdentity(args: {
        recoveryCode: string;
    }): Promise<Identity>;
    updateProfile(profile: ProfileDocument): Promise<Identity>;
    /**
     * Get Halo credentials for the current user.
     * Note: Will return an empty result if called before all credentials have been loaded.
     */
    queryCredentials({ ids, type }?: {
        ids?: PublicKey[];
        type?: string;
    }): Credential[];
    /**
     * Initiates device invitation.
     */
    share(options?: Partial<Invitation>): import("@dxos/client-protocol").CancellableInvitation;
    /**
     * Initiates accepting invitation.
     * @param invitation
     * @param deviceProfile - optional device profile that will be merged with defaults
     */
    join(invitation: Invitation | string, deviceProfile?: DeviceProfileDocument): import("@dxos/client-protocol").AuthenticatingInvitation;
    /**
     * Write credentials to halo profile.
     */
    writeCredentials(credentials: Credential[]): Promise<void>;
    /**
     * Present Credentials.
     */
    presentCredentials({ ids, nonce }: {
        ids: PublicKey[];
        nonce?: Uint8Array;
    }): Promise<Presentation>;
}
//# sourceMappingURL=halo-proxy.d.ts.map