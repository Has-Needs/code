"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_HIRCX7XT_exports = {};
__export(chunk_HIRCX7XT_exports, {
  DocAccessor: () => import_echo_db.DocAccessor,
  EchoObjectSchema: () => EchoObjectSchema,
  Expando: () => import_echo_schema.Expando,
  FQ_ID_LENGTH: () => FQ_ID_LENGTH,
  Filter: () => import_echo_db.Filter,
  IndexKind: () => import_indexing.IndexKind,
  OBJECT_ID_LENGTH: () => OBJECT_ID_LENGTH,
  ObjectVersion: () => import_echo_db.ObjectVersion,
  Query: () => import_echo_db.Query,
  QueryOptions: () => import_filter.QueryOptions,
  Queue: () => import_echo_db.Queue,
  ReactiveObjectSchema: () => ReactiveObjectSchema,
  Ref: () => import_echo_schema.Ref,
  RefArray: () => import_echo_schema.RefArray,
  ResultFormat: () => import_echo_db.ResultFormat,
  SPACE_ID_LENGTH: () => SPACE_ID_LENGTH,
  SpaceId: () => import_keys.SpaceId,
  SpaceMember: () => import_services.SpaceMember,
  SpaceMember2: () => import_credentials.SpaceMember,
  SpaceSchema: () => SpaceSchema,
  SpaceState: () => import_services.SpaceState,
  TextKind: () => import_text.TextKind,
  compareForeignKeys: () => import_echo_schema.compareForeignKeys,
  createDocAccessor: () => import_echo_db.createDocAccessor,
  createEmptyEdgeSyncState: () => createEmptyEdgeSyncState,
  createObject: () => import_echo_db.createObject,
  createQueueDXN: () => import_echo_schema.createQueueDXN,
  createSubscription: () => import_echo_db.createSubscription,
  decodeReference: () => import_echo_protocol.decodeReference,
  defineObjectMigration: () => import_echo_db.defineObjectMigration,
  fromCursor: () => import_echo_db.fromCursor,
  fullyQualifiedId: () => fullyQualifiedId,
  getMeta: () => import_echo_schema.getMeta,
  getObjectCore: () => import_echo_db.getObjectCore,
  getRangeFromCursor: () => import_echo_db.getRangeFromCursor,
  getSchema: () => import_echo_schema.getSchema,
  getSource: () => import_echo_db.getSource,
  getSpace: () => getSpace,
  getSyncSummary: () => getSyncSummary,
  getTarget: () => import_echo_db.getTarget,
  getTextInRange: () => import_echo_db.getTextInRange,
  getType: () => import_echo_schema.getType,
  getTypename: () => import_echo_schema.getTypename,
  getVersion: () => import_echo_db.getVersion,
  importSpace: () => importSpace,
  isEchoObject: () => import_echo_db.isEchoObject,
  isLiveObject: () => import_live_object.isLiveObject,
  isRelation: () => import_echo_db.isRelation,
  isSpace: () => isSpace,
  live: () => import_live_object.live,
  loadObjectReferences: () => import_echo_db.loadObjectReferences,
  makeRef: () => import_live_object.makeRef,
  parseFullyQualifiedId: () => parseFullyQualifiedId,
  parseId: () => parseId,
  refFromDXN: () => import_live_object.refFromDXN,
  toCursor: () => import_echo_db.toCursor,
  toCursorRange: () => import_echo_db.toCursorRange,
  updateText: () => import_echo_db.updateText
});
module.exports = __toCommonJS(chunk_HIRCX7XT_exports);
var import_chunk_Y34HQJFZ = require("./chunk-Y34HQJFZ.cjs");
var import_keys = require("@dxos/keys");
var import_echo_schema = require("@dxos/echo-schema");
var import_live_object = require("@dxos/live-object");
var import_echo_db = require("@dxos/echo-db");
var import_echo_protocol = require("@dxos/echo-protocol");
var import_indexing = require("@dxos/protocols/proto/dxos/echo/indexing");
var import_filter = require("@dxos/protocols/proto/dxos/echo/filter");
var import_services = require("@dxos/protocols/proto/dxos/client/services");
var import_credentials = require("@dxos/protocols/proto/dxos/halo/credentials");
var import_text = require("@dxos/protocols/proto/dxos/echo/model/text");
var import_effect = require("effect");
var import_echo = require("@dxos/echo");
var import_echo_db2 = require("@dxos/echo-db");
var import_invariant = require("@dxos/invariant");
var import_live_object2 = require("@dxos/live-object");
var import_client_protocol = require("@dxos/client-protocol");
var import_echo_db3 = require("@dxos/echo-db");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/echo/util.ts";
var SPACE_ID_LENGTH = 33;
var OBJECT_ID_LENGTH = 26;
var FQ_ID_LENGTH = SPACE_ID_LENGTH + OBJECT_ID_LENGTH + 1;
var isSpace = (object) => object instanceof import_chunk_Y34HQJFZ.SpaceProxy;
var SpaceSchema = import_effect.Schema.Any.pipe(import_effect.Schema.filter((x) => isSpace(x)), import_effect.Schema.annotations({
  title: "Space"
}));
var ReactiveObjectSchema = import_effect.Schema.Any.pipe(import_effect.Schema.filter((x) => (0, import_live_object2.isLiveObject)(x)), import_effect.Schema.annotations({
  title: "Live"
}));
var EchoObjectSchema = import_effect.Schema.Any.pipe(import_effect.Schema.filter((x) => import_echo.Obj.isObject(x)), import_effect.Schema.annotations({
  title: "EchoObject"
}));
var getSpace = (object) => {
  if (!object) {
    return void 0;
  }
  const db = (0, import_echo_db2.getDatabaseFromObject)(object);
  const id = db?.spaceId;
  if (id) {
    const owner = db.graph._getOwningObject(id);
    if (owner instanceof import_chunk_Y34HQJFZ.SpaceProxy) {
      return owner;
    }
  }
  return void 0;
};
var fullyQualifiedId = (object) => {
  const space = getSpace(object);
  return space ? `${space.id}:${object.id}` : object.id;
};
var parseFullyQualifiedId = (id) => {
  const [spaceId, objectId] = id.split(":");
  (0, import_invariant.invariant)(objectId, "invalid id", {
    F: __dxlog_file,
    L: 69,
    S: void 0,
    A: [
      "objectId",
      "'invalid id'"
    ]
  });
  return [
    spaceId,
    objectId
  ];
};
var parseId = (id) => {
  if (!id) {
    return {};
  } else if (id.length === SPACE_ID_LENGTH) {
    return {
      spaceId: id
    };
  } else if (id.length === OBJECT_ID_LENGTH) {
    return {
      objectId: id
    };
  } else if (id.length === FQ_ID_LENGTH && id.indexOf(":") === SPACE_ID_LENGTH) {
    const [spaceId, objectId] = id.split(":");
    return {
      spaceId,
      objectId
    };
  } else {
    return {};
  }
};
var createEmptyEdgeSyncState = () => ({
  missingOnLocal: 0,
  missingOnRemote: 0,
  localDocumentCount: 0,
  remoteDocumentCount: 0,
  differentDocuments: 0
});
var getSyncSummary = (syncMap) => {
  return Object.entries(syncMap).reduce((summary, [_spaceId, peerState]) => {
    summary.missingOnLocal += peerState.missingOnLocal;
    summary.missingOnRemote += peerState.missingOnRemote;
    summary.localDocumentCount += peerState.localDocumentCount;
    summary.remoteDocumentCount += peerState.remoteDocumentCount;
    summary.differentDocuments += peerState.differentDocuments;
    return summary;
  }, createEmptyEdgeSyncState());
};
var importSpace = async (database, data) => {
  const { objects: [properties] } = await database.query(import_echo_db3.Filter.typename(import_client_protocol.TYPE_PROPERTIES)).run();
  await new import_echo_db3.Serializer().import(database, data, {
    onObject: async (object) => {
      const { "@type": typeEncoded, ...data2 } = object;
      const type = (0, import_echo_db3.decodeReferenceJSON)(typeEncoded);
      if (properties && type?.objectId === import_client_protocol.TYPE_PROPERTIES) {
        Object.entries(data2).forEach(([name, value]) => {
          if (!name.startsWith("@")) {
            properties[name] = value;
          }
        });
        return false;
      }
      return true;
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DocAccessor,
  EchoObjectSchema,
  Expando,
  FQ_ID_LENGTH,
  Filter,
  IndexKind,
  OBJECT_ID_LENGTH,
  ObjectVersion,
  Query,
  QueryOptions,
  Queue,
  ReactiveObjectSchema,
  Ref,
  RefArray,
  ResultFormat,
  SPACE_ID_LENGTH,
  SpaceId,
  SpaceMember,
  SpaceMember2,
  SpaceSchema,
  SpaceState,
  TextKind,
  compareForeignKeys,
  createDocAccessor,
  createEmptyEdgeSyncState,
  createObject,
  createQueueDXN,
  createSubscription,
  decodeReference,
  defineObjectMigration,
  fromCursor,
  fullyQualifiedId,
  getMeta,
  getObjectCore,
  getRangeFromCursor,
  getSchema,
  getSource,
  getSpace,
  getSyncSummary,
  getTarget,
  getTextInRange,
  getType,
  getTypename,
  getVersion,
  importSpace,
  isEchoObject,
  isLiveObject,
  isRelation,
  isSpace,
  live,
  loadObjectReferences,
  makeRef,
  parseFullyQualifiedId,
  parseId,
  refFromDXN,
  toCursor,
  toCursorRange,
  updateText
});
//# sourceMappingURL=chunk-HIRCX7XT.cjs.map
