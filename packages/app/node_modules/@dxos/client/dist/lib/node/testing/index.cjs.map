{
  "version": 3,
  "sources": ["../../../../src/testing/index.ts", "../../../../src/testing/data.ts", "../../../../src/testing/test-builder.ts", "../../../../src/testing/utils.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nexport { performInvitation } from '@dxos/client-services/testing';\n\nexport * from './data';\nexport * from './test-builder';\nexport * from './utils';\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport { Expando, Ref, TypedObject } from '@dxos/echo-schema';\n\n// TODO(burdon): Remove.\n\n/** @deprecated */\nexport class TextV0Type extends TypedObject({ typename: 'dxos.org/TextV0', version: '0.1.0' })({\n  content: Schema.String,\n}) {}\n\n/** @deprecated */\nexport class DocumentType extends TypedObject({ typename: 'braneframe.com/Document', version: '0.1.0' })({\n  title: Schema.optional(Schema.String), // TODO(burdon): Change to name.\n  content: Ref(TextV0Type),\n}) {}\n\n/** @deprecated */\nexport class ContactType extends TypedObject({ typename: 'braneframe.com/Contact', version: '0.1.0' })({\n  name: Schema.optional(Schema.String),\n  identifiers: Schema.mutable(\n    Schema.Array(\n      Schema.Struct({\n        type: Schema.String,\n        value: Schema.String,\n      }),\n    ),\n  ),\n}) {}\n\n/** @deprecated */\nconst BlockSchema = Schema.Struct({\n  timestamp: Schema.String,\n  content: Schema.optional(Ref(TextV0Type)),\n  object: Schema.optional(Ref(Expando)),\n});\n\n/** @deprecated */\nexport interface BlockType extends Schema.Schema.Type<typeof BlockSchema> {}\n/** @deprecated */\nexport const BlockType: Schema.Schema<BlockType, Schema.Schema.Encoded<typeof BlockSchema>> = BlockSchema;\n\n/** @deprecated */\nexport class MessageType extends TypedObject({ typename: 'braneframe.com/Message', version: '0.1.0' })({\n  type: Schema.optional(Schema.String),\n  date: Schema.optional(Schema.String),\n  subject: Schema.optional(Schema.String),\n  blocks: Schema.mutable(Schema.Array(BlockSchema)),\n  links: Schema.optional(Schema.Array(Ref(Expando))),\n  read: Schema.optional(Schema.Boolean),\n  context: Schema.optional(\n    Schema.Struct({\n      space: Schema.optional(Schema.String),\n      schema: Schema.optional(Schema.String),\n      object: Schema.optional(Schema.String),\n    }),\n  ),\n}) {}\n\n/** @deprecated */\nexport class ThreadType extends TypedObject({ typename: 'braneframe.com/Thread', version: '0.1.0' })({\n  title: Schema.optional(Schema.String),\n  messages: Schema.mutable(Schema.Array(Ref(MessageType))),\n  context: Schema.optional(\n    Schema.Struct({\n      space: Schema.optional(Schema.String),\n      schema: Schema.optional(Schema.String),\n      object: Schema.optional(Schema.String),\n    }),\n  ),\n}) {}\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport { type ExpectStatic } from 'vitest';\n\nimport { Trigger } from '@dxos/async';\nimport { type ClientServices } from '@dxos/client-protocol';\nimport { ClientServicesHost, type ServiceContextRuntimeParams } from '@dxos/client-services';\nimport { Config } from '@dxos/config';\nimport { Context } from '@dxos/context';\nimport { raise } from '@dxos/debug';\nimport { Filter } from '@dxos/echo';\nimport { Expando } from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { type PublicKey } from '@dxos/keys';\nimport { type LevelDB } from '@dxos/kv-store';\nimport { live } from '@dxos/live-object';\nimport { log } from '@dxos/log';\nimport { MemorySignalManager, MemorySignalManagerContext, WebsocketSignalManager } from '@dxos/messaging';\nimport {\n  createIceProvider,\n  createRtcTransportFactory,\n  MemoryTransportFactory,\n  type TransportFactory,\n  TransportKind,\n} from '@dxos/network-manager';\nimport { TcpTransportFactory } from '@dxos/network-manager/transport/tcp';\nimport { Invitation } from '@dxos/protocols/proto/dxos/client/services';\nimport { type Storage } from '@dxos/random-access-storage';\nimport { createLinkedPorts, createProtoRpcPeer, type ProtoRpcPeer } from '@dxos/rpc';\n\nimport { Client } from '../client';\nimport { type EchoDatabase } from '../echo';\nimport { ClientServicesProxy, LocalClientServices } from '../services';\n\nexport const testConfigWithLocalSignal = new Config({\n  version: 1,\n  runtime: {\n    services: {\n      signaling: [\n        {\n          // TODO(burdon): Port numbers and global consts?\n          server: `ws://localhost:${process.env.SIGNAL_PORT ?? 4000}/.well-known/dx/signal`,\n        },\n      ],\n    },\n  },\n});\n\n/**\n * Client builder supports different configurations, incl. signaling, transports, storage.\n */\n// TODO(burdon): Make extensible.\n// TODO(burdon): Implement as Resource.\nexport class TestBuilder {\n  private readonly _ctx = new Context({ name: 'TestBuilder' });\n\n  public config: Config;\n  public storage?: () => Storage;\n  public level?: () => LevelDB;\n\n  _transport: TransportKind;\n\n  // TODO(burdon): Pass in params as object.\n  constructor(\n    config?: Config,\n    public signalManagerContext = new MemorySignalManagerContext(),\n    // TODO(nf): Configure better.\n    transport = TransportKind.WEB_RTC,\n  ) {\n    this.config = config ?? new Config();\n    this._transport = transport;\n  }\n\n  public get ctx() {\n    return this._ctx;\n  }\n\n  async destroy(): Promise<void> {\n    await this._ctx.dispose(false); // TODO(burdon): Set to true to check clean shutdown.\n  }\n\n  /**\n   * Create backend service handlers.\n   */\n  createClientServicesHost(runtimeParams?: ServiceContextRuntimeParams): ClientServicesHost {\n    const services = new ClientServicesHost({\n      config: this.config,\n      storage: this?.storage?.(),\n      level: this?.level?.(),\n      runtimeParams,\n      ...this.networking,\n    });\n\n    this._ctx.onDispose(() => services.close());\n    return services;\n  }\n\n  /**\n   * Create local services host.\n   * @param options - fastPeerPresenceUpdate: enable for faster space-member online/offline status changes.\n   */\n  createLocalClientServices(options?: { fastPeerPresenceUpdate?: boolean }): LocalClientServices {\n    const services = new LocalClientServices({\n      config: this.config,\n      storage: this?.storage?.(),\n      level: this?.level?.(),\n      runtimeParams: {\n        ...(options?.fastPeerPresenceUpdate\n          ? { spaceMemberPresenceAnnounceInterval: 200, spaceMemberPresenceOfflineTimeout: 400 }\n          : {}),\n        invitationConnectionDefaultParams: { teleport: { controlHeartbeatInterval: 200 } },\n      },\n      ...this.networking,\n    });\n\n    this._ctx.onDispose(() => services.close());\n    return services;\n  }\n\n  /**\n   * Create client/server.\n   */\n  createClientServer(host: ClientServicesHost = this.createClientServicesHost()): [Client, ProtoRpcPeer<{}>] {\n    const [proxyPort, hostPort] = createLinkedPorts();\n    const client = new Client({ config: this.config, services: new ClientServicesProxy(proxyPort) });\n    const server = createProtoRpcPeer({\n      exposed: host.descriptors,\n      handlers: host.services as ClientServices,\n      port: hostPort,\n    });\n\n    this._ctx.onDispose(() => server.close());\n    this._ctx.onDispose(() => client.destroy());\n    return [client, server];\n  }\n\n  /**\n   * Get network manager using local shared memory or remote signal manager.\n   */\n  private get networking() {\n    const signals = this.config.get('runtime.services.signaling');\n    if (signals) {\n      log.info(`using transport ${this._transport}`);\n      let transportFactory: TransportFactory;\n      switch (this._transport) {\n        case TransportKind.WEB_RTC:\n          transportFactory = createRtcTransportFactory(\n            { iceServers: this.config.get('runtime.services.ice') },\n            this.config.get('runtime.services.iceProviders') &&\n              createIceProvider(this.config.get('runtime.services.iceProviders')!),\n          );\n          break;\n\n        case TransportKind.TCP:\n          transportFactory = TcpTransportFactory;\n          break;\n\n        default:\n          throw new Error(`Unsupported transport w/ signalling: ${this._transport}`);\n      }\n\n      return {\n        signalManager: new WebsocketSignalManager(signals),\n        transportFactory,\n      };\n    }\n    // if (this._transport !== TransportKind.MEMORY) {\n    // log.warn(`specified transport ${this._transport} but no signalling configured, using memory transport instead`);\n    // }\n\n    // Memory transport with shared context.\n    return {\n      signalManager: new MemorySignalManager(this.signalManagerContext),\n      transportFactory: MemoryTransportFactory,\n    };\n  }\n}\n\nexport const testSpaceAutomerge = async (\n  expect: ExpectStatic,\n  createDb: EchoDatabase,\n  checkDb: EchoDatabase = createDb,\n) => {\n  const object = live(Expando, {});\n  createDb.add(object);\n  await expect.poll(() => checkDb.query(Filter.ids(object.id)).first({ timeout: 1000 }));\n\n  return { objectId: object.id };\n};\n\nexport const syncItemsAutomerge = async (expect: ExpectStatic, db1: EchoDatabase, db2: EchoDatabase) => {\n  await testSpaceAutomerge(expect, db1, db2);\n  await testSpaceAutomerge(expect, db2, db1);\n};\n\n/**\n * @deprecated use `@dxos/client-services/testing` `performInvitation` instead.\n */\nexport const joinCommonSpace = async ([initialPeer, ...peers]: Client[], spaceKey?: PublicKey): Promise<PublicKey> => {\n  const rootSpace = spaceKey ? initialPeer.spaces.get(spaceKey) : await initialPeer.spaces.create();\n  invariant(rootSpace, 'Space not found.');\n\n  await Promise.all(\n    peers.map(async (peer) => {\n      const hostDone = new Trigger<Invitation>();\n      const guestDone = new Trigger<Invitation>();\n\n      const hostObservable = rootSpace.share({ authMethod: Invitation.AuthMethod.NONE });\n      log('invitation created');\n      hostObservable.subscribe(\n        (hostInvitation) => {\n          switch (hostInvitation.state) {\n            case Invitation.State.CONNECTING: {\n              const guestObservable = peer.spaces.join(hostInvitation);\n              log('invitation accepted');\n\n              guestObservable.subscribe(\n                (guestInvitation) => {\n                  switch (guestInvitation.state) {\n                    case Invitation.State.SUCCESS: {\n                      guestDone.wake(guestInvitation);\n                      log('invitation guestDone');\n                      break;\n                    }\n                  }\n                },\n                (err) => raise(err),\n              );\n              break;\n            }\n\n            case Invitation.State.SUCCESS: {\n              hostDone.wake(hostInvitation);\n              log('invitation hostDone');\n            }\n          }\n        },\n        (err) => raise(err),\n      );\n\n      await Promise.all([hostDone.wait(), guestDone.wait()]);\n    }),\n  );\n\n  return rootSpace.key;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Trigger } from '@dxos/async';\nimport { type Space } from '@dxos/client-protocol';\nimport type { Config } from '@dxos/config';\nimport { type Context } from '@dxos/context';\nimport { type PublicKey } from '@dxos/keys';\nimport { createTestLevel } from '@dxos/kv-store/testing';\nimport { createStorage, StorageType } from '@dxos/random-access-storage';\nimport { range } from '@dxos/util';\n\nimport { TestBuilder } from './test-builder';\nimport { Client } from '../client';\n\ntype Options = {\n  timeout?: number;\n  ready?: boolean;\n};\n\nexport const waitForSpace = async (\n  client: Client,\n  spaceKey: PublicKey,\n  { timeout = 500, ready }: Options = {},\n): Promise<Space> => {\n  let space = client.spaces.get(spaceKey);\n\n  if (!space) {\n    const spaceTrigger = new Trigger<Space>();\n    const sub = client.spaces.subscribe(() => {\n      const space = client.spaces.get(spaceKey);\n      if (space) {\n        sub.unsubscribe();\n        spaceTrigger.wake(space);\n      }\n    });\n    space = await spaceTrigger.wait({ timeout });\n  }\n\n  if (ready) {\n    await space.waitUntilReady();\n  }\n\n  return space;\n};\n\nexport type CreateInitializedClientsOptions = {\n  config?: Config;\n  storage?: boolean;\n  serviceConfig?: { fastPeerPresenceUpdate?: boolean };\n};\n\nexport const createInitializedClientsWithContext = async (\n  ctx: Context,\n  count: number,\n  options?: CreateInitializedClientsOptions,\n): Promise<Client[]> => {\n  const testBuilder = new TestBuilder(options?.config);\n  testBuilder.storage = options?.storage\n    ? () => createStorage({ type: StorageType.RAM, root: String(Math.random()) })\n    : undefined;\n  testBuilder.level = options?.storage ? () => createTestLevel() : undefined;\n\n  const clients = range(\n    count,\n    () =>\n      new Client({ config: options?.config, services: testBuilder.createLocalClientServices(options?.serviceConfig) }),\n  );\n  const initialized = await Promise.all(\n    clients.map(async (client, index) => {\n      await client.initialize();\n      await client.halo.createIdentity({ displayName: `Peer ${index}` });\n      return client;\n    }),\n  );\n  ctx.onDispose(() => Promise.all(initialized.map((c) => c.destroy())));\n  return initialized;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,qBAAkC;ACAlC,oBAAuB;AAEvB,yBAA0C;ACA1C,mBAAwB;AAExB,6BAAqE;AACrE,oBAAuB;AACvB,qBAAwB;AACxB,mBAAsB;AACtB,kBAAuB;AACvB,IAAAA,sBAAwB;AACxB,uBAA0B;AAG1B,yBAAqB;AACrB,iBAAoB;AACpB,uBAAwF;AACxF,6BAMO;AACP,iBAAoC;AACpC,sBAA2B;AAE3B,iBAAyE;AC1BzE,IAAAC,gBAAwB;AAKxB,IAAAC,kBAAgC;AAChC,mCAA2C;AAC3C,kBAAsB;AFAf,IAAMC,aAAN,kBAAyBC,gCAAY;EAAEC,UAAU;EAAmBC,SAAS;AAAQ,CAAA,EAAG;EAC7FC,SAASC,qBAAOC;AAClB,CAAA,EAAA;AAAI;AAGG,IAAMC,eAAN,kBAA2BN,gCAAY;EAAEC,UAAU;EAA2BC,SAAS;AAAQ,CAAA,EAAG;EACvGK,OAAOH,qBAAOI,SAASJ,qBAAOC,MAAM;EACpCF,aAASM,wBAAIV,UAAAA;AACf,CAAA,EAAA;AAAI;AAGG,IAAMW,cAAN,kBAA0BV,gCAAY;EAAEC,UAAU;EAA0BC,SAAS;AAAQ,CAAA,EAAG;EACrGS,MAAMP,qBAAOI,SAASJ,qBAAOC,MAAM;EACnCO,aAAaR,qBAAOS,QAClBT,qBAAOU,MACLV,qBAAOW,OAAO;IACZC,MAAMZ,qBAAOC;IACbY,OAAOb,qBAAOC;EAChB,CAAA,CAAA,CAAA;AAGN,CAAA,EAAA;AAAI;AAGJ,IAAMa,cAAcd,qBAAOW,OAAO;EAChCI,WAAWf,qBAAOC;EAClBF,SAASC,qBAAOI,aAASC,wBAAIV,UAAAA,CAAAA;EAC7BqB,QAAQhB,qBAAOI,aAASC,wBAAIY,0BAAAA,CAAAA;AAC9B,CAAA;AAKO,IAAMC,YAAiFJ;AAGvF,IAAMK,cAAN,kBAA0BvB,gCAAY;EAAEC,UAAU;EAA0BC,SAAS;AAAQ,CAAA,EAAG;EACrGc,MAAMZ,qBAAOI,SAASJ,qBAAOC,MAAM;EACnCmB,MAAMpB,qBAAOI,SAASJ,qBAAOC,MAAM;EACnCoB,SAASrB,qBAAOI,SAASJ,qBAAOC,MAAM;EACtCqB,QAAQtB,qBAAOS,QAAQT,qBAAOU,MAAMI,WAAAA,CAAAA;EACpCS,OAAOvB,qBAAOI,SAASJ,qBAAOU,UAAML,wBAAIY,0BAAAA,CAAAA,CAAAA;EACxCO,MAAMxB,qBAAOI,SAASJ,qBAAOyB,OAAO;EACpCC,SAAS1B,qBAAOI,SACdJ,qBAAOW,OAAO;IACZgB,OAAO3B,qBAAOI,SAASJ,qBAAOC,MAAM;IACpC2B,QAAQ5B,qBAAOI,SAASJ,qBAAOC,MAAM;IACrCe,QAAQhB,qBAAOI,SAASJ,qBAAOC,MAAM;EACvC,CAAA,CAAA;AAEJ,CAAA,EAAA;AAAI;AAGG,IAAM4B,aAAN,kBAAyBjC,gCAAY;EAAEC,UAAU;EAAyBC,SAAS;AAAQ,CAAA,EAAG;EACnGK,OAAOH,qBAAOI,SAASJ,qBAAOC,MAAM;EACpC6B,UAAU9B,qBAAOS,QAAQT,qBAAOU,UAAML,wBAAIc,WAAAA,CAAAA,CAAAA;EAC1CO,SAAS1B,qBAAOI,SACdJ,qBAAOW,OAAO;IACZgB,OAAO3B,qBAAOI,SAASJ,qBAAOC,MAAM;IACpC2B,QAAQ5B,qBAAOI,SAASJ,qBAAOC,MAAM;IACrCe,QAAQhB,qBAAOI,SAASJ,qBAAOC,MAAM;EACvC,CAAA,CAAA;AAEJ,CAAA,EAAA;AAAI;;ACtCG,IAAM8B,4BAA4B,IAAIC,qBAAO;EAClDlC,SAAS;EACTmC,SAAS;IACPC,UAAU;MACRC,WAAW;QACT;;UAEEC,QAAQ,kBAAkBC,QAAQC,IAAIC,eAAe,GAAA;QACvD;;IAEJ;EACF;AACF,CAAA;AAOO,IAAMC,cAAN,MAAMA;;EAUX,YACEC,QACOC,uBAAuB,IAAIC,4CAAAA,GAElCC,YAAYC,qCAAcC,SAC1B;SAHOJ,uBAAAA;SAXQK,OAAO,IAAIC,uBAAQ;MAAEzC,MAAM;IAAc,GAAA;;;;AAexD,SAAKkC,SAASA,UAAU,IAAIT,qBAAAA;AAC5B,SAAKiB,aAAaL;EACpB;EAEA,IAAWM,MAAM;AACf,WAAO,KAAKH;EACd;EAEA,MAAMI,UAAyB;AAC7B,UAAM,KAAKJ,KAAKK,QAAQ,KAAA;EAC1B;;;;EAKAC,yBAAyBC,eAAiE;AACxF,UAAMpB,WAAW,IAAIqB,0CAAmB;MACtCd,QAAQ,KAAKA;MACbe,SAAS,MAAMA,UAAAA;MACfC,OAAO,MAAMA,QAAAA;MACbH;MACA,GAAG,KAAKI;IACV,CAAA;AAEA,SAAKX,KAAKY,UAAU,MAAMzB,SAAS0B,MAAK,CAAA;AACxC,WAAO1B;EACT;;;;;EAMA2B,0BAA0BC,SAAqE;AAC7F,UAAM5B,WAAW,IAAI6B,0CAAoB;MACvCtB,QAAQ,KAAKA;MACbe,SAAS,MAAMA,UAAAA;MACfC,OAAO,MAAMA,QAAAA;MACbH,eAAe;QACb,GAAIQ,SAASE,yBACT;UAAEC,qCAAqC;UAAKC,mCAAmC;QAAI,IACnF,CAAC;QACLC,mCAAmC;UAAEC,UAAU;YAAEC,0BAA0B;UAAI;QAAE;MACnF;MACA,GAAG,KAAKX;IACV,CAAA;AAEA,SAAKX,KAAKY,UAAU,MAAMzB,SAAS0B,MAAK,CAAA;AACxC,WAAO1B;EACT;;;;EAKAoC,mBAAmBC,OAA2B,KAAKlB,yBAAwB,GAAgC;AACzG,UAAM,CAACmB,WAAWC,QAAAA,QAAYC,8BAAAA;AAC9B,UAAMC,SAAS,IAAIC,6BAAO;MAAEnC,QAAQ,KAAKA;MAAQP,UAAU,IAAI2C,0CAAoBL,SAAAA;IAAW,CAAA;AAC9F,UAAMpC,aAAS0C,+BAAmB;MAChCC,SAASR,KAAKS;MACdC,UAAUV,KAAKrC;MACfgD,MAAMT;IACR,CAAA;AAEA,SAAK1B,KAAKY,UAAU,MAAMvB,OAAOwB,MAAK,CAAA;AACtC,SAAKb,KAAKY,UAAU,MAAMgB,OAAOxB,QAAO,CAAA;AACxC,WAAO;MAACwB;MAAQvC;;EAClB;;;;EAKA,IAAYsB,aAAa;AACvB,UAAMyB,UAAU,KAAK1C,OAAO2C,IAAI,4BAAA;AAChC,QAAID,SAAS;AACXE,qBAAIC,KAAK,mBAAmB,KAAKrC,UAAU,IAAE,QAAA;;;;;;AAC7C,UAAIsC;AACJ,cAAQ,KAAKtC,YAAU;QACrB,KAAKJ,qCAAcC;AACjByC,iCAAmBC,kDACjB;YAAEC,YAAY,KAAKhD,OAAO2C,IAAI,sBAAA;UAAwB,GACtD,KAAK3C,OAAO2C,IAAI,+BAAA,SACdM,0CAAkB,KAAKjD,OAAO2C,IAAI,+BAAA,CAAA,CAAA;AAEtC;QAEF,KAAKvC,qCAAc8C;AACjBJ,6BAAmBK;AACnB;QAEF;AACE,gBAAM,IAAIC,MAAM,wCAAwC,KAAK5C,UAAU,EAAE;MAC7E;AAEA,aAAO;QACL6C,eAAe,IAAIC,wCAAuBZ,OAAAA;QAC1CI;MACF;IACF;AAMA,WAAO;MACLO,eAAe,IAAIE,qCAAoB,KAAKtD,oBAAoB;MAChE6C,kBAAkBU;IACpB;EACF;AACF;AAEO,IAAMC,qBAAqB,OAChCC,QACAC,UACAC,UAAwBD,aAAQ;AAEhC,QAAMpF,aAASsF,yBAAKrF,oBAAAA,SAAS,CAAC,CAAA;AAC9BmF,WAASG,IAAIvF,MAAAA;AACb,QAAMmF,OAAOK,KAAK,MAAMH,QAAQI,MAAMC,mBAAOC,IAAI3F,OAAO4F,EAAE,CAAA,EAAGC,MAAM;IAAEC,SAAS;EAAK,CAAA,CAAA;AAEnF,SAAO;IAAEC,UAAU/F,OAAO4F;EAAG;AAC/B;AAEO,IAAMI,qBAAqB,OAAOb,QAAsBc,KAAmBC,QAAAA;AAChF,QAAMhB,mBAAmBC,QAAQc,KAAKC,GAAAA;AACtC,QAAMhB,mBAAmBC,QAAQe,KAAKD,GAAAA;AACxC;AAKO,IAAME,kBAAkB,OAAO,CAACC,aAAgBC,QAAAA,GAAkBC,aAAAA;AACvE,QAAMC,YAAYD,WAAWF,YAAYI,OAAOpC,IAAIkC,QAAAA,IAAY,MAAMF,YAAYI,OAAOC,OAAM;AAC/FC,kCAAUH,WAAW,oBAAA;;;;;;;;;AAErB,QAAMI,QAAQC,IACZP,MAAMQ,IAAI,OAAOC,SAAAA;AACf,UAAMC,WAAW,IAAIC,qBAAAA;AACrB,UAAMC,YAAY,IAAID,qBAAAA;AAEtB,UAAME,iBAAiBX,UAAUY,MAAM;MAAEC,YAAYC,2BAAWC,WAAWC;IAAK,CAAA;AAChFlD,wBAAI,sBAAA,QAAA;;;;;;AACJ6C,mBAAeM,UACb,CAACC,mBAAAA;AACC,cAAQA,eAAeC,OAAK;QAC1B,KAAKL,2BAAWM,MAAMC,YAAY;AAChC,gBAAMC,kBAAkBf,KAAKN,OAAOsB,KAAKL,cAAAA;AACzCpD,8BAAI,uBAAA,QAAA;;;;;;AAEJwD,0BAAgBL,UACd,CAACO,oBAAAA;AACC,oBAAQA,gBAAgBL,OAAK;cAC3B,KAAKL,2BAAWM,MAAMK,SAAS;AAC7Bf,0BAAUgB,KAAKF,eAAAA;AACf1D,oCAAI,wBAAA,QAAA;;;;;;AACJ;cACF;YACF;UACF,GACA,CAAC6D,YAAQC,oBAAMD,GAAAA,CAAAA;AAEjB;QACF;QAEA,KAAKb,2BAAWM,MAAMK,SAAS;AAC7BjB,mBAASkB,KAAKR,cAAAA;AACdpD,8BAAI,uBAAA,QAAA;;;;;;QACN;MACF;IACF,GACA,CAAC6D,YAAQC,oBAAMD,GAAAA,CAAAA;AAGjB,UAAMvB,QAAQC,IAAI;MAACG,SAASqB,KAAI;MAAInB,UAAUmB,KAAI;KAAG;EACvD,CAAA,CAAA;AAGF,SAAO7B,UAAU8B;AACnB;AClOO,IAAMC,eAAe,OAC1B3E,QACA2C,UACA,EAAER,UAAU,KAAKyC,MAAK,IAAc,CAAC,MAAC;AAEtC,MAAI5H,QAAQgD,OAAO6C,OAAOpC,IAAIkC,QAAAA;AAE9B,MAAI,CAAC3F,OAAO;AACV,UAAM6H,eAAe,IAAIxB,cAAAA,QAAAA;AACzB,UAAMyB,MAAM9E,OAAO6C,OAAOgB,UAAU,MAAA;AAClC,YAAM7G,SAAQgD,OAAO6C,OAAOpC,IAAIkC,QAAAA;AAChC,UAAI3F,QAAO;AACT8H,YAAIC,YAAW;AACfF,qBAAaP,KAAKtH,MAAAA;MACpB;IACF,CAAA;AACAA,YAAQ,MAAM6H,aAAaJ,KAAK;MAAEtC;IAAQ,CAAA;EAC5C;AAEA,MAAIyC,OAAO;AACT,UAAM5H,MAAMgI,eAAc;EAC5B;AAEA,SAAOhI;AACT;AAQO,IAAMiI,sCAAsC,OACjD1G,KACA2G,OACA/F,YAAAA;AAEA,QAAMgG,cAAc,IAAItH,YAAYsB,SAASrB,MAAAA;AAC7CqH,cAAYtG,UAAUM,SAASN,UAC3B,UAAMuG,4CAAc;IAAEnJ,MAAMoJ,yCAAYC;IAAKC,MAAMjK,OAAOkK,KAAKC,OAAM,CAAA;EAAI,CAAA,IACzEC;AACJP,cAAYrG,QAAQK,SAASN,UAAU,UAAM8G,iCAAAA,IAAoBD;AAEjE,QAAME,cAAUC,mBACdX,OACA,MACE,IAAIjF,6BAAO;IAAEnC,QAAQqB,SAASrB;IAAQP,UAAU4H,YAAYjG,0BAA0BC,SAAS2G,aAAAA;EAAe,CAAA,CAAA;AAElH,QAAMC,cAAc,MAAM/C,QAAQC,IAChC2C,QAAQ1C,IAAI,OAAOlD,QAAQgG,UAAAA;AACzB,UAAMhG,OAAOiG,WAAU;AACvB,UAAMjG,OAAOkG,KAAKC,eAAe;MAAEC,aAAa,QAAQJ,KAAAA;IAAQ,CAAA;AAChE,WAAOhG;EACT,CAAA,CAAA;AAEFzB,MAAIS,UAAU,MAAMgE,QAAQC,IAAI8C,YAAY7C,IAAI,CAACmD,MAAMA,EAAE7H,QAAO,CAAA,CAAA,CAAA;AAChE,SAAOuH;AACT;",
  "names": ["import_echo_schema", "import_async", "import_testing", "TextV0Type", "TypedObject", "typename", "version", "content", "Schema", "String", "DocumentType", "title", "optional", "Ref", "ContactType", "name", "identifiers", "mutable", "Array", "Struct", "type", "value", "BlockSchema", "timestamp", "object", "Expando", "BlockType", "MessageType", "date", "subject", "blocks", "links", "read", "Boolean", "context", "space", "schema", "ThreadType", "messages", "testConfigWithLocalSignal", "Config", "runtime", "services", "signaling", "server", "process", "env", "SIGNAL_PORT", "TestBuilder", "config", "signalManagerContext", "MemorySignalManagerContext", "transport", "TransportKind", "WEB_RTC", "_ctx", "Context", "_transport", "ctx", "destroy", "dispose", "createClientServicesHost", "runtimeParams", "ClientServicesHost", "storage", "level", "networking", "onDispose", "close", "createLocalClientServices", "options", "LocalClientServices", "fastPeerPresenceUpdate", "spaceMemberPresenceAnnounceInterval", "spaceMemberPresenceOfflineTimeout", "invitationConnectionDefaultParams", "teleport", "controlHeartbeatInterval", "createClientServer", "host", "proxyPort", "hostPort", "createLinkedPorts", "client", "Client", "ClientServicesProxy", "createProtoRpcPeer", "exposed", "descriptors", "handlers", "port", "signals", "get", "log", "info", "transportFactory", "createRtcTransportFactory", "iceServers", "createIceProvider", "TCP", "TcpTransportFactory", "Error", "signalManager", "WebsocketSignalManager", "MemorySignalManager", "MemoryTransportFactory", "testSpaceAutomerge", "expect", "createDb", "checkDb", "live", "add", "poll", "query", "Filter", "ids", "id", "first", "timeout", "objectId", "syncItemsAutomerge", "db1", "db2", "joinCommonSpace", "initialPeer", "peers", "spaceKey", "rootSpace", "spaces", "create", "invariant", "Promise", "all", "map", "peer", "hostDone", "Trigger", "guestDone", "hostObservable", "share", "authMethod", "Invitation", "AuthMethod", "NONE", "subscribe", "hostInvitation", "state", "State", "CONNECTING", "guestObservable", "join", "guestInvitation", "SUCCESS", "wake", "err", "raise", "wait", "key", "waitForSpace", "ready", "spaceTrigger", "sub", "unsubscribe", "waitUntilReady", "createInitializedClientsWithContext", "count", "testBuilder", "createStorage", "StorageType", "RAM", "root", "Math", "random", "undefined", "createTestLevel", "clients", "range", "serviceConfig", "initialized", "index", "initialize", "halo", "createIdentity", "displayName", "c"]
}
