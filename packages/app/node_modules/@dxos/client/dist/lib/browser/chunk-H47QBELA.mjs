import {
  InvitationsProxy
} from "./chunk-WMNYEGBR.mjs";
import {
  RPC_TIMEOUT
} from "./chunk-UFEX2AOY.mjs";

// packages/sdk/client/src/echo/space-proxy.ts
import isEqualWith from "lodash.isequalwith";
import { Event, MulticastObservable, scheduleMicroTask, synchronized, Trigger } from "@dxos/async";
import { PropertiesType } from "@dxos/client-protocol";
import { Stream } from "@dxos/codec-protobuf/stream";
import { cancelWithContext, Context } from "@dxos/context";
import { checkCredentialType } from "@dxos/credentials";
import { inspectCustom, loadashEqualityFn, todo, warnAfterTimeout } from "@dxos/debug";
import { Filter } from "@dxos/echo-db";
import { invariant } from "@dxos/invariant";
import { log } from "@dxos/log";
import { decodeError } from "@dxos/protocols";
import { CreateEpochRequest, Invitation, SpaceState } from "@dxos/protocols/proto/dxos/client/services";
import { QueryOptions } from "@dxos/protocols/proto/dxos/echo/filter";
import { SpaceMember as HaloSpaceMember } from "@dxos/protocols/proto/dxos/halo/credentials";
import { Timeframe } from "@dxos/timeframe";
import { trace } from "@dxos/tracing";
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/echo/space-proxy.ts";
var EPOCH_CREATION_TIMEOUT = 6e4;
var _a;
var SpaceProxy = class {
  constructor(_clientServices, _data, echoClient) {
    this._clientServices = _clientServices;
    this._data = _data;
    this._ctx = new Context(void 0, {
      F: __dxlog_file,
      L: 63
    });
    this._anySpaceUpdate = new Event();
    this._stateUpdate = new Event();
    this._pipelineUpdate = new Event();
    this._databaseInitialized = new Trigger();
    this._initializationComplete = new Trigger();
    this._initializing = false;
    this._initialized = false;
    this._state = MulticastObservable.from(this._stateUpdate, SpaceState.SPACE_CLOSED);
    this._pipeline = MulticastObservable.from(this._pipelineUpdate, {});
    this._membersUpdate = new Event();
    this._members = MulticastObservable.from(this._membersUpdate, []);
    this._databaseOpen = false;
    this._error = void 0;
    this._properties = void 0;
    this[_inspectCustom] = (depth, options, inspect) => {
      return `${options.stylize(this[Symbol.toStringTag], "special")} ${inspect({
        id: this.id,
        state: SpaceState[this.state.get()]
      })}`;
    };
    log("construct", {
      key: _data.spaceKey,
      state: SpaceState[_data.state]
    }, {
      F: __dxlog_file,
      L: 122,
      S: this,
      C: (f, a) => f(...a)
    });
    invariant(this._clientServices.services.InvitationsService, "InvitationsService not available", {
      F: __dxlog_file,
      L: 123,
      S: this,
      A: [
        "this._clientServices.services.InvitationsService",
        "'InvitationsService not available'"
      ]
    });
    this._invitationsProxy = new InvitationsProxy(this._clientServices.services.InvitationsService, this._clientServices.services.IdentityService, () => ({
      kind: Invitation.Kind.SPACE,
      spaceKey: this.key
    }));
    this._db = echoClient.constructDatabase({
      spaceId: this.id,
      spaceKey: this.key,
      owningObject: this
    });
    this._queues = echoClient.constructQueueFactory(this.id);
    const self = this;
    this._internal = {
      get data() {
        return self._data;
      },
      createEpoch: this._createEpoch.bind(this),
      getCredentials: this._getCredentials.bind(this),
      getEpochs: this._getEpochs.bind(this),
      removeMember: this._removeMember.bind(this),
      migrate: this._migrate.bind(this),
      setEdgeReplicationPreference: this._setEdgeReplicationPreference.bind(this),
      export: this._export.bind(this)
    };
    this._error = this._data.error ? decodeError(this._data.error) : void 0;
    this._stateUpdate.emit(this._currentState);
    this._pipelineUpdate.emit(_data.pipeline ?? {});
    this._membersUpdate.emit(_data.members ?? []);
  }
  toJSON() {
    return {
      id: this.id,
      db: this._db.toJSON(),
      state: SpaceState[this.state.get()]
    };
  }
  get id() {
    return this._data.id;
  }
  get key() {
    return this._data.spaceKey;
  }
  get db() {
    return this._db;
  }
  get queues() {
    return this._queues;
  }
  /**
  * @deprecated
  */
  get crud() {
    return this._db.coreDatabase;
  }
  get isOpen() {
    return this._data.state === SpaceState.SPACE_READY && this._initialized;
  }
  get properties() {
    this._throwIfNotInitialized();
    invariant(this._properties, "Properties not available", {
      F: __dxlog_file,
      L: 199,
      S: this,
      A: [
        "this._properties",
        "'Properties not available'"
      ]
    });
    return this._properties;
  }
  get state() {
    return this._state;
  }
  /**
  * @inheritdoc
  */
  get pipeline() {
    return this._pipeline;
  }
  /**
  * @inheritdoc
  */
  get invitations() {
    return this._invitationsProxy.created;
  }
  /**
  * @inheritdoc
  */
  get members() {
    return this._members;
  }
  /**
  * @inheritdoc
  */
  // TODO(burdon): Remove?
  get internal() {
    return this._internal;
  }
  get error() {
    return this._error;
  }
  get [(_a = Symbol.toStringTag, _inspectCustom = inspectCustom, _a)]() {
    return "SpaceProxy";
  }
  /**
  * Current state of the space.
  * The database is ready to be used in `SpaceState.SPACE_READY` state.
  * Presence is available in `SpaceState.SPACE_CONTROL_ONLY` state.
  */
  get _currentState() {
    if (this._data.state === SpaceState.SPACE_READY && !this._initialized) {
      return SpaceState.SPACE_INITIALIZING;
    } else {
      return this._data.state;
    }
  }
  /**
  * Called by EchoProxy to update this space instance.
  * Called once on initial creation.
  * @internal Package-private.
  */
  async _processSpaceUpdate(space) {
    const emitEvent = shouldUpdate(this._data, space);
    const emitPipelineEvent = shouldPipelineUpdate(this._data, space);
    const emitMembersEvent = shouldMembersUpdate(this._data.members, space.members);
    const isFirstTimeInitializing = space.state === SpaceState.SPACE_READY && !(this._initialized || this._initializing);
    const isReopening = this._data.state !== SpaceState.SPACE_READY && space.state === SpaceState.SPACE_READY && !this._databaseOpen;
    const shouldReset = this._databaseOpen && space.state === SpaceState.SPACE_REQUIRES_MIGRATION;
    log("update", {
      key: space.spaceKey,
      prevState: SpaceState[this._data.state],
      state: SpaceState[space.state],
      emitEvent,
      emitPipelineEvent,
      emitMembersEvent,
      isFirstTimeInitializing,
      isReopening
    }, {
      F: __dxlog_file,
      L: 281,
      S: this,
      C: (f, a) => f(...a)
    });
    this._data = space;
    if (isFirstTimeInitializing) {
      await this._initialize();
    } else if (isReopening) {
      await this._initializeDb();
    } else if (shouldReset) {
      await this._reset();
    }
    if (space.error) {
      this._error = decodeError(space.error);
    }
    if (this._initialized) {
      const automergeRoot = space.pipeline?.spaceRootUrl;
      if (automergeRoot) {
        log("set space root", {
          spaceKey: this.key,
          automergeRoot
        }, {
          F: __dxlog_file,
          L: 310,
          S: this,
          C: (f, a) => f(...a)
        });
        await this._db.setSpaceRoot(automergeRoot);
      }
    }
    this._anySpaceUpdate.emit(space);
    if (emitEvent) {
      this._stateUpdate.emit(this._currentState);
    }
    if (emitPipelineEvent) {
      this._pipelineUpdate.emit(space.pipeline ?? {});
    }
    if (emitMembersEvent) {
      this._membersUpdate.emit(space.members);
    }
  }
  async _initialize() {
    if (this._initializing || this._initialized) {
      return;
    }
    log("initializing...", {
      space: this.key
    }, {
      F: __dxlog_file,
      L: 333,
      S: this,
      C: (f, a) => f(...a)
    });
    this._initializing = true;
    await this._invitationsProxy.open();
    await this._initializeDb();
    this._initialized = true;
    this._initializing = false;
    this._initializationComplete.wake();
    this._stateUpdate.emit(this._currentState);
    this._data.members && this._membersUpdate.emit(this._data.members);
    log("initialized", {
      space: this.key
    }, {
      F: __dxlog_file,
      L: 343,
      S: this,
      C: (f, a) => f(...a)
    });
  }
  async _initializeDb() {
    this._databaseOpen = true;
    {
      const automergeRoot = this._data.pipeline?.spaceRootUrl;
      if (automergeRoot !== void 0) {
        await this._db.setSpaceRoot(automergeRoot);
      } else {
        log.warn("no automerge root found for space", {
          spaceId: this.id
        }, {
          F: __dxlog_file,
          L: 355,
          S: this,
          C: (f, a) => f(...a)
        });
      }
      await this._db.open();
    }
    log("ready", void 0, {
      F: __dxlog_file,
      L: 360,
      S: this,
      C: (f, a) => f(...a)
    });
    this._databaseInitialized.wake();
    const propertiesAvailable = new Trigger();
    {
      const unsubscribe = this._db.query(Filter.type(PropertiesType), {
        dataLocation: QueryOptions.DataLocation.LOCAL
      }).subscribe((query) => {
        if (query.objects.length === 1) {
          this._properties = query.objects[0];
          propertiesAvailable.wake();
          this._stateUpdate.emit(this._currentState);
          scheduleMicroTask(this._ctx, () => {
            unsubscribe();
          });
        }
      }, {
        fire: true
      });
    }
    await warnAfterTimeout(5e3, "Finding properties for a space", () => cancelWithContext(this._ctx, propertiesAvailable.wait()));
  }
  /**
  * Called by EchoProxy close.
  * @internal Package-private.
  */
  async _destroy() {
    await this._reset();
  }
  async _reset() {
    log("destroying...", void 0, {
      F: __dxlog_file,
      L: 401,
      S: this,
      C: (f, a) => f(...a)
    });
    await this._ctx.dispose();
    this._ctx = new Context(void 0, {
      F: __dxlog_file,
      L: 403
    });
    await this._invitationsProxy.close();
    await this._db.close();
    this._initializationComplete.reset();
    this._databaseInitialized.reset();
    this._initializing = false;
    this._initialized = false;
    this._databaseOpen = false;
    log("destroyed", void 0, {
      F: __dxlog_file,
      L: 411,
      S: this,
      C: (f, a) => f(...a)
    });
  }
  async open() {
    await this._clientServices.services.SpacesService.updateSpace({
      spaceKey: this.key,
      state: SpaceState.SPACE_ACTIVE
    }, {
      timeout: RPC_TIMEOUT
    });
  }
  async close() {
    if (this._databaseOpen) {
      await this._db.flush();
    }
    await this._clientServices.services.SpacesService.updateSpace({
      spaceKey: this.key,
      state: SpaceState.SPACE_INACTIVE
    }, {
      timeout: RPC_TIMEOUT
    });
  }
  /**
  * Waits until the space is in the ready state, with database initialized.
  */
  async waitUntilReady() {
    await cancelWithContext(this._ctx, this._initializationComplete.wait());
    return this;
  }
  /**
  * Post a message to the space.
  */
  async postMessage(channel, message) {
    invariant(this._clientServices.services.SpacesService, "SpacesService not available", {
      F: __dxlog_file,
      L: 443,
      S: this,
      A: [
        "this._clientServices.services.SpacesService",
        "'SpacesService not available'"
      ]
    });
    await this._clientServices.services.SpacesService.postMessage({
      spaceKey: this.key,
      channel,
      message: {
        ...message,
        "@type": message["@type"] || "google.protobuf.Struct"
      }
    }, {
      timeout: RPC_TIMEOUT
    });
  }
  /**
  * Listen for messages posted to the space.
  */
  listen(channel, callback) {
    invariant(this._clientServices.services.SpacesService, "SpacesService not available", {
      F: __dxlog_file,
      L: 458,
      S: this,
      A: [
        "this._clientServices.services.SpacesService",
        "'SpacesService not available'"
      ]
    });
    const stream = this._clientServices.services.SpacesService.subscribeMessages({
      spaceKey: this.key,
      channel
    }, {
      timeout: RPC_TIMEOUT
    });
    stream.subscribe(callback);
    return () => stream.close();
  }
  /**
  * Creates a delegated or interactive invitation.
  */
  share(options) {
    this._throwIfNotInitialized();
    log("create invitation", options, {
      F: __dxlog_file,
      L: 472,
      S: this,
      C: (f, a) => f(...a)
    });
    return this._invitationsProxy.share({
      ...options,
      spaceKey: this.key
    });
  }
  async admitContact(contact) {
    await this._clientServices.services.SpacesService.admitContact({
      spaceKey: this.key,
      role: HaloSpaceMember.Role.ADMIN,
      contact
    });
  }
  /**
  * Requests member role update.
  */
  updateMemberRole(request) {
    this._throwIfNotInitialized();
    return this._clientServices.services.SpacesService.updateMemberRole({
      spaceKey: this.key,
      memberKey: request.memberKey,
      newRole: request.newRole
    });
  }
  /**
  * Implementation method.
  */
  createSnapshot() {
    return todo();
  }
  async _removeMember(memberKey) {
    return this._clientServices.services.SpacesService.updateMemberRole({
      spaceKey: this.key,
      memberKey,
      newRole: HaloSpaceMember.Role.REMOVED
    });
  }
  async _createEpoch({ migration, automergeRootUrl } = {}) {
    log("create epoch", {
      migration,
      automergeRootUrl
    }, {
      F: __dxlog_file,
      L: 516,
      S: this,
      C: (f, a) => f(...a)
    });
    const { controlTimeframe: targetTimeframe } = await this._clientServices.services.SpacesService.createEpoch({
      spaceKey: this.key,
      migration,
      automergeRootUrl
    }, {
      timeout: EPOCH_CREATION_TIMEOUT
    });
    if (targetTimeframe) {
      await warnAfterTimeout(5e3, "Waiting for the created epoch to be applied", () => this._anySpaceUpdate.waitForCondition(() => {
        const currentTimeframe = this._data.pipeline?.currentControlTimeframe;
        return (currentTimeframe && Timeframe.dependencies(targetTimeframe, currentTimeframe).isEmpty()) ?? false;
      }));
    }
  }
  async _getCredentials() {
    const stream = this._clientServices.services.SpacesService?.queryCredentials({
      spaceKey: this.key,
      noTail: true
    });
    invariant(stream, "SpacesService not available", {
      F: __dxlog_file,
      L: 538,
      S: this,
      A: [
        "stream",
        "'SpacesService not available'"
      ]
    });
    return await Stream.consumeData(stream);
  }
  async _getEpochs() {
    const credentials = await this._getCredentials();
    return credentials.filter((credential) => checkCredentialType(credential, "dxos.halo.credentials.Epoch"));
  }
  async _migrate() {
    await this._createEpoch({
      migration: CreateEpochRequest.Migration.MIGRATE_REFERENCES_TO_DXN
    });
    await this._databaseInitialized.wait();
    if (this._db.coreDatabase.getNumberOfInlineObjects() > 1) {
      await this._createEpoch({
        migration: CreateEpochRequest.Migration.FRAGMENT_AUTOMERGE_ROOT
      });
    }
  }
  async _setEdgeReplicationPreference(setting) {
    await this._clientServices.services.SpacesService.updateSpace({
      spaceKey: this.key,
      edgeReplication: setting
    }, {
      timeout: RPC_TIMEOUT
    });
  }
  _throwIfNotInitialized() {
    if (!this._initialized) {
      throw new Error("Space is not initialized.");
    }
  }
  async _export() {
    const { archive } = await this._clientServices.services.SpacesService.exportSpace({
      spaceId: this.id
    });
    return archive;
  }
};
_ts_decorate([
  trace.info()
], SpaceProxy.prototype, "_initializing", void 0);
_ts_decorate([
  trace.info()
], SpaceProxy.prototype, "_initialized", void 0);
_ts_decorate([
  trace.info()
], SpaceProxy.prototype, "key", null);
_ts_decorate([
  trace.info()
], SpaceProxy.prototype, "isOpen", null);
_ts_decorate([
  trace.info({
    depth: 2
  })
], SpaceProxy.prototype, "properties", null);
_ts_decorate([
  trace.info({
    enum: SpaceState
  })
], SpaceProxy.prototype, "_currentState", null);
_ts_decorate([
  synchronized
], SpaceProxy.prototype, "_processSpaceUpdate", null);
_ts_decorate([
  trace.span({
    showInBrowserTimeline: true
  })
], SpaceProxy.prototype, "_initializeDb", null);
_ts_decorate([
  synchronized
], SpaceProxy.prototype, "_destroy", null);
SpaceProxy = _ts_decorate([
  trace.resource()
], SpaceProxy);
var shouldUpdate = (prev, next) => {
  return prev.state !== next.state;
};
var shouldPipelineUpdate = (prev, next) => {
  return !isEqualWith(prev.pipeline, next.pipeline, loadashEqualityFn);
};
var shouldMembersUpdate = (prev, next) => {
  if (!next) {
    return false;
  }
  return !isEqualWith(prev, next, loadashEqualityFn);
};
var _inspectCustom;

export {
  SpaceProxy
};
//# sourceMappingURL=chunk-H47QBELA.mjs.map
