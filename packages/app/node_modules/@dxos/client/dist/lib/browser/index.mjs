import {
  Client,
  DXOS_VERSION
} from "./chunk-EW4WDN4K.mjs";
import {
  AgentClientServiceProvider,
  AgentManagerClient,
  ClientServicesProxy,
  FakeAgentHostingProvider,
  IFrameManager,
  LocalClientServices,
  SharedWorkerConnection,
  Shell,
  ShellManager,
  WorkerClientServices,
  createClientServices,
  fromAgent,
  fromHost,
  fromSocket,
  fromWorker,
  getUnixSocket
} from "./chunk-Y7RETDEH.mjs";
import "./chunk-4LGJGFVR.mjs";
import "./chunk-UFEX2AOY.mjs";

// packages/sdk/client/src/index.ts
import { Config, Defaults, Dynamics, Envs, Local, Remote, Storage } from "@dxos/config";
import { PublicKey } from "@dxos/keys";
import { AlreadyJoinedError, ApiError, CancelledError, DataCorruptionError, DatabaseError, EntityNotFoundError, InvalidConfigError, InvalidInvitationError, InvalidInvitationExtensionRoleError, IdentityNotInitializedError, InvalidStorageVersionError, RemoteServiceConnectionError, RemoteServiceConnectionTimeout, RpcClosedError, RpcNotOpenError, SystemError, UnknownModelError } from "@dxos/protocols";
import { SystemStatus } from "@dxos/protocols/proto/dxos/client/services";
import { ShellDisplay, ShellLayout } from "@dxos/protocols/proto/dxos/iframe";

// packages/sdk/client/src/util/helpers.ts
import { invariant } from "@dxos/invariant";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/util/helpers.ts";
var resolveRef = async (client, dxn, defaultSpace) => {
  const echoDxn = dxn?.asEchoDXN();
  if (echoDxn) {
    const space = echoDxn.spaceId ? client.spaces.get(echoDxn.spaceId) : defaultSpace;
    if (!space) {
      return void 0;
    }
    return space.db.getObjectById(echoDxn.echoId);
  }
  const queueDxn = dxn?.asQueueDXN();
  if (queueDxn) {
    const { spaceId, objectId } = dxn.asQueueDXN();
    invariant(objectId, "objectId missing", {
      F: __dxlog_file,
      L: 33,
      S: void 0,
      A: [
        "objectId",
        "'objectId missing'"
      ]
    });
    const queue = client.spaces.get(spaceId)?.queues.get(dxn);
    invariant(queue, "queue missing", {
      F: __dxlog_file,
      L: 35,
      S: void 0,
      A: [
        "queue",
        "'queue missing'"
      ]
    });
    return queue.objects.find((object) => object.id === objectId);
  }
  return void 0;
};
export {
  AgentClientServiceProvider,
  AgentManagerClient,
  AlreadyJoinedError,
  ApiError,
  CancelledError,
  Client,
  ClientServicesProxy,
  Config,
  DXOS_VERSION,
  DataCorruptionError,
  DatabaseError,
  Defaults,
  Dynamics,
  EntityNotFoundError,
  Envs,
  FakeAgentHostingProvider,
  IFrameManager,
  IdentityNotInitializedError,
  InvalidConfigError,
  InvalidInvitationError,
  InvalidInvitationExtensionRoleError,
  InvalidStorageVersionError,
  Local,
  LocalClientServices,
  PublicKey,
  Remote,
  RemoteServiceConnectionError,
  RemoteServiceConnectionTimeout,
  RpcClosedError,
  RpcNotOpenError,
  SharedWorkerConnection,
  Shell,
  ShellDisplay,
  ShellLayout,
  ShellManager,
  Storage,
  SystemError,
  SystemStatus,
  UnknownModelError,
  WorkerClientServices,
  createClientServices,
  fromAgent,
  fromHost,
  fromSocket,
  fromWorker,
  getUnixSocket,
  resolveRef
};
//# sourceMappingURL=index.mjs.map
