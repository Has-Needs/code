import { Resource } from '@dxos/context';
import type { Obj, Relation } from '@dxos/echo';
import { DXN, type QueueSubspaceTag, type SpaceId } from '@dxos/keys';
import type { QueueService } from './queue-service';
import type { Queue } from './types';
import { type Hypergraph } from '../hypergraph';
export interface QueueAPI {
    get<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(dxn: DXN): Queue<T>;
    create<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(options?: {
        subspaceTag?: QueueSubspaceTag;
    }): Queue<T>;
}
export declare class QueueFactory extends Resource implements QueueAPI {
    private readonly _spaceId;
    private readonly _graph;
    private readonly _queues;
    private _service?;
    constructor(_spaceId: SpaceId, _graph: Hypergraph);
    setService(service: QueueService): void;
    get<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(dxn: DXN): Queue<T>;
    create<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>({ subspaceTag, }?: {
        subspaceTag?: QueueSubspaceTag;
    }): Queue<T>;
}
//# sourceMappingURL=queue-factory.d.ts.map