import { Event } from '@dxos/async';
import { type QueryAST } from '@dxos/echo-protocol';
import { type QueryService } from '@dxos/protocols/proto/dxos/echo/query';
import type { CoreDatabase } from './core-database';
import { type QueryContext, type QueryResultEntry } from '../query';
/**
 * Services plain data queries from the CoreDatabase class
 */
export declare class CoreDatabaseQueryContext implements QueryContext {
    private readonly _coreDatabase;
    private readonly _queryService;
    private _lastResult;
    readonly changed: Event<void>;
    constructor(_coreDatabase: CoreDatabase, _queryService: QueryService);
    start(): void;
    stop(): void;
    getResults(): QueryResultEntry<any>[];
    run(query: QueryAST.Query): Promise<QueryResultEntry<any>[]>;
    update(query: QueryAST.Query): void;
    private _filterMapResult;
    private _filterMapCore;
    private _recursivelyJoinFields;
}
//# sourceMappingURL=core-database-query-context.d.ts.map