import { type Context, Resource } from '@dxos/context';
import { type PublicKey, type SpaceId } from '@dxos/keys';
import { type QueryService } from '@dxos/protocols/proto/dxos/echo/query';
import { type DataService } from '@dxos/protocols/proto/dxos/echo/service';
import { Hypergraph } from '../hypergraph';
import { EchoDatabaseImpl } from '../proxy-db';
import { QueueFactory, type QueueService } from '../queue';
export type EchoClientParams = {};
export type ConnectToServiceParams = {
    dataService: DataService;
    queryService: QueryService;
    queueService?: QueueService;
};
export type ConstructDatabaseParams = {
    spaceId: SpaceId;
    /** @deprecated Use spaceId */
    spaceKey: PublicKey;
    /**
     * Run a reactive query for a set of dynamic schema.
     * @default true
     */
    reactiveSchemaQuery?: boolean;
    /**
     * Preload all schema during open.
     * @default true
     */
    preloadSchemaOnOpen?: boolean;
    /**
     * Space proxy reference for SDK compatibility.
     */
    owningObject?: unknown;
};
/**
 * ECHO client.
 * Manages a set of databases and builds a unified hypergraph.
 * Connects to the ECHO host via an ECHO service.
 */
export declare class EchoClient extends Resource {
    private readonly _graph;
    private readonly _databases;
    private _dataService;
    private _queryService;
    private _queuesService;
    private _indexQuerySourceProvider;
    constructor(_?: EchoClientParams);
    get graph(): Hypergraph;
    get openDatabases(): Iterable<EchoDatabaseImpl>;
    /**
     * Connects to the ECHO service.
     * Must be called before open.
     */
    connectToService({ dataService, queryService, queueService }: ConnectToServiceParams): void;
    disconnectFromService(): void;
    protected _open(ctx: Context): Promise<void>;
    protected _close(ctx: Context): Promise<void>;
    constructDatabase({ spaceId, owningObject, reactiveSchemaQuery, preloadSchemaOnOpen, spaceKey, }: ConstructDatabaseParams): EchoDatabaseImpl;
    constructQueueFactory(spaceId: SpaceId): QueueFactory;
    private _loadObjectFromDocument;
}
//# sourceMappingURL=echo-client.d.ts.map