import { Obj, type Ref, type Relation } from '@dxos/echo';
import { type DXN, type ObjectId } from '@dxos/keys';
import type { QueueService } from './queue-service';
import type { Queue } from './types';
/**
 * Client-side view onto an EDGE queue.
 */
export declare class QueueImpl<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any> implements Queue<T> {
    private readonly _service;
    private readonly _refResolver;
    private readonly _dxn;
    private readonly _signal;
    private readonly _subspaceTag;
    private readonly _spaceId;
    private readonly _queueId;
    private _objectCache;
    private _objects;
    private _isLoading;
    private _error;
    private _refreshId;
    private _querying;
    constructor(_service: QueueService, _refResolver: Ref.Resolver, _dxn: DXN);
    toJSON(): {
        dxn: DXN.String;
        objects: number;
    };
    get dxn(): DXN;
    get isLoading(): boolean;
    get error(): Error | null;
    get objects(): T[];
    /**
     * Insert into queue with optimistic update.
     */
    append(items: T[]): Promise<void>;
    delete(ids: string[]): Promise<void>;
    queryObjects(): Promise<T[]>;
    getObjectsById(ids: ObjectId[]): Promise<(T | null)[]>;
    /**
     * Reload state from server.
     * Overrides optimistic updates.
     */
    refresh(): Promise<void>;
}
//# sourceMappingURL=queue.d.ts.map