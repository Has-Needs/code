import { type BaseEchoObject, type BaseObject, type RelationSourceTargetRefs } from '@dxos/echo-schema';
import { type Live } from '@dxos/live-object';
import type { AnyLiveObject } from './echo-handler';
/**
 * @deprecated Use {@link @dxos/echo#Relation.Any} instead.
 */
export type AnyLiveRelation<T extends BaseObject> = Live<T> & BaseEchoObject & RelationSourceTargetRefs;
/**
 * @deprecated Use {@link @dxos/echo#Relation.isRelation} instead.
 */
export declare const isRelation: <T extends BaseObject>(object: AnyLiveObject<T>) => object is AnyLiveRelation<T>;
/**
 * @deprecated Use {@link @dxos/echo#Relation.getSource} instead.
 * @returns Source ref from a relation.
 * @throws If the object is not a relation.
 */
export declare const getSource: (relation: AnyLiveObject<any>) => AnyLiveObject<any>;
/**
 * @deprecated Use {@link @dxos/echo#Relation.getTarget} instead.
 * @returns Target ref from a relation.
 * @throws If the object is not a relation.
 */
export declare const getTarget: (relation: AnyLiveObject<any>) => AnyLiveObject<any>;
//# sourceMappingURL=relations.d.ts.map