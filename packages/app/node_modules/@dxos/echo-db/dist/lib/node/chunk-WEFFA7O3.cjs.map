{
  "version": 3,
  "sources": ["../../../src/guarded-scope.ts", "../../../src/query/query-result.ts", "../../../src/query/api.ts", "../../../src/query/util.ts", "../../../src/query/graph-query-context.ts", "../../../src/core-db/types.ts", "../../../src/core-db/object-core.ts", "../../../src/core-db/doc-semaphore.ts", "../../../src/automerge/doc-handle-proxy.ts", "../../../src/automerge/repo-proxy.ts", "../../../src/core-db/core-database.ts", "../../../src/core-db/automerge-doc-loader.ts", "../../../src/core-db/core-database-query-context.ts", "../../../src/core-db/util.ts", "../../../src/echo-handler/echo-handler.ts", "../../../src/echo-handler/devtools-formatter.ts", "../../../src/echo-handler/echo-array.ts", "../../../src/echo-handler/echo-proxy-target.ts", "../../../src/echo-handler/clone.ts", "../../../src/echo-handler/edit-history.ts", "../../../src/echo-handler/relations.ts", "../../../src/echo-handler/util.ts", "../../../src/echo-handler/doc-accessor.ts", "../../../src/echo-handler/version.ts", "../../../src/echo-handler/subscription.ts", "../../../src/hypergraph.ts", "../../../src/proxy-db/echo-schema-registry.ts", "../../../src/proxy-db/schema-registry-prepared-query.ts", "../../../src/proxy-db/database.ts", "../../../src/proxy-db/load-object.ts", "../../../src/proxy-db/object-migration.ts", "../../../src/queue/memory-queue.ts", "../../../src/queue/queue.ts", "../../../src/queue/queue-factory.ts", "../../../src/queue/queue-service.ts", "../../../src/queue/types.ts", "../../../src/client/echo-client.ts", "../../../src/client/index-query-source-provider.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport { registerSignalsRuntime, type GenericSignal } from '@dxos/echo-signals/runtime';\n\n//\n// This module is used to guard against ECHO subscribing to signals within it's internals.\n//\n\nlet areSignalsProhibited = false;\n\nlet inUntrackedScope = false;\n\nclass GuardSignal implements GenericSignal {\n  constructor(public readonly debugInfo: unknown) {}\n\n  notifyRead(): void {\n    // Separate if statements so it's possible to place a debugger breakpoint on `!inUntrackedScope` condition.\n    if (inUntrackedScope) {\n      return;\n    }\n\n    if (areSignalsProhibited) {\n      throw new Error('Signal read is prohibited in this scope');\n    }\n  }\n\n  notifyWrite(): void {\n    // Separate if statements so it's possible to place a debugger breakpoint on `!inUntrackedScope` condition.\n    if (inUntrackedScope) {\n      return;\n    }\n\n    if (areSignalsProhibited) {\n      throw new Error('Signal write is prohibited in this scope');\n    }\n  }\n}\n\nregisterSignalsRuntime({\n  createSignal: (debugInfo) => new GuardSignal(debugInfo),\n  batch: (cb) => {\n    cb();\n  },\n  untracked: (cb) => {\n    const prev = inUntrackedScope;\n    try {\n      inUntrackedScope = true;\n      return cb();\n    } finally {\n      inUntrackedScope = prev;\n    }\n  },\n});\n\n/**\n * Prohibit signal actions within the given scope.\n */\nexport const prohibitSignalActions = <T>(cb: () => T) => {\n  try {\n    areSignalsProhibited = true;\n    return cb();\n  } finally {\n    areSignalsProhibited = false;\n  }\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { Event, type CleanupFn } from '@dxos/async';\nimport { StackTrace } from '@dxos/debug';\nimport { type QueryAST } from '@dxos/echo-protocol';\nimport { type AnyEchoObject } from '@dxos/echo-schema';\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\nimport { invariant } from '@dxos/invariant';\nimport { type PublicKey, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { trace } from '@dxos/tracing';\nimport { isNonNullable } from '@dxos/util';\n\nimport { type Query } from './api';\nimport { prohibitSignalActions } from '../guarded-scope';\n\n// TODO(burdon): Multi-sort option.\nexport type Sort<T extends AnyEchoObject> = (a: T, b: T) => -1 | 0 | 1;\n\nexport type QueryResultEntry<T extends AnyEchoObject = AnyEchoObject> = {\n  id: string;\n\n  spaceId: SpaceId;\n\n  /** @deprecated Use spaceId */\n  spaceKey: PublicKey;\n\n  /**\n   * May not be present for remote results.\n   */\n  object?: T;\n\n  match?: {\n    // TODO(dmaretskyi): text positional info.\n\n    /**\n     * Higher means better match.\n     */\n    rank: number;\n  };\n\n  /**\n   * Query resolution metadata.\n   */\n  // TODO(dmaretskyi): Rename to meta?\n  resolution?: {\n    // TODO(dmaretskyi): Make this more generic.\n    source: 'remote' | 'local' | 'index';\n\n    /**\n     * Query resolution time in milliseconds.\n     */\n    time: number;\n  };\n};\n\nexport type OneShotQueryResult<T extends AnyEchoObject = AnyEchoObject> = {\n  results: QueryResultEntry<T>[];\n  objects: T[];\n};\n\nexport interface QueryContext<T extends AnyEchoObject = AnyEchoObject> {\n  getResults(): QueryResultEntry<T>[];\n\n  // TODO(dmaretskyi): Update info?\n  changed: Event<void>;\n\n  /**\n   * One-shot query.\n   */\n  run(query: QueryAST.Query, opts?: QueryRunOptions): Promise<QueryResultEntry<T>[]>;\n\n  /**\n   * Set the filter and trigger continuous updates.\n   */\n  update(query: QueryAST.Query): void;\n\n  /**\n   * Start creating query sources and firing events.\n   *\n   * `start` and `stop` are re-entrant.\n   */\n  // TODO(dmaretskyi): Make async.\n  start(): void;\n\n  /**\n   * Clear any resources associated with the query.\n   *\n   * `start` and `stop` are re-entrant.\n   */\n  // TODO(dmaretskyi): Make async.\n  stop(): void;\n}\n\nexport type QuerySubscriptionOptions = {\n  /**\n   * Fire the callback immediately.\n   */\n  fire?: boolean;\n};\n\nexport type QueryRunOptions = {\n  timeout?: number;\n};\n\n/**\n * Predicate based query.\n */\nexport class QueryResult<T extends AnyEchoObject = AnyEchoObject> {\n  private readonly _query: Query<T>;\n  private readonly _signal = compositeRuntime.createSignal();\n  private readonly _event = new Event<QueryResult<T>>();\n  private readonly _diagnostic: QueryDiagnostic;\n\n  private _isActive = false;\n  private _resultCache?: QueryResultEntry<T>[] = undefined;\n  private _objectCache?: T[] = undefined;\n  private _subscribers: number = 0;\n\n  constructor(\n    private readonly _queryContext: QueryContext<T>,\n    query: Query<T>,\n  ) {\n    this._query = query;\n\n    this._queryContext.changed.on(() => {\n      if (this._recomputeResult()) {\n        // Clear `prohibitSignalActions` to allow the signal to be emitted.\n        compositeRuntime.untracked(() => {\n          this._event.emit(this);\n          this._signal.notifyWrite();\n        });\n      }\n    });\n    this._queryContext.update(query.ast);\n\n    this._diagnostic = {\n      isActive: this._isActive,\n      filter: JSON.stringify(this._query),\n      creationStack: new StackTrace(),\n    };\n    QUERIES.add(this._diagnostic);\n\n    log('construct', { filter: this._query.ast });\n  }\n\n  get query(): Query<T> {\n    return this._query;\n  }\n\n  get results(): QueryResultEntry<T>[] {\n    this._checkQueryIsRunning();\n    this._signal.notifyRead();\n    this._ensureCachePresent();\n    return this._resultCache!;\n  }\n\n  get objects(): T[] {\n    this._checkQueryIsRunning();\n    this._signal.notifyRead();\n    this._ensureCachePresent();\n    return this._objectCache!;\n  }\n\n  /**\n   * Execute the query once and return the results.\n   * Does not subscribe to updates.\n   */\n  async run(timeout: { timeout?: number } = { timeout: 30_000 }): Promise<OneShotQueryResult<T>> {\n    const filteredResults = await this._queryContext.run(this._query.ast, { timeout: timeout.timeout });\n\n    return {\n      results: filteredResults,\n      objects: this._uniqueObjects(filteredResults),\n    };\n  }\n\n  async first(opts?: { timeout?: number }): Promise<T> {\n    const { objects } = await this.run(opts);\n    if (objects.length === 0) {\n      throw new Error('No objects found');\n    }\n\n    return objects[0];\n  }\n\n  /**\n   * Runs the query synchronously and returns all results.\n   * WARNING: This method will only return the data already cached and may return incomplete results.\n   * Use `this.run()` for a complete list of results stored on-disk.\n   */\n  runSync(): QueryResultEntry<T>[] {\n    this._ensureCachePresent();\n    return this._resultCache!;\n  }\n\n  /**\n   * Subscribe to query results.\n   * Updates only when the identity or the order of the objects changes.\n   * Does not update when the object properties change.\n   */\n  // TODO(burdon): Change to SubscriptionHandle (make uniform).\n  subscribe(callback?: (query: QueryResult<T>) => void, opts?: QuerySubscriptionOptions): CleanupFn {\n    invariant(!(!callback && opts?.fire), 'Cannot fire without a callback.');\n\n    log('subscribe', { filter: this._query.ast, active: this._isActive });\n    this._subscribers++;\n    const unsubscribeFromEvent = callback ? this._event.on(callback) : undefined;\n    this._handleQueryLifecycle();\n\n    const unsubscribe = () => {\n      log('unsubscribe', { filter: this._query.ast, active: this._isActive });\n      this._subscribers--;\n      unsubscribeFromEvent?.();\n      this._handleQueryLifecycle();\n    };\n\n    if (callback && opts?.fire) {\n      try {\n        callback(this);\n      } catch (err) {\n        unsubscribe();\n        throw err;\n      }\n    }\n\n    return unsubscribe;\n  }\n\n  private _ensureCachePresent(): void {\n    if (!this._resultCache) {\n      prohibitSignalActions(() => {\n        // TODO(dmaretskyi): Clean up getters in the internal signals so they don't use the Proxy API and don't hit the signals.\n        compositeRuntime.untracked(() => {\n          this._recomputeResult();\n        });\n      });\n    }\n  }\n\n  /**\n   * @returns true if the result cache was updated.\n   */\n  private _recomputeResult(): boolean {\n    // TODO(dmaretskyi): Make results unique too.\n    const results = this._queryContext.getResults();\n    const objects = this._uniqueObjects(results);\n\n    const changed =\n      !this._objectCache ||\n      this._objectCache.length !== objects.length ||\n      this._objectCache.some((obj, index) => obj.id !== objects[index].id);\n\n    log('recomputeResult', {\n      old: this._objectCache?.map((obj) => obj.id),\n      new: objects.map((obj) => obj.id),\n      changed,\n    });\n\n    this._resultCache = results;\n    this._objectCache = objects;\n    return changed;\n  }\n\n  private _uniqueObjects(results: QueryResultEntry<T>[]): T[] {\n    const seen = new Set<unknown>();\n    return results\n      .map((result) => result.object)\n      .filter(isNonNullable)\n      .filter((object: any) => {\n        // Assuming objects have `id` property we can use to dedup.\n        if (object.id == null) {\n          return true;\n        }\n\n        if (seen.has(object.id)) {\n          return false;\n        }\n        seen.add(object.id);\n        return true;\n      });\n  }\n\n  private _handleQueryLifecycle(): void {\n    if (this._subscribers === 0 && this._isActive) {\n      log('stop query', { filter: this._query.ast });\n      this._stop();\n    } else if (this._subscribers > 0 && !this._isActive) {\n      log('start query', { filter: this._query.ast });\n      this._start();\n    }\n  }\n\n  private _start(): void {\n    this._isActive = true;\n    this._queryContext.start();\n    this._diagnostic.isActive = true;\n  }\n\n  private _stop(): void {\n    this._queryContext.stop();\n    this._isActive = false;\n    this._diagnostic.isActive = false;\n  }\n\n  private _checkQueryIsRunning(): void {\n    if (!this._isActive) {\n      throw new Error(\n        'Query must have at least 1 subscriber for `.objects` and `.results` to be used. Use query.run() for single-use result retrieval.',\n      );\n    }\n  }\n}\n\n// NOTE: Make sure this doesn't keep references to the queries so that they can be garbage collected.\ntype QueryDiagnostic = {\n  isActive: boolean;\n  filter: string;\n  creationStack: StackTrace;\n};\n\nconst QUERIES = new Set<QueryDiagnostic>();\n\ntrace.diagnostic({\n  id: 'client-queries',\n  name: 'Queries (Client)',\n  fetch: () => {\n    return Array.from(QUERIES).map((query) => {\n      return {\n        isActive: query.isActive,\n        filter: query.filter,\n        creationStack: query.creationStack.getStack(),\n      };\n    });\n  },\n});\n", "//\n// Copyright 2025 DXOS.org\n//\nimport { Filter, Query } from '@dxos/echo';\nimport { type PublicKey, type SpaceId } from '@dxos/keys';\nimport { type Live } from '@dxos/live-object';\nimport { log } from '@dxos/log';\nimport { QueryOptions as QueryOptionsProto } from '@dxos/protocols/proto/dxos/echo/filter';\n\nimport { type QueryResult } from './query-result';\n\nexport { Filter, Query };\n\n/**\n * `query` API function declaration.\n */\nexport interface QueryFn {\n  // TODO(dmaretskyi): Remove query options.\n  <Q extends Query.Any>(query: Q, options?: QueryOptions | undefined): QueryResult<Live<Query.Type<Q>>>;\n  <F extends Filter.Any>(filter: F, options?: QueryOptions | undefined): QueryResult<Live<Filter.Type<F>>>;\n}\n\n/**\n * Defines the result format of the query.\n */\nexport enum ResultFormat {\n  /**\n   * Plain javascript objects.\n   * No live updates.\n   */\n  Plain = 'plain',\n\n  /**\n   * Live objects that update automatically with mutations in the database.\n   * Support signal notifications.\n   */\n  Live = 'live',\n\n  /**\n   * Direct access to the automerge document.\n   */\n  AutomergeDocAccessor = 'automergeDocAccessor',\n}\n\n/**\n * @deprecated Use `Query.options` instead.\n */\nexport type QueryOptions = {\n  /**\n   * Query only in specific spaces.\n   */\n  // TODO(dmaretskyi): Change this to SpaceId.\n  spaceIds?: string[];\n  /**\n   * Controls how deleted items are filtered.\n   *\n   * Options:\n   *   - proto3_optional = true\n   */\n  deleted?: QueryOptionsProto.ShowDeletedOption;\n\n  /**\n   * Query only local spaces, or remote on agent.\n   * @default `QueryOptions.DataLocation.LOCAL`\n   *\n   * Options:\n   *   - proto3_optional = true\n   */\n  dataLocation?: QueryOptionsProto.DataLocation;\n\n  /**\n   * Specify which references are to inline in the result.\n   */\n  include?: QueryJoinSpec;\n\n  /**\n   * Return only the first `limit` results.\n   */\n  limit?: number;\n\n  /**\n   * @deprecated Stick to live format.\n   */\n  format?: ResultFormat;\n\n  /**\n   * @deprecated Use `spaceIds` instead.\n   */\n  spaces?: PublicKey[];\n};\n\nexport interface QueryJoinSpec extends Record<string, true | QueryJoinSpec> {}\n\nexport const optionsToProto = (options: QueryOptions): QueryOptionsProto => {\n  return {\n    spaceIds: options.spaceIds,\n    deleted: options.deleted,\n    dataLocation: options.dataLocation,\n    include: options.include,\n    limit: options.limit,\n    spaces: options.spaces,\n  };\n};\n\ntype NormalizeQueryOptions = {\n  defaultSpaceId?: SpaceId;\n};\n\nexport const normalizeQuery = (\n  query_: unknown | undefined,\n  userOptions: QueryOptions | undefined,\n  opts?: NormalizeQueryOptions,\n) => {\n  let query: Query.Any;\n\n  if (Query.is(query_)) {\n    query = query_;\n  } else if (Filter.is(query_)) {\n    query = Query.select(query_);\n  } else if (query_ === undefined) {\n    query = Query.select(Filter.everything());\n  } else if (typeof query_ === 'object' && query_ !== null) {\n    query = Query.select(Filter._props(query_));\n  } else if (typeof query_ === 'function') {\n    throw new TypeError('Functions are not supported as queries');\n  } else {\n    log.error('Invalid query', { query: query_ });\n    throw new TypeError('Invalid query');\n  }\n\n  if (userOptions) {\n    query = query.options({\n      spaceIds: userOptions.spaceIds ?? (opts?.defaultSpaceId ? [opts.defaultSpaceId] : undefined),\n      deleted:\n        userOptions?.deleted === undefined\n          ? undefined\n          : userOptions?.deleted === QueryOptionsProto.ShowDeletedOption.SHOW_DELETED\n            ? 'include'\n            : userOptions?.deleted === QueryOptionsProto.ShowDeletedOption.HIDE_DELETED\n              ? 'exclude'\n              : 'only',\n    });\n  }\n\n  return query;\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { QueryAST } from '@dxos/echo-protocol';\nimport { SpaceId } from '@dxos/keys';\n\n/**\n * Lists spaces this query will select from.\n */\nexport const getTargetSpacesForQuery = (query: QueryAST.Query): SpaceId[] => {\n  const spaces = new Set<SpaceId>();\n\n  const visitor = (node: QueryAST.Query) => {\n    if (node.type === 'options') {\n      if (node.options.spaceIds) {\n        for (const spaceId of node.options.spaceIds) {\n          spaces.add(SpaceId.make(spaceId));\n        }\n      }\n    }\n    QueryAST.visit(node, visitor);\n  };\n  visitor(query);\n  return [...spaces];\n};\n\n/**\n * Extracts the filter and options from a query.\n * Supports Select(...) and Options(Select(...)) queries.\n */\nexport const isSimpleSelectionQuery = (\n  query: QueryAST.Query,\n): { filter: QueryAST.Filter; options?: QueryAST.QueryOptions } | null => {\n  switch (query.type) {\n    case 'options': {\n      const maybeFilter = isSimpleSelectionQuery(query.query);\n      if (!maybeFilter) {\n        return null;\n      }\n      return { filter: maybeFilter.filter, options: query.options };\n    }\n    case 'select': {\n      return { filter: query.filter, options: undefined };\n    }\n    default: {\n      return null;\n    }\n  }\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { isNotUndefined } from 'effect/Predicate';\n\nimport { asyncTimeout, Event } from '@dxos/async';\nimport { Context } from '@dxos/context';\nimport { filterMatchObject } from '@dxos/echo-pipeline/filter';\nimport { type QueryAST } from '@dxos/echo-protocol';\nimport { type ObjectId } from '@dxos/echo-schema';\nimport { log } from '@dxos/log';\n\nimport type { QueryContext, QueryResultEntry, QueryRunOptions } from './query-result';\nimport { getTargetSpacesForQuery, isSimpleSelectionQuery } from './util';\nimport { type ItemsUpdatedEvent, type ObjectCore } from '../core-db';\nimport { type AnyLiveObject } from '../echo-handler';\nimport { prohibitSignalActions } from '../guarded-scope';\nimport { type EchoDatabaseImpl } from '../proxy-db';\n\nexport type GraphQueryContextParams = {\n  // TODO(dmaretskyi): Make async.\n  onStart: () => void;\n\n  onStop: () => void;\n};\n\n/**\n * Query data source.\n * Implemented by a space or a remote agent.\n * Each query has a separate instance.\n */\nexport interface QuerySource {\n  // TODO(dmaretskyi): Update info?\n  changed: Event<void>;\n\n  // TODO(dmaretskyi): Make async.\n  open(): void;\n\n  // TODO(dmaretskyi): Make async.\n  close(): void;\n\n  /**\n   * Synchronous query.\n   */\n  getResults(): QueryResultEntry[];\n\n  /**\n   * One-shot query.\n   */\n  run(query: QueryAST.Query): Promise<QueryResultEntry[]>;\n\n  /**\n   * Set the filter and trigger continuous updates.\n   */\n  update(query: QueryAST.Query): void;\n}\n\n/**\n * Aggregates multiple query sources.\n */\nexport class GraphQueryContext implements QueryContext {\n  private readonly _sources = new Set<QuerySource>();\n\n  private _query?: QueryAST.Query = undefined;\n\n  private _ctx?: Context = undefined;\n\n  public changed = new Event<void>();\n\n  constructor(private readonly _params: GraphQueryContextParams) {}\n\n  get sources(): ReadonlySet<QuerySource> {\n    return this._sources;\n  }\n\n  start() {\n    this._ctx = new Context();\n    this._params.onStart();\n    for (const source of this._sources) {\n      if (this._query) {\n        source.update(this._query);\n      }\n\n      // Subscribing after `update` means that we will intentionally skip any `changed` events generated by update.\n      source.changed.on(this._ctx, () => {\n        this.changed.emit();\n      });\n    }\n  }\n\n  stop() {\n    void this._ctx?.dispose();\n    for (const source of this.sources) {\n      source.close();\n    }\n    this._params.onStop();\n  }\n\n  getResults(): QueryResultEntry[] {\n    if (!this._query) {\n      return [];\n    }\n    return Array.from(this._sources).flatMap((source) => source.getResults());\n  }\n\n  async run(query: QueryAST.Query, { timeout = 30_000 }: QueryRunOptions = {}): Promise<QueryResultEntry[]> {\n    const runTasks = [...this._sources.values()].map(async (s) => {\n      try {\n        log('run query', { resolver: Object.getPrototypeOf(s).constructor.name });\n        const results = await asyncTimeout<QueryResultEntry[]>(s.run(query), timeout);\n        log('run query results', { resolver: Object.getPrototypeOf(s).constructor.name, count: results.length });\n        return results;\n      } catch (err) {\n        log('run query error', { resolver: Object.getPrototypeOf(s).constructor.name, error: err });\n        throw err;\n      }\n    });\n    if (runTasks.length === 0) {\n      return [];\n    }\n    const mergedResults = (await Promise.all(runTasks)).flatMap((r) => r ?? []);\n    return mergedResults;\n  }\n\n  update(query: QueryAST.Query): void {\n    this._query = query;\n    for (const source of this._sources) {\n      source.update(query);\n    }\n  }\n\n  addQuerySource(querySource: QuerySource) {\n    this._sources.add(querySource);\n    if (this._ctx != null) {\n      querySource.changed.on(this._ctx, () => {\n        this.changed.emit();\n      });\n    }\n    if (this._query) {\n      querySource.update(this._query);\n    }\n  }\n}\n\n/**\n * Queries objects from the local working set.\n */\nexport class SpaceQuerySource implements QuerySource {\n  public readonly changed = new Event<void>();\n\n  private _ctx: Context = new Context();\n  private _query: QueryAST.Query | undefined = undefined;\n  private _results?: QueryResultEntry<AnyLiveObject<any>>[] = undefined;\n\n  constructor(private readonly _database: EchoDatabaseImpl) {}\n\n  get spaceId() {\n    return this._database.spaceId;\n  }\n\n  get spaceKey() {\n    return this._database.spaceKey;\n  }\n\n  open(): void {}\n\n  close() {\n    this._results = undefined;\n    void this._ctx.dispose().catch(() => {});\n  }\n\n  private _onUpdate = (updateEvent: ItemsUpdatedEvent) => {\n    if (!this._query) {\n      return;\n    }\n\n    prohibitSignalActions(() => {\n      // TODO(dmaretskyi): Could be optimized to recompute changed only to the relevant space.\n      const changed = updateEvent.itemsUpdated.some(({ id: objectId }) => {\n        const core = this._database.coreDatabase.getObjectCoreById(objectId, { load: false });\n\n        const trivial = isSimpleSelectionQuery(this._query!);\n        if (!trivial) {\n          return false;\n        }\n\n        const { filter, options } = trivial;\n\n        return (\n          !this._results ||\n          this._results.find((result) => result.id === objectId) ||\n          (core && this._filterCore(core, filter, options))\n        );\n      });\n\n      if (changed) {\n        this._results = undefined;\n        this.changed.emit();\n      }\n    });\n  };\n\n  async run(query: QueryAST.Query): Promise<QueryResultEntry<AnyLiveObject<any>>[]> {\n    if (!this._isValidSourceForQuery(query)) {\n      return [];\n    }\n\n    const simple = isSimpleSelectionQuery(query);\n    if (!simple) {\n      return [];\n    }\n\n    const { filter, options } = simple;\n    const results: QueryResultEntry<AnyLiveObject<any>>[] = [];\n    if (isObjectIdFilter(filter)) {\n      results.push(\n        ...(await this._database._coreDatabase.batchLoadObjectCores((filter as QueryAST.FilterObject).id as ObjectId[]))\n          .filter(isNotUndefined)\n          .filter((core) => this._filterCore(core, filter, options))\n          .map((core) => this._mapCoreToResult(core)),\n      );\n    }\n\n    prohibitSignalActions(() => {\n      results.push(...this._queryWorkingSet(filter, options));\n    });\n\n    // Dedup\n    const map = new Map<string, QueryResultEntry<AnyLiveObject<any>>>();\n    for (const result of results) {\n      map.set(result.id, result);\n    }\n\n    return [...map.values()];\n  }\n\n  getResults(): QueryResultEntry<AnyLiveObject<any>>[] {\n    if (!this._query) {\n      return [];\n    }\n\n    const trivial = isSimpleSelectionQuery(this._query);\n    if (!trivial) {\n      return [];\n    }\n\n    const { filter, options } = trivial;\n\n    if (!this._results) {\n      prohibitSignalActions(() => {\n        this._results = this._queryWorkingSet(filter, options);\n      });\n    }\n\n    return this._results!;\n  }\n\n  update(query: QueryAST.Query): void {\n    if (!this._isValidSourceForQuery(query)) {\n      this._query = undefined;\n      return;\n    }\n\n    void this._ctx.dispose().catch(() => {});\n    this._ctx = new Context();\n    this._query = query;\n\n    this._database.coreDatabase._updateEvent.on(this._ctx, this._onUpdate);\n\n    this._results = undefined;\n    this.changed.emit();\n  }\n\n  /**\n   * Queries from already loaded objects.\n   */\n  private _queryWorkingSet(\n    filter: QueryAST.Filter,\n    options: QueryAST.QueryOptions | undefined,\n  ): QueryResultEntry<AnyLiveObject<any>>[] {\n    const filteredCores = isObjectIdFilter(filter)\n      ? (filter as QueryAST.FilterObject)\n          .id!.map((id) => this._database.coreDatabase.getObjectCoreById(id, { load: true }))\n          .filter(isNotUndefined)\n          .filter((core) => this._filterCore(core, filter, options))\n      : this._database.coreDatabase.allObjectCores().filter((core) => this._filterCore(core, filter, options));\n\n    return filteredCores.map((core) => this._mapCoreToResult(core));\n  }\n\n  private _isValidSourceForQuery(query: QueryAST.Query): boolean {\n    const targetSpaces = getTargetSpacesForQuery(query);\n    // Disabled by spaces filter.\n    if (targetSpaces.length > 0 && !targetSpaces.includes(this.spaceId)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private _mapCoreToResult(core: ObjectCore): QueryResultEntry<AnyLiveObject<any>> {\n    return {\n      id: core.id,\n      spaceId: this.spaceId,\n      spaceKey: this.spaceKey,\n      object: this._database.getObjectById(core.id, { deleted: true }),\n      resolution: {\n        source: 'local',\n        time: 0,\n      },\n    };\n  }\n\n  private _filterCore(core: ObjectCore, filter: QueryAST.Filter, options: QueryAST.QueryOptions | undefined): boolean {\n    return (\n      filterCoreByDeletedFlag(core, options) &&\n      filterMatchObject(filter, {\n        id: core.id,\n        doc: core.getObjectStructure(),\n        spaceId: this.spaceId,\n      })\n    );\n  }\n}\n\nconst isObjectIdFilter = (filter: QueryAST.Filter) => {\n  return filter.type === 'object' && filter.id !== undefined && filter.id.length > 0;\n};\n\nconst filterCoreByDeletedFlag = (core: ObjectCore, options: QueryAST.QueryOptions | undefined): boolean => {\n  switch (options?.deleted) {\n    case undefined:\n    case 'exclude':\n      return !core.isDeleted();\n    case 'include':\n      return true;\n    case 'only':\n      return core.isDeleted();\n  }\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport type { ChangeFn, ChangeOptions, Doc, Heads } from '@automerge/automerge';\n\nimport { type Reference } from '@dxos/echo-protocol';\nimport { get } from '@dxos/util';\n\nexport type DecodedAutomergePrimaryValue =\n  | undefined\n  | string\n  | number\n  | boolean\n  | DecodedAutomergePrimaryValue[]\n  | { [key: string]: DecodedAutomergePrimaryValue }\n  | Reference;\n\n//\n// Automerge types.\n// TODO(burdon): Factor out to new low-level type package: @dxos/types?\n//\n\nexport type KeyPath = readonly (string | number)[];\n\nexport interface IDocHandle<T = any> {\n  doc(): Doc<T> | undefined;\n  change(callback: ChangeFn<T>, options?: ChangeOptions<T>): void;\n  changeAt(heads: Heads, callback: ChangeFn<T>, options?: ChangeOptions<T>): Heads | undefined;\n  addListener(event: 'change', listener: () => void): void;\n  removeListener(event: 'change', listener: () => void): void;\n}\n\n// TODO(burdon): Rename ValueAccessor?\nexport interface DocAccessor<T = any> {\n  get handle(): IDocHandle<T>;\n  get path(): KeyPath;\n}\n\n// TODO(burdon): Extract function.\nexport const DocAccessor = {\n  getValue: <T>(accessor: DocAccessor): T => get(accessor.handle.doc(), accessor.path) as T,\n};\n\nexport const isValidKeyPath = (value: unknown): value is KeyPath =>\n  Array.isArray(value) && value.every((v) => typeof v === 'string' || typeof v === 'number');\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type ChangeFn, type ChangeOptions, type Doc, type Heads, next as A } from '@automerge/automerge';\nimport { type DocHandleChangePayload } from '@automerge/automerge-repo';\nimport type { InspectOptionsStylized, inspect } from 'util';\n\nimport { Event } from '@dxos/async';\nimport { inspectCustom } from '@dxos/debug';\nimport {\n  decodeReference,\n  encodeReference,\n  isEncodedReference,\n  type ObjectStructure,\n  Reference,\n  type DatabaseDirectory,\n  DATA_NAMESPACE,\n} from '@dxos/echo-protocol';\nimport { ObjectId, EntityKind, type CommonObjectData, type ObjectMeta } from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { DXN } from '@dxos/keys';\nimport { isLiveObject } from '@dxos/live-object';\nimport { log } from '@dxos/log';\nimport { setDeep, defer, getDeep, throwUnhandledError, deepMapValues } from '@dxos/util';\n\nimport { type CoreDatabase } from './core-database';\nimport { docChangeSemaphore } from './doc-semaphore';\nimport { isValidKeyPath, type DocAccessor, type DecodedAutomergePrimaryValue, type KeyPath } from './types';\nimport { type DocHandleProxy } from '../automerge';\n\n// Strings longer than this will have collaborative editing disabled for performance reasons.\n// TODO(dmaretskyi): Remove in favour of explicitly specifying this in the API/Schema.\nconst STRING_CRDT_LIMIT = 300_000;\n\nexport const META_NAMESPACE = 'meta';\nconst SYSTEM_NAMESPACE = 'system';\n\nexport type ObjectCoreOptions = {\n  type?: Reference;\n  meta?: ObjectMeta;\n  immutable?: boolean;\n};\n\n/**\n *\n */\n// TODO(burdon): Comment.\nexport class ObjectCore {\n  // TODO(dmaretskyi): Start making some of those fields private.\n  // TODO(dmaretskyi): Create a discriminated union for the bound/not bound states.\n\n  /**\n   * Id of the ECHO object.\n   */\n  public id = ObjectId.random();\n\n  /**\n   * Set if when the object is bound to a database.\n   */\n  public database?: CoreDatabase | undefined;\n\n  /**\n   * Set if when the object is not bound to a database.\n   */\n  public doc?: Doc<ObjectStructure> | undefined;\n\n  /**\n   * Set if when the object is bound to a database.\n   */\n  public docHandle?: DocHandleProxy<DatabaseDirectory> = undefined;\n\n  /**\n   * Key path at where we are mounted in the `doc` or `docHandle`.\n   * The value at path must be of type `ObjectStructure`.\n   */\n  public mountPath: KeyPath = [];\n\n  /**\n   * Handles link resolution as well as manual changes.\n   */\n  public readonly updates = new Event();\n\n  toString(): string {\n    return `ObjectCore { id: ${this.id} }`;\n  }\n\n  [inspectCustom](depth: number, options: InspectOptionsStylized, inspectFn: typeof inspect): string {\n    return `ObjectCore ${inspectFn({ id: this.id }, options)}`;\n  }\n\n  /**\n   * Create local doc with initial state from this object.\n   */\n  initNewObject(initialProps?: unknown, opts?: ObjectCoreOptions): void {\n    invariant(!this.docHandle && !this.doc);\n\n    initialProps ??= {};\n\n    this.doc = A.from<ObjectStructure>({\n      data: this.encode(initialProps as any),\n      meta: this.encode({\n        keys: [],\n        ...opts?.meta,\n      }),\n      system: {},\n    });\n  }\n\n  bind(options: BindOptions): void {\n    invariant(options.docHandle.isReady());\n    this.database = options.db;\n    this.docHandle = options.docHandle;\n    this.mountPath = options.path;\n\n    const doc = this.doc;\n    this.doc = undefined;\n\n    if (options.assignFromLocalState) {\n      invariant(doc, 'assignFromLocalState');\n\n      // Prevent recursive change calls.\n      using _ = defer(docChangeSemaphore(this.docHandle ?? this));\n\n      this.docHandle.change((newDoc: DatabaseDirectory) => {\n        setDeep(newDoc, this.mountPath, doc);\n      });\n    }\n\n    this.notifyUpdate();\n  }\n\n  getDoc(): Doc<unknown> {\n    if (this.doc) {\n      return this.doc;\n    }\n\n    if (this.docHandle) {\n      return this.docHandle.doc();\n    }\n\n    throw new Error('Invalid ObjectCore state');\n  }\n\n  getObjectStructure(): ObjectStructure {\n    return getDeep(this.getDoc(), this.mountPath) as ObjectStructure;\n  }\n\n  /**\n   * Do not take into account mountPath.\n   */\n  change(changeFn: ChangeFn<any>, options?: A.ChangeOptions<any>): void {\n    // Prevent recursive change calls.\n    using _ = defer(docChangeSemaphore(this.docHandle ?? this));\n\n    if (this.doc) {\n      if (options) {\n        this.doc = A.change(this.doc!, options, changeFn);\n      } else {\n        this.doc = A.change(this.doc!, changeFn);\n      }\n\n      // No change event is emitted here since we are not using the doc handle. Notify listeners manually.\n      this.notifyUpdate();\n    } else {\n      invariant(this.docHandle);\n      this.docHandle.change(changeFn, options);\n      // Note: We don't need to notify listeners here, since `change` event is already processed by DB.\n    }\n  }\n\n  /**\n   * Do not take into account mountPath.\n   */\n  changeAt(heads: Heads, callback: ChangeFn<any>, options?: ChangeOptions<any>): Heads | undefined {\n    // Prevent recursive change calls.\n    using _ = defer(docChangeSemaphore(this.docHandle ?? this));\n\n    let result: Heads | undefined;\n    if (this.doc) {\n      if (options) {\n        const { newDoc, newHeads } = A.changeAt(this.doc!, heads, options, callback);\n        this.doc = newDoc;\n        result = newHeads ?? undefined;\n      } else {\n        const { newDoc, newHeads } = A.changeAt(this.doc!, heads, callback);\n        this.doc = newDoc;\n        result = newHeads ?? undefined;\n      }\n\n      // No change event is emitted here since we are not using the doc handle. Notify listeners manually.\n      this.notifyUpdate();\n    } else {\n      invariant(this.docHandle);\n      result = this.docHandle.changeAt(heads, callback, options);\n      // Note: We don't need to notify listeners here, since `change` event is already processed by DB.\n    }\n\n    return result;\n  }\n\n  getDocAccessor(path: KeyPath = []): DocAccessor {\n    invariant(isValidKeyPath(path));\n    const self = this;\n    return {\n      handle: {\n        doc: () => this.getDoc(),\n        change: (callback, options) => {\n          this.change(callback, options);\n        },\n        changeAt: (heads, callback, options) => {\n          return this.changeAt(heads, callback, options);\n        },\n        addListener: (event, listener) => {\n          if (event === 'change') {\n            // TODO(dmaretskyi): We probably don't need to subscribe to docHandle here separately.\n            this.docHandle?.on('change', listener);\n            this.updates.on(listener);\n          }\n        },\n        removeListener: (event, listener) => {\n          if (event === 'change') {\n            // TODO(dmaretskyi): We probably don't need to subscribe to docHandle here separately.\n            this.docHandle?.off('change', listener);\n            this.updates.off(listener);\n          }\n        },\n      },\n      get path() {\n        return [...self.mountPath, 'data', ...path];\n      },\n    };\n  }\n\n  /**\n   * Fire a synchronous update notification via signal and event subscriptions.\n   * Called after local changes and link resolution.\n   * This function can be used unbound.\n   */\n  public readonly notifyUpdate = () => {\n    try {\n      this.updates.emit();\n    } catch (err: any) {\n      // Print the error message synchronously for easier debugging.\n      // The stack trace and details will be printed asynchronously.\n      log.catch(err);\n\n      // Reports all errors that happen during even propagation as unhandled.\n      // This is important since we don't want to silently swallow errors.\n      // Unfortunately, this will only report errors in the next microtask after the current stack has already unwound.\n      // TODO(dmaretskyi): Take some inspiration from facebook/react/packages/shared/invokeGuardedCallbackImpl.js\n      throwUnhandledError(err);\n    }\n  };\n\n  /**\n   * Encode a value to be stored in the Automerge document.\n   */\n  encode(value: DecodedAutomergePrimaryValue) {\n    if (isLiveObject(value) as boolean) {\n      throw new TypeError('Linking is not allowed');\n    }\n\n    if (value instanceof A.RawString) {\n      return value;\n    }\n    if (value === undefined) {\n      return null;\n    }\n\n    if (value instanceof Reference) {\n      // TODO(mykola): Delete this once we clean up Reference 'protobuf' protocols types.\n      return encodeReference(value);\n    }\n    if (Array.isArray(value)) {\n      const values: any = value.map((val) => this.encode(val));\n      return values;\n    }\n    if (typeof value === 'object' && value !== null) {\n      const entries = Object.entries(value).filter(([_, value]) => value !== undefined);\n      return Object.fromEntries(entries.map(([key, value]): [string, any] => [key, this.encode(value)]));\n    }\n\n    if (typeof value === 'string' && value.length > STRING_CRDT_LIMIT) {\n      return new A.RawString(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Decode a value from the Automerge document.\n   */\n  decode(value: any): DecodedAutomergePrimaryValue {\n    if (value === null) {\n      return value;\n    }\n    if (Array.isArray(value)) {\n      return value.map((val) => this.decode(val));\n    }\n    if (value instanceof A.RawString) {\n      return value.toString();\n    }\n    // For some reason references without `@type` are being stored in the document.\n    if (isEncodedReference(value) || maybeReference(value)) {\n      return decodeReference(value);\n    }\n    if (typeof value === 'object') {\n      return Object.fromEntries(Object.entries(value).map(([key, value]): [string, any] => [key, this.decode(value)]));\n    }\n\n    return value;\n  }\n\n  arrayPush(path: KeyPath, items: DecodedAutomergePrimaryValue[]): number {\n    const itemsEncoded = items.map((item) => this.encode(item));\n\n    let newLength: number = -1;\n    this.change((doc) => {\n      const fullPath = [...this.mountPath, ...path];\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      newLength = array.push(...itemsEncoded);\n    });\n    invariant(newLength !== -1);\n    return newLength;\n  }\n\n  private _getRaw(path: KeyPath): Doc<ObjectStructure> | Doc<DatabaseDirectory> {\n    const fullPath = [...this.mountPath, ...path];\n\n    let value = this.getDoc();\n    for (const key of fullPath) {\n      value = (value as any)?.[key];\n    }\n\n    return value;\n  }\n\n  private _setRaw(path: KeyPath, value: any): void {\n    const fullPath = [...this.mountPath, ...path];\n\n    this.change((doc) => {\n      setDeep(doc, fullPath, value);\n    });\n  }\n\n  // TODO(dmaretskyi): Rename to `get`.\n  getDecoded(path: KeyPath): DecodedAutomergePrimaryValue {\n    return this.decode(this._getRaw(path)) as DecodedAutomergePrimaryValue;\n  }\n\n  // TODO(dmaretskyi): Rename to `set`.\n  setDecoded(path: KeyPath, value: DecodedAutomergePrimaryValue): void {\n    this._setRaw(path, this.encode(value));\n  }\n\n  /**\n   * Deletes key at path.\n   */\n  delete(path: KeyPath): void {\n    const fullPath = [...this.mountPath, ...path];\n\n    this.change((doc) => {\n      const value: any = getDeep(doc, fullPath.slice(0, fullPath.length - 1));\n      delete value[fullPath[fullPath.length - 1]];\n    });\n  }\n\n  getKind(): EntityKind {\n    return (this._getRaw([SYSTEM_NAMESPACE, 'kind']) as any) ?? EntityKind.Object;\n  }\n\n  // TODO(dmaretskyi): Just set statically during construction.\n  setKind(kind: EntityKind): void {\n    this._setRaw([SYSTEM_NAMESPACE, 'kind'], kind);\n  }\n\n  getSource(): Reference | undefined {\n    const res = this.getDecoded([SYSTEM_NAMESPACE, 'source']);\n    invariant(res === undefined || res instanceof Reference);\n    return res;\n  }\n\n  // TODO(dmaretskyi): Just set statically during construction.\n  setSource(ref: Reference): void {\n    this.setDecoded([SYSTEM_NAMESPACE, 'source'], ref);\n  }\n\n  getTarget(): Reference | undefined {\n    const res = this.getDecoded([SYSTEM_NAMESPACE, 'target']);\n    invariant(res === undefined || res instanceof Reference);\n    return res;\n  }\n\n  // TODO(dmaretskyi): Just set statically during construction.\n  setTarget(ref: Reference): void {\n    this.setDecoded([SYSTEM_NAMESPACE, 'target'], ref);\n  }\n\n  getType(): Reference | undefined {\n    const value = this.decode(this._getRaw([SYSTEM_NAMESPACE, 'type']));\n    if (!value) {\n      return undefined;\n    }\n\n    invariant(value instanceof Reference);\n    return value;\n  }\n\n  setType(reference: Reference): void {\n    this._setRaw([SYSTEM_NAMESPACE, 'type'], this.encode(reference));\n  }\n\n  getMeta(): ObjectMeta {\n    return this.getDecoded([META_NAMESPACE]) as ObjectMeta;\n  }\n\n  setMeta(meta: ObjectMeta): void {\n    this._setRaw([META_NAMESPACE], this.encode(meta));\n  }\n\n  isDeleted(): boolean {\n    const value = this._getRaw([SYSTEM_NAMESPACE, 'deleted']);\n    return typeof value === 'boolean' ? value : false;\n  }\n\n  setDeleted(value: boolean): void {\n    this._setRaw([SYSTEM_NAMESPACE, 'deleted'], value);\n  }\n\n  /**\n   * @deprecated\n   */\n  toPlainObject(): CommonObjectData & Record<string, any> {\n    let data = this.getDecoded([DATA_NAMESPACE]);\n    if (typeof data !== 'object') {\n      log.error('Corrupted object data property', { type: typeof data });\n      data = {};\n    }\n\n    const dataMapped = deepMapValues(data, (value, recurse) => {\n      if (value instanceof Reference) {\n        return { '/': value.toDXN().toString() };\n      }\n      return recurse(value);\n    });\n\n    return {\n      id: this.id,\n      __typename: this.getType()?.toDXN().toString() ?? null,\n      __meta: this.getDecoded([META_NAMESPACE]) as ObjectMeta,\n      ...dataMapped,\n    };\n  }\n\n  /**\n   * DXNs of objects that this object strongly depends on.\n   * Strong references are loaded together with the source object.\n   * Currently this is the schema reference and the source and target for relations\n   */\n  getStrongDependencies(): DXN[] {\n    const res: DXN[] = [];\n\n    const type = this.getType()?.toDXN();\n    if (type && type.kind === DXN.kind.ECHO) {\n      res.push(type);\n    }\n\n    if (this.getKind() === EntityKind.Relation) {\n      const source = this.getSource()?.toDXN();\n      if (source) {\n        res.push(source);\n      }\n      const target = this.getTarget()?.toDXN();\n      if (target) {\n        res.push(target);\n      }\n    }\n\n    return res;\n  }\n}\n\nexport type BindOptions = {\n  db: CoreDatabase;\n  docHandle: DocHandleProxy<DatabaseDirectory>;\n  path: KeyPath;\n\n  /**\n   * Assign the state from the local doc into the shared structure for the database.\n   */\n  assignFromLocalState?: boolean;\n};\n\nexport const objectIsUpdated = (objId: string, event: DocHandleChangePayload<DatabaseDirectory>) => {\n  if (event.patches.some((patch) => patch.path[0] === 'objects' && patch.path[1] === objId)) {\n    return true;\n  }\n  return false;\n};\n\n// TODO(burdon): Move to echo-protocol.\nconst maybeReference = (value: unknown) =>\n  typeof value === 'object' &&\n  value !== null &&\n  Object.keys(value).length === 3 &&\n  'objectId' in value && // TODO(burdon): 'objectId'\n  'protocol' in value &&\n  'host' in value;\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { failedInvariant } from '@dxos/invariant';\nimport { log } from '@dxos/log';\nimport { getDebugName } from '@dxos/util';\n\n// Not very pretty code, but easy to write without introducing a new wrapper around AM docs.\n\nconst beingChanged = new WeakSet<any>();\n\nexport const docChangeSemaphore = (handle: any) => {\n  log('begin change', { handled: getDebugName(handle) });\n  if (beingChanged.has(handle)) {\n    failedInvariant('Recursive call to doc.change');\n  }\n\n  beingChanged.add(handle);\n\n  return () => {\n    log('end change', { handled: getDebugName(handle) });\n    beingChanged.delete(handle);\n  };\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { next as A, type Doc } from '@automerge/automerge';\nimport { stringifyAutomergeUrl, type DocHandleOptions, type DocumentId } from '@automerge/automerge-repo';\nimport { EventEmitter } from 'eventemitter3';\n\nimport { Trigger, TriggerState } from '@dxos/async';\nimport { invariant } from '@dxos/invariant';\n\nimport { type IDocHandle } from '../core-db';\n\nexport type ChangeEvent<T> = {\n  handle: DocHandleProxy<T>;\n  doc: A.Doc<T>;\n  patches: A.Patch[];\n  patchInfo: { before: A.Doc<T>; after: A.Doc<T>; source: 'change' };\n};\n\nexport type ClientDocHandleEvents<T> = {\n  change: ChangeEvent<T>;\n  delete: { handle: DocHandleProxy<T> };\n};\n\n/**\n * A client-side `IDocHandle` implementation.\n * Syncs with a Automerge Repo in shared worker.\n * Inspired by Automerge's `DocHandle`.\n */\nexport class DocHandleProxy<T> extends EventEmitter<ClientDocHandleEvents<T>> implements IDocHandle<T> {\n  private readonly _ready = new Trigger();\n  private _doc?: A.Doc<T> = undefined;\n\n  private _lastSentHeads: A.Heads = [];\n  /**\n   * Heads that are currently being synced.\n   * If sync is successful, they will be moved to `_lastSentHeads`.\n   */\n  private _currentlySendingHeads: A.Heads = [];\n\n  constructor(\n    private readonly _documentId: DocumentId,\n    options: DocHandleOptions<T> = {},\n    private readonly _callbacks?: {\n      onDelete: () => void;\n    },\n  ) {\n    super();\n    if (options.isNew) {\n      // T should really be constrained to extend `Record<string, unknown>` (an automerge doc can't be\n      // e.g. a primitive, an array, etc. - it must be an object). But adding that constraint creates\n      // a bunch of other problems elsewhere so for now we'll just cast it here to make Automerge happy.\n      this._doc = A.from(options.initialValue as Record<string, unknown>) as T;\n      this._doc = A.emptyChange<T>(this._doc);\n      this._ready.wake();\n    } else {\n      this._doc = A.init<T>();\n    }\n  }\n\n  get url() {\n    return stringifyAutomergeUrl(this._documentId);\n  }\n\n  get documentId(): DocumentId {\n    return this._documentId;\n  }\n\n  get state() {\n    return this._ready.state === TriggerState.RESOLVED ? 'ready' : 'pending';\n  }\n\n  doc(): A.Doc<T> {\n    if (!this._doc) {\n      throw new Error('DocHandleProxy.doc called on deleted doc');\n    }\n    return this._doc;\n  }\n\n  async whenReady(): Promise<void> {\n    await this._ready.wait();\n  }\n\n  isReady(): boolean {\n    return this._ready.state === TriggerState.RESOLVED;\n  }\n\n  change(fn: (doc: A.Doc<T>) => void, opts?: A.ChangeOptions<any>): void {\n    invariant(this._doc, 'DocHandleProxy.change called on deleted doc');\n    const before = this._doc;\n    const headsBefore = A.getHeads(this._doc);\n    this._doc = opts ? A.change(this._doc, opts, fn) : A.change(this._doc, fn);\n    this.emit('change', {\n      handle: this,\n      doc: this._doc,\n      patches: A.diff(this._doc, headsBefore, A.getHeads(this._doc)),\n      patchInfo: { before, after: this._doc, source: 'change' },\n    });\n  }\n\n  changeAt(heads: A.Heads, fn: (doc: A.Doc<T>) => void, opts?: A.ChangeOptions<any>): A.Heads | undefined {\n    invariant(this._doc, 'DocHandleProxy.changeAt called on deleted doc');\n    const before = this._doc;\n    const headsBefore = A.getHeads(this._doc);\n    const { newDoc, newHeads } = opts ? A.changeAt(this._doc, heads, opts, fn) : A.changeAt(this._doc, heads, fn);\n\n    this._doc = newDoc;\n    this.emit('change', {\n      handle: this,\n      doc: this._doc,\n      patches: newHeads ? A.diff(this._doc, headsBefore, newHeads) : [],\n      patchInfo: { before, after: this._doc, source: 'change' },\n    });\n    return newHeads ?? undefined;\n  }\n\n  update(updateCallback: (doc: A.Doc<T>) => A.Doc<T>): void {\n    invariant(this._doc, 'DocHandleProxy.update called on deleted doc');\n    const before = this._doc;\n    const headsBefore = A.getHeads(this._doc);\n    const newDoc = updateCallback(this._doc);\n    invariant(newDoc, 'DocHandleProxy.update returned undefined doc');\n    this._doc = newDoc;\n    this.emit('change', {\n      handle: this,\n      doc: this._doc,\n      patches: A.diff(this._doc, headsBefore, A.getHeads(this._doc)),\n      patchInfo: { before, after: this._doc, source: 'change' },\n    });\n  }\n\n  delete(): void {\n    this._callbacks?.onDelete();\n    this.emit('delete', { handle: this });\n    this._doc = undefined;\n  }\n\n  /**\n   * Get pending changes since last write.\n   * @internal\n   */\n  _getPendingChanges(): Uint8Array | undefined {\n    invariant(this._doc, 'Doc is deleted, cannot get last write mutation');\n    if (A.equals(A.getHeads(this._doc), this._lastSentHeads)) {\n      return;\n    }\n\n    const mutation = A.saveSince(this._doc, this._lastSentHeads);\n    if (mutation.length === 0) {\n      return;\n    }\n    this._currentlySendingHeads = A.getHeads(this._doc);\n    return mutation;\n  }\n\n  /**\n   * Confirm that the last write was successful.\n   * @internal\n   */\n  _confirmSync(): void {\n    this._lastSentHeads = this._currentlySendingHeads;\n  }\n\n  /**\n   * Update the doc with a foreign mutation from worker.\n   * @internal\n   */\n  _integrateHostUpdate(mutation: Uint8Array): void {\n    invariant(this._doc, 'Doc is deleted, cannot write mutation');\n    const before = this._doc;\n    const headsBefore = A.getHeads(this._doc);\n    this._doc = A.loadIncremental(this._doc, mutation);\n\n    if (A.equals(headsBefore, this._lastSentHeads)) {\n      this._lastSentHeads = A.getHeads(this._doc);\n    }\n\n    this._ready.wake();\n\n    this.emit('change', {\n      handle: this,\n      doc: this._doc,\n      patches: A.diff(this._doc, headsBefore, A.getHeads(this._doc)),\n      patchInfo: { before, after: this._doc, source: 'change' },\n    });\n  }\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { next as A } from '@automerge/automerge';\nimport {\n  type AnyDocumentId,\n  type DocumentId,\n  generateAutomergeUrl,\n  interpretAsDocumentId,\n  parseAutomergeUrl,\n} from '@automerge/automerge-repo';\n\nimport { Event, UpdateScheduler } from '@dxos/async';\nimport { type Stream } from '@dxos/codec-protobuf/stream';\nimport { LifecycleState, Resource } from '@dxos/context';\nimport { invariant } from '@dxos/invariant';\nimport { PublicKey, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport {\n  type BatchedDocumentUpdates,\n  type DataService,\n  type DocumentUpdate,\n} from '@dxos/protocols/proto/dxos/echo/service';\nimport { trace } from '@dxos/tracing';\n\nimport { DocHandleProxy } from './doc-handle-proxy';\n\nconst MAX_UPDATE_FREQ = 10; // [updates/sec]\nconst RPC_TIMEOUT = 30_000;\n\n/**\n * A proxy (thin client) to the Automerge Repo.\n * Inspired by Automerge's `Repo`.\n */\n@trace.resource()\nexport class RepoProxy extends Resource {\n  // TODO(mykola): Change to Map<string, DocHandleProxy<unknown>>.\n  private _handles: Record<string, DocHandleProxy<any>> = {};\n  private readonly _subscriptionId = PublicKey.random().toHex();\n  /**\n   * Subscription id which is used inside the DataService to identify the Client.\n   */\n  private _subscription?: Stream<BatchedDocumentUpdates> = undefined;\n\n  /**\n   * Document ids pending for init mutation.\n   */\n  private readonly _pendingCreateIds = new Set<DocumentId>();\n\n  /**\n   * Document ids that should be subscribed to.\n   */\n  private readonly _pendingAddIds = new Set<DocumentId>();\n\n  /**\n   * Document ids that should be unsubscribed from.\n   */\n  private readonly _pendingRemoveIds = new Set<DocumentId>();\n\n  /**\n   * Document ids that have pending updates.\n   */\n  private readonly _pendingUpdateIds = new Set<DocumentId>();\n\n  private _sendUpdatesJob?: UpdateScheduler = undefined;\n\n  readonly saveStateChanged = new Event<SaveStateChangedEvent>();\n\n  constructor(\n    private readonly _dataService: DataService,\n    private readonly _spaceId: SpaceId,\n  ) {\n    super();\n  }\n\n  get handles(): Record<string, DocHandleProxy<any>> {\n    return this._handles;\n  }\n\n  find<T>(id: AnyDocumentId): DocHandleProxy<T> {\n    if (typeof id !== 'string') {\n      throw new TypeError(`Invalid documentId ${id}`);\n    }\n\n    const documentId = interpretAsDocumentId(id);\n    return this._getHandle<T>({\n      documentId,\n      isNew: false,\n    });\n  }\n\n  import<T>(dump: Uint8Array): DocHandleProxy<T> {\n    const handle = this.create<T>();\n    handle.update(() => A.load(dump));\n    return handle;\n  }\n\n  create<T>(initialValue?: T): DocHandleProxy<T> {\n    // Generate a new UUID and store it in the buffer.\n    const { documentId } = parseAutomergeUrl(generateAutomergeUrl());\n    return this._getHandle<T>({\n      documentId,\n      isNew: true,\n      initialValue,\n    });\n  }\n\n  async flush(): Promise<void> {\n    await this._sendUpdatesJob?.runBlocking();\n  }\n\n  protected override async _open(): Promise<void> {\n    // TODO(dmaretskyi): Set proper space id.\n    this._subscription = this._dataService.subscribe({\n      subscriptionId: this._subscriptionId,\n      spaceId: this._spaceId,\n    });\n    this._sendUpdatesJob = new UpdateScheduler(this._ctx, async () => this._sendUpdates(), {\n      maxFrequency: MAX_UPDATE_FREQ,\n    });\n    this._subscription.subscribe((updates) => this._receiveUpdate(updates));\n  }\n\n  protected override async _close(): Promise<void> {\n    await this._sendUpdatesJob?.join();\n    this._sendUpdatesJob = undefined;\n    for (const handle of Object.values(this._handles)) {\n      handle.off('change');\n    }\n\n    this._handles = {};\n    await this._subscription?.close();\n    this._subscription = undefined;\n  }\n\n  /** Returns an existing handle if we have it; creates one otherwise. */\n  private _getHandle<T>({\n    documentId,\n    isNew,\n    initialValue,\n  }: {\n    /** The documentId of the handle to look up or create. */\n    documentId: DocumentId;\n    /** If we know we're creating a new document, specify this so we can have access to it immediately. */\n    isNew: boolean;\n    initialValue?: T;\n  }): DocHandleProxy<T> {\n    // If we have the handle cached, return it\n    if (this._handles[documentId]) {\n      return this._handles[documentId];\n    }\n    // If not, create a new handle, cache it, and return it.\n    if (!documentId) {\n      throw new Error(`Invalid documentId ${documentId}`);\n    }\n\n    return this._createHandle<T>({ documentId, isNew, initialValue });\n  }\n\n  private _createHandle<T>({\n    documentId,\n    isNew,\n    initialValue,\n  }: {\n    documentId: DocumentId;\n    isNew: boolean;\n    initialValue?: T;\n  }): DocHandleProxy<T> {\n    invariant(this._lifecycleState === LifecycleState.OPEN);\n\n    // TODO(burdon): Called even if not mutations.\n    const onChange = () => {\n      log('onChange', { documentId });\n      this._pendingUpdateIds.add(documentId);\n      this._sendUpdatesJob?.trigger();\n      this._emitSaveStateEvent();\n    };\n\n    const onDelete = () => {\n      log('onDelete', { documentId });\n      handle.off('change', onChange);\n      this._pendingRemoveIds.add(documentId);\n      this._sendUpdatesJob?.trigger();\n      delete this._handles[documentId];\n    };\n\n    const handle = new DocHandleProxy<T>(documentId, { isNew, initialValue }, { onDelete });\n    handle.on('change', onChange);\n    this._handles[documentId] = handle;\n\n    if (isNew) {\n      this._pendingCreateIds.add(documentId);\n    } else {\n      this._pendingAddIds.add(documentId);\n    }\n    this._sendUpdatesJob!.trigger();\n\n    return handle;\n  }\n\n  private _receiveUpdate({ updates }: BatchedDocumentUpdates): void {\n    if (!updates) {\n      return;\n    }\n\n    for (const update of updates) {\n      const { documentId, mutation } = update;\n      const handle = this._handles[documentId];\n      if (!handle) {\n        log.warn('Received update for unknown document', { documentId });\n        continue;\n      }\n\n      handle._integrateHostUpdate(mutation);\n    }\n  }\n\n  private async _sendUpdates(): Promise<void> {\n    // Save current state of pending updates to avoid race conditions.\n    const createIds = Array.from(this._pendingCreateIds);\n    const addIds = Array.from(this._pendingAddIds);\n    const removeIds = Array.from(this._pendingRemoveIds);\n    const updateIds = Array.from(this._pendingUpdateIds);\n\n    this._pendingCreateIds.clear();\n    this._pendingAddIds.clear();\n    this._pendingRemoveIds.clear();\n    this._pendingUpdateIds.clear();\n\n    try {\n      await this._dataService.updateSubscription(\n        { subscriptionId: this._subscriptionId, addIds, removeIds },\n        { timeout: RPC_TIMEOUT },\n      );\n      const updates: DocumentUpdate[] = [];\n      const addMutations = (documentIds: DocumentId[], isNew?: boolean) => {\n        for (const documentId of documentIds) {\n          const handle = this._handles[documentId];\n          invariant(handle, `No handle found for documentId ${documentId}`);\n          const mutation = handle._getPendingChanges();\n          if (mutation) {\n            updates.push({ documentId, mutation, isNew });\n          }\n        }\n      };\n\n      addMutations(createIds, true);\n      addMutations(updateIds);\n      if (updates.length > 0) {\n        await this._dataService.update({ subscriptionId: this._subscriptionId, updates }, { timeout: RPC_TIMEOUT });\n        for (const { documentId } of updates) {\n          this._handles[documentId]._confirmSync();\n        }\n      }\n      this._emitSaveStateEvent();\n    } catch (err) {\n      // Restore the state of pending updates if the RPC call failed.\n      createIds.forEach((id) => this._pendingCreateIds.add(id));\n      addIds.forEach((id) => this._pendingAddIds.add(id));\n      removeIds.forEach((id) => this._pendingRemoveIds.add(id));\n      updateIds.forEach((id) => this._pendingUpdateIds.add(id));\n\n      this._ctx.raise(err as Error);\n    }\n  }\n\n  private _emitSaveStateEvent(): void {\n    const unsavedDocuments = [...this._pendingCreateIds, ...this._pendingUpdateIds];\n    this.saveStateChanged.emit({ unsavedDocuments });\n  }\n}\n\nexport type SaveStateChangedEvent = {\n  unsavedDocuments: DocumentId[];\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { getHeads } from '@automerge/automerge';\nimport { interpretAsDocumentId, type AutomergeUrl, type DocumentId } from '@automerge/automerge-repo';\n\nimport {\n  asyncTimeout,\n  Event,\n  runInContextAsync,\n  synchronized,\n  TimeoutError,\n  Trigger,\n  UpdateScheduler,\n  type ReadOnlyEvent,\n  type CleanupFn,\n} from '@dxos/async';\nimport { Stream } from '@dxos/codec-protobuf/stream';\nimport { Context, ContextDisposedError } from '@dxos/context';\nimport { raise } from '@dxos/debug';\nimport { type Filter } from '@dxos/echo';\nimport {\n  encodeReference,\n  isEncodedReference,\n  Reference,\n  type ObjectStructure,\n  type DatabaseDirectory,\n  type SpaceState,\n  DATA_NAMESPACE,\n} from '@dxos/echo-protocol';\nimport { type ObjectId, Ref, type AnyObjectData } from '@dxos/echo-schema';\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\nimport { invariant } from '@dxos/invariant';\nimport { DXN, LOCAL_SPACE_TAG, type PublicKey, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport type { QueryOptions } from '@dxos/protocols/proto/dxos/echo/filter';\nimport type { QueryService } from '@dxos/protocols/proto/dxos/echo/query';\nimport type { DataService, SpaceSyncState } from '@dxos/protocols/proto/dxos/echo/service';\nimport { trace } from '@dxos/tracing';\nimport { chunkArray, deepMapValues, defaultMap, setDeep } from '@dxos/util';\n\nimport {\n  AutomergeDocumentLoaderImpl,\n  type AutomergeDocumentLoader,\n  type DocumentChanges,\n  type ObjectDocumentLoaded,\n} from './automerge-doc-loader';\nimport { CoreDatabaseQueryContext } from './core-database-query-context';\nimport { type InsertBatch, type InsertData, type UpdateOperation } from './crud-api';\nimport { ObjectCore } from './object-core';\nimport { getInlineAndLinkChanges } from './util';\nimport { RepoProxy, type ChangeEvent, type DocHandleProxy, type SaveStateChangedEvent } from '../automerge';\nimport { type Hypergraph } from '../hypergraph';\nimport { normalizeQuery, QueryResult, type QueryFn } from '../query';\n\nexport type InitRootProxyFn = (core: ObjectCore) => void;\n\nexport type CoreDatabaseParams = {\n  graph: Hypergraph;\n  dataService: DataService;\n  queryService: QueryService;\n  spaceId: SpaceId;\n  spaceKey: PublicKey;\n};\n\n/**\n * Maximum number of remote update notifications per second.\n */\nconst THROTTLED_UPDATE_FREQUENCY = 10;\n\nexport type ObjectPlacement = 'root-doc' | 'linked-doc';\n\nexport type AddCoreOptions = {\n  /**\n   * Where to place the object in the Automerge document tree.\n   * Root document is always loaded with the space.\n   * Linked documents are loaded lazily.\n   * Placing large number of objects in the root document may slow down the initial load.\n   *\n   * @default 'linked-doc'\n   */\n  placeIn?: ObjectPlacement;\n};\n\nconst TRACE_LOADING = false;\n\n/**\n *\n */\n// TODO(burdon): Document.\n@trace.resource()\nexport class CoreDatabase {\n  private readonly _hypergraph: Hypergraph;\n  private readonly _dataService: DataService;\n  private readonly _queryService: QueryService;\n  private readonly _repoProxy: RepoProxy;\n  private readonly _spaceId: SpaceId;\n  private readonly _spaceKey: PublicKey;\n  private readonly _objects = new Map<string, ObjectCore>();\n\n  /**\n   * DXN string -> ObjectId.\n   * Stores the targets of strong dependencies to the objects that depend on them.\n   * When we load an object that doesn't have it's strong deps resolved, we wait for the deps to be loaded first.\n   */\n  private readonly _strongDepsIndex = new Map<string, ObjectId[]>();\n\n  readonly _updateEvent = new Event<ItemsUpdatedEvent>();\n\n  private _state = CoreDatabaseState.CLOSED;\n\n  private _ctx = new Context();\n\n  // TODO(dmaretskyi): Refactor this.\n  public readonly opened = new Trigger();\n\n  /**\n   * @internal\n   */\n  readonly _automergeDocLoader: AutomergeDocumentLoader;\n\n  readonly rootChanged = new Event<void>();\n\n  readonly saveStateChanged: ReadOnlyEvent<SaveStateChangedEvent>;\n\n  constructor({ graph, dataService, queryService, spaceId, spaceKey }: CoreDatabaseParams) {\n    this._hypergraph = graph;\n    this._dataService = dataService;\n    this._queryService = queryService;\n    this._spaceId = spaceId;\n    this._spaceKey = spaceKey;\n    this._repoProxy = new RepoProxy(this._dataService, this._spaceId);\n    this.saveStateChanged = this._repoProxy.saveStateChanged;\n    this._automergeDocLoader = new AutomergeDocumentLoaderImpl(this._repoProxy, spaceId, spaceKey);\n  }\n\n  toJSON() {\n    return {\n      id: this._spaceId,\n      objects: this._objects.size,\n    };\n  }\n\n  get graph(): Hypergraph {\n    return this._hypergraph;\n  }\n\n  get spaceId(): SpaceId {\n    return this._spaceId;\n  }\n\n  /**\n   * @deprecated\n   */\n  get spaceKey(): PublicKey {\n    return this._spaceKey;\n  }\n\n  // TODO(dmaretskyi): Stop exposing repo.\n  // Currently needed for migration-builder and unit-tests.\n  get _repo(): RepoProxy {\n    return this._repoProxy;\n  }\n\n  @synchronized\n  async open(spaceState: SpaceState): Promise<void> {\n    const start = performance.now();\n    if (this._state !== CoreDatabaseState.CLOSED) {\n      log.info('Already open');\n      return;\n    }\n    this._state = CoreDatabaseState.OPENING;\n\n    await this._repoProxy.open();\n    this._ctx.onDispose(this._unsubscribeFromHandles.bind(this));\n    this._automergeDocLoader.onObjectDocumentLoaded.on(this._ctx, this._onObjectDocumentLoaded.bind(this));\n\n    try {\n      await this._automergeDocLoader.loadSpaceRootDocHandle(this._ctx, spaceState);\n      const spaceRootDocHandle = this._automergeDocLoader.getSpaceRootDocHandle();\n      const spaceRootDoc: DatabaseDirectory = spaceRootDocHandle.doc();\n      invariant(spaceRootDoc);\n      const objectIds = Object.keys(spaceRootDoc.objects ?? {});\n      this._createInlineObjects(spaceRootDocHandle, objectIds);\n      spaceRootDocHandle.on('change', this._onDocumentUpdate);\n    } catch (err) {\n      if (err instanceof ContextDisposedError) {\n        return;\n      }\n      log.catch(err);\n      throw err;\n    }\n\n    const elapsed = performance.now() - start;\n    if (elapsed > 1_000) {\n      log.warn('slow AM open', { docId: spaceState.rootUrl, duration: elapsed });\n    }\n\n    this._state = CoreDatabaseState.OPEN;\n    this.opened.wake();\n  }\n\n  // TODO(dmaretskyi): Cant close while opening.\n  @synchronized\n  async close(): Promise<void> {\n    if (this._state === CoreDatabaseState.CLOSED) {\n      return;\n    }\n    this._state = CoreDatabaseState.CLOSED;\n\n    this.opened.throw(new ContextDisposedError());\n    this.opened.reset();\n\n    await this._ctx.dispose();\n    this._ctx = new Context();\n\n    await this._repoProxy.close();\n  }\n\n  /**\n   * Update DB in response to space state change.\n   * Can be used to change the root AM document.\n   */\n  // TODO(dmaretskyi): should it be synchronized and/or cancelable?\n  @synchronized\n  async updateSpaceState(spaceState: SpaceState): Promise<void> {\n    invariant(this._ctx, 'Must be open');\n    if (spaceState.rootUrl === this._automergeDocLoader.getSpaceRootDocHandle().url) {\n      return;\n    }\n    this._unsubscribeFromHandles();\n    const objectIdsToLoad = this._automergeDocLoader.clearHandleReferences();\n\n    try {\n      await this._automergeDocLoader.loadSpaceRootDocHandle(this._ctx, spaceState);\n      const spaceRootDocHandle = this._automergeDocLoader.getSpaceRootDocHandle();\n      await this._handleSpaceRootDocumentChange(spaceRootDocHandle, objectIdsToLoad);\n      spaceRootDocHandle.on('change', this._onDocumentUpdate);\n    } catch (err) {\n      if (err instanceof ContextDisposedError) {\n        return;\n      }\n      log.catch(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Returns ids for loaded and not loaded objects.\n   */\n  getAllObjectIds(): string[] {\n    if (this._state !== CoreDatabaseState.OPEN) {\n      return [];\n    }\n\n    const hasLoadedHandles = this._automergeDocLoader.getAllHandles().length > 0;\n    if (!hasLoadedHandles) {\n      return [];\n    }\n    const rootDoc = this._automergeDocLoader.getSpaceRootDocHandle().doc();\n    if (!rootDoc) {\n      return [];\n    }\n\n    return [...new Set([...Object.keys(rootDoc.objects ?? {}), ...Object.keys(rootDoc.links ?? {})])];\n  }\n\n  getNumberOfInlineObjects(): number {\n    return Object.keys(this._automergeDocLoader.getSpaceRootDocHandle().doc()?.objects ?? {}).length;\n  }\n\n  getNumberOfLinkedObjects(): number {\n    return Object.keys(this._automergeDocLoader.getSpaceRootDocHandle().doc()?.links ?? {}).length;\n  }\n\n  getTotalNumberOfObjects(): number {\n    return this.getNumberOfInlineObjects() + this.getNumberOfLinkedObjects();\n  }\n\n  /**\n   * @deprecated\n   * Return only loaded objects.\n   */\n  allObjectCores(): ObjectCore[] {\n    return Array.from(this._objects.values());\n  }\n\n  getObjectCoreById(id: string, { load = true }: GetObjectCoreByIdOptions = {}): ObjectCore | undefined {\n    if (!this._automergeDocLoader.hasRootHandle) {\n      throw new Error('Database is not ready.');\n    }\n\n    const objCore = this._objects.get(id);\n    if (load && !objCore) {\n      this._automergeDocLoader.loadObjectDocument(id);\n      return undefined;\n    }\n\n    invariant(objCore instanceof ObjectCore);\n    return objCore;\n  }\n\n  // TODO(Mykola): Reconcile with `getObjectById`.\n  async loadObjectCoreById(\n    objectId: string,\n    { timeout, returnWithUnsatisfiedDeps }: LoadObjectOptions = {},\n  ): Promise<ObjectCore | undefined> {\n    const core = this.getObjectCoreById(objectId);\n    if (core && (returnWithUnsatisfiedDeps || this._areDepsSatisfied(core))) {\n      return core;\n    }\n    const isReady = () => {\n      const core = this.getObjectCoreById(objectId);\n      return core ? returnWithUnsatisfiedDeps || this._areDepsSatisfied(core) : false;\n    };\n    const waitForUpdate = this._updateEvent\n      .waitFor((event) => event.itemsUpdated.some(({ id }) => id === objectId) && isReady())\n      .then(() => this.getObjectCoreById(objectId));\n    this._automergeDocLoader.loadObjectDocument(objectId);\n\n    return timeout ? asyncTimeout(waitForUpdate, timeout) : waitForUpdate;\n  }\n\n  async batchLoadObjectCores(\n    objectIds: string[],\n    {\n      inactivityTimeout = 30_000,\n      returnDeleted = false,\n      returnWithUnsatisfiedDeps = false,\n      failOnTimeout = false,\n    }: {\n      inactivityTimeout?: number;\n      returnDeleted?: boolean;\n      returnWithUnsatisfiedDeps?: boolean;\n      failOnTimeout?: boolean;\n    } = {},\n  ): Promise<(ObjectCore | undefined)[]> {\n    if (!this._automergeDocLoader.hasRootHandle) {\n      throw new Error('Database is not ready.');\n    }\n\n    const result: (ObjectCore | undefined)[] = new Array(objectIds.length);\n    const objectsToLoad: Array<{ id: string; resultIndex: number }> = [];\n    for (let i = 0; i < objectIds.length; i++) {\n      const objectId = objectIds[i];\n\n      if (!this._automergeDocLoader.objectPresent(objectId)) {\n        result[i] = undefined;\n        continue;\n      }\n\n      const core = this.getObjectCoreById(objectId, { load: true });\n      if (!returnDeleted && this._objects.get(objectId)?.isDeleted()) {\n        result[i] = undefined;\n      } else if (!returnWithUnsatisfiedDeps && core && !this._areDepsSatisfied(core)) {\n        result[i] = undefined;\n      } else if (core != null) {\n        result[i] = core;\n      } else {\n        objectsToLoad.push({ id: objectId, resultIndex: i });\n      }\n    }\n    if (objectsToLoad.length === 0) {\n      return result;\n    }\n    const idsToLoad = objectsToLoad.map((v) => v.id);\n    this._automergeDocLoader.loadObjectDocument(idsToLoad);\n\n    const startTime = TRACE_LOADING ? performance.now() : 0;\n    const diagnostics: string[] = [];\n    try {\n      return await new Promise((resolve, reject) => {\n        let unsubscribe: CleanupFn | null = null;\n        let inactivityTimeoutTimer: any | undefined;\n        const scheduleInactivityTimeout = () => {\n          inactivityTimeoutTimer = setTimeout(() => {\n            unsubscribe?.();\n            if (failOnTimeout) {\n              diagnostics.push('inactivity-rejected');\n              reject(new TimeoutError(inactivityTimeout));\n            } else {\n              diagnostics.push('inactivity-resolved');\n              resolve(result);\n            }\n          }, inactivityTimeout);\n        };\n        unsubscribe = this._updateEvent.on(({ itemsUpdated }) => {\n          const updatedIds = itemsUpdated.map((v) => v.id);\n          for (let i = objectsToLoad.length - 1; i >= 0; i--) {\n            const objectToLoad = objectsToLoad[i];\n            if (updatedIds.includes(objectToLoad.id)) {\n              clearTimeout(inactivityTimeoutTimer);\n\n              const isDeleted = this._objects.get(objectToLoad.id)?.isDeleted();\n              const depsUnsatisfied =\n                this._objects.get(objectToLoad.id) && !this._areDepsSatisfied(this._objects.get(objectToLoad.id)!);\n\n              if (!returnDeleted && isDeleted) {\n                diagnostics.push('object-deleted');\n                result[objectToLoad.resultIndex] = undefined;\n              } else if (!returnWithUnsatisfiedDeps && depsUnsatisfied) {\n                diagnostics.push('deps-unsatisfied');\n                result[objectToLoad.resultIndex] = undefined;\n              } else {\n                result[objectToLoad.resultIndex] = this.getObjectCoreById(objectToLoad.id)!;\n              }\n\n              objectsToLoad.splice(i, 1);\n              scheduleInactivityTimeout();\n            }\n          }\n          if (objectsToLoad.length === 0) {\n            clearTimeout(inactivityTimeoutTimer);\n            unsubscribe?.();\n            resolve(result);\n          }\n        });\n        scheduleInactivityTimeout();\n      });\n    } finally {\n      if (TRACE_LOADING) {\n        log.info('loading objects', { objectIds, elapsed: performance.now() - startTime, diagnostics });\n      }\n    }\n  }\n\n  // Odd way to define methods types from a typedef.\n  declare query: QueryFn;\n  static {\n    this.prototype.query = this.prototype._query;\n  }\n\n  private _query(filter?: unknown, options?: QueryOptions) {\n    return new QueryResult(\n      this._createQueryContext(),\n      normalizeQuery(filter, options, { defaultSpaceId: this.spaceId }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _createQueryContext(): CoreDatabaseQueryContext {\n    return new CoreDatabaseQueryContext(this, this._queryService);\n  }\n\n  /**\n   * Update objects.\n   */\n  async update(filter: Filter.Any, operation: UpdateOperation): Promise<void> {\n    const ast = filter.ast;\n    if (ast.type !== 'object' || ast.id?.length !== 1) {\n      throw new Error('Only object id filters with one id are currently supported');\n    }\n    const id = ast.id[0];\n\n    const core = this.getObjectCoreById(id);\n    if (!core) {\n      throw new Error(`Object not found: ${id}`);\n    }\n\n    // TODO(dmaretskyi): Nested assignments.\n    core.change((doc) => {\n      for (const key in operation) {\n        if (key === 'id') {\n          continue;\n        }\n        setDeep(doc, [...core.mountPath, DATA_NAMESPACE, key], operation[key]);\n      }\n    });\n\n    await this.flush();\n  }\n\n  // TODO(dmaretskyi): Support meta.\n  async insert(data: InsertData): Promise<AnyObjectData>;\n  async insert(data: InsertBatch): Promise<AnyObjectData[]>;\n  async insert(data: InsertData | InsertBatch) {\n    const isBatch = Array.isArray(data);\n    const dataArray = isBatch ? data : [data];\n\n    const cores = dataArray.map((item) => {\n      const core = createCoreFromInsertData(item);\n      this.addCore(core);\n      return core;\n    });\n\n    await this.flush();\n\n    return isBatch ? cores.map((core) => core.toPlainObject()) : cores[0].toPlainObject();\n  }\n\n  addCore(core: ObjectCore, opts?: AddCoreOptions): void {\n    if (core.database) {\n      // Already in the database.\n      if (core.database !== this) {\n        throw new Error('Object already belongs to another database');\n      }\n\n      if (core.isDeleted()) {\n        core.setDeleted(false);\n      }\n\n      return;\n    }\n\n    invariant(!this._objects.has(core.id));\n    this._objects.set(core.id, core);\n\n    let spaceDocHandle: DocHandleProxy<DatabaseDirectory>;\n    const placement = opts?.placeIn ?? 'linked-doc';\n    switch (placement) {\n      case 'linked-doc': {\n        spaceDocHandle = this._automergeDocLoader.createDocumentForObject(core.id);\n        spaceDocHandle.on('change', this._onDocumentUpdate);\n        break;\n      }\n      // TODO(dmaretskyi): In the future we should forbid object placement in the root doc.\n      case 'root-doc': {\n        spaceDocHandle = this._automergeDocLoader.getSpaceRootDocHandle();\n        this._automergeDocLoader.onObjectBoundToDocument(spaceDocHandle, core.id);\n        break;\n      }\n      default:\n        throw new TypeError(`Unknown object placement: ${placement}`);\n    }\n\n    core.bind({\n      db: this,\n      docHandle: spaceDocHandle,\n      path: ['objects', core.id],\n      assignFromLocalState: true,\n    });\n  }\n\n  removeCore(core: ObjectCore): void {\n    invariant(this._objects.has(core.id));\n    core.setDeleted(true);\n  }\n\n  /**\n   * Removes an object link from the space root document.\n   */\n  unlinkObjects(objectIds: string[]): void {\n    const root = this._automergeDocLoader.getSpaceRootDocHandle();\n    for (const objectId of objectIds) {\n      if (!root.doc().links?.[objectId]) {\n        throw new Error(`Link not found: ${objectId}`);\n      }\n    }\n    root.change((doc) => {\n      for (const objectId of objectIds) {\n        delete doc.links![objectId];\n      }\n    });\n  }\n\n  /**\n   * Removes all objects that are marked as deleted.\n   */\n  async unlinkDeletedObjects({ batchSize = 10 }: { batchSize?: number } = {}): Promise<void> {\n    const idChunks = chunkArray(this.getAllObjectIds(), batchSize);\n    for (const ids of idChunks) {\n      const objects = await this.batchLoadObjectCores(ids, { returnDeleted: true });\n      const toUnlink = objects.filter((o) => o?.isDeleted()).map((o) => o!.id);\n      this.unlinkObjects(toUnlink);\n    }\n  }\n\n  /**\n   * Resets the object to the new state.\n   * Intended way to change the type of the object (for schema migrations).\n   * Any concurrent changes made by other peers will be overwritten.\n   */\n  async atomicReplaceObject(id: ObjectId, params: AtomicReplaceObjectParams): Promise<void> {\n    const { data, type } = params;\n\n    const core = await this.loadObjectCoreById(id);\n    invariant(core);\n\n    const mappedData = deepMapValues(data, (value, recurse) => {\n      if (Ref.isRef(value)) {\n        return { '/': value.dxn.toString() };\n      }\n      return recurse(value);\n    });\n    delete mappedData.id;\n    invariant(mappedData['@type'] === undefined);\n    invariant(mappedData['@meta'] === undefined);\n\n    const existingStruct: ObjectStructure = core.getDecoded([]) as any;\n    const newStruct: ObjectStructure = {\n      ...existingStruct,\n      data: mappedData,\n    };\n\n    if (type !== undefined) {\n      newStruct.system!.type = encodeReference(Reference.fromDXN(type));\n    }\n\n    core.setDecoded([], newStruct);\n  }\n\n  async flush({ disk = true, indexes = false, updates = false }: FlushOptions = {}): Promise<void> {\n    log('flush', { disk, indexes, updates });\n    if (disk) {\n      await this._repoProxy.flush();\n      await this._dataService.flush(\n        { documentIds: this._automergeDocLoader.getAllHandles().map((handle) => handle.documentId) },\n        { timeout: RPC_TIMEOUT },\n      );\n    }\n\n    if (indexes) {\n      await this._dataService.updateIndexes(undefined, { timeout: 0 });\n    }\n\n    if (updates) {\n      await this._updateScheduler.runBlocking();\n    }\n  }\n\n  /**\n   * Returns document heads for all documents in the space.\n   */\n  async getDocumentHeads(): Promise<SpaceDocumentHeads> {\n    const root = this._automergeDocLoader.getSpaceRootDocHandle();\n    const doc = root.doc();\n    if (!doc) {\n      return { heads: {} };\n    }\n\n    const headsStates = await this._dataService.getDocumentHeads(\n      {\n        documentIds: Object.values(doc.links ?? {}).map((link) =>\n          interpretAsDocumentId(link.toString() as AutomergeUrl),\n        ),\n      },\n      { timeout: RPC_TIMEOUT },\n    );\n\n    const heads: Record<string, string[]> = {};\n    for (const state of headsStates.heads.entries ?? []) {\n      heads[state.documentId] = state.heads ?? [];\n    }\n\n    heads[root.documentId] = getHeads(doc);\n\n    return { heads };\n  }\n\n  /**\n   * Ensures that document heads have been replicated on the ECHO host.\n   * Waits for the changes to be flushed to disk.\n   * Does not ensure that this data has been propagated to the client.\n   *\n   * Note:\n   *   For queries to return up-to-date results, the client must call `this.updateIndexes()`.\n   *   This is also why flushing to disk is important.\n   */\n  // TODO(dmaretskyi): Find a way to ensure client propagation.\n  async waitUntilHeadsReplicated(heads: SpaceDocumentHeads): Promise<void> {\n    await this._dataService.waitUntilHeadsReplicated(\n      {\n        heads: {\n          entries: Object.entries(heads.heads).map(([documentId, heads]) => ({ documentId, heads })),\n        },\n      },\n      { timeout: 0 },\n    );\n  }\n\n  /**\n   * Returns document heads for all documents in the space.\n   */\n  async reIndexHeads(): Promise<void> {\n    const root = this._automergeDocLoader.getSpaceRootDocHandle();\n    const doc = root.doc();\n    invariant(doc);\n\n    await this._dataService.reIndexHeads(\n      {\n        documentIds: [\n          root.documentId,\n          ...Object.values(doc.links ?? {}).map((link) => interpretAsDocumentId(link as AutomergeUrl)),\n        ],\n      },\n      { timeout: 0 },\n    );\n  }\n\n  /**\n   * @deprecated Use `flush({ indexes: true })`.\n   */\n  async updateIndexes(): Promise<void> {\n    await this._dataService.updateIndexes(undefined, { timeout: 0 });\n  }\n\n  async getSyncState(): Promise<SpaceSyncState> {\n    const value = await Stream.first(\n      this._dataService.subscribeSpaceSyncState({ spaceId: this.spaceId }, { timeout: RPC_TIMEOUT }),\n    );\n    return value ?? raise(new Error('Failed to get sync state'));\n  }\n\n  subscribeToSyncState(ctx: Context, callback: (state: SpaceSyncState) => void): CleanupFn {\n    const stream = this._dataService.subscribeSpaceSyncState({ spaceId: this.spaceId }, { timeout: RPC_TIMEOUT });\n    stream.subscribe(\n      (data) => {\n        void runInContextAsync(ctx, () => callback(data));\n      },\n      (err) => {\n        if (err) {\n          ctx.raise(err);\n        }\n      },\n    );\n    ctx.onDispose(() => stream.close());\n    return () => stream.close();\n  }\n\n  getLoadedDocumentHandles(): DocHandleProxy<any>[] {\n    return Object.values(this._repoProxy.handles);\n  }\n\n  private async _handleSpaceRootDocumentChange(\n    spaceRootDocHandle: DocHandleProxy<DatabaseDirectory>,\n    objectsToLoad: string[],\n  ): Promise<void> {\n    const spaceRootDoc: DatabaseDirectory = spaceRootDocHandle.doc();\n    const inlinedObjectIds = new Set(Object.keys(spaceRootDoc.objects ?? {}));\n    const linkedObjectIds = new Map(Object.entries(spaceRootDoc.links ?? {}).map(([k, v]) => [k, v.toString()]));\n\n    const objectsToRebind = new Map<string, { handle: DocHandleProxy<DatabaseDirectory>; objectIds: string[] }>();\n    objectsToRebind.set(spaceRootDocHandle.url, { handle: spaceRootDocHandle, objectIds: [] });\n\n    const objectsToRemove: string[] = [];\n    const objectsToCreate = [...inlinedObjectIds.values()].filter((oid) => !this._objects.has(oid));\n\n    for (const object of this._objects.values()) {\n      if (inlinedObjectIds.has(object.id)) {\n        if (spaceRootDocHandle.url === object.docHandle?.url) {\n          continue;\n        }\n        objectsToRebind.get(spaceRootDocHandle.url)!.objectIds.push(object.id);\n      } else if (linkedObjectIds.has(object.id)) {\n        const newObjectDocUrl = linkedObjectIds.get(object.id)!;\n        if (newObjectDocUrl === object.docHandle?.url) {\n          continue;\n        }\n        const existing = objectsToRebind.get(newObjectDocUrl.toString());\n        if (existing != null) {\n          existing.objectIds.push(object.id);\n          continue;\n        }\n        const newDocHandle = this._repoProxy.find(newObjectDocUrl as DocumentId);\n        await newDocHandle.whenReady();\n        newDocHandle.doc();\n        objectsToRebind.set(newObjectDocUrl.toString(), { handle: newDocHandle, objectIds: [object.id] });\n      } else {\n        objectsToRemove.push(object.id);\n      }\n    }\n\n    objectsToRemove.forEach((oid) => this._objects.delete(oid));\n    this._createInlineObjects(spaceRootDocHandle, objectsToCreate);\n    for (const { handle, objectIds } of objectsToRebind.values()) {\n      this._rebindObjects(handle, objectIds);\n    }\n    for (const objectId of objectsToLoad) {\n      if (!this._objects.has(objectId)) {\n        this._automergeDocLoader.loadObjectDocument(objectId);\n      }\n    }\n    this._automergeDocLoader.onObjectLinksUpdated(spaceRootDoc.links);\n    this.rootChanged.emit();\n  }\n\n  private _emitObjectUpdateEvent(itemsUpdated: string[]): void {\n    if (itemsUpdated.length === 0) {\n      return;\n    }\n\n    compositeRuntime.batch(() => {\n      for (const id of itemsUpdated) {\n        const objCore = this._objects.get(id);\n        if (objCore) {\n          objCore.notifyUpdate();\n        }\n      }\n    });\n  }\n\n  /**\n   * Keep as field to have a reference to pass for unsubscribing from handle changes.\n   */\n  private readonly _onDocumentUpdate = (event: ChangeEvent<DatabaseDirectory>) => {\n    const documentChanges = this._processDocumentUpdate(event);\n    this._rebindObjects(event.handle, documentChanges.objectsToRebind);\n    this._automergeDocLoader.onObjectLinksUpdated(documentChanges.linkedDocuments);\n    this._createInlineObjects(event.handle, documentChanges.createdObjectIds);\n    this._emitObjectUpdateEvent(documentChanges.updatedObjectIds);\n    this._scheduleThrottledDbUpdate(documentChanges.updatedObjectIds);\n  };\n\n  private _processDocumentUpdate(event: ChangeEvent<DatabaseDirectory>): DocumentChanges {\n    const { inlineChangedObjects, linkedDocuments } = getInlineAndLinkChanges(event);\n    const createdObjectIds: string[] = [];\n    const objectsToRebind: string[] = [];\n    for (const updatedObject of inlineChangedObjects) {\n      const objectCore = this._objects.get(updatedObject);\n      if (!objectCore) {\n        createdObjectIds.push(updatedObject);\n      } else if (objectCore?.docHandle && objectCore.docHandle.url !== event.handle.url) {\n        log.verbose('object bound to incorrect document, going to rebind', {\n          updatedObject,\n          documentUrl: objectCore.docHandle.url,\n          actualUrl: event.handle.url,\n        });\n        objectsToRebind.push(updatedObject);\n      }\n    }\n\n    return {\n      updatedObjectIds: inlineChangedObjects,\n      objectsToRebind,\n      createdObjectIds,\n      linkedDocuments,\n    };\n  }\n\n  private _unsubscribeFromHandles(): void {\n    for (const docHandle of Object.values(this._repoProxy.handles)) {\n      docHandle.off('change', this._onDocumentUpdate);\n    }\n  }\n\n  private _onObjectDocumentLoaded({ handle, objectId }: ObjectDocumentLoaded): void {\n    handle.on('change', this._onDocumentUpdate);\n    const core = this._createObjectInDocument(handle, objectId);\n    if (this._areDepsSatisfied(core)) {\n      this._scheduleThrottledUpdate([objectId]);\n    } else {\n      for (const dep of core.getStrongDependencies()) {\n        if (dep.isLocalObjectId()) {\n          const id = dep.parts[1];\n          this._automergeDocLoader.loadObjectDocument(id);\n        }\n      }\n    }\n    for (const dep of this._strongDepsIndex.get(objectId) ?? []) {\n      const core = this._objects.get(dep);\n      if (core && this._areDepsSatisfied(core)) {\n        this._scheduleThrottledUpdate([core.id]);\n      }\n    }\n  }\n\n  /**\n   * Loads all objects on open and handles objects that are being created not by this client.\n   */\n  private _createInlineObjects(docHandle: DocHandleProxy<DatabaseDirectory>, objectIds: string[]): void {\n    for (const id of objectIds) {\n      invariant(!this._objects.has(id));\n      this._createObjectInDocument(docHandle, id);\n    }\n  }\n\n  private _createObjectInDocument(docHandle: DocHandleProxy<DatabaseDirectory>, objectId: string): ObjectCore {\n    invariant(!this._objects.get(objectId));\n    const core = new ObjectCore();\n    core.id = objectId;\n    this._objects.set(core.id, core);\n    this._automergeDocLoader.onObjectBoundToDocument(docHandle, objectId);\n    core.bind({\n      db: this,\n      docHandle,\n      path: ['objects', core.id],\n      assignFromLocalState: false,\n    });\n\n    const deps = core.getStrongDependencies();\n    for (const dxn of deps) {\n      if (!dxn.isLocalObjectId()) {\n        continue;\n      }\n      const depObjectId = dxn.parts[1];\n      if (this._objects.has(depObjectId)) {\n        continue;\n      }\n\n      defaultMap(this._strongDepsIndex, depObjectId, []).push(core.id);\n    }\n\n    return core;\n  }\n\n  private _areDepsSatisfied(core: ObjectCore, seen?: Set<ObjectId>): boolean {\n    seen ??= new Set<ObjectId>();\n    const deps = core.getStrongDependencies();\n\n    seen.add(core.id);\n    return deps.every((dep) => {\n      if (!dep.isLocalObjectId()) {\n        return true;\n      }\n      const depObjectId = dep.parts[1];\n      const depCore = this._objects.get(depObjectId);\n      if (!depCore) {\n        return false;\n      }\n      if (seen.has(depCore.id)) {\n        return true;\n      }\n      return this._areDepsSatisfied(depCore, seen);\n    });\n  }\n\n  private _rebindObjects(docHandle: DocHandleProxy<DatabaseDirectory>, objectIds: string[]): void {\n    for (const objectId of objectIds) {\n      const objectCore = this._objects.get(objectId);\n      invariant(objectCore);\n      objectCore.bind({\n        db: this,\n        docHandle,\n        path: objectCore.mountPath,\n        assignFromLocalState: false,\n      });\n      this._automergeDocLoader.onObjectBoundToDocument(docHandle, objectId);\n    }\n  }\n\n  /**\n   * Throttled db query updates. Signal updates were already emitted for these objects to immediately\n   * update the UI. This happens for locally changed objects (_onDocumentUpdate).\n   */\n  private _objectsForNextDbUpdate = new Set<string>();\n  /**\n   * Objects for which we throttled a db update event and a signal update event.\n   * This happens for objects which were loaded for the first time (_onObjectDocumentLoaded).\n   */\n  private _objectsForNextUpdate = new Set<string>();\n  private readonly _updateScheduler = new UpdateScheduler(this._ctx, async () => this._emitDbUpdateEvents(), {\n    maxFrequency: THROTTLED_UPDATE_FREQUENCY,\n  });\n\n  @trace.span({ showInBrowserTimeline: true })\n  private _emitDbUpdateEvents(): void {\n    const fullUpdateIds = [...this._objectsForNextUpdate];\n    const allDbUpdates = new Set([...this._objectsForNextUpdate, ...this._objectsForNextDbUpdate]);\n    this._objectsForNextUpdate.clear();\n    this._objectsForNextDbUpdate.clear();\n\n    compositeRuntime.batch(() => {\n      if (allDbUpdates.size > 0) {\n        this._updateEvent.emit({\n          spaceId: this.spaceId,\n          itemsUpdated: [...allDbUpdates].map((id) => ({ id })),\n        });\n      }\n      this._emitObjectUpdateEvent(fullUpdateIds);\n    });\n  }\n\n  // TODO(dmaretskyi): Pass all remote updates through this.\n  // Scheduled db and signal update events.\n  private _scheduleThrottledUpdate(objectId: string[]): void {\n    for (const id of objectId) {\n      this._objectsForNextUpdate.add(id);\n    }\n    if (DISABLE_THROTTLING) {\n      this._updateScheduler.forceTrigger();\n    } else {\n      this._updateScheduler.trigger();\n    }\n  }\n\n  // Scheduled db update event only.\n  private _scheduleThrottledDbUpdate(objectId: string[]): void {\n    for (const id of objectId) {\n      this._objectsForNextDbUpdate.add(id);\n    }\n    if (DISABLE_THROTTLING) {\n      this._updateScheduler.forceTrigger();\n    } else {\n      this._updateScheduler.trigger();\n    }\n  }\n}\n\nexport interface ItemsUpdatedEvent {\n  spaceId: SpaceId;\n  itemsUpdated: Array<{ id: string }>;\n}\n\nexport type LoadObjectOptions = {\n  timeout?: number;\n  /**\n   * Will not eagerly preload strong deps.\n   */\n  returnWithUnsatisfiedDeps?: boolean;\n};\n\nenum CoreDatabaseState {\n  CLOSED,\n  OPENING,\n  OPEN,\n}\n\nexport type SpaceDocumentHeads = {\n  /**\n   * DocumentId => Heads.\n   */\n  heads: Record<string, string[]>;\n};\n\nexport type GetObjectCoreByIdOptions = {\n  /**\n   * Request the object to be loaded if it is not already loaded.\n   * @default true\n   */\n  load?: boolean;\n};\n\nexport type AtomicReplaceObjectParams = {\n  /**\n   * Update data.\n   * NOTE: This is not merged with the existing data.\n   */\n  data: any;\n\n  /**\n   * Update object type.\n   */\n  type?: DXN;\n};\n\nexport type FlushOptions = {\n  /**\n   * Write any pending changes to disk.\n   * @default true\n   */\n  disk?: boolean;\n\n  /**\n   * Wait for pending index updates.\n   * @default false\n   */\n  indexes?: boolean;\n\n  /**\n   * Flush pending updates to objects and queries.\n   * @default false\n   */\n  updates?: boolean;\n};\n\nconst RPC_TIMEOUT = 20_000;\n\nconst DISABLE_THROTTLING = true;\n\nconst sanitizeTypename = (typename: string): DXN => {\n  if (typename.startsWith('dxn:')) {\n    return DXN.parse(typename);\n  } else {\n    if (typename.includes(':')) {\n      throw new Error(`Invalid typename: ${typename}`);\n    }\n    return new DXN(DXN.kind.TYPE, [typename]);\n  }\n};\n\nconst createCoreFromInsertData = (data: InsertData): ObjectCore => {\n  if ('id' in data) {\n    throw new Error('Cannot insert object with id');\n  }\n\n  const { __typename, ...rest } = data;\n  let type: DXN | undefined;\n  if (__typename) {\n    type = sanitizeTypename(__typename);\n  }\n\n  const fieldsMapped = deepMapValues(rest, (value, recurse) => {\n    if (isEncodedReference(value)) {\n      if (value['/'].startsWith('dxn:')) {\n        return value;\n      } else {\n        return { '/': new DXN(DXN.kind.ECHO, [LOCAL_SPACE_TAG, value['/']]).toString() };\n      }\n    } else {\n      return recurse(value);\n    }\n  });\n\n  const core = new ObjectCore();\n  core.initNewObject(fieldsMapped);\n  if (type) {\n    core.setType(Reference.fromDXN(type));\n  }\n  return core;\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { next as A } from '@automerge/automerge';\nimport { type AutomergeUrl, type DocumentId, interpretAsDocumentId } from '@automerge/automerge-repo';\n\nimport { Event } from '@dxos/async';\nimport { cancelWithContext, type Context } from '@dxos/context';\nimport { warnAfterTimeout } from '@dxos/debug';\nimport { type SpaceState, DatabaseDirectory, SpaceDocVersion } from '@dxos/echo-protocol';\nimport { assertState, invariant } from '@dxos/invariant';\nimport { type ObjectId, type PublicKey, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { trace } from '@dxos/tracing';\nimport { ComplexSet } from '@dxos/util';\n\nimport { type RepoProxy, type DocHandleProxy } from '../automerge';\n\ntype SpaceDocumentLinks = DatabaseDirectory['links'];\n\nexport interface AutomergeDocumentLoader {\n  onObjectDocumentLoaded: Event<ObjectDocumentLoaded>;\n\n  get hasRootHandle(): boolean;\n\n  getAllHandles(): DocHandleProxy<DatabaseDirectory>[];\n  /**\n   * @returns Handles linked from the space root handle.\n   */\n  getLinkedDocHandles(): DocHandleProxy<DatabaseDirectory>[];\n\n  objectPresent(id: ObjectId): boolean;\n  loadSpaceRootDocHandle(ctx: Context, spaceState: SpaceState): Promise<void>;\n  loadObjectDocument(objectId: string | string[]): void;\n  getObjectDocumentId(objectId: string): string | undefined;\n  getSpaceRootDocHandle(): DocHandleProxy<DatabaseDirectory>;\n  createDocumentForObject(objectId: string): DocHandleProxy<DatabaseDirectory>;\n  onObjectLinksUpdated(links: SpaceDocumentLinks): void;\n  onObjectBoundToDocument(handle: DocHandleProxy<DatabaseDirectory>, objectId: string): void;\n\n  /**\n   * @returns objectIds for which we had document handles or were loading one.\n   */\n  clearHandleReferences(): string[];\n}\n\n/**\n * Manages object <-> docHandle binding and automerge document loading.\n */\n@trace.resource()\nexport class AutomergeDocumentLoaderImpl implements AutomergeDocumentLoader {\n  private _spaceRootDocHandle: DocHandleProxy<DatabaseDirectory> | null = null;\n  /**\n   * An object id pointer to a handle of the document where the object is stored inline.\n   */\n  private readonly _objectDocumentHandles = new Map<string, DocHandleProxy<DatabaseDirectory>>();\n  /**\n   * If object was requested via loadObjectDocument but root document links weren't updated yet\n   * loading will be triggered in onObjectLinksUpdated callback.\n   */\n  private readonly _objectsPendingDocumentLoad = new Set<string>();\n\n  /**\n   * Keeps track of objects that are currently being loaded.\n   * Prevents multiple concurrent loads of the same document.\n   * This can happen on SpaceRootHandle switch because we don't cancel the previous load.\n   */\n  private readonly _currentlyLoadingObjects = new ComplexSet<{ url: AutomergeUrl; objectId: string }>(\n    ({ url, objectId }) => `${url}:${objectId}`,\n  );\n\n  public readonly onObjectDocumentLoaded = new Event<ObjectDocumentLoaded>();\n\n  constructor(\n    private readonly _repo: RepoProxy,\n    private readonly _spaceId: SpaceId,\n    /** Legacy Id */\n    private readonly _spaceKey: PublicKey,\n  ) {}\n\n  get hasRootHandle(): boolean {\n    return this._spaceRootDocHandle != null;\n  }\n\n  getAllHandles(): DocHandleProxy<DatabaseDirectory>[] {\n    return this._spaceRootDocHandle != null\n      ? [this._spaceRootDocHandle, ...new Set(this._objectDocumentHandles.values())]\n      : [];\n  }\n\n  getLinkedDocHandles(): DocHandleProxy<DatabaseDirectory>[] {\n    return [...new Set(this._objectDocumentHandles.values())];\n  }\n\n  @trace.span({ showInBrowserTimeline: true })\n  public async loadSpaceRootDocHandle(ctx: Context, spaceState: SpaceState): Promise<void> {\n    if (this._spaceRootDocHandle != null) {\n      return;\n    }\n    if (!spaceState.rootUrl) {\n      throw new Error('Database opened with no rootUrl');\n    }\n\n    const existingDocHandle = await this._initDocHandle(ctx, spaceState.rootUrl);\n    const doc = existingDocHandle.doc();\n    invariant(doc);\n    invariant(doc.version === SpaceDocVersion.CURRENT);\n    if (doc.access == null) {\n      this._initDocAccess(existingDocHandle);\n    }\n    this._spaceRootDocHandle = existingDocHandle;\n  }\n\n  objectPresent(id: ObjectId): boolean {\n    assertState(this._spaceRootDocHandle, 'Database was not initialized with root object.');\n    return (\n      DatabaseDirectory.getInlineObject(this._spaceRootDocHandle.doc(), id) != null ||\n      DatabaseDirectory.getLink(this._spaceRootDocHandle.doc(), id) != null\n    );\n  }\n\n  public loadObjectDocument(objectIdOrMany: string | string[]): void {\n    const objectIds = Array.isArray(objectIdOrMany) ? objectIdOrMany : [objectIdOrMany];\n    let hasUrlsToLoad = false;\n    const urlsToLoad: DatabaseDirectory['links'] = {};\n    for (const objectId of objectIds) {\n      invariant(this._spaceRootDocHandle, 'Database was not initialized with root object.');\n      if (this._objectDocumentHandles.has(objectId) || this._objectsPendingDocumentLoad.has(objectId)) {\n        continue;\n      }\n      const documentUrl = this._getLinkedDocumentUrl(objectId);\n      if (documentUrl == null) {\n        this._objectsPendingDocumentLoad.add(objectId);\n        log('loading delayed until object links are initialized', { objectId });\n      } else {\n        urlsToLoad[objectId] = documentUrl;\n        hasUrlsToLoad = true;\n      }\n    }\n    if (hasUrlsToLoad) {\n      this._loadLinkedObjects(urlsToLoad);\n    }\n  }\n\n  public getObjectDocumentId(objectId: string): string | undefined {\n    invariant(this._spaceRootDocHandle, 'Database was not initialized with root object.');\n    const spaceRootDoc = this._spaceRootDocHandle.doc();\n    invariant(spaceRootDoc);\n    if (spaceRootDoc.objects?.[objectId]) {\n      return this._spaceRootDocHandle.documentId;\n    }\n    const documentUrl = this._getLinkedDocumentUrl(objectId);\n    return documentUrl && interpretAsDocumentId(documentUrl.toString() as AutomergeUrl);\n  }\n\n  public onObjectLinksUpdated(links: SpaceDocumentLinks): void {\n    if (!links) {\n      return;\n    }\n    const linksAwaitingLoad = Object.entries(links).filter(([objectId]) =>\n      this._objectsPendingDocumentLoad.has(objectId),\n    );\n    this._loadLinkedObjects(Object.fromEntries(linksAwaitingLoad));\n    linksAwaitingLoad.forEach(([objectId]) => this._objectsPendingDocumentLoad.delete(objectId));\n  }\n\n  public getSpaceRootDocHandle(): DocHandleProxy<DatabaseDirectory> {\n    invariant(this._spaceRootDocHandle, 'Database was not initialized with root object.');\n    return this._spaceRootDocHandle;\n  }\n\n  public createDocumentForObject(objectId: string): DocHandleProxy<DatabaseDirectory> {\n    invariant(this._spaceRootDocHandle, 'Database was not initialized with root object.');\n    const spaceDocHandle = this._repo.create<DatabaseDirectory>({\n      version: SpaceDocVersion.CURRENT,\n      access: { spaceKey: this._spaceKey.toHex() },\n    });\n    this.onObjectBoundToDocument(spaceDocHandle, objectId);\n    this._spaceRootDocHandle.change((newDoc: DatabaseDirectory) => {\n      newDoc.links ??= {};\n      newDoc.links[objectId] = new A.RawString(spaceDocHandle.url);\n    });\n    return spaceDocHandle;\n  }\n\n  public onObjectBoundToDocument(handle: DocHandleProxy<DatabaseDirectory>, objectId: string): void {\n    this._objectDocumentHandles.set(objectId, handle);\n  }\n\n  public clearHandleReferences(): string[] {\n    const objectsWithHandles = [...this._objectDocumentHandles.keys()];\n    this._objectDocumentHandles.clear();\n    this._spaceRootDocHandle = null;\n    return objectsWithHandles;\n  }\n\n  private _getLinkedDocumentUrl(objectId: string): AutomergeUrl | undefined {\n    const spaceRootDoc = this._spaceRootDocHandle?.doc();\n    invariant(spaceRootDoc);\n    return (spaceRootDoc.links ?? {})[objectId]?.toString() as AutomergeUrl;\n  }\n\n  private _loadLinkedObjects(links: SpaceDocumentLinks): void {\n    if (!links) {\n      return;\n    }\n    for (const [objectId, automergeUrlData] of Object.entries(links)) {\n      const automergeUrl = automergeUrlData.toString();\n      const logMeta = { objectId, automergeUrl };\n      const objectDocumentHandle = this._objectDocumentHandles.get(objectId);\n      if (objectDocumentHandle != null && objectDocumentHandle.url !== automergeUrl) {\n        log.warn('object already inlined in a different document, ignoring the link', {\n          ...logMeta,\n          actualDocumentUrl: objectDocumentHandle.url,\n        });\n        continue;\n      }\n      if (objectDocumentHandle?.url === automergeUrl) {\n        log.warn('object document was already loaded', logMeta);\n        continue;\n      }\n      const handle = this._repo.find<DatabaseDirectory>(automergeUrl as DocumentId);\n      log.debug('document loading triggered', logMeta);\n      this._objectDocumentHandles.set(objectId, handle);\n      void this._loadHandleForObject(handle, objectId);\n    }\n  }\n\n  private async _initDocHandle(ctx: Context, url: string): Promise<DocHandleProxy<DatabaseDirectory>> {\n    const docHandle = this._repo.find<DatabaseDirectory>(url as DocumentId);\n    await warnAfterTimeout(5_000, 'Automerge root doc load timeout (CoreDatabase)', async () => {\n      await cancelWithContext(ctx, docHandle.whenReady()); // TODO(dmaretskyi): Temporary 5s timeout for debugging.\n    });\n\n    return docHandle;\n  }\n\n  private _initDocAccess(handle: DocHandleProxy<DatabaseDirectory>): void {\n    handle.change((newDoc: DatabaseDirectory) => {\n      newDoc.access ??= { spaceKey: this._spaceKey.toHex() };\n      newDoc.access.spaceKey = this._spaceKey.toHex();\n    });\n  }\n\n  private async _loadHandleForObject(handle: DocHandleProxy<DatabaseDirectory>, objectId: string): Promise<void> {\n    try {\n      if (this._currentlyLoadingObjects.has({ url: handle.url, objectId })) {\n        log.warn('document is already loading', { objectId });\n        return;\n      }\n      this._currentlyLoadingObjects.add({ url: handle.url, objectId });\n      await handle.whenReady();\n      this._currentlyLoadingObjects.delete({ url: handle.url, objectId });\n\n      const logMeta = { objectId, docUrl: handle.url };\n      if (this.onObjectDocumentLoaded.listenerCount() === 0) {\n        log.info('document loaded after all listeners were removed', logMeta);\n        return;\n      }\n      const objectDocHandle = this._objectDocumentHandles.get(objectId);\n      if (objectDocHandle?.url !== handle.url) {\n        log.warn('object was rebound while a document was loading, discarding handle', logMeta);\n        return;\n      }\n      this.onObjectDocumentLoaded.emit({ handle, objectId });\n    } catch (err) {\n      this._currentlyLoadingObjects.delete({ url: handle.url, objectId });\n      const shouldRetryLoading = this.onObjectDocumentLoaded.listenerCount() > 0;\n      log.warn('failed to load a document', {\n        objectId,\n        automergeUrl: handle.url,\n        retryLoading: shouldRetryLoading,\n        err,\n      });\n      if (shouldRetryLoading) {\n        await this._loadHandleForObject(handle, objectId);\n      }\n    }\n  }\n}\n\nexport interface ObjectDocumentLoaded {\n  handle: DocHandleProxy<DatabaseDirectory>;\n  objectId: string;\n}\n\nexport interface DocumentChanges {\n  createdObjectIds: string[];\n  updatedObjectIds: string[];\n  objectsToRebind: string[];\n  linkedDocuments: {\n    [echoId: string]: AutomergeUrl;\n  };\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { next as A } from '@automerge/automerge';\n\nimport { Event } from '@dxos/async';\nimport { Stream } from '@dxos/codec-protobuf/stream';\nimport { Context } from '@dxos/context';\nimport { filterMatchObject } from '@dxos/echo-pipeline/filter';\nimport { isEncodedReference, type DatabaseDirectory, type QueryAST } from '@dxos/echo-protocol';\nimport { type AnyEchoObject, type AnyObjectData } from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { DXN, PublicKey, SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport {\n  QueryReactivity,\n  type QueryService,\n  type QueryResult as RemoteQueryResult,\n} from '@dxos/protocols/proto/dxos/echo/query';\nimport { isNonNullable } from '@dxos/util';\n\nimport type { CoreDatabase } from './core-database';\nimport type { ObjectCore } from './object-core';\nimport { isSimpleSelectionQuery, type QueryContext, type QueryJoinSpec, type QueryResultEntry } from '../query';\n\nconst QUERY_SERVICE_TIMEOUT = 20_000;\n\n/**\n * Services plain data queries from the CoreDatabase class\n */\n// TODO(dmaretskyi): Restructure client-side query sub-systems: working-set query, host query (via service), remote agent/edge query\nexport class CoreDatabaseQueryContext implements QueryContext {\n  private _lastResult: QueryResultEntry<any>[] = [];\n\n  readonly changed = new Event();\n\n  constructor(\n    private readonly _coreDatabase: CoreDatabase,\n    private readonly _queryService: QueryService,\n  ) {}\n\n  // TODO(dmaretskyi): Make async.\n  start(): void {}\n\n  // TODO(dmaretskyi): Make async.\n  stop(): void {}\n\n  getResults(): QueryResultEntry<any>[] {\n    return this._lastResult;\n  }\n\n  async run(query: QueryAST.Query): Promise<QueryResultEntry<any>[]> {\n    const queryId = nextQueryId++;\n    // Disposed when this method exists.\n    await using ctx = new Context();\n\n    const start = Date.now();\n\n    // Special case for object id filter.\n    const trivial = isSimpleSelectionQuery(query);\n    if (!trivial) {\n      return [];\n    }\n    const { filter, options: _options } = trivial;\n\n    if (filter.type === 'object' && filter.id?.length === 1) {\n      const core = await this._coreDatabase.loadObjectCoreById(filter.id[0]);\n\n      if (!core || ctx.disposed) {\n        return [];\n      }\n\n      return (await Promise.all([this._filterMapCore(filter, core, start, undefined)])).filter(isNonNullable);\n    }\n\n    // TODO(dmaretskyi): Ensure the space id is set on filter.\n    const response = await Stream.first(\n      this._queryService.execQuery(\n        { query: JSON.stringify(query), reactivity: QueryReactivity.ONE_SHOT },\n        { timeout: QUERY_SERVICE_TIMEOUT },\n      ),\n    );\n\n    if (!response) {\n      throw new Error('Query terminated without a response.');\n    }\n\n    log('raw results', {\n      queryId,\n      length: response.results?.length ?? 0,\n    });\n\n    const processedResults = await Promise.all(\n      (response.results ?? []).map((result) => this._filterMapResult(ctx, filter, start, result)),\n    );\n    const results = processedResults.filter(isNonNullable);\n\n    // TODO(dmaretskyi): Merge in results from local working set.\n\n    log('processed results', {\n      queryId,\n      fetchedFromIndex: response.results?.length ?? 0,\n      loaded: results.length,\n    });\n\n    // TODO(dmaretskyi): Limit.\n    // if (typeof filter.options.limit === 'number') {\n    //   results = results.slice(0, filter.options.limit);\n    // }\n\n    return results;\n  }\n\n  update(query: QueryAST.Query): void {}\n\n  private async _filterMapResult(\n    ctx: Context,\n    filter: QueryAST.Filter,\n    queryStartTimestamp: number,\n    result: RemoteQueryResult,\n  ): Promise<QueryResultEntry | null> {\n    if (!SpaceId.isValid(result.spaceId)) {\n      log.warn('dropping result with invalid space id', { id: result.id, spaceId: result.spaceId });\n      return null;\n    }\n\n    /**\n     * Ignore data in the query result and fetch documents through DataService & RepoProxy.\n     */\n    const FORCE_DATA_SERVICE_FETCH = true;\n\n    if (!FORCE_DATA_SERVICE_FETCH && result.documentJson) {\n      // Return JSON snapshot.\n      return {\n        id: result.id,\n        spaceId: result.spaceId as SpaceId,\n        spaceKey: PublicKey.ZERO,\n        object: JSON.parse(result.documentJson),\n        match: { rank: result.rank },\n        resolution: { source: 'remote', time: Date.now() - queryStartTimestamp },\n      } satisfies QueryResultEntry;\n    } else if (!FORCE_DATA_SERVICE_FETCH && result.documentAutomerge) {\n      // Return snapshot from automerge CRDT.\n      const doc = A.load(result.documentAutomerge) as DatabaseDirectory;\n\n      const object = doc.objects?.[result.id];\n      if (!object) {\n        return null;\n      }\n\n      return {\n        id: result.id,\n        spaceId: result.spaceId as SpaceId,\n        spaceKey: PublicKey.ZERO,\n        object: object as unknown as AnyEchoObject, // TODO(burdon): ???\n        match: { rank: result.rank },\n        resolution: { source: 'remote', time: Date.now() - queryStartTimestamp },\n      } satisfies QueryResultEntry;\n    } else {\n      // Return CRDT from data service.\n      const objectDocId = this._coreDatabase._automergeDocLoader.getObjectDocumentId(result.id);\n      if (objectDocId !== result.documentId) {\n        log(\"documentIds don't match\", {\n          objectId: result.id,\n          expected: result.documentId,\n          actual: objectDocId ?? null,\n        });\n        return null;\n      }\n\n      const core = await this._coreDatabase.loadObjectCoreById(result.id);\n      if (!core || ctx.disposed) {\n        return null;\n      }\n\n      return this._filterMapCore(filter, core, queryStartTimestamp, result);\n    }\n  }\n\n  private async _filterMapCore(\n    filter: QueryAST.Filter,\n    core: ObjectCore,\n    queryStartTimestamp: number,\n    result: RemoteQueryResult | undefined,\n  ): Promise<QueryResultEntry | null> {\n    if (\n      !filterMatchObject(filter, {\n        doc: core.getObjectStructure(),\n        id: core.id,\n        spaceId: core.database!.spaceId,\n      })\n    ) {\n      return null;\n    }\n\n    // TODO(dmaretskyi): Joins.\n    // if (filter.options.include) {\n    //   validateJoinSpec(filter.options.include);\n    // }\n\n    // const data = await this._recursivelyJoinFields(core.toPlainObject(), filter.options.include);\n\n    return {\n      id: core.id,\n      spaceId: core.database!.spaceId,\n      spaceKey: core.database!.spaceKey,\n      object: core.toPlainObject(),\n      match: result && { rank: result.rank },\n      resolution: { source: 'remote', time: Date.now() - queryStartTimestamp },\n    } satisfies QueryResultEntry;\n  }\n\n  private async _recursivelyJoinFields(\n    data: AnyObjectData,\n    joinSpec: QueryJoinSpec | undefined,\n  ): Promise<AnyObjectData> {\n    if (!joinSpec) {\n      return data;\n    }\n\n    const newData = { ...data };\n    for (const [key, spec] of Object.entries(joinSpec)) {\n      if (spec === true || (typeof spec === 'object' && spec !== null)) {\n        if (isEncodedReference(newData[key])) {\n          const dxn = DXN.parse(newData[key]['/']);\n          invariant(dxn.isLocalObjectId());\n          const core = await this._coreDatabase.loadObjectCoreById(dxn.parts[1]);\n          newData[key] = core\n            ? await this._recursivelyJoinFields(core.toPlainObject(), spec !== true ? spec : undefined)\n            : null;\n        } else {\n          throw new Error(`Invalid join spec: ${spec}`);\n        }\n      }\n    }\n    return newData;\n  }\n}\n\n/**\n * Used for logging.\n */\nlet nextQueryId = 1;\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Patch, next as A } from '@automerge/automerge';\nimport { isValidAutomergeUrl } from '@automerge/automerge-repo';\n\nimport { type DatabaseDirectory } from '@dxos/echo-protocol';\n\nimport { type DocumentChanges } from './automerge-doc-loader';\nimport { type ChangeEvent } from '../automerge';\n\nexport const getInlineAndLinkChanges = (event: ChangeEvent<DatabaseDirectory>) => {\n  const inlineChangedObjectIds = new Set<string>();\n  const linkedDocuments: DocumentChanges['linkedDocuments'] = {};\n  for (const { path, value } of event.patches as (Patch & { value: any })[]) {\n    if (path.length < 2) {\n      continue;\n    }\n    switch (path[0]) {\n      case 'objects':\n        if (path.length >= 2) {\n          inlineChangedObjectIds.add(path[1] as string);\n        }\n        break;\n      case 'links':\n        if (path.length >= 2 && (typeof value === 'string' || value instanceof A.RawString)) {\n          const valueStr = value.toString();\n          if (isValidAutomergeUrl(valueStr)) {\n            linkedDocuments[path[1]] = valueStr;\n          }\n        }\n        break;\n    }\n  }\n  return {\n    inlineChangedObjects: [...inlineChangedObjectIds],\n    linkedDocuments,\n  };\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport type * as A from '@automerge/automerge';\nimport { Schema } from 'effect';\nimport { type InspectOptionsStylized } from 'node:util';\n\nimport { devtoolsFormatter, type DevtoolsFormatter, inspectCustom } from '@dxos/debug';\nimport { DATA_NAMESPACE, encodeReference, type ObjectStructure, PROPERTY_ID, Reference } from '@dxos/echo-protocol';\nimport {\n  ATTR_META,\n  ATTR_TYPE,\n  type BaseObject,\n  defineHiddenProperty,\n  DeletedId,\n  EchoSchema,\n  EntityKind,\n  EntityKindId,\n  getRefSavedTarget,\n  getTypeAnnotation,\n  isInstanceOf,\n  MetaId,\n  type ObjectMeta,\n  ObjectMetaSchema,\n  Ref,\n  RefImpl,\n  RelationSourceId,\n  RelationTargetId,\n  SchemaId,\n  SchemaMetaSymbol,\n  SchemaValidator,\n  setRefResolver,\n  StoredSchema,\n  TypeId,\n  type BaseEchoObject,\n  getEntityKind,\n  getSchema,\n  requireTypeReference,\n  RelationTargetDXNId,\n  RelationSourceDXNId,\n  assertObjectModelShape,\n} from '@dxos/echo-schema';\nimport { invariant, assertArgument } from '@dxos/invariant';\nimport { DXN } from '@dxos/keys';\nimport {\n  createProxy,\n  getProxyHandler,\n  getProxyTarget,\n  isLiveObject,\n  type Live,\n  type ReactiveHandler,\n  symbolIsProxy,\n} from '@dxos/live-object';\nimport { getMeta, getProxySlot } from '@dxos/live-object';\nimport { log } from '@dxos/log';\nimport { deepMapValues, defaultMap, getDeep, setDeep } from '@dxos/util';\n\nimport { getBody, getHeader } from './devtools-formatter';\nimport { EchoArray } from './echo-array';\nimport { ObjectInternals } from './echo-proxy-target';\nimport {\n  type ProxyTarget,\n  symbolHandler,\n  symbolInternals,\n  symbolNamespace,\n  symbolPath,\n  TargetKey,\n} from './echo-proxy-target';\nimport { type DecodedAutomergePrimaryValue, type KeyPath, META_NAMESPACE, ObjectCore } from '../core-db';\nimport { type EchoDatabase } from '../proxy-db';\n\n/**\n * Shared for all targets within one ECHO object.\n * @internal\n */\nexport class EchoReactiveHandler implements ReactiveHandler<ProxyTarget> {\n  public static readonly instance = new EchoReactiveHandler();\n\n  _proxyMap = new WeakMap<object, any>();\n\n  init(target: ProxyTarget): void {\n    invariant(target[symbolInternals]);\n    invariant(!(target as any)[symbolIsProxy]);\n    invariant(Array.isArray(target[symbolPath]));\n\n    // Clear extra keys from objects\n    if (!Array.isArray(target)) {\n      for (const key in target) {\n        if (typeof key !== 'symbol') {\n          delete (target as any)[key];\n        }\n      }\n    }\n\n    defineHiddenProperty(target, symbolHandler, this);\n\n    // Maybe have been set by `create`.\n    Object.defineProperty(target, inspectCustom, {\n      enumerable: false,\n      configurable: true,\n      value: this._inspect.bind(target),\n    });\n  }\n\n  ownKeys(target: ProxyTarget): ArrayLike<string | symbol> {\n    target[symbolInternals].signal.notifyRead();\n\n    const { value } = this._getDecodedValueAtPath(target);\n    const keys = typeof value === 'object' ? Reflect.ownKeys(value) : [];\n    if (isRootDataObject(target)) {\n      keys.push(PROPERTY_ID);\n    }\n    return keys;\n  }\n\n  getOwnPropertyDescriptor(target: ProxyTarget, p: string | symbol): PropertyDescriptor | undefined {\n    const { value } = this._getDecodedValueAtPath(target);\n    if (isRootDataObject(target) && p === PROPERTY_ID) {\n      return { enumerable: true, configurable: true, writable: false };\n    }\n    return typeof value === 'object' ? Reflect.getOwnPropertyDescriptor(value, p) : undefined;\n  }\n\n  defineProperty(target: ProxyTarget, property: string | symbol, attributes: PropertyDescriptor): boolean {\n    return this.set(target, property, attributes.value, target);\n  }\n\n  has(target: ProxyTarget, p: string | symbol): boolean {\n    if (target instanceof EchoArray) {\n      return this._arrayHas(target, p);\n    }\n\n    const { value } = this._getDecodedValueAtPath(target);\n    return typeof value === 'object' ? Reflect.has(value, p) : false;\n  }\n\n  get(target: ProxyTarget, prop: string | symbol, receiver: any): any {\n    invariant(Array.isArray(target[symbolPath]));\n\n    // Non reactive properties on root and nested records.\n    switch (prop) {\n      case symbolInternals:\n        return target[symbolInternals];\n      case SchemaId:\n        return this.getSchema(target);\n    }\n\n    // Non-reactive root properties.\n    if (isRootDataObject(target)) {\n      switch (prop) {\n        case 'id': {\n          return target[symbolInternals].core.id;\n        }\n        case EntityKindId: {\n          return target[symbolInternals].core.getKind();\n        }\n        case RelationSourceDXNId: {\n          return target[symbolInternals].core.getSource()?.toDXN();\n        }\n        case RelationTargetDXNId: {\n          return target[symbolInternals].core.getTarget()?.toDXN();\n        }\n        case RelationSourceId: {\n          return this._getRelationSource(target);\n        }\n        case RelationTargetId: {\n          return this._getRelationTarget(target);\n        }\n        case TypeId:\n          return this.getTypeReference(target)?.toDXN();\n        case MetaId:\n          return this.getMeta(target);\n        case DeletedId:\n          return this.isDeleted(target);\n      }\n    } else {\n      switch (prop) {\n        case EntityKindId:\n        case RelationSourceDXNId:\n        case RelationTargetDXNId:\n        case RelationSourceId:\n        case RelationTargetId:\n        case TypeId:\n        case MetaId:\n        case DeletedId:\n          return undefined;\n      }\n    }\n\n    target[symbolInternals].signal.notifyRead();\n\n    // Reactive properties on root and nested records.\n    switch (prop) {\n      case devtoolsFormatter:\n        return this._getDevtoolsFormatter(target);\n    }\n\n    // Reactive root properties.\n    if (isRootDataObject(target)) {\n      switch (prop) {\n        case 'toJSON':\n          return () => this._toJSON(target);\n        case PROPERTY_ID:\n          return target[symbolInternals].core.id;\n      }\n    }\n\n    if (typeof prop === 'symbol') {\n      return Reflect.get(target, prop);\n    }\n\n    if (target instanceof EchoArray) {\n      return this._arrayGet(target, prop);\n    }\n\n    const decodedValueAtPath = this._getDecodedValueAtPath(target, prop);\n    return this._wrapInProxyIfRequired(target, decodedValueAtPath);\n  }\n\n  // TODO(burdon): arg `receiver` not used.\n  set(target: ProxyTarget, prop: string | symbol, value: any, receiver: any): boolean {\n    invariant(Array.isArray(target[symbolPath]));\n    invariant(typeof prop === 'string');\n    if (target instanceof EchoArray && prop === 'length') {\n      this._arraySetLength(target, target[symbolPath], value);\n      return true;\n    }\n\n    const fullPath = [getNamespace(target), ...target[symbolPath], prop];\n    const validatedValue = this._validateValue(target, [...target[symbolPath], prop], value);\n    if (validatedValue === undefined) {\n      target[symbolInternals].core.delete(fullPath);\n    } else {\n      const withLinks = this._handleLinksAssignment(target, validatedValue);\n      target[symbolInternals].core.setDecoded(fullPath, withLinks);\n    }\n\n    return true;\n  }\n\n  /**\n   * @returns The typename without version for static schema or object id for dynamic schema.\n   */\n  private _getTypename(target: ProxyTarget): string | undefined {\n    const schema = this.getSchema(target);\n    // Special handling for EchoSchema. objectId is StoredSchema objectId, not a typename.\n    if (schema && typeof schema === 'object' && SchemaMetaSymbol in schema) {\n      return (schema as any)[SchemaMetaSymbol].typename;\n    }\n    return this.getTypeReference(target)?.objectId;\n  }\n\n  private _getRelationSource(target: ProxyTarget): any {\n    const sourceRef = target[symbolInternals].core.getSource();\n    invariant(sourceRef);\n    const database = target[symbolInternals].database;\n    if (database) {\n      // TODO(dmaretskyi): Put refs into proxy cache.\n      return database.graph\n        .createRefResolver({\n          context: {\n            space: database.spaceId,\n          },\n        })\n        .resolveSync(sourceRef.toDXN(), false);\n    } else {\n      invariant(target[symbolInternals].linkCache);\n      return target[symbolInternals].linkCache.get(sourceRef.objectId);\n    }\n  }\n\n  private _getRelationTarget(target: ProxyTarget): any {\n    const targetRef = target[symbolInternals].core.getTarget();\n    invariant(targetRef);\n    const database = target[symbolInternals].database;\n    if (database) {\n      return database.graph\n        .createRefResolver({\n          context: {\n            space: database.spaceId,\n          },\n        })\n        .resolveSync(targetRef.toDXN(), false);\n    } else {\n      invariant(target[symbolInternals].linkCache);\n      return target[symbolInternals].linkCache.get(targetRef.objectId);\n    }\n  }\n\n  /**\n   * Takes a decoded value from the document, and wraps it in a proxy if required.\n   * We use it to wrap records and arrays to provide deep mutability.\n   * Wrapped targets are cached in the `targetsMap` to ensure that the same proxy is returned for the same path.\n   */\n  private _wrapInProxyIfRequired(target: ProxyTarget, decodedValueAtPath: DecodedValueAtPath) {\n    const { value: decoded, dataPath, namespace } = decodedValueAtPath;\n    if (decoded == null) {\n      return decoded;\n    }\n    if (decoded[symbolIsProxy]) {\n      return this._handleStoredSchema(target, decoded);\n    }\n    if (decoded instanceof Reference) {\n      return this.lookupRef(target, decoded);\n    }\n    if (Array.isArray(decoded)) {\n      const targetKey = TargetKey.new(dataPath, namespace, 'array');\n      const newTarget = defaultMap(target[symbolInternals].targetsMap, targetKey, (): ProxyTarget => {\n        const array = new EchoArray();\n        array[symbolInternals] = target[symbolInternals];\n        array[symbolPath] = dataPath;\n        array[symbolNamespace] = namespace;\n        array[symbolHandler] = this;\n        return array;\n      });\n\n      return createProxy(newTarget, this);\n    }\n    if (typeof decoded === 'object') {\n      const targetKey = TargetKey.new(dataPath, namespace, 'record');\n      // TODO(dmaretskyi): Materialize properties for easier debugging.\n      const newTarget = defaultMap(\n        target[symbolInternals].targetsMap,\n        targetKey,\n        (): ProxyTarget => ({\n          [symbolInternals]: target[symbolInternals],\n          [symbolPath]: dataPath,\n          [symbolNamespace]: namespace,\n        }),\n      );\n\n      return createProxy(newTarget, this);\n    }\n\n    return decoded;\n  }\n\n  private _handleStoredSchema(target: ProxyTarget, object: any): any {\n    // Object instanceof StoredEchoSchema requires database to lookup schema.\n    const database = target[symbolInternals].database;\n    // TODO(dmaretskyi): isInstanceOf(StoredSchema, object)\n    if (database && isInstanceOf(StoredSchema, object)) {\n      return database.schemaRegistry._registerSchema(object);\n    }\n\n    return object;\n  }\n\n  private _getDecodedValueAtPath(target: ProxyTarget, prop?: string): DecodedValueAtPath {\n    const dataPath = [...target[symbolPath]];\n    if (prop != null) {\n      dataPath.push(prop);\n    }\n    const fullPath = [getNamespace(target), ...dataPath];\n    const value: any = target[symbolInternals].core.getDecoded(fullPath);\n    // if (value instanceof Reference) {\n    //   value = this.lookupRef(target, value);\n    // }\n\n    return { namespace: getNamespace(target), value, dataPath };\n  }\n\n  private _arrayGet(target: ProxyTarget, prop: string) {\n    invariant(target instanceof EchoArray);\n    if (prop === 'constructor') {\n      return Array.prototype.constructor;\n    }\n    if (prop !== 'length' && isNaN(parseInt(prop))) {\n      return Reflect.get(target, prop);\n    }\n\n    const decodedValueAtPath = this._getDecodedValueAtPath(target, prop);\n    return this._wrapInProxyIfRequired(target, decodedValueAtPath);\n  }\n\n  private _arrayHas(target: ProxyTarget, prop: string | symbol): boolean {\n    invariant(target instanceof EchoArray);\n    if (typeof prop === 'string') {\n      const parsedIndex = parseInt(prop);\n      const { value: length } = this._getDecodedValueAtPath(target, 'length');\n      invariant(typeof length === 'number');\n      if (!isNaN(parsedIndex)) {\n        return parsedIndex < length;\n      }\n    }\n\n    return Reflect.has(target, prop);\n  }\n\n  private _validateValue(target: ProxyTarget, path: KeyPath, value: any): any {\n    invariant(path.length > 0);\n    throwIfCustomClass(path[path.length - 1], value);\n    const rootObjectSchema = this.getSchema(target);\n    if (rootObjectSchema == null) {\n      const typeReference = target[symbolInternals].core.getType();\n      if (typeReference) {\n        // The object has schema, but we can't access it to validate the value being set.\n        throw new Error(`Schema not found in schema registry: ${typeReference.toDXN().toString()}`);\n      }\n\n      return value;\n    }\n\n    // DynamicEchoSchema is a utility-wrapper around the object we actually store in automerge, unwrap it\n    const unwrappedValue = value instanceof EchoSchema ? value.storedSchema : value;\n    const propertySchema = SchemaValidator.getPropertySchema(rootObjectSchema, path, (path) => {\n      return target[symbolInternals].core.getDecoded([getNamespace(target), ...path]);\n    });\n    if (propertySchema == null) {\n      return unwrappedValue;\n    }\n\n    const _ = Schema.asserts(propertySchema)(unwrappedValue);\n    return unwrappedValue;\n  }\n\n  private _handleLinksAssignment(target: ProxyTarget, value: any): any {\n    return deepMapValues(value, (value, recurse) => {\n      if (isEchoObjectField(value)) {\n        // The value is a value-object field of another echo-object. We don't want to create a reference\n        // to it or have shared mutability, we need to copy by value.\n        return recurse({ ...value });\n      } else if (isLiveObject(value)) {\n        throw new Error('Object references must be wrapped with `Ref.make`');\n      } else if (Ref.isRef(value)) {\n        const savedTarget = getRefSavedTarget(value);\n        if (savedTarget) {\n          return this.createRef(target, savedTarget);\n        } else {\n          return Reference.fromDXN(value.dxn);\n        }\n      } else {\n        return recurse(value);\n      }\n    });\n  }\n\n  getSchema(target: ProxyTarget): Schema.Schema.AnyNoContext | undefined {\n    if (target[symbolNamespace] === META_NAMESPACE) {\n      // TODO(dmaretskyi): Breaks tests.\n      // if (target[symbolPath].length !== 0) {\n      //   // TODO(dmaretskyi): pluck from ObjectMetaSchema.\n      //   return undefined;\n      // }\n      return ObjectMetaSchema;\n    }\n\n    // TODO(y): Make reactive.\n    // TODO(burdon): May not be attached to database yet.\n    if (!target[symbolInternals].database) {\n      // For objects created by `createObject` outside of the database.\n      if (target[symbolInternals].rootSchema != null) {\n        return target[symbolInternals].rootSchema;\n      }\n\n      return undefined;\n    }\n\n    const typeReference = target[symbolInternals].core.getType();\n    if (typeReference == null) {\n      return undefined;\n    }\n\n    const staticSchema = target[symbolInternals].database.graph.schemaRegistry.getSchemaByDXN(typeReference.toDXN());\n    if (staticSchema != null) {\n      return staticSchema;\n    }\n\n    // TODO(dmaretskyi): Check using dxn\n    if (typeReference.protocol === 'protobuf') {\n      return undefined;\n    }\n\n    return target[symbolInternals].database.schemaRegistry.query({ id: typeReference.toDXN().toString() }).runSync()[0];\n  }\n\n  getTypeReference(target: ProxyTarget): Reference | undefined {\n    return target[symbolNamespace] === DATA_NAMESPACE ? target[symbolInternals].core.getType() : undefined;\n  }\n\n  isDeleted(target: any): boolean {\n    return target[symbolInternals].core.isDeleted();\n  }\n\n  deleteProperty(target: ProxyTarget, property: string | symbol): boolean {\n    if (target instanceof EchoArray) {\n      // Note: Automerge support delete array[index] but its behavior is not consistent with JS arrays.\n      //       It works as splice but JS arrays substitute `undefined` for deleted elements.\n      //       `Undefined` values are not supported in Automerge, so we can't override this behavior.\n      log.warn('Deleting properties from EchoArray is not supported. Use `EchoArray.splice` instead.');\n      return false;\n    } else if (isRootDataObject(target) && property === PROPERTY_ID) {\n      return false;\n    } else if (typeof property === 'symbol') {\n      return false;\n    } else if (target instanceof EchoArray && isNaN(parseInt(property))) {\n      return false;\n    } else if (typeof property === 'string') {\n      const fullPath = [getNamespace(target), ...target[symbolPath], property];\n      target[symbolInternals].core.delete(fullPath);\n      return true;\n    }\n    return false;\n  }\n\n  arrayPush(target: Live<ProxyTarget>, path: KeyPath, ...items: any[]): number {\n    const validatedItems = this._validateForArray(target, path, items, target.length);\n\n    const encodedItems = this._encodeForArray(target, validatedItems);\n    return target[symbolInternals].core.arrayPush([getNamespace(target), ...path], encodedItems);\n  }\n\n  arrayPop(target: Live<ProxyTarget>, path: KeyPath): any {\n    const fullPath = this._getPropertyMountPath(target, path);\n\n    let returnValue: any | undefined;\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      returnValue = array.pop();\n    });\n\n    return returnValue;\n  }\n\n  arrayShift(target: Live<ProxyTarget>, path: KeyPath): any {\n    const fullPath = this._getPropertyMountPath(target, path);\n\n    let returnValue: any | undefined;\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      returnValue = array.shift();\n    });\n\n    return returnValue;\n  }\n\n  arrayUnshift(target: Live<ProxyTarget>, path: KeyPath, ...items: any[]): number {\n    const validatedItems = this._validateForArray(target, path, items, 0);\n\n    const fullPath = this._getPropertyMountPath(target, path);\n    const encodedItems = this._encodeForArray(target, validatedItems);\n\n    let newLength: number = -1;\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      newLength = array.unshift(...encodedItems);\n    });\n    invariant(newLength !== -1);\n\n    return newLength;\n  }\n\n  arraySplice(target: Live<ProxyTarget>, path: KeyPath, start: number, deleteCount?: number, ...items: any[]): any[] {\n    const validatedItems = this._validateForArray(target, path, items, start);\n\n    const fullPath = this._getPropertyMountPath(target, path);\n    const encodedItems = this._encodeForArray(target, validatedItems);\n\n    let deletedElements: any[] | undefined;\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      if (deleteCount != null) {\n        deletedElements = array.splice(start, deleteCount, ...encodedItems);\n      } else {\n        deletedElements = array.splice(start);\n      }\n    });\n\n    invariant(deletedElements);\n    return deletedElements;\n  }\n\n  arraySort(target: Live<ProxyTarget>, path: KeyPath, compareFn?: (v1: any, v2: any) => number): any[] {\n    const fullPath = this._getPropertyMountPath(target, path);\n\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      const sortedArray = [...array].sort(compareFn);\n      setDeep(doc, fullPath, sortedArray);\n    });\n\n    return target as EchoArray<any>;\n  }\n\n  arrayReverse(target: Live<ProxyTarget>, path: KeyPath): any[] {\n    const fullPath = this._getPropertyMountPath(target, path);\n\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      const reversedArray = [...array].reverse();\n      setDeep(doc, fullPath, reversedArray);\n    });\n\n    return target as EchoArray<any>;\n  }\n\n  getMeta(target: ProxyTarget): ObjectMeta {\n    // TODO(dmaretskyi): Reuse meta target.\n    const metaTarget: ProxyTarget = {\n      [symbolInternals]: target[symbolInternals],\n      [symbolPath]: [],\n      [symbolNamespace]: META_NAMESPACE,\n    };\n\n    return createProxy(metaTarget, this) as any;\n  }\n\n  setDatabase(target: ProxyTarget, database: EchoDatabase): void {\n    target[symbolInternals].database = database;\n  }\n\n  /**\n   * Store referenced object.\n   * Used when `set` and other mutating methods are called with a proxy.\n   * @param target - self\n   * @param proxy - the proxy that was passed to the method\n   */\n  createRef(target: ProxyTarget, proxy: any): Reference {\n    let otherEchoObj = proxy instanceof EchoSchema ? proxy.storedSchema : proxy;\n    otherEchoObj = !isEchoObject(otherEchoObj) ? createObject(otherEchoObj) : otherEchoObj;\n    const otherObjId = otherEchoObj.id;\n    invariant(typeof otherObjId === 'string' && otherObjId.length > 0);\n\n    // Note: Save proxy in `.linkCache` if the object is not yet saved in the database.\n    const database = target[symbolInternals].database;\n    if (!database) {\n      invariant(target[symbolInternals].linkCache);\n\n      // Can be caused not using `object(Expando, { ... })` constructor.\n      // TODO(dmaretskyi): Add better validation.\n      invariant(otherObjId != null);\n      target[symbolInternals].linkCache.set(otherObjId, otherEchoObj as AnyLiveObject<any>);\n      return Reference.localObjectReference(otherObjId);\n    }\n\n    // TODO(burdon): Remote?\n    const foreignDatabase = (getProxyTarget(otherEchoObj) as ProxyTarget)[symbolInternals].database;\n    if (!foreignDatabase) {\n      database.add(otherEchoObj);\n      // TODO(dmaretskyi): Is this right.\n      return Reference.localObjectReference(otherObjId);\n    }\n\n    // Note: If the object is in a different database, return a reference to a foreign database.\n    if (foreignDatabase !== database) {\n      return Reference.fromDXN(new DXN(DXN.kind.ECHO, [foreignDatabase.spaceId, otherObjId]));\n    }\n\n    return Reference.localObjectReference(otherObjId);\n  }\n\n  /**\n   * Lookup referenced object.\n   */\n  lookupRef(target: ProxyTarget, ref: Reference): Ref<any> | undefined {\n    const database = target[symbolInternals].database;\n    if (database) {\n      // TODO(dmaretskyi): Put refs into proxy cache.\n      const refImpl = new RefImpl(ref.toDXN());\n      setRefResolver(\n        refImpl,\n        database.graph.createRefResolver({\n          context: {\n            space: database.spaceId,\n          },\n          middleware: (obj) => this._handleStoredSchema(target, obj),\n        }),\n      );\n      return refImpl;\n    } else {\n      invariant(target[symbolInternals].linkCache);\n      return new RefImpl(\n        ref.toDXN(),\n        this._handleStoredSchema(target, target[symbolInternals].linkCache.get(ref.objectId)),\n      );\n    }\n  }\n\n  /**\n   *\n   */\n  saveRefs(target: ProxyTarget): void {\n    if (!target[symbolInternals].linkCache) {\n      return;\n    }\n\n    if (target[symbolInternals].linkCache) {\n      for (const obj of target[symbolInternals].linkCache.values()) {\n        this.createRef(target, obj);\n      }\n\n      target[symbolInternals].linkCache = undefined;\n    }\n  }\n\n  private _arraySetLength(target: ProxyTarget, path: KeyPath, newLength: number): void {\n    if (newLength < 0) {\n      throw new RangeError('Invalid array length');\n    }\n    const fullPath = this._getPropertyMountPath(target, path);\n\n    target[symbolInternals].core.change((doc) => {\n      const array = getDeep(doc, fullPath);\n      invariant(Array.isArray(array));\n      const trimmedArray = [...array];\n      trimmedArray.length = newLength;\n      setDeep(doc, fullPath, trimmedArray);\n    });\n  }\n\n  private _validateForArray(target: ProxyTarget, path: KeyPath, items: any[], start: number) {\n    return items.map((item, index) => {\n      return this._validateValue(target, [...path, String(start + index)], item);\n    });\n  }\n\n  // TODO(dmaretskyi): Change to not rely on object-core doing linking.\n  private _encodeForArray(target: ProxyTarget, items: any[] | undefined): any[] {\n    const linksEncoded = this._handleLinksAssignment(target, items);\n    return target[symbolInternals].core.encode(linksEncoded);\n  }\n\n  private _getPropertyMountPath(target: ProxyTarget, path: KeyPath): KeyPath {\n    return [...target[symbolInternals].core.mountPath, getNamespace(target), ...path];\n  }\n\n  // Will be bound to the proxy target.\n  _inspect = function (\n    this: ProxyTarget,\n    _: number,\n    options: InspectOptionsStylized,\n    inspectFn: (value: any, options?: InspectOptionsStylized) => string,\n  ) {\n    const handler = this[symbolHandler] as EchoReactiveHandler;\n    const typename = handler._getTypename(this);\n    const isRelation = this[symbolInternals].core.getKind() === EntityKind.Relation;\n\n    const isTyped = !!this[symbolInternals].core.getType();\n    const reified = handler._getReified(this);\n    reified.id = this[symbolInternals].core.id;\n    return `${isTyped ? 'Typed' : ''}Echo${isRelation ? 'Relation' : 'Object'}${typename ? `(${typename})` : ''} ${inspectFn(\n      reified,\n      {\n        ...options,\n        compact: true,\n        showHidden: false,\n        customInspect: false,\n      },\n    )}`;\n  };\n\n  // TODO(dmaretskyi): Re-use existing json serializer\n  private _toJSON(target: ProxyTarget): any {\n    target[symbolInternals].signal.notifyRead();\n    const typeRef = target[symbolInternals].core.getType();\n    const reified = this._getReified(target);\n    return {\n      [ATTR_TYPE]: typeRef ? encodeReference(typeRef) : undefined,\n      ...(target[symbolInternals].core.isDeleted() ? { '@deleted': true } : {}),\n      [ATTR_META]: { ...this.getMeta(target) },\n\n      // TODO(dmaretskyi): Change to just `id`.\n      '@id': target[symbolInternals].core.id,\n\n      ...deepMapValues(reified, (value, recurse) => {\n        if (value instanceof Reference) {\n          return encodeReference(value);\n        }\n        return recurse(value);\n      }),\n    };\n  }\n\n  private _getReified(target: ProxyTarget): any {\n    const dataPath = [...target[symbolPath]];\n    const fullPath = [getNamespace(target), ...dataPath];\n    return target[symbolInternals].core.getDecoded(fullPath);\n  }\n\n  private _getDevtoolsFormatter(target: ProxyTarget): DevtoolsFormatter {\n    const schema = this.getSchema(target);\n    const typename = schema ? getTypeAnnotation(schema)?.typename : undefined;\n\n    return {\n      header: (config?: any) => getHeader(typename ?? 'EchoObject', target[symbolInternals].core.id, config),\n      hasBody: () => true,\n      body: () => {\n        let data = deepMapValues(this._getReified(target), (value, recurse) => {\n          if (value instanceof Reference) {\n            return this.lookupRef(target, value);\n          }\n\n          return recurse(value);\n        });\n        if (isRootDataObject(target)) {\n          // TODO(dmaretskyi): Extract & reuse.\n          const metaTarget: ProxyTarget = {\n            [symbolInternals]: target[symbolInternals],\n            [symbolPath]: [],\n            [symbolNamespace]: META_NAMESPACE,\n          };\n          const metaReified = this._getReified(metaTarget);\n\n          data = {\n            id: target[symbolInternals].core.id,\n            '@type': this.getTypeReference(target)?.objectId,\n            '@meta': metaReified,\n            ...data,\n            '[[Schema]]': this.getSchema(target),\n            '[[Core]]': target[symbolInternals].core,\n          };\n        }\n\n        return getBody(data);\n      },\n    };\n  }\n}\n\nexport const throwIfCustomClass = (prop: KeyPath[number], value: any) => {\n  if (value == null || Array.isArray(value) || value instanceof EchoSchema || Ref.isRef(value)) {\n    return;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n  if (typeof value === 'object' && proto !== Object.prototype) {\n    throw new Error(`class instances are not supported: setting ${proto} on ${String(prop)}`);\n  }\n};\n\n// TODO(burdon): Move ProxyTarget def to echo-schema and make AnyLiveObject inherit?\nexport const getObjectCore = <T extends BaseObject>(obj: Live<T>): ObjectCore => {\n  if (!(obj as any as ProxyTarget)[symbolInternals]) {\n    throw new Error('object is not an EchoObject');\n  }\n\n  const { core } = (obj as any as ProxyTarget)[symbolInternals];\n  return core;\n};\n\n/**\n * @returns Automerge document (or a part of it) that backs the object.\n * Mostly used for debugging.\n */\nexport const getObjectDocument = (obj: AnyLiveObject<any>): A.Doc<ObjectStructure> => {\n  const core = getObjectCore(obj);\n  return getDeep(core.getDoc(), core.mountPath)!;\n};\n\nexport const isRootDataObject = (target: ProxyTarget) => {\n  const path = target[symbolPath];\n  if (!Array.isArray(path) || path.length > 0) {\n    return false;\n  }\n\n  return getNamespace(target) === DATA_NAMESPACE;\n};\n\n/**\n * @returns True if `value` is part of another EchoObject but not the root data object.\n */\nconst isEchoObjectField = (value: any) => {\n  return (\n    isLiveObject(value) &&\n    getProxyHandler(value) instanceof EchoReactiveHandler &&\n    !isRootDataObject(getProxyTarget(value))\n  );\n};\n\nconst getNamespace = (target: ProxyTarget): string => target[symbolNamespace];\n\ninterface DecodedValueAtPath {\n  value: any;\n  namespace: string;\n  dataPath: KeyPath;\n}\n\n/** @deprecated Use {@link @dxos/echo#AnyLiveObject} instead. */\n// TODO(burdon): Any shouldn't be generic (use namespace).\nexport type AnyLiveObject<T extends BaseObject = any> = Live<T> & BaseEchoObject;\n\n/**\n * @returns True if `value` is a reactive object with an EchoHandler backend.\n */\n// TODO(dmaretskyi): Reconcile with `isTypedObjectProxy`.\nexport const isEchoObject = (value: any): value is AnyLiveObject<any> => {\n  if (!isLiveObject(value)) {\n    return false;\n  }\n\n  const handler = getProxyHandler(value);\n  if (!(handler instanceof EchoReactiveHandler)) {\n    return false;\n  }\n\n  return isRootDataObject(getProxyTarget(value));\n};\n\n/**\n * Used to determine if the value should be placed at the root of a separate ECHO object.\n *\n * @returns True if `value` is a reactive object with an EchoHandler backend or a schema that has an `Object` annotation.\n */\n// TODO(dmaretskyi): Reconcile with `isEchoObject`.\nexport const isTypedObjectProxy = (value: any): value is Live<any> => {\n  if (isEchoObject(value)) {\n    return true;\n  }\n\n  const schema = getSchema(value);\n  if (schema != null) {\n    return !!getTypeAnnotation(schema);\n  }\n\n  return false;\n};\n\n/**\n * Creates a reactive ECHO object backed by a CRDT.\n * @internal\n */\n// TODO(burdon): Document lifecycle.\nexport const createObject = <T extends BaseObject>(obj: T): AnyLiveObject<T> => {\n  assertArgument(!isEchoObject(obj), 'Object is already an ECHO object');\n  const schema = getSchema(obj);\n  if (schema != null) {\n    validateSchema(schema);\n  }\n  validateInitialProps(obj);\n\n  const core = new ObjectCore();\n  if (isLiveObject(obj)) {\n    // Already an echo-schema reactive object.\n    const meta = getProxyTarget<ObjectMeta>(getMeta(obj));\n\n    // TODO(burdon): Requires comment.\n    const slot = getProxySlot(obj);\n    slot.setHandler(EchoReactiveHandler.instance);\n\n    const target = slot.target as ProxyTarget;\n    target[symbolInternals] = new ObjectInternals(core);\n    target[symbolInternals].rootSchema = schema;\n    target[symbolPath] = [];\n    target[symbolNamespace] = DATA_NAMESPACE;\n    slot.handler._proxyMap.set(target, obj);\n\n    target[symbolInternals].subscriptions.push(core.updates.on(() => target[symbolInternals].signal.notifyWrite()));\n\n    // NOTE: This call is recursively linking all nested objects\n    //  which can cause recursive loops of `createObject` if `EchoReactiveHandler` is not set prior to this call.\n    //  Do not change order.\n    initCore(core, target);\n    slot.handler.init(target);\n\n    setSchemaPropertiesOnObjectCore(target[symbolInternals], schema);\n    setRelationSourceAndTarget(target, core, schema);\n\n    if (meta && meta.keys.length > 0) {\n      target[symbolInternals].core.setMeta(meta);\n    }\n\n    return obj as any;\n  } else {\n    const target: ProxyTarget = {\n      [symbolInternals]: new ObjectInternals(core),\n      [symbolPath]: [],\n      [symbolNamespace]: DATA_NAMESPACE,\n      ...(obj as any),\n    };\n    target[symbolInternals].rootSchema = schema;\n\n    target[symbolInternals].subscriptions.push(core.updates.on(() => target[symbolInternals].signal.notifyWrite()));\n\n    initCore(core, target);\n    const proxy = createProxy<ProxyTarget>(target, EchoReactiveHandler.instance) as any;\n    setSchemaPropertiesOnObjectCore(target[symbolInternals], schema);\n    setRelationSourceAndTarget(target, core, schema);\n\n    return proxy;\n  }\n};\n\n/**\n * @internal\n */\n// TODO(burdon): Call and remove subscriptions.\nexport const destroyObject = <T extends BaseObject>(proxy: AnyLiveObject<T>) => {\n  invariant(isEchoObject(proxy));\n  const target: ProxyTarget = getProxyTarget(proxy);\n  const internals: ObjectInternals = target[symbolInternals];\n  for (const unsubscribe of internals.subscriptions) {\n    unsubscribe();\n  }\n};\n\nconst initCore = (core: ObjectCore, target: ProxyTarget) => {\n  // Handle ID pre-generated by `create`.\n  if (PROPERTY_ID in target) {\n    target[symbolInternals].core.id = target[PROPERTY_ID];\n    delete target[PROPERTY_ID];\n  }\n\n  core.initNewObject(linkAllNestedProperties(target));\n};\n\n/**\n * @internal\n */\nexport const initEchoReactiveObjectRootProxy = (core: ObjectCore, database?: EchoDatabase): AnyLiveObject<any> => {\n  const target: ProxyTarget = {\n    [symbolInternals]: new ObjectInternals(core, database),\n    [symbolPath]: [],\n    [symbolNamespace]: DATA_NAMESPACE,\n  };\n\n  // TODO(dmaretskyi): Does this need to be disposed?\n  core.updates.on(() => target[symbolInternals].signal.notifyWrite());\n\n  const obj = createProxy<ProxyTarget>(target, EchoReactiveHandler.instance) as any;\n  assertObjectModelShape(obj);\n  return obj;\n};\n\nconst validateSchema = (schema: Schema.Schema.AnyNoContext) => {\n  requireTypeReference(schema);\n  const entityKind = getEntityKind(schema);\n  invariant(entityKind === 'object' || entityKind === 'relation');\n  SchemaValidator.validateSchema(schema);\n};\n\nconst setSchemaPropertiesOnObjectCore = (\n  internals: ObjectInternals,\n  schema: Schema.Schema.AnyNoContext | undefined,\n) => {\n  if (schema != null) {\n    internals.core.setType(requireTypeReference(schema));\n\n    const kind = getEntityKind(schema);\n    invariant(kind);\n    internals.core.setKind(kind);\n  }\n};\n\nconst setRelationSourceAndTarget = (\n  target: ProxyTarget,\n  core: ObjectCore,\n  schema: Schema.Schema.AnyNoContext | undefined,\n) => {\n  const kind = schema && getEntityKind(schema);\n  if (kind === EntityKind.Relation) {\n    // `getSource` and `getTarget` don't work here since they assert entity kind.\n    const sourceRef = (target as any)[RelationSourceId];\n    const targetRef = (target as any)[RelationTargetId];\n    if (!sourceRef || !targetRef) {\n      throw new TypeError('Relation source and target must be specified');\n    }\n    if (!isLiveObject(sourceRef)) {\n      throw new TypeError('source must be an ECHO object');\n    }\n    if (!isLiveObject(targetRef)) {\n      throw new TypeError('target must be an ECHO object');\n    }\n\n    core.setSource(EchoReactiveHandler.instance.createRef(target, sourceRef));\n    core.setTarget(EchoReactiveHandler.instance.createRef(target, targetRef));\n  }\n};\n\nconst validateInitialProps = (target: any, seen: Set<object> = new Set()) => {\n  if (seen.has(target)) {\n    return;\n  }\n\n  seen.add(target);\n  for (const key in target) {\n    const value = target[key];\n    if (value === undefined) {\n      delete target[key];\n    } else if (typeof value === 'object') {\n      if (Ref.isRef(value)) {\n        // Pass refs as is.\n      } else if (value instanceof EchoSchema || isTypedObjectProxy(value)) {\n        throw new Error('Object references must be wrapped with `Ref.make`');\n      } else {\n        throwIfCustomClass(key, value);\n        validateInitialProps(target[key], seen);\n      }\n    }\n  }\n};\n\nconst linkAllNestedProperties = (target: ProxyTarget): DecodedAutomergePrimaryValue => {\n  return deepMapValues(target, (value, recurse) => {\n    if (Ref.isRef(value)) {\n      return refToEchoReference(target, value);\n    }\n\n    return recurse(value);\n  });\n};\n\nconst refToEchoReference = (target: ProxyTarget, ref: Ref<any>): Reference => {\n  const savedTarget = getRefSavedTarget(ref);\n  if (savedTarget) {\n    return EchoReactiveHandler.instance.createRef(target, savedTarget);\n  } else {\n    return Reference.fromDXN(ref.dxn);\n  }\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type JsonML } from '@dxos/debug';\n\nconst idStyle = { style: 'color: #777' };\nconst listStyle = {\n  style: 'list-style-type: none; padding: 0; margin: 0 0 0 12px; font-style: normal; position: relative',\n};\nconst liStyle = { style: 'min-height: 16px;' };\nconst nestedObjectContainerStyle = { style: 'margin: -2px 0 0; display: inline-flex' };\nconst keyStyle = { style: 'color: #881391' };\nconst defaultValueKeyStyle = { style: 'color: #777' };\nconst alteredValueKeyStyle = { style: 'color: #881391; font-weight: bolder' };\nconst nullStyle = { style: 'color: #777' };\n\nconst defaultKeys = ['id', '@type', '@meta'];\n\nexport const getHeader = (tag: string, id: string, config?: any): JsonML => {\n  return [\n    'span',\n    {\n      style: (config?.nested ? 'padding: 2px 0 0;' : '') + '\\n height: 18px;',\n    },\n    `${tag}`,\n    ['span', idStyle, `#${id}`],\n  ];\n};\n\nconst formatValue = (object: any, config?: any): JsonML => {\n  if (typeof object === 'undefined') {\n    return ['span', nullStyle, 'undefined'];\n  } else if (object === 'null') {\n    return ['span', nullStyle, 'null'];\n  } else {\n    return ['span', nestedObjectContainerStyle, ['object', { object, config }]];\n  }\n};\n\nexport const getBody = (objData: any): JsonML => {\n  return [\n    'ol',\n    listStyle,\n    ...Object.keys(objData).map(\n      (key): JsonML => [\n        'li',\n        liStyle,\n        [\n          'span',\n          defaultKeys.includes(key) ? keyStyle : key.startsWith('[[') ? defaultValueKeyStyle : alteredValueKeyStyle,\n          key,\n        ],\n        ['span', {}, ': '],\n        formatValue(objData[key], { nested: true }),\n      ],\n    ),\n  ];\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\n\nimport { type EchoReactiveHandler } from './echo-handler';\nimport { type ObjectInternals, symbolHandler, symbolInternals, symbolNamespace, symbolPath } from './echo-proxy-target';\nimport type { KeyPath } from '../core-db';\n\nexport class EchoArray<T> extends Array<T> {\n  static override get [Symbol.species]() {\n    return Array;\n  }\n\n  // Will be initialize when the proxy is created.\n  [symbolInternals]: ObjectInternals = null as any;\n  [symbolPath]: KeyPath = null as any;\n  [symbolNamespace]: string = null as any;\n  [symbolHandler]: EchoReactiveHandler = null as any;\n\n  static {\n    /**\n     * These methods will trigger proxy traps like `set` and `defineProperty` and emit signal notifications.\n     * We wrap them in a batch to avoid unnecessary signal notifications.\n     */\n    const BATCHED_METHODS = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'] as const;\n\n    for (const method of BATCHED_METHODS) {\n      const handlerMethodName = `array${method.slice(0, 1).toUpperCase()}${method.slice(1)}`;\n\n      const fn = function (this: EchoArray<any>, ...args: any[]) {\n        let result!: any;\n        compositeRuntime.batch(() => {\n          const handler = this[symbolHandler];\n          result = ((handler as any)[handlerMethodName] as Function).apply(handler, [this, this[symbolPath], ...args]);\n        });\n        return result;\n      };\n      Object.defineProperty(fn, 'name', { value: method });\n      Object.defineProperty(this.prototype, method, {\n        enumerable: false,\n        value: fn,\n      });\n    }\n  }\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Brand, type Schema } from 'effect';\n\nimport type { CleanupFn } from '@dxos/async';\nimport { inspectCustom } from '@dxos/debug';\nimport type { SchemaId } from '@dxos/echo-schema';\nimport { compositeRuntime, type GenericSignal } from '@dxos/echo-signals/runtime';\nimport { ComplexMap } from '@dxos/util';\n\nimport { type EchoArray } from './echo-array';\nimport { type AnyLiveObject, type EchoReactiveHandler } from './echo-handler';\nimport type { ObjectCore, KeyPath } from '../core-db';\nimport { type EchoDatabase } from '../proxy-db';\n\nexport const symbolPath = Symbol('path');\nexport const symbolNamespace = Symbol('namespace');\nexport const symbolHandler = Symbol('handler');\nexport const symbolInternals = Symbol('internals');\n\n/**\n * For tracking proxy targets in the `targetsMap`.\n */\ntype TargetKey = {\n  path: KeyPath;\n  namespace: string;\n  type: 'record' | 'array';\n} & Brand.Brand<'TargetKey'>;\n\nexport const TargetKey = {\n  /**\n   * Constructor function forces the order of the fields.\n   */\n  new: (path: KeyPath, namespace: string, type: 'record' | 'array'): TargetKey =>\n    ({\n      path,\n      namespace,\n      type,\n    }) as TargetKey,\n  hash: (key: TargetKey): string => JSON.stringify(key),\n};\n\n/**\n * Internal state for the proxy ECHO object.\n * Shared for the entire ECHO object in the database (maybe be composed of multiple proxies for each subrecord).\n */\nexport class ObjectInternals {\n  /**\n   * Backing ECHO object core.\n   */\n  core: ObjectCore;\n\n  /**\n   * Database.\n   * Is set on object adding to database.\n   */\n  database: EchoDatabase | undefined;\n\n  /**\n   * Signal for reactive updates to the object.\n   */\n  signal: GenericSignal = compositeRuntime.createSignal();\n\n  /**\n   * Caching targets based on key path.\n   * Only used for records and arrays.\n   */\n  targetsMap = new ComplexMap<TargetKey, ProxyTarget>((key) => JSON.stringify(key));\n\n  /**\n   * Until object is persisted in the database, the linked object references are stored in this cache.\n   * Set only when the object is not bound to a database.\n   */\n  linkCache: Map<string, AnyLiveObject<any>> | undefined = new Map<string, AnyLiveObject<any>>();\n\n  subscriptions: CleanupFn[] = [];\n\n  /**\n   * Schema of the root object.\n   * Only used if this is not bound to a database.\n   */\n  rootSchema?: Schema.Schema.AnyNoContext = undefined;\n\n  constructor(core: ObjectCore, database?: EchoDatabase) {\n    this.core = core;\n    this.database = database;\n  }\n\n  [inspectCustom] = () => `ObjectInternals(${this.core.id}${this.database ? ' bound' : ''})`;\n}\n\n/**\n * Generic proxy target type for ECHO proxy objects.\n * Targets can either be objects or arrays (instances of `EchoArrayTwoPointO`).\n * @internal\n */\nexport type ProxyTarget = {\n  [symbolInternals]: ObjectInternals;\n\n  /**\n   * `data` or `meta` namespace.\n   */\n  [symbolNamespace]: string;\n\n  /**\n   * Path within the namespace.\n   *\n   * Root objects have an empty path: `[]`.\n   */\n  [symbolPath]: KeyPath;\n\n  /**\n   * Reference to the handler.\n   * @deprecated\n   */\n  // TODO(dmaretskyi): Can be removed.\n  [symbolHandler]?: EchoReactiveHandler;\n\n  /**\n   * Used for objects created by `createObject`.\n   */\n  [SchemaId]?: Schema.Schema.AnyNoContext;\n} & ({ [key: keyof any]: any } | EchoArray<any>);\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type BaseObject, ObjectId } from '@dxos/echo-schema';\nimport { invariant, assertArgument } from '@dxos/invariant';\n\nimport { type AnyLiveObject, initEchoReactiveObjectRootProxy, isEchoObject } from './echo-handler';\nimport { getObjectCore } from './echo-handler';\nimport { symbolInternals } from './echo-proxy-target';\nimport { ObjectCore } from '../core-db';\n\nexport type CloneOptions = {\n  /**\n   * @default true\n   */\n  retainId?: boolean;\n\n  /**\n   * Additional list of objects to clone preserving references.\n   */\n  additional?: (AnyLiveObject<any> | undefined)[];\n};\n\nconst requireAutomergeCore = (obj: AnyLiveObject<any>) => {\n  const core = getObjectCore(obj);\n  invariant(core, 'object is not an EchoObject');\n  return core;\n};\n\n/**\n * Returns new unbound clone of the object.\n * @deprecated\n */\nexport const clone = <T extends BaseObject>(\n  obj: AnyLiveObject<T>,\n  { retainId = true, additional = [] }: CloneOptions = {},\n): T => {\n  assertArgument(isEchoObject(obj), 'expect obj to be an EchoObject');\n  assertArgument(retainId === true || additional.length === 0, 'retainId must be true when additional is not empty');\n\n  const clone = cloneInner(obj, retainId ? obj.id : ObjectId.random());\n  const clones: AnyLiveObject<any>[] = [clone];\n  for (const innerObj of additional) {\n    if (innerObj) {\n      clones.push(cloneInner(innerObj, retainId ? innerObj.id : ObjectId.random()));\n    }\n  }\n\n  // Update links.\n  // Ensures references work before the object is bound.\n  for (const clone of clones) {\n    if (!isEchoObject(clone)) {\n      continue;\n    }\n\n    for (const ref of clones) {\n      if (ref === clone) {\n        continue;\n      }\n\n      clone[symbolInternals as any].linkCache!.set(ref.id, ref);\n    }\n  }\n\n  return clone;\n};\n\nconst cloneInner = <T extends BaseObject>(obj: AnyLiveObject<T>, id: string): AnyLiveObject<T> => {\n  const core = requireAutomergeCore(obj);\n  const coreClone = new ObjectCore();\n  coreClone.initNewObject();\n  coreClone.id = id;\n  const proxy = initEchoReactiveObjectRootProxy(coreClone);\n  const automergeSnapshot = getObjectDoc(core);\n  coreClone.change((doc: any) => {\n    for (const key of Object.keys(automergeSnapshot)) {\n      doc[key] = automergeSnapshot[key];\n    }\n  });\n  return proxy as any;\n};\n\nconst getObjectDoc = (core: ObjectCore): any => {\n  let value = core.doc ?? core.docHandle!.doc();\n  for (const key of core.mountPath) {\n    value = (value as any)?.[key];\n  }\n  return value;\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { next as am, type Doc, type Heads, type State } from '@automerge/automerge';\n\nimport { ATTR_META, ATTR_TYPE, type BaseObject } from '@dxos/echo-schema';\nimport { assertArgument } from '@dxos/invariant';\n\nimport { isEchoObject, type AnyLiveObject } from './echo-handler';\nimport { getObjectCore } from './echo-handler';\nimport { ObjectCore } from '../core-db';\n\n/**\n * Returns the edit history of an ECHO object.\n * NOTE: This is the history of the automerge document containing the echo object.\n */\nexport const getEditHistory = (object: AnyLiveObject<any>): State<any>[] => {\n  assertArgument(isEchoObject(object), 'expected ECHO object stored in the database');\n\n  const objectCore = getObjectCore(object);\n  const doc = objectCore.getDoc();\n  const changes = am.getHistory(doc as Doc<any>);\n  return changes;\n};\n\n/**\n * @returns Snapshot of the object at the given version in the JSON format.\n */\n// TODO(dmaretskyi): Returning T is actually wrong since the object is actually in JSON format -- we should unify data formats.\nexport const checkoutVersion = <T extends BaseObject>(object: AnyLiveObject<T>, version: Heads): T => {\n  assertArgument(isEchoObject(object), 'expected ECHO object stored in the database');\n  assertArgument(Array.isArray(version), 'expected automerge heads array');\n\n  const objectCore = getObjectCore(object);\n  const doc = objectCore.getDoc();\n  const snapshot = am.view(doc as Doc<any>, version);\n\n  // TODO(dmaretskyi): Refactor so this doesn't have to create another core.\n  const versionCore = new ObjectCore();\n  versionCore.id = objectCore.id;\n  versionCore.doc = snapshot;\n  versionCore.mountPath = objectCore.mountPath;\n\n  // TODO(dmaretskyi): Fix this nonsense.\n  const { id, __typename, __meta, ...data } = versionCore.toPlainObject();\n  return {\n    id,\n    [ATTR_TYPE]: __typename,\n    [ATTR_META]: __meta,\n    ...data,\n  } as any;\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport {\n  type BaseEchoObject,\n  EntityKind,\n  EntityKindId,\n  RelationSourceId,\n  RelationTargetId,\n  type BaseObject,\n  type RelationSourceTargetRefs,\n} from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { type Live } from '@dxos/live-object';\n\nimport type { AnyLiveObject } from './echo-handler';\n\n/**\n * @deprecated Use {@link @dxos/echo#Relation.Any} instead.\n */\nexport type AnyLiveRelation<T extends BaseObject> = Live<T> & BaseEchoObject & RelationSourceTargetRefs;\n\n/**\n * @deprecated Use {@link @dxos/echo#Relation.isRelation} instead.\n */\nexport const isRelation = <T extends BaseObject>(object: AnyLiveObject<T>): object is AnyLiveRelation<T> => {\n  const kind = (object as any)[EntityKindId];\n  if (kind === undefined) {\n    throw new TypeError('Provided value is not a valid ECHO object or relation');\n  }\n  return kind === EntityKind.Relation;\n};\n\n/**\n * @deprecated Use {@link @dxos/echo#Relation.getSource} instead.\n * @returns Source ref from a relation.\n * @throws If the object is not a relation.\n */\nexport const getSource = (relation: AnyLiveObject<any>): AnyLiveObject<any> => {\n  invariant(isRelation(relation));\n  const obj = relation[RelationSourceId];\n  invariant(obj !== undefined);\n  return obj;\n};\n\n/**\n * @deprecated Use {@link @dxos/echo#Relation.getTarget} instead.\n * @returns Target ref from a relation.\n * @throws If the object is not a relation.\n */\nexport const getTarget = (relation: AnyLiveObject<any>): AnyLiveObject<any> => {\n  invariant(isRelation(relation));\n  const obj = relation[RelationTargetId];\n  invariant(obj !== undefined);\n  return obj;\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Reference } from '@dxos/echo-protocol';\nimport { type BaseObject, type ForeignKey } from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { getMeta, getProxyTarget, type Live } from '@dxos/live-object';\n\nimport { isEchoObject, type AnyLiveObject } from './echo-handler';\nimport { symbolInternals, type ProxyTarget } from './echo-proxy-target';\nimport { type EchoDatabase } from '../proxy-db';\n\nexport const getDatabaseFromObject = (obj: Live<any>): EchoDatabase | undefined => {\n  if (!isEchoObject(obj)) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const target = getProxyTarget(obj) as ProxyTarget;\n  return target[symbolInternals].database;\n};\n\n/**\n * @deprecated\n */\nexport const getReferenceWithSpaceKey = (obj: AnyLiveObject<any>): Reference | undefined => {\n  invariant(obj);\n  const db = getDatabaseFromObject(obj);\n  return db && Reference.fromObjectIdAndSpaceKey(obj.id, db.spaceKey);\n};\n\n// TODO(burdon): Factor out.\n// TODO(burdon): Impl query by meta.\nexport const findObjectWithForeignKey = <T extends BaseObject>(objects: AnyLiveObject<T>[], foreignKey: ForeignKey) => {\n  return objects.find((result) => {\n    return getMeta(result).keys.find(({ source, id }) => source === foreignKey.source && id === foreignKey.id);\n  });\n};\n\nexport const matchKeys = (a: ForeignKey[], b: ForeignKey[]): boolean => {\n  return a.some((keyA) => b.some((keyB) => keyA.source === keyB.source && keyA.id === keyB.id));\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport type { BaseObject } from '@dxos/echo-schema';\nimport { assertArgument } from '@dxos/invariant';\nimport { isLiveObject, type Live } from '@dxos/live-object';\n\nimport { getObjectCore } from './echo-handler';\nimport { symbolPath, type ProxyTarget } from './echo-proxy-target';\nimport { isValidKeyPath, type DocAccessor, type KeyPath } from '../core-db/types';\n\n//   TODO(burdon): Move to @dxos/live-object?\nexport const createDocAccessor = <T extends BaseObject>(obj: Live<T>, path: KeyPath | keyof T): DocAccessor<T> => {\n  if (!Array.isArray(path)) {\n    path = [path as any];\n  }\n\n  assertArgument(isLiveObject(obj), 'expect obj to be a LiveObject');\n  assertArgument(path === undefined || isValidKeyPath(path), 'expect path to be a valid key path');\n\n  const core = getObjectCore(obj);\n  const basePath = (obj as any as ProxyTarget)[symbolPath];\n  const fullPath = basePath ? [...basePath, ...path] : path;\n  return core.getDocAccessor(fullPath);\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { next as Automerge } from '@automerge/automerge';\n\nimport type { Live } from '@dxos/live-object';\n\nimport { createDocAccessor } from './doc-accessor';\n\nexport type ObjectVersion = {\n  heads: string[];\n};\n\nexport const ObjectVersion = Object.freeze({\n  equals: (a: ObjectVersion, b: ObjectVersion) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n  },\n});\n\n/**\n * @returns The current version of the object in the database.\n * @throws If the object is not in the database.\n */\nexport const getVersion = (obj: Live<any>): ObjectVersion => {\n  const docAccessor = createDocAccessor(obj, []);\n  const doc = docAccessor.handle.doc();\n  if (!doc) {\n    return { heads: [] };\n  }\n  return { heads: Automerge.getHeads(doc) };\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { type CleanupFn } from '@dxos/async';\n\nimport { getObjectCore, isEchoObject } from './echo-handler';\n\nexport type Selection = any[];\n\n// TODO(dmaretskyi): Convert to class.\nexport interface SubscriptionHandle {\n  update: (selection: Selection) => SubscriptionHandle;\n  subscribed: boolean;\n  unsubscribe: () => void;\n  selected: Set<any>;\n}\n\nexport type UpdateInfo = {\n  // TODO(dmaretskyi): Include metadata about the update.\n  updated: any[];\n  added: any[];\n  removed: any[];\n};\n\n/**\n * Subscribe to database updates.\n * Calls the callback when any object from the selection changes.\n * Calls the callback when the selection changes.\n * Always calls the callback on the first `selection.update` call.\n */\n// TODO(burdon): Add filter?\n// TODO(burdon): Immediately trigger callback.\n// TODO(wittjosiah): Could signals effect be used instead?\nexport const createSubscription = (onUpdate: (info: UpdateInfo) => void): SubscriptionHandle => {\n  let subscribed = true;\n  let firstUpdate = true;\n  const subscriptions = new Map<any, CleanupFn>();\n\n  const handle = {\n    update: (selection: Selection) => {\n      const newSelected = new Set(selection.filter(isEchoObject));\n      const removed = [...handle.selected].filter((item) => !newSelected.has(item));\n      const added = [...newSelected].filter((item) => !handle.selected.has(item));\n      handle.selected = newSelected;\n      if (removed.length > 0 || added.length > 0 || firstUpdate) {\n        firstUpdate = false;\n\n        removed.forEach((obj) => {\n          subscriptions.get(obj)?.();\n          subscriptions.delete(obj);\n        });\n\n        added.forEach((obj) => {\n          subscriptions.set(\n            obj,\n            getObjectCore(obj).updates.on(() => {\n              onUpdate({\n                added: [],\n                removed: [],\n                updated: [obj],\n              });\n            }),\n          );\n        });\n\n        onUpdate({\n          added,\n          removed,\n          updated: [],\n        });\n      }\n\n      return handle;\n    },\n    subscribed,\n    selected: new Set<any>(),\n    unsubscribe: () => {\n      Array.from(subscriptions.values()).forEach((unsubscribe) => unsubscribe());\n      subscriptions.clear();\n      subscribed = false;\n    },\n  };\n\n  return handle;\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { Event } from '@dxos/async';\nimport { Context } from '@dxos/context';\nimport { raise, StackTrace } from '@dxos/debug';\nimport type { Ref } from '@dxos/echo';\nimport { Query, Filter } from '@dxos/echo';\nimport {\n  ImmutableSchema,\n  RuntimeSchemaRegistry,\n  type AnyEchoObject,\n  type BaseObject,\n  type BaseSchema,\n  type ObjectId,\n} from '@dxos/echo-schema';\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\nimport { failedInvariant, invariant } from '@dxos/invariant';\nimport { DXN, type QueueSubspaceTag, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { trace } from '@dxos/tracing';\nimport { entry } from '@dxos/util';\n\nimport { type ItemsUpdatedEvent } from './core-db';\nimport { type AnyLiveObject } from './echo-handler';\nimport { type EchoDatabase, type EchoDatabaseImpl } from './proxy-db';\nimport {\n  GraphQueryContext,\n  normalizeQuery,\n  QueryResult,\n  ResultFormat,\n  SpaceQuerySource,\n  type QueryContext,\n  type QueryFn,\n  type QueryOptions,\n  type QuerySource,\n} from './query';\nimport type { Queue, QueueFactory } from './queue';\n\nconst TRACE_REF_RESOLUTION = false;\n\n/**\n * Resolution context.\n * Affects how non-absolute DXNs are resolved.\n */\nexport interface RefResolutionContext {\n  /**\n   * Space that the resolution is happening from.\n   */\n  space?: SpaceId;\n\n  /**\n   * Queue that the resolution is happening from.\n   * This queue will be searched first, and then the space it belongs to.\n   */\n  queue?: DXN;\n}\n\nexport interface RefResolverOptions {\n  /**\n   * Resolution context.\n   * Affects how non-absolute DXNs are resolved.\n   */\n  context?: RefResolutionContext;\n\n  /**\n   * Middleware to change the resolved object before returning it.\n   * @deprecated On track to be removed.\n   */\n  middleware?: (obj: BaseObject) => BaseObject;\n}\n\n/**\n * Manages cross-space database interactions.\n */\nexport class Hypergraph {\n  private readonly _databases = new Map<SpaceId, EchoDatabaseImpl>();\n  private readonly _queueFactories = new Map<SpaceId, QueueFactory>();\n\n  // TODO(burdon): Comment/rename?\n  private readonly _owningObjects = new Map<SpaceId, unknown>();\n  private readonly _schemaRegistry = new RuntimeSchemaRegistry();\n  private readonly _updateEvent = new Event<ItemsUpdatedEvent>();\n  private readonly _resolveEvents = new Map<SpaceId, Map<string, Event<AnyLiveObject<any>>>>();\n  private readonly _queryContexts = new Set<GraphQueryContext>();\n  private readonly _querySourceProviders: QuerySourceProvider[] = [];\n\n  get schemaRegistry(): RuntimeSchemaRegistry {\n    return this._schemaRegistry;\n  }\n\n  /**\n   * @deprecated\n   */\n  // TODO(burdon): Use DXN.\n  // TODO(burdon): Ensure static and dynamic schema do not have overlapping type names.\n  async getSchemaByTypename(typename: string, db: EchoDatabase): Promise<BaseSchema | undefined> {\n    const schema = this.schemaRegistry.getSchema(typename);\n    if (schema) {\n      return new ImmutableSchema(schema);\n    }\n\n    return await db.schemaRegistry.query({ typename }).firstOrUndefined();\n  }\n\n  /**\n   * Register a database.\n   * @param spaceId Space id.\n   * @param spaceKey Space key.\n   * @param database Database backend.\n   * @param owningObject Database owner, usually a space.\n   */\n  // TODO(burdon): When is the owner not a space?\n  _registerDatabase(\n    spaceId: SpaceId,\n    /** @deprecated Use spaceId */\n    database: EchoDatabaseImpl,\n    owningObject?: unknown,\n  ): void {\n    this._databases.set(spaceId, database);\n    this._owningObjects.set(spaceId, owningObject);\n    database.coreDatabase._updateEvent.on(this._onUpdate.bind(this));\n\n    const map = this._resolveEvents.get(spaceId);\n    if (map) {\n      for (const [id, event] of map) {\n        const obj = database.getObjectById(id);\n        if (obj) {\n          log('resolve', { spaceId, objectId: id });\n          event.emit(obj);\n          map.delete(id);\n        }\n      }\n    }\n\n    for (const context of this._queryContexts.values()) {\n      context.addQuerySource(new SpaceQuerySource(database));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _unregisterDatabase(spaceId: SpaceId): void {\n    // TODO(dmaretskyi): Remove db from query contexts.\n    this._databases.delete(spaceId);\n  }\n\n  /**\n   * @internal\n   */\n  _registerQueueFactory(spaceId: SpaceId, factory: QueueFactory): void {\n    this._queueFactories.set(spaceId, factory);\n  }\n\n  /**\n   * @internal\n   */\n  _unregisterQueueFactory(spaceId: SpaceId): void {\n    this._queueFactories.delete(spaceId);\n  }\n\n  _getOwningObject(spaceId: SpaceId): unknown | undefined {\n    return this._owningObjects.get(spaceId);\n  }\n\n  // Odd way to define methods types from a typedef.\n  declare query: QueryFn;\n  static {\n    this.prototype.query = this.prototype._query;\n  }\n\n  private _query(query: Query.Any | Filter.Any, options?: QueryOptions) {\n    query = Filter.is(query) ? Query.select(query) : query;\n    // TODO(dmaretskyi): Consider plain format by default.\n    const resultFormat = options?.format ?? ResultFormat.Live;\n\n    if (typeof resultFormat !== 'string') {\n      throw new TypeError('Invalid result format');\n    }\n\n    switch (resultFormat) {\n      // TODO(dmaretskyi): Remove.\n      case ResultFormat.Plain: {\n        const spaceIds = options?.spaceIds;\n        invariant(spaceIds && spaceIds.length === 1, 'Plain format requires a single space.');\n        return new QueryResult(\n          this._createPlainObjectQueryContext(spaceIds[0] as SpaceId),\n          normalizeQuery(query, options),\n        );\n      }\n      case ResultFormat.Live: {\n        return new QueryResult(this._createLiveObjectQueryContext(), normalizeQuery(query, options));\n      }\n      // TODO(dmaretskyi): Remove.\n      case ResultFormat.AutomergeDocAccessor: {\n        throw new Error('Not implemented: ResultFormat.AutomergeDocAccessor');\n      }\n      default: {\n        throw new TypeError(`Invalid result format: ${resultFormat}`);\n      }\n    }\n  }\n\n  /**\n   * @param hostDb Host database for reference resolution.\n   * @param middleware Called with the loaded object. The caller may change the object.\n   * @returns Result of `onLoad`.\n   */\n  // TODO(dmaretskyi): Restructure API: Remove middleware, move `hostDb` into context option. Make accessible on Database objects.\n  createRefResolver({ context = {}, middleware = (obj) => obj }: RefResolverOptions): Ref.Resolver {\n    // TODO(dmaretskyi): Rewrite resolution algorithm with tracks for absolute and relative DXNs.\n\n    return {\n      // TODO(dmaretskyi): Respect `load` flag.\n      resolveSync: (dxn, load, onLoad) => {\n        // TODO(dmaretskyi): Add queue objects.\n        if (dxn.kind === DXN.kind.QUEUE && dxn.asQueueDXN()?.objectId === undefined) {\n          const { spaceId, subspaceTag, queueId } = dxn.asQueueDXN()!;\n          return this._resolveQueueSync(spaceId, subspaceTag as QueueSubspaceTag, queueId);\n        }\n\n        if (dxn.kind !== DXN.kind.ECHO) {\n          return undefined; // Unsupported DXN kind.\n        }\n\n        const res = this._resolveSync(dxn, context, onLoad);\n\n        if (res) {\n          return middleware(res);\n        } else {\n          return undefined;\n        }\n      },\n      resolve: async (dxn) => {\n        const obj = await this._resolveAsync(dxn, context);\n        if (obj) {\n          return middleware(obj);\n        } else {\n          return undefined;\n        }\n      },\n\n      resolveSchema: async (dxn) => {\n        const beginTime = TRACE_REF_RESOLUTION ? performance.now() : 0;\n        let status: string = '';\n        try {\n          switch (dxn.kind) {\n            case DXN.kind.TYPE: {\n              const schema = this.schemaRegistry.getSchemaByDXN(dxn);\n              status = schema != null ? 'resolved' : 'missing';\n              return schema;\n            }\n            case DXN.kind.ECHO: {\n              status = 'error';\n              throw new Error('Not implemented: Resolving schema stored in the database');\n            }\n            default: {\n              status = 'unknown dxn';\n              return undefined;\n            }\n          }\n        } finally {\n          if (TRACE_REF_RESOLUTION) {\n            log.info('resolveSchema', { dxn: dxn.toString(), status, time: performance.now() - beginTime });\n          }\n        }\n      },\n    } satisfies Ref.Resolver;\n  }\n\n  /**\n   * @param db\n   * @param ref\n   * @param onResolve will be weakly referenced.\n   */\n  private _resolveSync(\n    dxn: DXN,\n    context: RefResolutionContext,\n    onResolve?: (obj: AnyLiveObject<any>) => void,\n  ): AnyLiveObject<any> | undefined {\n    if (!dxn.asEchoDXN()) {\n      throw new Error('Unsupported DXN kind');\n    }\n    const dxnData = dxn.asEchoDXN()!;\n    const spaceId = dxnData.spaceId ?? context.space;\n    const objectId = dxnData.echoId;\n\n    if (spaceId === undefined) {\n      throw new Error('Unable to determine space to resolve the reference from');\n    }\n\n    const db = this._databases.get(spaceId);\n    if (db) {\n      // Resolve remote reference.\n      const obj = db.getObjectById(objectId);\n      if (obj) {\n        return obj;\n      }\n    }\n\n    // TODO(dmaretskyi): Consider throwing if space not found.\n\n    if (!OBJECT_DIAGNOSTICS.has(objectId)) {\n      OBJECT_DIAGNOSTICS.set(objectId, {\n        objectId,\n        spaceId,\n        loadReason: 'reference access',\n        loadedStack: new StackTrace(),\n      });\n    }\n\n    log('trap', { spaceId, objectId });\n    if (onResolve) {\n      entry(this._resolveEvents, spaceId)\n        .orInsert(new Map())\n        .deep(objectId)\n        .orInsert(new Event())\n        .value.on(new Context(), onResolve);\n    }\n  }\n\n  private async _resolveAsync(dxn: DXN, context: RefResolutionContext): Promise<AnyEchoObject | Queue | undefined> {\n    const beginTime = TRACE_REF_RESOLUTION ? performance.now() : 0;\n    let status: string = '';\n    try {\n      switch (dxn.kind) {\n        case DXN.kind.ECHO: {\n          if (!dxn.isLocalObjectId()) {\n            status = 'error';\n            throw new Error('Cross-space references are not supported');\n          }\n          const { echoId } = dxn.asEchoDXN() ?? failedInvariant();\n\n          if (context.queue) {\n            const { subspaceTag, spaceId, queueId } = context.queue.asQueueDXN() ?? failedInvariant();\n            const obj = await this._resolveQueueObjectAsync(spaceId, subspaceTag as QueueSubspaceTag, queueId, echoId);\n            if (obj) {\n              status = 'resolved';\n              return obj;\n            }\n          }\n\n          if (!context.space) {\n            status = 'error';\n            throw new Error('Resolving context-free references is not supported');\n          }\n\n          const obj = await this._resolveDatabaseObjectAsync(context.space, echoId);\n          if (obj) {\n            status = 'resolved';\n            return obj;\n          }\n\n          status = 'missing';\n          return undefined;\n        }\n        case DXN.kind.QUEUE: {\n          const { subspaceTag, spaceId, queueId, objectId } = dxn.asQueueDXN() ?? failedInvariant();\n          if (!objectId) {\n            status = 'error';\n            return this._resolveQueueSync(spaceId, subspaceTag as QueueSubspaceTag, queueId);\n          }\n\n          const obj = await this._resolveQueueObjectAsync(spaceId, subspaceTag as QueueSubspaceTag, queueId, objectId);\n          if (obj) {\n            status = 'resolved';\n            return obj;\n          }\n\n          status = 'missing queue';\n          return undefined;\n        }\n        default: {\n          status = 'error';\n          throw new Error(`Unsupported DXN kind: ${dxn.kind}`);\n        }\n      }\n    } finally {\n      if (TRACE_REF_RESOLUTION) {\n        log.info('resolve', { dxn: dxn.toString(), status, time: performance.now() - beginTime });\n      }\n    }\n  }\n\n  private async _resolveDatabaseObjectAsync(spaceId: SpaceId, objectId: ObjectId): Promise<AnyEchoObject | undefined> {\n    const db = this._databases.get(spaceId);\n    if (!db) {\n      return undefined;\n    }\n    const {\n      objects: [obj],\n    } = await db.query(Filter.ids(objectId)).run();\n    return obj;\n  }\n\n  private _resolveQueueSync(spaceId: SpaceId, subspaceTag: QueueSubspaceTag, queueId: ObjectId): Queue | undefined {\n    const queueFactory = this._queueFactories.get(spaceId);\n    if (!queueFactory) {\n      return undefined;\n    }\n    return queueFactory.get(DXN.fromQueue(subspaceTag, spaceId, queueId));\n  }\n\n  private async _resolveQueueObjectAsync(\n    spaceId: SpaceId,\n    subspaceTag: QueueSubspaceTag,\n    queueId: ObjectId,\n    objectId: ObjectId,\n  ): Promise<AnyEchoObject | undefined> {\n    const queueFactory = this._queueFactories.get(spaceId);\n    if (!queueFactory) {\n      return undefined;\n    }\n    const queue = queueFactory.get(DXN.fromQueue(subspaceTag, spaceId, queueId));\n    if (!queue) {\n      return undefined;\n    }\n    const [obj] = await queue.getObjectsById([objectId]);\n    return obj ?? undefined;\n  }\n\n  registerQuerySourceProvider(provider: QuerySourceProvider): void {\n    this._querySourceProviders.push(provider);\n    for (const context of this._queryContexts.values()) {\n      context.addQuerySource(provider.create());\n    }\n  }\n\n  /**\n   * Does not remove the provider from active query contexts.\n   */\n  unregisterQuerySourceProvider(provider: QuerySourceProvider): void {\n    const index = this._querySourceProviders.indexOf(provider);\n    if (index !== -1) {\n      this._querySourceProviders.splice(index, 1);\n    }\n  }\n\n  private _onUpdate(updateEvent: ItemsUpdatedEvent): void {\n    const listenerMap = this._resolveEvents.get(updateEvent.spaceId);\n    if (listenerMap) {\n      compositeRuntime.batch(() => {\n        // TODO(dmaretskyi): We only care about created items.\n        for (const item of updateEvent.itemsUpdated) {\n          const listeners = listenerMap.get(item.id);\n          if (!listeners) {\n            continue;\n          }\n          const db = this._databases.get(updateEvent.spaceId);\n          if (!db) {\n            continue;\n          }\n          const obj = db.getObjectById(item.id);\n          if (!obj) {\n            continue;\n          }\n          log('resolve', { spaceId: updateEvent.spaceId, objectId: obj.id });\n          listeners.emit(obj);\n          listenerMap.delete(item.id);\n        }\n      });\n    }\n    this._updateEvent.emit(updateEvent);\n  }\n\n  private _createLiveObjectQueryContext(): QueryContext {\n    const context = new GraphQueryContext({\n      onStart: () => {\n        this._queryContexts.add(context);\n      },\n      onStop: () => {\n        this._queryContexts.delete(context);\n      },\n    });\n    for (const database of this._databases.values()) {\n      context.addQuerySource(new SpaceQuerySource(database));\n    }\n    for (const provider of this._querySourceProviders) {\n      context.addQuerySource(provider.create());\n    }\n\n    return context;\n  }\n\n  private _createPlainObjectQueryContext(spaceId: SpaceId): QueryContext {\n    const space = this._databases.get(spaceId) ?? raise(new Error(`Space not found: ${spaceId}`));\n    return space._coreDatabase._createQueryContext();\n  }\n}\n\nexport interface QuerySourceProvider {\n  create(): QuerySource;\n}\n\ntype ObjectDiagnostic = {\n  objectId: string;\n  spaceId: string;\n  loadReason: string;\n  loadedStack?: StackTrace;\n  query?: string;\n};\n\nexport const OBJECT_DIAGNOSTICS = new Map<string, ObjectDiagnostic>();\n\ntrace.diagnostic({\n  id: 'referenced-objects',\n  name: 'Referenced Objects (Client)',\n  fetch: () => {\n    return Array.from(OBJECT_DIAGNOSTICS.values()).map((object) => {\n      return {\n        objectId: object.objectId,\n        spaceId: object.spaceId,\n        loadReason: object.loadReason,\n        creationStack: object.loadedStack?.getStack(),\n        query: object.query,\n      };\n    });\n  },\n});\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport { Event, type CleanupFn } from '@dxos/async';\nimport { Resource, type Context } from '@dxos/context';\nimport {\n  TypeIdentifierAnnotationId,\n  EchoSchema,\n  getTypeIdentifierAnnotation,\n  getTypeAnnotation,\n  TypeAnnotationId,\n  StoredSchema,\n  toJsonSchema,\n  type ObjectId,\n  create,\n  createJsonSchema,\n} from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { DXN } from '@dxos/keys';\nimport { log } from '@dxos/log';\n\nimport { type EchoDatabase } from './database';\nimport type {\n  RegisterSchemaInput,\n  SchemaRegistry,\n  SchemaRegistryPreparedQuery,\n  SchemaRegistryQuery,\n  SchemaSubscriptionCallback,\n} from './schema-registry-api';\nimport { SchemaRegistryPreparedQueryImpl } from './schema-registry-prepared-query';\nimport { getObjectCore } from '../echo-handler';\nimport { Filter } from '../query';\n\nexport type EchoSchemaRegistryOptions = {\n  /**\n   * Run a reactive query for dynamic schemas.\n   * @default true\n   */\n  reactiveQuery?: boolean;\n\n  /**\n   * Preload all schema during open.\n   * @default true\n   */\n  preloadSchemaOnOpen?: boolean;\n};\n\n/**\n * Per-space set of mutable schemas.\n */\n// TODO(burdon): Reconcile with RuntimeSchemaRegistry.\nexport class EchoSchemaRegistry extends Resource implements SchemaRegistry {\n  private readonly _reactiveQuery: boolean;\n  private readonly _preloadSchemaOnOpen: boolean;\n\n  private readonly _schemaById: Map<string, EchoSchema> = new Map();\n  private readonly _schemaByType: Map<string, EchoSchema> = new Map();\n  private readonly _unsubscribeById: Map<string, CleanupFn> = new Map();\n  private readonly _schemaSubscriptionCallbacks: SchemaSubscriptionCallback[] = [];\n\n  constructor(\n    private readonly _db: EchoDatabase,\n    { reactiveQuery = true, preloadSchemaOnOpen = true }: EchoSchemaRegistryOptions = {},\n  ) {\n    super();\n    this._reactiveQuery = reactiveQuery;\n    this._preloadSchemaOnOpen = preloadSchemaOnOpen;\n  }\n\n  protected override async _open(ctx: Context): Promise<void> {\n    // Preloading schema is required for ECHO to operate.\n    // TODO(dmaretskyi): Does this change with strong object deps.\n    if (this._preloadSchemaOnOpen) {\n      const { objects } = await this._db.query(Filter.type(StoredSchema)).run();\n\n      objects.forEach((object) => this._registerSchema(object));\n    }\n\n    if (this._reactiveQuery) {\n      const unsubscribe = this._db.query(Filter.type(StoredSchema)).subscribe(({ objects }) => {\n        const currentObjectIds = new Set(objects.map((o) => o.id));\n        const newObjects = objects.filter((object) => !this._schemaById.has(object.id));\n        const removedObjects = [...this._schemaById.keys()].filter((oid) => !currentObjectIds.has(oid));\n        newObjects.forEach((obj) => this._register(obj));\n        removedObjects.forEach((idoid) => this._unregister(idoid));\n        if (newObjects.length > 0 || removedObjects.length > 0) {\n          this._notifySchemaListChanged();\n        }\n      });\n      this._ctx.onDispose(unsubscribe);\n    }\n  }\n\n  protected override async _close(ctx: Context): Promise<void> {\n    // Nothing to do.\n  }\n\n  query(query: SchemaRegistryQuery = {}): SchemaRegistryPreparedQuery<EchoSchema> {\n    const self = this;\n\n    const filterOrderResults = (schemas: EchoSchema[]) => {\n      log('Filtering schemas', { schemas, query });\n      return (\n        schemas\n          .filter((schema) => validateStoredSchemaIntegrity(schema.storedSchema))\n          .filter((object) => {\n            const idFilter = coerceArray(query.id);\n            if (idFilter.length > 0) {\n              if (object.jsonSchema.$id && !idFilter.includes(object.jsonSchema.$id)) {\n                return false;\n              }\n            }\n\n            const backingObjectIdFilter = coerceArray(query.backingObjectId);\n            if (backingObjectIdFilter.length > 0) {\n              if (!backingObjectIdFilter.includes(object.id)) {\n                return false;\n              }\n            }\n\n            const typenameFilter = coerceArray(query.typename);\n            if (typenameFilter.length > 0) {\n              if (!typenameFilter.includes(object.typename)) {\n                return false;\n              }\n            }\n\n            if (query.version) {\n              if (!query.version.match(/^[0-9.]+$/)) {\n                throw new Error('Semver version ranges not supported.');\n              }\n\n              if (object.version !== query.version) {\n                return false;\n              }\n            }\n\n            return true;\n          })\n          // TODO(dmaretskyi): Come up with a better stable sorting method (e.g. [typename, version, id]).\n          .sort((a, b) => a.id.localeCompare(b.id))\n      );\n    };\n\n    const changes = new Event();\n    let unsubscribe: CleanupFn | undefined;\n    return new SchemaRegistryPreparedQueryImpl({\n      changes,\n      getResultsSync() {\n        const objects = self._db\n          .query(Filter.type(StoredSchema))\n          .runSync()\n          .map((result) => result.object)\n          .filter((object) => object != null);\n\n        const results = filterOrderResults(\n          objects.map((stored) => {\n            return self._register(stored);\n          }),\n        );\n        return results;\n      },\n      async getResults() {\n        const { objects } = await self._db.query(Filter.type(StoredSchema)).run();\n\n        return filterOrderResults(\n          objects.map((stored) => {\n            return self._register(stored);\n          }),\n        );\n      },\n      async start() {\n        if (unsubscribe) {\n          return;\n        }\n        unsubscribe = self._subscribe(() => {\n          changes.emit();\n        });\n      },\n      async stop() {\n        unsubscribe?.();\n        unsubscribe = undefined;\n      },\n    });\n  }\n\n  // TODO(burdon): Tighten type signature to TypedObject?\n  async register(inputs: RegisterSchemaInput[]): Promise<EchoSchema[]> {\n    const results: EchoSchema[] = [];\n\n    // TODO(dmaretskyi): Check for conflicts with the schema in the DB.\n    for (const input of inputs) {\n      if (!Schema.isSchema(input)) {\n        throw new TypeError('Invalid schema');\n      }\n      results.push(this._addSchema(input));\n    }\n    return results;\n  }\n\n  public hasSchema(schema: Schema.Schema.AnyNoContext): boolean {\n    const schemaId = schema instanceof EchoSchema ? schema.id : getObjectIdFromSchema(schema);\n    return schemaId != null && this.getSchemaById(schemaId) != null;\n  }\n\n  /**\n   * @deprecated Use `query` instead.\n   */\n  public getSchema(typename: string): EchoSchema | undefined {\n    return this.query({ typename }).runSync()[0];\n  }\n\n  /**\n   * @deprecated Use `query` instead.\n   */\n  public getSchemaById(id: string): EchoSchema | undefined {\n    const existing = this._schemaById.get(id);\n    if (existing != null) {\n      return existing;\n    }\n\n    const typeObject = this._db.getObjectById(id);\n    if (typeObject == null) {\n      return undefined;\n    }\n\n    if (!Schema.is(StoredSchema)(typeObject)) {\n      log.warn('type object is not a stored schema', { id: typeObject?.id });\n      return undefined;\n    }\n\n    return this._register(typeObject);\n  }\n\n  /**\n   * @internal\n   *\n   * Registers a StoredSchema object if necessary and returns a EchoSchema object.\n   */\n  _registerSchema(schema: StoredSchema): EchoSchema {\n    const existing = this._schemaById.get(schema.id);\n    if (existing != null) {\n      return existing;\n    }\n\n    const registered = this._register(schema);\n    this._notifySchemaListChanged();\n    return registered;\n  }\n\n  private _register(schema: StoredSchema): EchoSchema {\n    const existing = this._schemaById.get(schema.id);\n    if (existing != null) {\n      return existing;\n    }\n\n    let previousTypename: string | undefined;\n    const echoSchema = new EchoSchema(schema);\n    const subscription = getObjectCore(schema).updates.on(() => {\n      echoSchema._invalidate();\n    });\n\n    if (previousTypename !== undefined && schema.typename !== previousTypename) {\n      if (this._schemaByType.get(previousTypename) === echoSchema) {\n        this._schemaByType.delete(previousTypename);\n      }\n      previousTypename = schema.typename;\n      this._schemaByType.set(schema.typename, echoSchema);\n      this._notifySchemaListChanged();\n    }\n\n    this._schemaById.set(schema.id, echoSchema);\n    this._schemaByType.set(schema.typename, echoSchema);\n    this._unsubscribeById.set(schema.id, subscription);\n    return echoSchema;\n  }\n\n  // TODO(dmaretskyi): Figure out how to migrate the usages to the async `register` method.\n  private _addSchema(schema: Schema.Schema.AnyNoContext): EchoSchema {\n    if (schema instanceof EchoSchema) {\n      schema = schema.snapshot.annotations({\n        [TypeIdentifierAnnotationId]: undefined,\n      });\n    }\n\n    const meta = getTypeAnnotation(schema);\n    invariant(meta, 'use Schema.Struct({}).pipe(Type.Obj()) or class syntax to create a valid schema');\n    const schemaToStore = create(StoredSchema, { ...meta, jsonSchema: createJsonSchema() });\n    schemaToStore.jsonSchema = toJsonSchema(\n      schema.annotations({\n        [TypeAnnotationId]: meta,\n        [TypeIdentifierAnnotationId]: `dxn:echo:@:${schemaToStore.id}`,\n      }),\n    );\n\n    const storedSchema = this._db.add(schemaToStore);\n    const result = this._register(storedSchema);\n\n    this._notifySchemaListChanged();\n    result._rebuild();\n    return result;\n  }\n\n  private _unregister(id: string): void {\n    const schema = this._schemaById.get(id);\n    if (schema != null) {\n      this._schemaById.delete(id);\n      this._schemaByType.delete(schema.typename);\n      this._unsubscribeById.get(schema.id)?.();\n      this._unsubscribeById.delete(schema.id);\n    }\n  }\n\n  private _subscribe(callback: SchemaSubscriptionCallback): CleanupFn {\n    callback([...this._schemaById.values()]);\n    this._schemaSubscriptionCallbacks.push(callback);\n    return () => {\n      const index = this._schemaSubscriptionCallbacks.indexOf(callback);\n      if (index >= 0) {\n        this._schemaSubscriptionCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  private _notifySchemaListChanged(): void {\n    const list = [...this._schemaById.values()];\n    this._schemaSubscriptionCallbacks.forEach((s) => s(list));\n  }\n}\n\nconst coerceArray = <T>(arr: T | T[] | undefined): T[] => {\n  if (arr === undefined) {\n    return [];\n  }\n  return Array.isArray(arr) ? arr : [arr];\n};\n\nconst validateStoredSchemaIntegrity = (schema: StoredSchema) => {\n  if (!schema.jsonSchema.$id && !schema.jsonSchema.$id?.startsWith('dxn:')) {\n    log.warn('Schema is missing $id or has invalid $id', { schema });\n    return false;\n  }\n\n  if (schema.jsonSchema.type !== 'object') {\n    log.warn('Schema is not of object type', { schema });\n    return false;\n  }\n\n  return true;\n};\n\nconst getObjectIdFromSchema = (schema: Schema.Schema.AnyNoContext): ObjectId | undefined => {\n  const echoIdentifier = getTypeIdentifierAnnotation(schema);\n  if (!echoIdentifier) {\n    return undefined;\n  }\n\n  const dxn = DXN.parse(echoIdentifier);\n  invariant(dxn.isLocalObjectId());\n  return dxn.parts[1];\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { Event, Mutex, type CleanupFn } from '@dxos/async';\nimport { log } from '@dxos/log';\n\nimport type { SchemaRegistryPreparedQuery } from './schema-registry-api';\n\nexport interface SchemaRegistryQueryResolver<T> {\n  changes: Event<void>;\n\n  /**\n   * Start reactive query.\n   */\n  start(): Promise<void>;\n\n  /**\n   * Stop reactive query.\n   */\n  stop(): Promise<void>;\n\n  getResults(): Promise<T[]>;\n  getResultsSync(): T[];\n}\n\n/**\n * API for the schema queries.\n */\nexport class SchemaRegistryPreparedQueryImpl<T> implements SchemaRegistryPreparedQuery<T> {\n  private readonly _mutex = new Mutex();\n  private readonly _changes = new Event<this>();\n  private _isReactiveQueryRunning = false;\n  private _subscriberCount = 0;\n  private _isFiring = false;\n\n  constructor(private readonly _resolver: SchemaRegistryQueryResolver<T>) {}\n\n  get results(): T[] {\n    if (!this._isReactiveQueryRunning && !this._isFiring) {\n      throw new Error(\n        'Query must have at least 1 subscriber for `.results` to be used. Use query.run() for single-use result retrieval.',\n      );\n    }\n    return this._resolver.getResultsSync();\n  }\n\n  run(): Promise<T[]> {\n    return this._resolver.getResults();\n  }\n\n  runSync(): T[] {\n    return this._resolver.getResultsSync();\n  }\n\n  async first(): Promise<T> {\n    const results = await this._resolver.getResults();\n    if (results.length === 0) {\n      throw new Error('Query returned 0 entries');\n    }\n\n    return results[0];\n  }\n\n  async firstOrUndefined(): Promise<T | undefined> {\n    const results = await this._resolver.getResults();\n    return results[0];\n  }\n\n  subscribe(cb?: (self: this) => void, opts?: { fire?: boolean }): CleanupFn {\n    if (cb) {\n      this._changes.on(cb);\n    }\n    this._subscriberCount++;\n    this._onSubscriberCountChange();\n\n    if (opts?.fire) {\n      if (!cb) {\n        throw new Error('Cannot fire without a callback');\n      }\n      try {\n        this._isFiring = true;\n        cb(this);\n      } finally {\n        this._isFiring = false;\n      }\n    }\n\n    return () => {\n      if (cb) {\n        this._changes.off(cb);\n      }\n      this._subscriberCount--;\n      this._onSubscriberCountChange();\n    };\n  }\n\n  private _onSubscriberCountChange(): void {\n    if (this._subscriberCount === 0) {\n      this._stop();\n    } else if (this._subscriberCount > 0) {\n      this._start();\n    }\n  }\n\n  private _start(): void {\n    if (this._isReactiveQueryRunning) {\n      return;\n    }\n    queueMicrotask(async () => {\n      using _guard = await this._mutex.acquire();\n      if (this._isReactiveQueryRunning) {\n        return;\n      }\n\n      try {\n        await this._resolver.start();\n        this._isReactiveQueryRunning = true;\n      } catch (err) {\n        log.catch(err);\n      }\n    });\n  }\n\n  private _stop(): void {\n    if (!this._isReactiveQueryRunning) {\n      return;\n    }\n    queueMicrotask(async () => {\n      using _guard = await this._mutex.acquire();\n      if (!this._isReactiveQueryRunning) {\n        return;\n      }\n\n      try {\n        await this._resolver.stop();\n        this._isReactiveQueryRunning = false;\n      } catch (err) {\n        log.catch(err);\n      }\n    });\n  }\n}\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { inspect } from 'node:util';\n\nimport { Event, type ReadOnlyEvent, synchronized } from '@dxos/async';\nimport { LifecycleState, Resource } from '@dxos/context';\nimport { inspectObject } from '@dxos/debug';\nimport {\n  assertObjectModelShape,\n  type AnyEchoObject,\n  type AnyObjectData,\n  type BaseObject,\n  type HasId,\n} from '@dxos/echo-schema';\nimport { getSchema } from '@dxos/echo-schema';\nimport { invariant } from '@dxos/invariant';\nimport { DXN, type PublicKey, type SpaceId } from '@dxos/keys';\nimport { type Live, getProxyTarget, getType, isLiveObject } from '@dxos/live-object';\nimport { log } from '@dxos/log';\nimport { type QueryService } from '@dxos/protocols/proto/dxos/echo/query';\nimport { type DataService } from '@dxos/protocols/proto/dxos/echo/service';\nimport { defaultMap } from '@dxos/util';\n\nimport { EchoSchemaRegistry } from './echo-schema-registry';\nimport type { ObjectMigration } from './object-migration';\nimport {\n  CoreDatabase,\n  type FlushOptions,\n  type LoadObjectOptions,\n  type ObjectCore,\n  type ObjectPlacement,\n} from '../core-db';\nimport type { InsertBatch, InsertData, UpdateOperation } from '../core-db/crud-api';\nimport {\n  EchoReactiveHandler,\n  type ProxyTarget,\n  type AnyLiveObject,\n  createObject,\n  getObjectCore,\n  initEchoReactiveObjectRootProxy,\n  isEchoObject,\n} from '../echo-handler';\nimport { type Hypergraph } from '../hypergraph';\nimport { Filter, type QueryFn, type QueryOptions, Query } from '../query';\n\nexport type GetObjectByIdOptions = {\n  deleted?: boolean;\n};\n\nexport type AddOptions = {\n  /**\n   * Where to place the object in the Automerge document tree.\n   * Root document is always loaded with the space.\n   * Linked documents are loaded lazily.\n   * Placing large number of objects in the root document may slow down the initial load.\n   *\n   * @default 'linked-doc'\n   */\n  placeIn?: ObjectPlacement;\n};\n\n/**\n *\n */\nexport interface EchoDatabase {\n  get graph(): Hypergraph;\n  get schemaRegistry(): EchoSchemaRegistry;\n\n  get spaceKey(): PublicKey;\n  get spaceId(): SpaceId;\n\n  toJSON(): object;\n\n  getObjectById<T extends BaseObject = any>(id: string, opts?: GetObjectByIdOptions): AnyLiveObject<T> | undefined;\n\n  /**\n   * Query objects.\n   */\n  query: QueryFn;\n\n  /**\n   * Adds object to the database.\n   */\n  // TODO(dmaretskyi): Lock to Obj.Any | Relation.Any.\n  add<T extends AnyEchoObject>(obj: Live<T>, opts?: AddOptions): Live<T & HasId>;\n\n  /**\n   * Removes object from the database.\n   */\n  // TODO(dmaretskyi): Lock to Obj.Any | Relation.Any.\n  remove<T extends AnyEchoObject>(obj: T): void;\n\n  /**\n   * Wait for all pending changes to be saved to disk.\n   */\n  flush(opts?: FlushOptions): Promise<void>;\n\n  /**\n   * Update objects.\n   * @deprecated Use `add` instead.\n   */\n  // TODO(burdon): Remove.\n  update(filter: Filter.Any, operation: UpdateOperation): Promise<void>;\n\n  /**\n   * Insert new objects.\n   * @deprecated Use `add` instead.\n   */\n  // TODO(burdon): Remove.\n  // TODO(dmaretskyi): Support meta.\n  insert(data: InsertData): Promise<AnyObjectData>;\n  insert(data: InsertBatch): Promise<AnyObjectData[]>;\n\n  /**\n   * Run migrations.\n   */\n  runMigrations(migrations: ObjectMigration[]): Promise<void>;\n\n  /**\n   * @deprecated\n   */\n  readonly pendingBatch: ReadOnlyEvent<unknown>;\n\n  /**\n   * @deprecated\n   */\n  readonly coreDatabase: CoreDatabase;\n}\n\nexport type EchoDatabaseParams = {\n  graph: Hypergraph;\n  dataService: DataService;\n  queryService: QueryService;\n  spaceId: SpaceId;\n\n  /**\n   * Run a reactive query for a set of dynamic schema.\n   * @default true\n   */\n  reactiveSchemaQuery?: boolean;\n\n  preloadSchemaOnOpen?: boolean;\n\n  /** @deprecated Use spaceId */\n  spaceKey: PublicKey;\n};\n\n/**\n * API for the database.\n * Implements EchoDatabase interface.\n */\nexport class EchoDatabaseImpl extends Resource implements EchoDatabase {\n  private readonly _schemaRegistry: EchoSchemaRegistry;\n  /**\n   * @internal\n   */\n  _coreDatabase: CoreDatabase;\n\n  private _rootUrl: string | undefined = undefined;\n\n  /**\n   * Mapping `object core` -> `root proxy` (User facing proxies).\n   * @internal\n   */\n  readonly _rootProxies = new Map<ObjectCore, AnyLiveObject<any>>();\n\n  constructor(params: EchoDatabaseParams) {\n    super();\n\n    this._coreDatabase = new CoreDatabase({\n      graph: params.graph,\n      dataService: params.dataService,\n      queryService: params.queryService,\n      spaceId: params.spaceId,\n      spaceKey: params.spaceKey,\n    });\n\n    this._schemaRegistry = new EchoSchemaRegistry(this, {\n      reactiveQuery: params.reactiveSchemaQuery,\n      preloadSchemaOnOpen: params.preloadSchemaOnOpen,\n    });\n  }\n\n  [inspect.custom]() {\n    return inspectObject(this);\n  }\n\n  toJSON() {\n    return this._coreDatabase.toJSON();\n  }\n\n  get spaceId(): SpaceId {\n    return this._coreDatabase.spaceId;\n  }\n\n  /**\n   * @deprecated Use `spaceId`.\n   */\n  get spaceKey(): PublicKey {\n    return this._coreDatabase.spaceKey;\n  }\n\n  get rootUrl(): string | undefined {\n    return this._rootUrl;\n  }\n\n  get graph(): Hypergraph {\n    return this._coreDatabase.graph;\n  }\n\n  // TODO(burdon): Rename.\n  get schemaRegistry(): EchoSchemaRegistry {\n    return this._schemaRegistry;\n  }\n\n  @synchronized\n  protected override async _open(): Promise<void> {\n    if (this._rootUrl !== undefined) {\n      await this._coreDatabase.open({ rootUrl: this._rootUrl });\n    }\n    await this._schemaRegistry.open();\n  }\n\n  @synchronized\n  protected override async _close(): Promise<void> {\n    await this._schemaRegistry.close();\n    await this._coreDatabase.close();\n  }\n\n  @synchronized\n  async setSpaceRoot(rootUrl: string): Promise<void> {\n    log('setSpaceRoot', { rootUrl });\n    const firstTime = this._rootUrl === undefined;\n    this._rootUrl = rootUrl;\n    if (this._lifecycleState === LifecycleState.OPEN) {\n      if (firstTime) {\n        await this._coreDatabase.open({ rootUrl });\n      } else {\n        await this._coreDatabase.updateSpaceState({ rootUrl });\n      }\n    }\n  }\n\n  getObjectById(id: string, { deleted = false } = {}): AnyLiveObject<any> | undefined {\n    const core = this._coreDatabase.getObjectCoreById(id);\n    if (!core || (core.isDeleted() && !deleted)) {\n      return undefined;\n    }\n\n    const object = defaultMap(this._rootProxies, core, () => initEchoReactiveObjectRootProxy(core, this));\n    invariant(isLiveObject(object));\n    return object;\n  }\n\n  // Odd way to define methods types from a typedef.\n  declare query: QueryFn;\n  static {\n    this.prototype.query = this.prototype._query;\n  }\n\n  private _query(query: Query.Any | Filter.Any, options?: QueryOptions) {\n    query = Filter.is(query) ? Query.select(query) : query;\n    return this._coreDatabase.graph.query(query, {\n      ...options,\n      spaceIds: [this.spaceId],\n    });\n  }\n\n  /**\n   * Update objects.\n   */\n  async update(filter: Filter.Any, operation: UpdateOperation): Promise<void> {\n    await this._coreDatabase.update(filter, operation);\n  }\n\n  // TODO(dmaretskyi): Support meta.\n  async insert(data: InsertData): Promise<AnyObjectData>;\n  async insert(data: InsertBatch): Promise<AnyObjectData[]>;\n  async insert(data: InsertData | InsertBatch): Promise<AnyObjectData | AnyObjectData[]> {\n    return this._coreDatabase.insert(data);\n  }\n\n  /**\n   * Add reactive object.\n   */\n  // TODO(dmaretskyi): Lock to Obj.Any | Relation.Any.\n  add<T extends BaseObject>(obj: T, opts?: AddOptions): Live<T & HasId> {\n    if (!isEchoObject(obj)) {\n      const schema = getSchema(obj);\n      if (schema != null) {\n        if (!this.schemaRegistry.hasSchema(schema) && !this.graph.schemaRegistry.hasSchema(schema)) {\n          throw createSchemaNotRegisteredError(schema);\n        }\n      }\n\n      obj = createObject(obj);\n    }\n    assertObjectModelShape(obj);\n\n    // TODO(burdon): Check if already added to db?\n    invariant(isEchoObject(obj));\n    this._rootProxies.set(getObjectCore(obj), obj);\n\n    const target = getProxyTarget(obj) as ProxyTarget;\n    EchoReactiveHandler.instance.setDatabase(target, this);\n    EchoReactiveHandler.instance.saveRefs(target);\n    this._coreDatabase.addCore(getObjectCore(obj), opts);\n\n    return obj as any;\n  }\n\n  /**\n   * Remove reactive object.\n   */\n  remove<T extends BaseObject>(obj: T): void {\n    invariant(isEchoObject(obj));\n    return this._coreDatabase.removeCore(getObjectCore(obj));\n  }\n\n  async flush(opts?: FlushOptions): Promise<void> {\n    await this._coreDatabase.flush(opts);\n  }\n\n  async runMigrations(migrations: ObjectMigration[]): Promise<void> {\n    for (const migration of migrations) {\n      const { objects } = await this._coreDatabase.graph.query(Query.select(Filter.typeDXN(migration.fromType))).run();\n      log.verbose('migrate', { from: migration.fromType, to: migration.toType, objects: objects.length });\n      for (const object of objects) {\n        const output = await migration.transform(object, { db: this });\n\n        // TODO(dmaretskyi): Output validation.\n        delete (output as any).id;\n\n        await this._coreDatabase.atomicReplaceObject(object.id, {\n          data: output,\n          type: migration.toType,\n        });\n        const postMigrationType = getType(object);\n        invariant(postMigrationType != null && DXN.equals(postMigrationType, migration.toType));\n\n        await migration.onMigration({ before: object, object, db: this });\n      }\n    }\n    await this.flush();\n  }\n\n  /**\n   * @internal\n   */\n  async _loadObjectById<T extends BaseObject>(\n    objectId: string,\n    options: LoadObjectOptions = {},\n  ): Promise<AnyLiveObject<T> | undefined> {\n    const core = await this._coreDatabase.loadObjectCoreById(objectId, options);\n    if (!core || core?.isDeleted()) {\n      return undefined;\n    }\n\n    const obj = defaultMap(this._rootProxies, core, () => initEchoReactiveObjectRootProxy(core, this));\n    invariant(isLiveObject(obj));\n    return obj;\n  }\n\n  //\n  // Deprecated API.\n  //\n\n  /**\n   * @deprecated\n   */\n  readonly pendingBatch = new Event<unknown>();\n\n  /**\n   * @deprecated\n   */\n  get coreDatabase(): CoreDatabase {\n    return this._coreDatabase;\n  }\n}\n\n// TODO(burdon): Create APIError class.\nconst createSchemaNotRegisteredError = (schema?: any) => {\n  const message = 'Schema not registered';\n  if (schema?.typename) {\n    return new Error(`${message} Schema: ${schema.typename}`);\n  }\n\n  return new Error(message);\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { asyncTimeout } from '@dxos/async';\nimport type { BaseEchoObject } from '@dxos/echo-schema';\n\nimport { getObjectCore, type AnyLiveObject } from '../echo-handler';\n\n/**\n * @param obj\n */\n// TODO(burdon): Rename/review SDK.\nexport const loadObject = <T extends BaseEchoObject>(obj: T): T => {\n  return getObjectCore(obj).getDecoded(['data']) as any;\n};\n\n/**\n * EXPERIMENTAL - the API is subject to change.\n * @param objOrArray - an echo object or collection of objects with references to other echo objects.\n * @param valueAccessor - selector for a reference that needs to be loaded.\n *                        if return type is an array the method exits when all entries are non-null.\n *                        otherwise the method exits when valueAccessor is not null.\n * @param timeout - loading timeout, defaults to 5s.\n *\n * @deprecated Use `await Ref.load()` instead.\n */\n// TODO(burdon): Rename/review SDK.\nexport const loadObjectReferences = async <\n  T extends AnyLiveObject<any>,\n  RefType,\n  DerefType = RefType extends Array<infer U> ? Array<NonNullable<U>> : NonNullable<RefType>,\n>(\n  // TODO(burdon): Must be T OR T[] not either.\n  objOrArray: T | T[],\n  valueAccessor: (obj: T) => RefType,\n  { timeout }: { timeout: number } = { timeout: 5_000 },\n): Promise<T extends T[] ? Array<DerefType> : DerefType> => {\n  const objectArray = Array.isArray(objOrArray) ? objOrArray : [objOrArray];\n  const tasks = objectArray.map((obj) => {\n    const core = getObjectCore(obj as any);\n    const value = valueAccessor(obj);\n    if (core.database == null) {\n      return value;\n    }\n\n    const isLoadedPredicate = Array.isArray(value)\n      ? () => (valueAccessor(obj) as any[]).every((v) => v != null)\n      : () => valueAccessor(obj) != null;\n    if (isLoadedPredicate()) {\n      return value;\n    }\n\n    // TODO(burdon): Timeout if trying to load object that isn't there.\n    return asyncTimeout(\n      core.database._updateEvent.waitFor(() => isLoadedPredicate()).then(() => valueAccessor(obj)),\n      timeout,\n    );\n  });\n\n  const result = await Promise.all(tasks);\n  return (Array.isArray(objOrArray) ? result : result[0]) as any;\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Schema } from 'effect';\n\nimport type { Type } from '@dxos/echo';\nimport { getSchemaDXN } from '@dxos/echo-schema';\nimport { type DXN } from '@dxos/keys';\n\nimport type { EchoDatabase } from './database';\nimport type { AnyLiveObject } from '../echo-handler';\n\ntype DefineObjectMigrationOptions<From extends Schema.Schema.AnyNoContext, To extends Schema.Schema.AnyNoContext> = {\n  from: From;\n  to: To;\n  /**\n   * Pure function that converts the old object data to the new object data.\n   */\n  // TODO(dmaretskyi): `id` should not be a part of the schema.\n  transform: (\n    from: Schema.Schema.Type<From>,\n    context: ObjectMigrationContext,\n  ) => Promise<Omit<Schema.Schema.Type<To>, 'id' | Type.KindId>>;\n\n  /**\n   * Callback that is called after the object is migrated. Called for every object that is migrated.\n   *\n   * NOTE: Database mutations performed in this callback are not guaranteed to be idempotent.\n   *       If multiple peers run the migration separately, the effects may be applied multiple times.\n   */\n  onMigration: (params: OnMigrateParams<From, To>) => Promise<void>;\n};\n\n// TODO(dmaretskyi): For future extensibility.\ntype ObjectMigrationContext = {};\n\ntype OnMigrateParams<From extends Schema.Schema.AnyNoContext, To extends Schema.Schema.AnyNoContext> = {\n  before: Schema.Schema.Type<From>;\n  object: AnyLiveObject<Schema.Schema.Type<To>>;\n  db: EchoDatabase;\n};\n\nexport type ObjectMigration = {\n  fromType: DXN;\n  toType: DXN;\n  fromSchema: Schema.Schema.AnyNoContext;\n  toSchema: Schema.Schema.AnyNoContext;\n  transform: (from: unknown, context: ObjectMigrationContext) => Promise<unknown>;\n  onMigration: (params: OnMigrateParams<any, any>) => Promise<void>;\n};\n\nexport const defineObjectMigration = <From extends Schema.Schema.AnyNoContext, To extends Schema.Schema.AnyNoContext>(\n  options: DefineObjectMigrationOptions<From, To>,\n): ObjectMigration => {\n  const fromType = getSchemaDXN(options.from);\n  if (!fromType) {\n    throw new Error('Invalid from schema');\n  }\n  const toType = getSchemaDXN(options.to);\n  if (!toType) {\n    throw new Error('Invalid to schema');\n  }\n\n  return {\n    fromType,\n    toType,\n    fromSchema: options.from,\n    toSchema: options.to,\n    transform: options.transform as any,\n    onMigration: options.onMigration as any,\n  };\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { type Obj, type Relation } from '@dxos/echo';\nimport { ObjectId, type BaseEchoObject, type HasId } from '@dxos/echo-schema';\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\nimport { invariant } from '@dxos/invariant';\nimport { DXN, SpaceId } from '@dxos/keys';\n\nimport { type Queue } from './types';\n\nexport type MemoryQueueOptions<T extends BaseEchoObject = BaseEchoObject> = {\n  spaceId?: SpaceId;\n  queueId?: string;\n  dxn?: DXN;\n  objects?: T[];\n};\n\n/**\n * In-memory queue.\n * @deprecated Use the actual queue with a mock service.\n */\nexport class MemoryQueue<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any> implements Queue<T> {\n  static make<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>({\n    spaceId,\n    queueId,\n    dxn,\n    objects,\n  }: MemoryQueueOptions<T>): MemoryQueue<T> {\n    if (!dxn) {\n      dxn = new DXN(DXN.kind.QUEUE, [spaceId ?? SpaceId.random(), queueId ?? ObjectId.random()]);\n    } else {\n      invariant(spaceId == null && queueId == null);\n    }\n\n    const queue = new MemoryQueue<T>(dxn);\n    if (objects?.length) {\n      void queue.append(objects);\n    }\n\n    return queue;\n  }\n\n  private readonly _signal = compositeRuntime.createSignal();\n\n  private _objects: T[] = [];\n\n  constructor(private readonly _dxn: DXN) {}\n\n  toJSON() {\n    return {\n      dxn: this._dxn.toString(),\n      objects: this._objects.length,\n    };\n  }\n\n  get dxn() {\n    return this._dxn;\n  }\n\n  get isLoading(): boolean {\n    return false;\n  }\n\n  get error(): Error | null {\n    return null;\n  }\n\n  get objects(): T[] {\n    this._signal.notifyRead();\n    return [...this._objects];\n  }\n\n  /**\n   * Insert into queue with optimistic update.\n   */\n  async append(objects: T[]): Promise<void> {\n    this._objects = [...this._objects, ...objects];\n    this._signal.notifyWrite();\n  }\n\n  async queryObjects(): Promise<T[]> {\n    return this._objects;\n  }\n\n  async getObjectsById(ids: ObjectId[]): Promise<(T | null)[]> {\n    return ids.map((id) => this._objects.find((object) => (object as HasId).id === id) ?? null);\n  }\n\n  async delete(ids: ObjectId[]): Promise<void> {\n    // TODO(dmaretskyi): Restrict types.\n    this._objects = this._objects.filter((object) => !ids.includes((object as HasId).id));\n    this._signal.notifyWrite();\n  }\n\n  async refresh(): Promise<void> {\n    // No-op.\n  }\n}\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { Obj, type Ref, type Relation } from '@dxos/echo';\nimport { type AnyEchoObject, type HasId, assertObjectModelShape } from '@dxos/echo-schema';\nimport { compositeRuntime } from '@dxos/echo-signals/runtime';\nimport { failedInvariant } from '@dxos/invariant';\nimport { type DXN, type ObjectId, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\n\nimport type { QueueService } from './queue-service';\nimport type { Queue } from './types';\n\nconst TRACE_QUEUE_LOAD = false;\n\n/**\n * Client-side view onto an EDGE queue.\n */\nexport class QueueImpl<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any> implements Queue<T> {\n  private readonly _signal = compositeRuntime.createSignal();\n\n  private readonly _subspaceTag: string;\n  private readonly _spaceId: SpaceId;\n  private readonly _queueId: string;\n\n  private _objectCache = new Map<ObjectId, T>();\n  private _objects: T[] = [];\n  private _isLoading = true;\n  private _error: Error | null = null;\n  private _refreshId = 0;\n  private _querying = false;\n\n  constructor(\n    private readonly _service: QueueService,\n    private readonly _refResolver: Ref.Resolver,\n    private readonly _dxn: DXN,\n  ) {\n    const { subspaceTag, spaceId, queueId } = this._dxn.asQueueDXN() ?? {};\n    this._subspaceTag = subspaceTag ?? failedInvariant();\n    this._spaceId = spaceId ?? failedInvariant();\n    this._queueId = queueId ?? failedInvariant();\n  }\n\n  toJSON() {\n    return {\n      dxn: this._dxn.toString(),\n      objects: this._objects.length,\n    };\n  }\n\n  // TODO(burdon): Rename to objects.\n  get dxn() {\n    return this._dxn;\n  }\n\n  get isLoading(): boolean {\n    this._signal.notifyRead();\n    return this._isLoading;\n  }\n\n  get error(): Error | null {\n    this._signal.notifyRead();\n    return this._error;\n  }\n\n  get objects(): T[] {\n    this._signal.notifyRead();\n    return this._objects;\n  }\n\n  /**\n   * Insert into queue with optimistic update.\n   */\n  async append(items: T[]): Promise<void> {\n    items.forEach((item) => assertObjectModelShape(item));\n\n    // Optimistic update.\n    this._objects = [...this._objects, ...items];\n    for (const item of items) {\n      this._objectCache.set(item.id, item as T);\n    }\n    this._signal.notifyWrite();\n\n    try {\n      await this._service.insertIntoQueue(\n        this._subspaceTag,\n        this._spaceId,\n        this._queueId,\n        items.map((item) => Obj.toJSON(item)),\n      );\n    } catch (err) {\n      log.catch(err);\n      this._error = err as Error;\n      this._signal.notifyWrite();\n    }\n  }\n\n  async delete(ids: string[]): Promise<void> {\n    // Optimistic update.\n    // TODO(dmaretskyi): Restrict types.\n    this._objects = this._objects.filter((item) => !ids.includes((item as HasId).id));\n    for (const id of ids) {\n      this._objectCache.delete(id);\n    }\n    this._signal.notifyWrite();\n\n    try {\n      await this._service.deleteFromQueue(this._subspaceTag, this._spaceId, this._queueId, ids);\n    } catch (err) {\n      this._error = err as Error;\n      this._signal.notifyWrite();\n    }\n  }\n\n  async queryObjects(): Promise<T[]> {\n    const { objects } = await this._service.queryQueue(this._subspaceTag, this._spaceId, { queueId: this._queueId });\n    const decodedObjects = await Promise.all(\n      objects.map(async (obj) => {\n        const decoded = await Obj.fromJSON(obj, { refResolver: this._refResolver });\n        this._objectCache.set(decoded.id, decoded as T);\n        return decoded;\n      }),\n    );\n    return decodedObjects as T[];\n  }\n\n  async getObjectsById(ids: ObjectId[]): Promise<(T | null)[]> {\n    const missingIds = ids.filter((id) => !this._objectCache.has(id));\n    if (missingIds.length > 0) {\n      if (!this._querying) {\n        try {\n          this._querying = true;\n          await this.queryObjects();\n        } finally {\n          this._querying = false;\n        }\n      }\n    }\n    return ids.map((id) => this._objectCache.get(id) ?? null);\n  }\n\n  /**\n   * Reload state from server.\n   * Overrides optimistic updates.\n   */\n  // TODO(dmaretskyi): Split optimistic into separate state so it doesn't get overridden.\n  async refresh(): Promise<void> {\n    const thisRefreshId = ++this._refreshId;\n    let changed = false;\n    try {\n      TRACE_QUEUE_LOAD &&\n        log.info('queue refresh begin', { currentObjects: this._objects.length, refreshId: thisRefreshId });\n      const { objects } = await this._service.queryQueue(this._subspaceTag, this._spaceId, { queueId: this._queueId });\n      TRACE_QUEUE_LOAD && log.info('items fetched', { refreshId: thisRefreshId, count: objects.length });\n      if (thisRefreshId !== this._refreshId) {\n        return;\n      }\n\n      const decodedObjects = await Promise.all(\n        objects.map((obj) => Obj.fromJSON(obj, { refResolver: this._refResolver })),\n      );\n      if (thisRefreshId !== this._refreshId) {\n        return;\n      }\n\n      for (const obj of decodedObjects) {\n        this._objectCache.set(obj.id, obj as T);\n      }\n\n      changed = objectSetChanged(this._objects, decodedObjects);\n\n      TRACE_QUEUE_LOAD && log.info('queue refresh', { changed, objects: objects.length, refreshId: thisRefreshId });\n      this._objects = decodedObjects as T[];\n    } catch (err) {\n      log.catch(err);\n      this._error = err as Error;\n    } finally {\n      this._isLoading = false;\n      if (changed) {\n        this._signal.notifyWrite();\n      }\n    }\n  }\n}\n\nconst objectSetChanged = (before: AnyEchoObject[], after: AnyEchoObject[]) => {\n  if (before.length !== after.length) {\n    return true;\n  }\n\n  // TODO(dmaretskyi):  We might want to compare the objects data.\n  return before.some((item, index) => item.id !== after[index].id);\n};\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { Resource } from '@dxos/context';\nimport type { Obj, Relation } from '@dxos/echo';\nimport { assertState } from '@dxos/invariant';\nimport { DXN, ObjectId, QueueSubspaceTags, type QueueSubspaceTag, type SpaceId } from '@dxos/keys';\n\nimport { QueueImpl } from './queue';\nimport type { QueueService } from './queue-service';\nimport type { Queue } from './types';\nimport { type Hypergraph } from '../hypergraph';\n\nexport interface QueueAPI {\n  get<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(dxn: DXN): Queue<T>;\n  create<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(options?: {\n    subspaceTag?: QueueSubspaceTag;\n  }): Queue<T>;\n}\n\nexport class QueueFactory extends Resource implements QueueAPI {\n  private readonly _queues = new Map<DXN.String, Queue<Obj.Any | Relation.Any>>();\n  private _service?: QueueService = undefined;\n\n  constructor(\n    private readonly _spaceId: SpaceId,\n    private readonly _graph: Hypergraph,\n  ) {\n    super();\n  }\n\n  setService(service: QueueService): void {\n    this._service = service;\n  }\n\n  get<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>(dxn: DXN): Queue<T> {\n    assertState(this._service, 'Service not set');\n\n    const stringDxn = dxn.toString();\n    const queue = this._queues.get(stringDxn);\n    if (queue) {\n      return queue as Queue<T>;\n    }\n\n    const newQueue = new QueueImpl<T>(\n      this._service,\n      this._graph.createRefResolver({ context: { space: this._spaceId, queue: dxn } }),\n      dxn,\n    );\n    this._queues.set(stringDxn, newQueue);\n    return newQueue as Queue<T>;\n  }\n\n  create<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any>({\n    subspaceTag = QueueSubspaceTags.DATA,\n  }: { subspaceTag?: QueueSubspaceTag } = {}): Queue<T> {\n    const dxn = DXN.fromQueue(subspaceTag, this._spaceId, ObjectId.random());\n    return this.get<T>(dxn);\n  }\n}\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport type { ObjectId } from '@dxos/echo-schema';\nimport type { EdgeHttpClient } from '@dxos/edge-client';\nimport type { SpaceId } from '@dxos/keys';\nimport type { QueryResult, QueueQuery } from '@dxos/protocols';\nimport { ComplexMap } from '@dxos/util';\n\n/**\n * Service for managing queues.\n */\n// TODO(burdon): Base type for all services?\nexport interface QueueService {\n  queryQueue(subspaceTag: string, spaceId: SpaceId, query: QueueQuery): Promise<QueryResult>;\n\n  insertIntoQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objects: unknown[]): Promise<void>;\n\n  deleteFromQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objectIds: ObjectId[]): Promise<void>;\n}\n\n/**\n * Backed by Edge.\n */\nexport class QueueServiceImpl implements QueueService {\n  constructor(private readonly _client: EdgeHttpClient) {}\n\n  queryQueue(subspaceTag: string, spaceId: SpaceId, query: QueueQuery): Promise<QueryResult> {\n    return this._client.queryQueue(subspaceTag, spaceId, query);\n  }\n\n  insertIntoQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objects: unknown[]): Promise<void> {\n    return this._client.insertIntoQueue(subspaceTag, spaceId, queueId, objects);\n  }\n\n  deleteFromQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objectIds: ObjectId[]): Promise<void> {\n    return this._client.deleteFromQueue(subspaceTag, spaceId, queueId, objectIds);\n  }\n}\n\n/**\n * Stub implementation for when Edge is not available.\n */\nexport class QueueServiceStub implements QueueService {\n  queryQueue(subspaceTag: string, spaceId: SpaceId, query: QueueQuery): Promise<QueryResult> {\n    throw new Error('Not available.');\n  }\n\n  insertIntoQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objects: unknown[]): Promise<void> {\n    throw new Error('Not available.');\n  }\n\n  deleteFromQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objectIds: ObjectId[]): Promise<void> {\n    throw new Error('Not available.');\n  }\n}\n\n/**\n * Mock implementation for testing.\n */\nexport class MockQueueService implements QueueService {\n  private _queues = new ComplexMap<[subspaceTag: string, spaceId: SpaceId, queueId: ObjectId], unknown[]>(\n    ([subspaceTag, spaceId, queueId]) => `${subspaceTag}:${spaceId}:${queueId}`,\n  );\n\n  async queryQueue(subspaceTag: string, spaceId: SpaceId, query: QueueQuery): Promise<QueryResult> {\n    const objects = this._queues.get([subspaceTag, spaceId, query.queueId]) ?? [];\n    return {\n      objects,\n      nextCursor: null,\n      prevCursor: null,\n    };\n  }\n\n  async insertIntoQueue(subspaceTag: string, spaceId: SpaceId, queueId: ObjectId, objects: unknown[]): Promise<void> {\n    const key: [string, SpaceId, ObjectId] = [subspaceTag, spaceId, queueId];\n    const existing = this._queues.get(key) ?? [];\n    this._queues.set(key, [...existing, ...objects]);\n  }\n\n  async deleteFromQueue(\n    subspaceTag: string,\n    spaceId: SpaceId,\n    queueId: ObjectId,\n    objectIds: ObjectId[],\n  ): Promise<void> {\n    const key: [string, SpaceId, ObjectId] = [subspaceTag, spaceId, queueId];\n    const existing = this._queues.get(key) ?? [];\n    this._queues.set(\n      key,\n      existing.filter((obj: any) => !objectIds.includes(obj.id)),\n    );\n  }\n}\n", "//\n// Copyright 2025 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport type { Obj, Relation } from '@dxos/echo';\nimport { EntityKind, TypeAnnotationId, type TypeAnnotation } from '@dxos/echo-schema';\nimport { type DXN, type ObjectId } from '@dxos/keys';\n\n/**\n * Client-side view onto an EDGE queue.\n */\nexport interface Queue<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any> {\n  readonly dxn: DXN;\n  readonly isLoading: boolean;\n  readonly error: Error | null;\n\n  // TODO(dmaretskyi): Replace with unified query(query) => QueryResult<T> API.\n  readonly objects: T[];\n\n  toJSON(): any;\n\n  /**\n   * Appends objects to the queue.\n   */\n  append(objects: T[]): Promise<void>;\n\n  /**\n   * Deletes objects from the queue.\n   */\n  delete(ids: string[]): Promise<void>;\n\n  /**\n   * Query all objects in the queue.\n   */\n  // TODO(dmaretskyi): Replace with unified query(query) => QueryResult<T> API.\n  queryObjects(): Promise<T[]>;\n\n  /**\n   * Queries objects by id.\n   */\n  // TODO(dmaretskyi): Replace with unified query(query) => QueryResult<T> API.\n  getObjectsById(ids: ObjectId[]): Promise<(T | null)[]>;\n\n  /**\n   * Refreshes the queue from the server.\n   */\n  // TODO(dmaretskyi): Remove.\n  refresh(): Promise<void>;\n}\n\n// TODO(dmaretskyi): Implement.\nconst isQueue = (value: unknown): value is Queue => {\n  return false;\n};\n\nexport const Queue: Schema.Schema<Queue> = Schema.declare(isQueue, {\n  [TypeAnnotationId]: {\n    // TODO(dmaretskyi): Perhaps queue should be its own entity kind.\n    kind: EntityKind.Object,\n    typename: 'dxos.org/type/Queue',\n    version: '0.1.0',\n  } satisfies TypeAnnotation,\n});\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { type Context, LifecycleState, Resource, ContextDisposedError } from '@dxos/context';\nimport { invariant } from '@dxos/invariant';\nimport { type PublicKey, type SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { type QueryService } from '@dxos/protocols/proto/dxos/echo/query';\nimport { type DataService } from '@dxos/protocols/proto/dxos/echo/service';\n\nimport { IndexQuerySourceProvider, type LoadObjectParams } from './index-query-source-provider';\nimport { Hypergraph } from '../hypergraph';\nimport { EchoDatabaseImpl } from '../proxy-db';\nimport { QueueFactory, type QueueService } from '../queue';\n\nexport type EchoClientParams = {};\n\nexport type ConnectToServiceParams = {\n  dataService: DataService;\n  queryService: QueryService;\n  queueService?: QueueService;\n};\n\nexport type ConstructDatabaseParams = {\n  spaceId: SpaceId;\n\n  /** @deprecated Use spaceId */\n  spaceKey: PublicKey;\n\n  /**\n   * Run a reactive query for a set of dynamic schema.\n   * @default true\n   */\n  reactiveSchemaQuery?: boolean;\n\n  /**\n   * Preload all schema during open.\n   * @default true\n   */\n  preloadSchemaOnOpen?: boolean;\n\n  /**\n   * Space proxy reference for SDK compatibility.\n   */\n  // TODO(dmaretskyi): Remove.\n  owningObject?: unknown;\n};\n\n/**\n * ECHO client.\n * Manages a set of databases and builds a unified hypergraph.\n * Connects to the ECHO host via an ECHO service.\n */\nexport class EchoClient extends Resource {\n  private readonly _graph: Hypergraph;\n  private readonly _databases = new Map<SpaceId, EchoDatabaseImpl>();\n\n  private _dataService: DataService | undefined = undefined;\n  private _queryService: QueryService | undefined = undefined;\n  private _queuesService: QueueService | undefined = undefined;\n\n  private _indexQuerySourceProvider: IndexQuerySourceProvider | undefined = undefined;\n\n  constructor(_: EchoClientParams = {}) {\n    super();\n    this._graph = new Hypergraph();\n  }\n\n  get graph(): Hypergraph {\n    return this._graph;\n  }\n\n  get openDatabases(): Iterable<EchoDatabaseImpl> {\n    return this._databases.values();\n  }\n\n  /**\n   * Connects to the ECHO service.\n   * Must be called before open.\n   */\n  connectToService({ dataService, queryService, queueService }: ConnectToServiceParams): void {\n    invariant(this._lifecycleState === LifecycleState.CLOSED);\n    this._dataService = dataService;\n    this._queryService = queryService;\n    this._queuesService = queueService;\n  }\n\n  disconnectFromService(): void {\n    invariant(this._lifecycleState === LifecycleState.CLOSED);\n    this._dataService = undefined;\n    this._queryService = undefined;\n  }\n\n  protected override async _open(ctx: Context): Promise<void> {\n    invariant(this._dataService && this._queryService, 'Invalid state: not connected');\n\n    this._indexQuerySourceProvider = new IndexQuerySourceProvider({\n      service: this._queryService,\n      objectLoader: {\n        loadObject: this._loadObjectFromDocument.bind(this),\n      },\n    });\n    this._graph.registerQuerySourceProvider(this._indexQuerySourceProvider);\n  }\n\n  protected override async _close(ctx: Context): Promise<void> {\n    if (this._indexQuerySourceProvider) {\n      this._graph.unregisterQuerySourceProvider(this._indexQuerySourceProvider);\n    }\n    for (const db of this._databases.values()) {\n      this._graph._unregisterDatabase(db.spaceId);\n      await db.close();\n    }\n    this._databases.clear();\n  }\n\n  // TODO(dmaretskyi): Make async?\n  constructDatabase({\n    spaceId,\n    owningObject,\n    reactiveSchemaQuery,\n    preloadSchemaOnOpen,\n    spaceKey,\n  }: ConstructDatabaseParams): EchoDatabaseImpl {\n    invariant(this._lifecycleState === LifecycleState.OPEN);\n    invariant(!this._databases.has(spaceId), 'Database already exists.');\n    const db = new EchoDatabaseImpl({\n      dataService: this._dataService!,\n      queryService: this._queryService!,\n      graph: this._graph,\n      spaceId,\n      reactiveSchemaQuery,\n      preloadSchemaOnOpen,\n      spaceKey,\n    });\n    this._graph._registerDatabase(spaceId, db, owningObject);\n    this._databases.set(spaceId, db);\n    return db;\n  }\n\n  constructQueueFactory(spaceId: SpaceId): QueueFactory {\n    const queueFactory = new QueueFactory(spaceId, this._graph);\n    this._graph._registerQueueFactory(spaceId, queueFactory);\n    if (this._queuesService) {\n      queueFactory.setService(this._queuesService);\n    }\n    return queueFactory;\n  }\n\n  private async _loadObjectFromDocument({ spaceId, objectId, documentId }: LoadObjectParams) {\n    const db = this._databases.get(spaceId);\n    if (!db) {\n      return undefined;\n    }\n\n    // Waiting for the database to open since the query can run before the database is ready.\n    // TODO(dmaretskyi): Refactor this.\n    try {\n      await db.coreDatabase.opened.wait();\n    } catch (err) {\n      if (err instanceof ContextDisposedError) {\n        return undefined;\n      }\n      throw err;\n    }\n\n    const objectDocId = db._coreDatabase._automergeDocLoader.getObjectDocumentId(objectId);\n    if (objectDocId !== documentId) {\n      log(\"documentIds don't match\", { objectId, expected: documentId, actual: objectDocId ?? null });\n      return undefined;\n    }\n\n    return db._loadObjectById(objectId);\n  }\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { Event } from '@dxos/async';\nimport { type Stream } from '@dxos/codec-protobuf/stream';\nimport { Context } from '@dxos/context';\nimport type { QueryAST } from '@dxos/echo-protocol';\nimport { invariant } from '@dxos/invariant';\nimport { SpaceId } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { RpcClosedError } from '@dxos/protocols';\nimport {\n  QueryReactivity,\n  type QueryResponse,\n  type QueryService,\n  type QueryResult as RemoteQueryResult,\n} from '@dxos/protocols/proto/dxos/echo/query';\nimport { isNonNullable } from '@dxos/util';\n\nimport { type AnyLiveObject } from '../echo-handler';\nimport { getObjectCore } from '../echo-handler';\nimport { OBJECT_DIAGNOSTICS, type QuerySourceProvider } from '../hypergraph';\nimport { type QueryResultEntry, type QuerySource } from '../query';\nimport { getTargetSpacesForQuery } from '../query/util';\n\nexport type LoadObjectParams = {\n  spaceId: SpaceId;\n  objectId: string;\n  documentId: string;\n};\n\nexport interface ObjectLoader {\n  loadObject(params: LoadObjectParams): Promise<AnyLiveObject<any> | undefined>;\n}\n\nexport type IndexQueryProviderParams = {\n  service: QueryService;\n  objectLoader: ObjectLoader;\n};\n\nconst QUERY_SERVICE_TIMEOUT = 20_000;\n\nexport class IndexQuerySourceProvider implements QuerySourceProvider {\n  // TODO(burdon): OK for options, but not params. Pass separately and type readonly here.\n  constructor(private readonly _params: IndexQueryProviderParams) {}\n\n  // TODO(burdon): Rename createQuerySource\n  create(): QuerySource {\n    return new IndexQuerySource({ service: this._params.service, objectLoader: this._params.objectLoader });\n  }\n}\n\nexport type IndexQuerySourceParams = {\n  service: QueryService;\n  objectLoader: ObjectLoader;\n};\n\n/**\n * Runs queries against an index.\n */\nexport class IndexQuerySource implements QuerySource {\n  changed = new Event<void>();\n\n  private _query?: QueryAST.Query = undefined;\n  private _results?: QueryResultEntry[] = [];\n  private _stream?: Stream<QueryResponse>;\n\n  constructor(private readonly _params: IndexQuerySourceParams) {}\n\n  open(): void {}\n\n  close(): void {\n    this._results = undefined;\n    this._closeStream();\n  }\n\n  getResults(): QueryResultEntry[] {\n    return this._results ?? [];\n  }\n\n  async run(query: QueryAST.Query): Promise<QueryResultEntry[]> {\n    this._query = query;\n    return new Promise((resolve, reject) => {\n      this._queryIndex(query, QueryReactivity.ONE_SHOT, resolve, reject);\n    });\n  }\n\n  update(query: QueryAST.Query): void {\n    this._query = query;\n\n    this._closeStream();\n    this._results = [];\n    this.changed.emit();\n    this._queryIndex(query, QueryReactivity.REACTIVE, (results) => {\n      this._results = results;\n      this.changed.emit();\n    });\n  }\n\n  private _queryIndex(\n    query: QueryAST.Query,\n    queryType: QueryReactivity,\n    onResult: (results: QueryResultEntry[]) => void,\n    onError?: (error: Error) => void,\n  ): void {\n    const queryId = nextQueryId++;\n\n    log('queryIndex', { queryId });\n    const start = Date.now();\n    let currentCtx: Context;\n\n    const stream = this._params.service.execQuery(\n      { query: JSON.stringify(query), queryId: String(queryId), reactivity: queryType },\n      { timeout: QUERY_SERVICE_TIMEOUT },\n    );\n\n    if (queryType === QueryReactivity.REACTIVE) {\n      if (this._stream) {\n        log.warn('Query stream already open');\n      }\n      this._stream = stream;\n    }\n\n    stream.subscribe(\n      async (response) => {\n        try {\n          const targetSpaces = getTargetSpacesForQuery(query);\n          if (targetSpaces.length > 0) {\n            invariant(\n              response.results?.every((r) => targetSpaces.includes(SpaceId.make(r.spaceId))),\n              'Result spaceId mismatch',\n            );\n          }\n\n          if (queryType === QueryReactivity.ONE_SHOT) {\n            if (currentCtx) {\n              return;\n            }\n            void stream.close().catch(() => {});\n          }\n\n          await currentCtx?.dispose();\n          const ctx = new Context();\n          currentCtx = ctx;\n\n          log('queryIndex raw results', {\n            queryId,\n            length: response.results?.length ?? 0,\n          });\n\n          const processedResults = await Promise.all(\n            (response.results ?? []).map((result) => this._filterMapResult(ctx, start, result)),\n          );\n          const results = processedResults.filter(isNonNullable);\n\n          log('queryIndex processed results', {\n            queryId,\n            fetchedFromIndex: response.results?.length ?? 0,\n            loaded: results.length,\n          });\n\n          if (currentCtx === ctx) {\n            onResult(results);\n          } else {\n            log.warn('results from the previous update are ignored', { queryId });\n          }\n        } catch (err: any) {\n          if (onError) {\n            onError(err);\n          } else {\n            log.catch(err);\n          }\n        }\n      },\n      (err) => {\n        if (err != null) {\n          if (onError) {\n            onError(err);\n          } else if (!(err instanceof RpcClosedError)) {\n            log.catch(err);\n          }\n        }\n      },\n    );\n  }\n\n  private async _filterMapResult(\n    ctx: Context,\n    queryStartTimestamp: number,\n    result: RemoteQueryResult,\n  ): Promise<QueryResultEntry | null> {\n    if (!OBJECT_DIAGNOSTICS.has(result.id)) {\n      OBJECT_DIAGNOSTICS.set(result.id, {\n        objectId: result.id,\n        spaceId: result.spaceId,\n        loadReason: 'query',\n        query: JSON.stringify(this._query ?? null),\n      });\n    }\n\n    invariant(SpaceId.isValid(result.spaceId), 'Invalid spaceId');\n    const object = await this._params.objectLoader.loadObject({\n      spaceId: result.spaceId,\n      objectId: result.id,\n      documentId: result.documentId,\n    });\n    if (!object) {\n      return null;\n    }\n\n    if (ctx.disposed) {\n      return null;\n    }\n\n    const core = getObjectCore(object);\n    const queryResult: QueryResultEntry = {\n      id: object.id,\n      spaceId: core.database!.spaceId,\n      spaceKey: core.database!.spaceKey,\n      object,\n      match: { rank: result.rank },\n      resolution: { source: 'index', time: Date.now() - queryStartTimestamp },\n    };\n    return queryResult;\n  }\n\n  private _closeStream(): void {\n    void this._stream?.close().catch(() => {});\n    this._stream = undefined;\n  }\n}\n\n/**\n * Used for logging.\n */\nlet nextQueryId = 1;\n"],
  "mappings": "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",
  "names": ["import_runtime", "import_log", "import_async", "import_filter", "import_util", "import_debug", "import_echo_protocol", "import_invariant", "import_keys", "import_automerge", "import_automerge_repo", "import_context", "import_tracing", "import_echo_schema", "import_stream", "import_live_object", "import_echo", "import_effect", "import_query", "areSignalsProhibited", "inUntrackedScope", "GuardSignal", "debugInfo", "notifyRead", "Error", "notifyWrite", "registerSignalsRuntime", "createSignal", "batch", "cb", "untracked", "prev", "prohibitSignalActions", "QueryResult", "_queryContext", "query", "_signal", "compositeRuntime", "_event", "Event", "_isActive", "_resultCache", "undefined", "_objectCache", "_subscribers", "_query", "changed", "on", "_recomputeResult", "emit", "update", "ast", "_diagnostic", "isActive", "filter", "JSON", "stringify", "creationStack", "StackTrace", "QUERIES", "add", "log", "results", "_checkQueryIsRunning", "_ensureCachePresent", "objects", "run", "timeout", "filteredResults", "_uniqueObjects", "first", "opts", "length", "runSync", "subscribe", "callback", "invariant", "fire", "active", "unsubscribeFromEvent", "_handleQueryLifecycle", "unsubscribe", "err", "getResults", "some", "obj", "index", "id", "old", "map", "new", "seen", "Set", "result", "object", "isNonNullable", "has", "_stop", "_start", "start", "stop", "trace", "diagnostic", "name", "fetch", "Array", "from", "getStack", "ResultFormat", "optionsToProto", "options", "spaceIds", "deleted", "dataLocation", "include", "limit", "spaces", "normalizeQuery", "query_", "userOptions", "Query", "is", "Filter", "select", "everything", "_props", "TypeError", "error", "defaultSpaceId", "QueryOptionsProto", "ShowDeletedOption", "SHOW_DELETED", "HIDE_DELETED", "getTargetSpacesForQuery", "visitor", "node", "type", "spaceId", "SpaceId", "make", "QueryAST", "visit", "isSimpleSelectionQuery", "maybeFilter", "GraphQueryContext", "_params", "_sources", "_ctx", "sources", "Context", "onStart", "source", "dispose", "close", "onStop", "flatMap", "runTasks", "values", "s", "resolver", "Object", "getPrototypeOf", "asyncTimeout", "count", "mergedResults", "Promise", "all", "r", "addQuerySource", "querySource", "SpaceQuerySource", "_database", "_results", "_onUpdate", "updateEvent", "itemsUpdated", "objectId", "core", "coreDatabase", "getObjectCoreById", "load", "trivial", "find", "_filterCore", "spaceKey", "open", "catch", "_isValidSourceForQuery", "simple", "isObjectIdFilter", "push", "_coreDatabase", "batchLoadObjectCores", "isNotUndefined", "_mapCoreToResult", "_queryWorkingSet", "Map", "set", "_updateEvent", "filteredCores", "allObjectCores", "targetSpaces", "includes", "getObjectById", "resolution", "time", "filterCoreByDeletedFlag", "filterMatchObject", "doc", "getObjectStructure", "isDeleted", "DocAccessor", "getValue", "accessor", "get", "handle", "path", "isValidKeyPath", "value", "isArray", "every", "v", "beingChanged", "WeakSet", "docChangeSemaphore", "handled", "getDebugName", "failedInvariant", "delete", "STRING_CRDT_LIMIT", "META_NAMESPACE", "SYSTEM_NAMESPACE", "ObjectCore", "ObjectId", "random", "updates", "throwUnhandledError", "toString", "inspectCustom", "depth", "inspectFn", "initNewObject", "initialProps", "docHandle", "A", "data", "encode", "meta", "keys", "system", "bind", "isReady", "database", "db", "mountPath", "assignFromLocalState", "_", "defer", "change", "newDoc", "setDeep", "notifyUpdate", "getDoc", "getDeep", "changeFn", "changeAt", "heads", "newHeads", "getDocAccessor", "self", "addListener", "event", "listener", "removeListener", "off", "isLiveObject", "RawString", "Reference", "encodeReference", "val", "entries", "fromEntries", "key", "decode", "isEncodedReference", "maybeReference", "decodeReference", "arrayPush", "items", "itemsEncoded", "item", "newLength", "fullPath", "array", "_getRaw", "_setRaw", "getDecoded", "setDecoded", "slice", "getKind", "EntityKind", "setKind", "kind", "getSource", "res", "setSource", "ref", "getTarget", "setTarget", "getType", "setType", "reference", "getMeta", "setMeta", "setDeleted", "toPlainObject", "DATA_NAMESPACE", "dataMapped", "deepMapValues", "recurse", "toDXN", "__typename", "__meta", "getStrongDependencies", "DXN", "ECHO", "Relation", "target", "objectIsUpdated", "objId", "patches", "patch", "DocHandleProxy", "EventEmitter", "_documentId", "_callbacks", "_ready", "Trigger", "_doc", "_lastSentHeads", "_currentlySendingHeads", "isNew", "initialValue", "emptyChange", "wake", "init", "url", "stringifyAutomergeUrl", "documentId", "state", "TriggerState", "RESOLVED", "whenReady", "wait", "fn", "before", "headsBefore", "getHeads", "diff", "patchInfo", "after", "updateCallback", "onDelete", "_getPendingChanges", "equals", "mutation", "saveSince", "_confirmSync", "_integrateHostUpdate", "loadIncremental", "MAX_UPDATE_FREQ", "RPC_TIMEOUT", "RepoProxy", "Resource", "_dataService", "_spaceId", "_handles", "_subscriptionId", "PublicKey", "toHex", "_subscription", "_pendingCreateIds", "_pendingAddIds", "_pendingRemoveIds", "_pendingUpdateIds", "_sendUpdatesJob", "saveStateChanged", "handles", "interpretAsDocumentId", "_getHandle", "import", "dump", "create", "parseAutomergeUrl", "generateAutomergeUrl", "flush", "runBlocking", "_open", "subscriptionId", "UpdateScheduler", "_sendUpdates", "maxFrequency", "_receiveUpdate", "_close", "join", "_createHandle", "_lifecycleState", "LifecycleState", "OPEN", "onChange", "trigger", "_emitSaveStateEvent", "warn", "createIds", "addIds", "removeIds", "updateIds", "clear", "updateSubscription", "addMutations", "documentIds", "forEach", "raise", "unsavedDocuments", "resource", "AutomergeDocumentLoaderImpl", "_repo", "_spaceKey", "_spaceRootDocHandle", "_objectDocumentHandles", "_objectsPendingDocumentLoad", "_currentlyLoadingObjects", "ComplexSet", "onObjectDocumentLoaded", "hasRootHandle", "getAllHandles", "getLinkedDocHandles", "loadSpaceRootDocHandle", "ctx", "spaceState", "rootUrl", "existingDocHandle", "_initDocHandle", "version", "SpaceDocVersion", "CURRENT", "access", "_initDocAccess", "objectPresent", "assertState", "DatabaseDirectory", "getInlineObject", "getLink", "loadObjectDocument", "objectIdOrMany", "objectIds", "hasUrlsToLoad", "urlsToLoad", "documentUrl", "_getLinkedDocumentUrl", "_loadLinkedObjects", "getObjectDocumentId", "spaceRootDoc", "onObjectLinksUpdated", "links", "linksAwaitingLoad", "getSpaceRootDocHandle", "createDocumentForObject", "spaceDocHandle", "onObjectBoundToDocument", "clearHandleReferences", "objectsWithHandles", "automergeUrlData", "automergeUrl", "logMeta", "objectDocumentHandle", "actualDocumentUrl", "debug", "_loadHandleForObject", "warnAfterTimeout", "cancelWithContext", "docUrl", "listenerCount", "info", "objectDocHandle", "shouldRetryLoading", "retryLoading", "span", "showInBrowserTimeline", "QUERY_SERVICE_TIMEOUT", "CoreDatabaseQueryContext", "_queryService", "_lastResult", "queryId", "nextQueryId", "Date", "now", "_options", "loadObjectCoreById", "disposed", "_filterMapCore", "response", "Stream", "execQuery", "reactivity", "QueryReactivity", "ONE_SHOT", "processedResults", "_filterMapResult", "fetchedFromIndex", "loaded", "queryStartTimestamp", "isValid", "FORCE_DATA_SERVICE_FETCH", "documentJson", "ZERO", "parse", "match", "rank", "documentAutomerge", "objectDocId", "_automergeDocLoader", "expected", "actual", "_recursivelyJoinFields", "joinSpec", "newData", "spec", "dxn", "isLocalObjectId", "parts", "getInlineAndLinkChanges", "inlineChangedObjectIds", "linkedDocuments", "valueStr", "isValidAutomergeUrl", "inlineChangedObjects", "THROTTLED_UPDATE_FREQUENCY", "TRACE_LOADING", "CoreDatabase", "graph", "dataService", "queryService", "_objects", "_state", "rootChanged", "documentChanges", "_processDocumentUpdate", "_rebindObjects", "objectsToRebind", "_createInlineObjects", "createdObjectIds", "_emitObjectUpdateEvent", "updatedObjectIds", "_scheduleThrottledDbUpdate", "_updateScheduler", "_emitDbUpdateEvents", "_hypergraph", "_repoProxy", "toJSON", "size", "performance", "onDispose", "_unsubscribeFromHandles", "_onObjectDocumentLoaded", "spaceRootDocHandle", "_onDocumentUpdate", "ContextDisposedError", "elapsed", "docId", "duration", "opened", "throw", "reset", "updateSpaceState", "objectIdsToLoad", "_handleSpaceRootDocumentChange", "getAllObjectIds", "hasLoadedHandles", "rootDoc", "getNumberOfInlineObjects", "getNumberOfLinkedObjects", "getTotalNumberOfObjects", "objCore", "returnWithUnsatisfiedDeps", "_areDepsSatisfied", "waitForUpdate", "waitFor", "then", "inactivityTimeout", "returnDeleted", "failOnTimeout", "objectsToLoad", "i", "resultIndex", "idsToLoad", "startTime", "diagnostics", "resolve", "reject", "inactivityTimeoutTimer", "scheduleInactivityTimeout", "setTimeout", "TimeoutError", "updatedIds", "objectToLoad", "clearTimeout", "depsUnsatisfied", "splice", "prototype", "_createQueryContext", "operation", "insert", "isBatch", "dataArray", "cores", "createCoreFromInsertData", "addCore", "placement", "placeIn", "removeCore", "unlinkObjects", "root", "unlinkDeletedObjects", "batchSize", "idChunks", "chunkArray", "ids", "toUnlink", "o", "atomicReplaceObject", "params", "mappedData", "Ref", "isRef", "existingStruct", "newStruct", "fromDXN", "disk", "indexes", "updateIndexes", "getDocumentHeads", "headsStates", "link", "waitUntilHeadsReplicated", "reIndexHeads", "getSyncState", "subscribeSpaceSyncState", "subscribeToSyncState", "stream", "runInContextAsync", "getLoadedDocumentHandles", "inlinedObjectIds", "linkedObjectIds", "k", "objectsToRemove", "objectsToCreate", "oid", "newObjectDocUrl", "existing", "newDocHandle", "updatedObject", "objectCore", "verbose", "actualUrl", "_createObjectInDocument", "_scheduleThrottledUpdate", "dep", "_strongDepsIndex", "deps", "depObjectId", "defaultMap", "depCore", "fullUpdateIds", "_objectsForNextUpdate", "allDbUpdates", "_objectsForNextDbUpdate", "DISABLE_THROTTLING", "forceTrigger", "sanitizeTypename", "typename", "startsWith", "TYPE", "rest", "fieldsMapped", "LOCAL_SPACE_TAG", "idStyle", "style", "listStyle", "liStyle", "nestedObjectContainerStyle", "keyStyle", "defaultValueKeyStyle", "alteredValueKeyStyle", "nullStyle", "defaultKeys", "getHeader", "tag", "config", "nested", "formatValue", "getBody", "objData", "symbolPath", "Symbol", "symbolNamespace", "symbolHandler", "symbolInternals", "TargetKey", "namespace", "hash", "ObjectInternals", "ComplexMap", "subscriptions", "_a", "EchoArray", "species", "BATCHED_METHODS", "method", "handlerMethodName", "toUpperCase", "args", "handler", "apply", "defineProperty", "enumerable", "EchoReactiveHandler", "_proxyMap", "WeakMap", "_getTypename", "isRelation", "isTyped", "reified", "_getReified", "compact", "showHidden", "customInspect", "instance", "symbolIsProxy", "defineHiddenProperty", "configurable", "_inspect", "ownKeys", "signal", "_getDecodedValueAtPath", "Reflect", "isRootDataObject", "PROPERTY_ID", "getOwnPropertyDescriptor", "p", "writable", "property", "attributes", "_arrayHas", "prop", "receiver", "SchemaId", "getSchema", "EntityKindId", "RelationSourceDXNId", "RelationTargetDXNId", "RelationSourceId", "_getRelationSource", "RelationTargetId", "_getRelationTarget", "TypeId", "getTypeReference", "MetaId", "DeletedId", "devtoolsFormatter", "_getDevtoolsFormatter", "_toJSON", "_arrayGet", "decodedValueAtPath", "_wrapInProxyIfRequired", "_arraySetLength", "getNamespace", "validatedValue", "_validateValue", "withLinks", "_handleLinksAssignment", "schema", "SchemaMetaSymbol", "sourceRef", "createRefResolver", "context", "space", "resolveSync", "linkCache", "targetRef", "decoded", "dataPath", "_handleStoredSchema", "lookupRef", "targetKey", "newTarget", "targetsMap", "createProxy", "isInstanceOf", "StoredSchema", "schemaRegistry", "_registerSchema", "isNaN", "parseInt", "parsedIndex", "throwIfCustomClass", "rootObjectSchema", "typeReference", "unwrappedValue", "EchoSchema", "storedSchema", "propertySchema", "SchemaValidator", "getPropertySchema", "Schema", "asserts", "isEchoObjectField", "savedTarget", "getRefSavedTarget", "createRef", "ObjectMetaSchema", "rootSchema", "staticSchema", "getSchemaByDXN", "protocol", "deleteProperty", "validatedItems", "_validateForArray", "encodedItems", "_encodeForArray", "arrayPop", "_getPropertyMountPath", "returnValue", "pop", "arrayShift", "shift", "arrayUnshift", "unshift", "arraySplice", "deleteCount", "deletedElements", "arraySort", "compareFn", "sortedArray", "sort", "arrayReverse", "reversedArray", "reverse", "metaTarget", "setDatabase", "proxy", "otherEchoObj", "isEchoObject", "createObject", "otherObjId", "localObjectReference", "foreignDatabase", "getProxyTarget", "refImpl", "RefImpl", "setRefResolver", "middleware", "saveRefs", "RangeError", "trimmedArray", "String", "linksEncoded", "typeRef", "ATTR_TYPE", "ATTR_META", "getTypeAnnotation", "header", "hasBody", "body", "metaReified", "proto", "getObjectCore", "getProxyHandler", "isTypedObjectProxy", "assertArgument", "validateSchema", "validateInitialProps", "slot", "getProxySlot", "setHandler", "initCore", "setSchemaPropertiesOnObjectCore", "setRelationSourceAndTarget", "linkAllNestedProperties", "initEchoReactiveObjectRootProxy", "assertObjectModelShape", "requireTypeReference", "entityKind", "getEntityKind", "internals", "refToEchoReference", "requireAutomergeCore", "clone", "retainId", "additional", "cloneInner", "clones", "innerObj", "coreClone", "automergeSnapshot", "getObjectDoc", "getEditHistory", "changes", "am", "getHistory", "checkoutVersion", "snapshot", "view", "versionCore", "relation", "getDatabaseFromObject", "getReferenceWithSpaceKey", "fromObjectIdAndSpaceKey", "findObjectWithForeignKey", "foreignKey", "matchKeys", "a", "b", "keyA", "keyB", "createDocAccessor", "basePath", "ObjectVersion", "freeze", "getVersion", "docAccessor", "Automerge", "createSubscription", "onUpdate", "subscribed", "firstUpdate", "selection", "newSelected", "removed", "selected", "added", "updated", "TRACE_REF_RESOLUTION", "Hypergraph", "_databases", "_queueFactories", "_schemaRegistry", "RuntimeSchemaRegistry", "_resolveEvents", "_queryContexts", "_querySourceProviders", "getSchemaByTypename", "ImmutableSchema", "firstOrUndefined", "_registerDatabase", "owningObject", "_owningObjects", "_unregisterDatabase", "_registerQueueFactory", "factory", "_unregisterQueueFactory", "_getOwningObject", "resultFormat", "format", "Live", "Plain", "_createPlainObjectQueryContext", "_createLiveObjectQueryContext", "AutomergeDocAccessor", "onLoad", "QUEUE", "asQueueDXN", "subspaceTag", "queueId", "_resolveQueueSync", "_resolveSync", "_resolveAsync", "resolveSchema", "beginTime", "status", "onResolve", "asEchoDXN", "dxnData", "echoId", "OBJECT_DIAGNOSTICS", "loadReason", "loadedStack", "entry", "orInsert", "deep", "queue", "_resolveQueueObjectAsync", "_resolveDatabaseObjectAsync", "queueFactory", "fromQueue", "getObjectsById", "registerQuerySourceProvider", "provider", "unregisterQuerySourceProvider", "indexOf", "listenerMap", "listeners", "SchemaRegistryPreparedQueryImpl", "_resolver", "_mutex", "Mutex", "_changes", "_isReactiveQueryRunning", "_subscriberCount", "_isFiring", "getResultsSync", "_onSubscriberCountChange", "queueMicrotask", "_guard", "acquire", "EchoSchemaRegistry", "_db", "reactiveQuery", "preloadSchemaOnOpen", "_schemaById", "_schemaByType", "_unsubscribeById", "_schemaSubscriptionCallbacks", "_reactiveQuery", "_preloadSchemaOnOpen", "currentObjectIds", "newObjects", "removedObjects", "_register", "idoid", "_unregister", "_notifySchemaListChanged", "filterOrderResults", "schemas", "validateStoredSchemaIntegrity", "idFilter", "coerceArray", "jsonSchema", "$id", "backingObjectIdFilter", "backingObjectId", "typenameFilter", "localeCompare", "stored", "_subscribe", "register", "inputs", "input", "isSchema", "_addSchema", "hasSchema", "schemaId", "getObjectIdFromSchema", "getSchemaById", "typeObject", "registered", "previousTypename", "echoSchema", "subscription", "_invalidate", "annotations", "TypeIdentifierAnnotationId", "schemaToStore", "createJsonSchema", "toJsonSchema", "TypeAnnotationId", "_rebuild", "list", "arr", "echoIdentifier", "getTypeIdentifierAnnotation", "EchoDatabaseImpl", "_rootUrl", "reactiveSchemaQuery", "inspect", "custom", "inspectObject", "setSpaceRoot", "firstTime", "_rootProxies", "createSchemaNotRegisteredError", "remove", "runMigrations", "migrations", "migration", "typeDXN", "fromType", "to", "toType", "output", "transform", "postMigrationType", "onMigration", "_loadObjectById", "message", "loadObject", "loadObjectReferences", "objOrArray", "valueAccessor", "objectArray", "tasks", "isLoadedPredicate", "defineObjectMigration", "getSchemaDXN", "fromSchema", "toSchema", "MemoryQueue", "append", "_dxn", "isLoading", "queryObjects", "refresh", "TRACE_QUEUE_LOAD", "QueueImpl", "_service", "_refResolver", "_isLoading", "_error", "_refreshId", "_querying", "_subspaceTag", "_queueId", "insertIntoQueue", "Obj", "deleteFromQueue", "queryQueue", "decodedObjects", "fromJSON", "refResolver", "missingIds", "thisRefreshId", "currentObjects", "refreshId", "objectSetChanged", "QueueFactory", "_graph", "_queues", "setService", "service", "stringDxn", "newQueue", "QueueSubspaceTags", "DATA", "QueueServiceImpl", "_client", "QueueServiceStub", "MockQueueService", "nextCursor", "prevCursor", "isQueue", "Queue", "declare", "IndexQuerySourceProvider", "IndexQuerySource", "objectLoader", "_closeStream", "_queryIndex", "REACTIVE", "queryType", "onResult", "onError", "currentCtx", "_stream", "RpcClosedError", "queryResult", "EchoClient", "_queuesService", "_indexQuerySourceProvider", "openDatabases", "connectToService", "queueService", "CLOSED", "disconnectFromService", "_loadObjectFromDocument", "constructDatabase", "constructQueueFactory"]
}
