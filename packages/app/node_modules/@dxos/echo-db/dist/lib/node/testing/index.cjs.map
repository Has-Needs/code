{
  "version": 3,
  "sources": ["../../../../src/testing/echo-test-builder.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport type { AutomergeUrl } from '@automerge/automerge-repo';\nimport type { Schema } from 'effect';\nimport isEqual from 'lodash.isequal';\n\nimport { waitForCondition } from '@dxos/async';\nimport { type Context, Resource } from '@dxos/context';\nimport { EchoHost, type EchoHostIndexingConfig } from '@dxos/echo-pipeline';\nimport { createIdFromSpaceKey } from '@dxos/echo-protocol';\nimport { invariant } from '@dxos/invariant';\nimport { PublicKey } from '@dxos/keys';\nimport { type LevelDB } from '@dxos/kv-store';\nimport { createTestLevel } from '@dxos/kv-store/testing';\nimport { range } from '@dxos/util';\n\nimport { EchoClient } from '../client';\nimport { type AnyLiveObject } from '../echo-handler';\nimport { type EchoDatabase } from '../proxy-db';\nimport { Filter, Query } from '../query';\nimport { MockQueueService } from '../queue';\n\ntype OpenDatabaseOptions = {\n  client?: EchoClient;\n  reactiveSchemaQuery?: boolean;\n  preloadSchemaOnOpen?: boolean;\n};\n\ntype PeerOptions = {\n  kv?: LevelDB;\n  indexing?: Partial<EchoHostIndexingConfig>;\n  types?: Schema.Schema.AnyNoContext[];\n};\n\nexport class EchoTestBuilder extends Resource {\n  private readonly _peers: EchoTestPeer[] = [];\n\n  get lastPeer(): EchoTestPeer | undefined {\n    return this._peers.at(-1);\n  }\n\n  protected override async _close(ctx: Context): Promise<void> {\n    await Promise.all(this._peers.map((peer) => peer.close(ctx)));\n  }\n\n  async createPeer(options: PeerOptions = {}): Promise<EchoTestPeer> {\n    const peer = new EchoTestPeer(options);\n    this._peers.push(peer);\n    await peer.open();\n    return peer;\n  }\n\n  /**\n   * Shorthand for creating a peer and a database.\n   */\n  async createDatabase(options: PeerOptions = {}) {\n    const peer = await this.createPeer(options);\n    const db = await peer.createDatabase(PublicKey.random());\n    return {\n      peer,\n      host: peer.host,\n      db,\n      graph: db.graph,\n      crud: db.coreDatabase,\n    };\n  }\n}\n\nexport class EchoTestPeer extends Resource {\n  private readonly _kv: LevelDB;\n  private readonly _indexing: Partial<EchoHostIndexingConfig>;\n  private readonly _types: Schema.Schema.AnyNoContext[];\n  private readonly _clients = new Set<EchoClient>();\n  private _queuesService = new MockQueueService();\n  private _echoHost!: EchoHost;\n  private _echoClient!: EchoClient;\n  private _lastDatabaseSpaceKey?: PublicKey = undefined;\n  private _lastDatabaseRootUrl?: string = undefined;\n\n  constructor({ kv = createTestLevel(), indexing = {}, types }: PeerOptions) {\n    super();\n    this._kv = kv;\n    this._indexing = indexing;\n    this._types = types ?? [];\n    this._initEcho();\n  }\n\n  private _initEcho(): void {\n    this._echoHost = new EchoHost({ kv: this._kv, indexing: this._indexing });\n    this._clients.delete(this._echoClient);\n    this._echoClient = new EchoClient();\n    this._clients.add(this._echoClient);\n    this._echoClient.graph.schemaRegistry.addSchema(this._types);\n  }\n\n  get client() {\n    return this._echoClient;\n  }\n\n  get host() {\n    return this._echoHost;\n  }\n\n  protected override async _open(ctx: Context): Promise<void> {\n    await this._kv.open();\n\n    this._echoClient.connectToService({\n      dataService: this._echoHost.dataService,\n      queryService: this._echoHost.queryService,\n      queueService: this._queuesService,\n    });\n    await this._echoHost.open(ctx);\n    await this._echoClient.open(ctx);\n  }\n\n  protected override async _close(ctx: Context): Promise<void> {\n    for (const client of this._clients) {\n      await client.close(ctx);\n      client.disconnectFromService();\n    }\n    await this._echoHost.close(ctx);\n\n    await this._kv.close();\n  }\n\n  /**\n   * Simulates a reload of the process by re-creation ECHO.\n   */\n  async reload(): Promise<void> {\n    await this.close();\n    this._initEcho();\n    await this.open();\n  }\n\n  async createClient(): Promise<EchoClient> {\n    const client = new EchoClient();\n    client.graph.schemaRegistry.addSchema(this._types);\n    this._clients.add(client);\n    client.connectToService({\n      dataService: this._echoHost.dataService,\n      queryService: this._echoHost.queryService,\n    });\n    await client.open();\n    return client;\n  }\n\n  async createDatabase(\n    spaceKey: PublicKey = PublicKey.random(),\n    { client = this.client, reactiveSchemaQuery, preloadSchemaOnOpen }: OpenDatabaseOptions = {},\n  ) {\n    const root = await this.host.createSpaceRoot(spaceKey);\n    // NOTE: Client closes the database when it is closed.\n    const spaceId = await createIdFromSpaceKey(spaceKey);\n    const db = client.constructDatabase({ spaceId, spaceKey, reactiveSchemaQuery, preloadSchemaOnOpen });\n    await db.setSpaceRoot(root.url);\n    await db.open();\n\n    this._lastDatabaseSpaceKey = spaceKey;\n    this._lastDatabaseRootUrl = root.url;\n    return db;\n  }\n\n  async openDatabase(\n    spaceKey: PublicKey,\n    rootUrl: string,\n    { client = this.client, reactiveSchemaQuery, preloadSchemaOnOpen }: OpenDatabaseOptions = {},\n  ) {\n    // NOTE: Client closes the database when it is closed.\n    const spaceId = await createIdFromSpaceKey(spaceKey);\n    await this.host.openSpaceRoot(spaceId, rootUrl as AutomergeUrl);\n    const db = client.constructDatabase({ spaceId, spaceKey, reactiveSchemaQuery, preloadSchemaOnOpen });\n    await db.setSpaceRoot(rootUrl);\n    await db.open();\n    return db;\n  }\n\n  async openLastDatabase({ client = this.client, reactiveSchemaQuery, preloadSchemaOnOpen }: OpenDatabaseOptions = {}) {\n    return this.openDatabase(this._lastDatabaseSpaceKey!, this._lastDatabaseRootUrl!, {\n      client,\n      reactiveSchemaQuery,\n      preloadSchemaOnOpen,\n    });\n  }\n}\n\nexport const createDataAssertion = ({\n  referenceEquality = false,\n  onlyObject = true,\n  numObjects = 1,\n}: { referenceEquality?: boolean; onlyObject?: boolean; numObjects?: number } = {}) => {\n  let seedObjects: AnyLiveObject<any>[];\n  const findSeedObject = async (db: EchoDatabase) => {\n    const { objects } = await db.query(Query.select(Filter.everything())).run();\n    const received = seedObjects.map((seedObject) => objects.find((object) => object.id === seedObject.id));\n    return { objects, received };\n  };\n\n  return {\n    seed: async (db: EchoDatabase) => {\n      seedObjects = range(numObjects).map((idx) => db.add({ type: 'task', title: 'A', idx } as any));\n      await db.flush();\n    },\n    waitForReplication: (db: EchoDatabase) => {\n      return waitForCondition({\n        breakOnError: true,\n        condition: async () => {\n          const { received } = await findSeedObject(db);\n          return received.every((obj) => obj != null);\n        },\n      });\n    },\n    verify: async (db: EchoDatabase) => {\n      const { objects } = await findSeedObject(db);\n      if (onlyObject) {\n        invariant(objects.length === numObjects);\n      }\n\n      for (const seedObject of seedObjects) {\n        const received = objects.find((object) => object.id === seedObject.id);\n\n        invariant(\n          isEqual({ ...received }, { ...seedObject }),\n          [\n            'Objects are not equal',\n            `Received: ${JSON.stringify(received, null, 2)}`,\n            `Expected: ${JSON.stringify(seedObject, null, 2)}`,\n          ].join('\\n'),\n        );\n        if (referenceEquality) {\n          invariant(received === seedObject);\n        }\n      }\n    },\n  };\n};\n"],
  "mappings": "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",
  "names": ["EchoTestBuilder", "Resource", "_peers", "lastPeer", "at", "_close", "ctx", "Promise", "all", "map", "peer", "close", "createPeer", "options", "EchoTestPeer", "push", "open", "createDatabase", "db", "PublicKey", "random", "host", "graph", "crud", "coreDatabase", "kv", "createTestLevel", "indexing", "types", "_clients", "Set", "_queuesService", "MockQueueService", "_lastDatabaseSpaceKey", "undefined", "_lastDatabaseRootUrl", "_kv", "_indexing", "_types", "_initEcho", "_echoHost", "EchoHost", "delete", "_echoClient", "EchoClient", "add", "schemaRegistry", "addSchema", "client", "_open", "connectToService", "dataService", "queryService", "queueService", "disconnectFromService", "reload", "createClient", "spaceKey", "reactiveSchemaQuery", "preloadSchemaOnOpen", "root", "createSpaceRoot", "spaceId", "createIdFromSpaceKey", "constructDatabase", "setSpaceRoot", "url", "openDatabase", "rootUrl", "openSpaceRoot", "openLastDatabase", "createDataAssertion", "referenceEquality", "onlyObject", "numObjects", "seedObjects", "findSeedObject", "objects", "query", "Query", "select", "Filter", "everything", "run", "received", "seedObject", "find", "object", "id", "seed", "range", "idx", "type", "title", "flush", "waitForReplication", "waitForCondition", "breakOnError", "condition", "every", "obj", "verify", "invariant", "length", "isEqual", "JSON", "stringify", "join"]
}
