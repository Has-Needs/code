import { type PublicKeyLike } from '@dxos/keys';
/**
 * humanhash: Human-readable representations of digests.
 */
export declare class HumanHasher {
    private readonly wordlist;
    /**
     * Transforms hex digests to human-readable strings.
     *
     * The format of these strings will look something like:
     * `victor-bacon-zulu-lima`. The output is obtained by compressing the input
     * digest to a fixed number of bytes, then mapping those bytes to one of 256
     * words. A default wordlist is provided, but you can override this if you
     * prefer.
     * As long as you use the same wordlist, the output will be consistent (i.e.
     * the same digest will always render the same representation).
     *
     * @param wordlist A list of exactly 256 words to choose from
     */
    constructor(wordlist?: string[]);
    /**
     * Humanize a given hexadecimal digest.
     *
     * Change the number of words output by specifying `words`. Change the
     * word separator with `separator`.
     *
     * @param hexdigest A string of hexadecimal characters to humanize
     * @param words How many words to output (more = safer)
     * @param separator The string used to seperate the words
     */
    humanize(hexdigest: string, words?: number, separator?: string): string;
    /**
     * Compress a list of byte values to a fixed target length.
     *
     * @param bytes A list of bytes (numbers from 0-254)
     * @param target The number of bytes to return / compress to
     */
    _compress(bytes: number[], target: number): number[];
}
export declare const humanize: (value: PublicKeyLike) => string;
//# sourceMappingURL=human-hash.d.ts.map