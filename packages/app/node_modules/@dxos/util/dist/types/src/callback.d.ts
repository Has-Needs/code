/**
 * Represents a callback that can be set once.
 *
 * Common usage is dependency injection.
 * In contrast to events, callbacks can only have one handler,
 * are executed synchronously,
 * and can return results.
 */
export declare class Callback<T extends (...args: any[]) => any> {
    private _callback;
    call(...args: Parameters<T>): ReturnType<T>;
    callIfSet(...args: Parameters<T>): ReturnType<T> | undefined;
    set(callback: T): void;
    isSet(): boolean;
}
export type SetCallbacks<T> = {
    handlers: Set<T>;
};
/**
 * Create a fan-out callback handler.
 * NOTE: Methods cannot return values.
 */
export declare const createSetDispatch: <T extends {}>({ handlers }: SetCallbacks<T>) => any;
//# sourceMappingURL=callback.d.ts.map