import { Schema } from 'effect';
/**
 * GeoJSON Format
 * https://datatracker.ietf.org/doc/html/rfc7946
 * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1
 * https://en.wikipedia.org/wiki/Geographic_coordinate_system
 * https://geojson.org
 * {
 *   "type": "Point",
 *   "coordinates": [0, 51.47] // [longitude, latitude]
 * }
 * Note: optional third element for altitude.
 */
export declare const GeoPoint: Schema.Tuple<[Schema.refine<number, Schema.transform<typeof Schema.Number, Schema.filter<Schema.SchemaClass<number, number, never>>>>, Schema.refine<number, Schema.transform<typeof Schema.Number, Schema.filter<Schema.SchemaClass<number, number, never>>>>, Schema.Element<typeof Schema.Number, "?">]>;
export type GeoPoint = Schema.Schema.Type<typeof GeoPoint>;
export type GeoLocation = {
    longitude: number;
    latitude: number;
    height?: number;
};
/**
 * Geolocation utilities for working with GeoPoint format.
 */
export declare namespace GeoLocation {
    /**
     * Convert latitude and longitude to GeoPoint (GeoJSON format [longitude, latitude, height?]).
     * Clamps values to valid ranges: latitude [-90, 90], longitude [-180, 180].
     */
    const toGeoPoint: ({ longitude, latitude, height }: GeoLocation) => GeoPoint;
    /**
     * Extract latitude and longitude from GeoPoint (GeoJSON format [longitude, latitude, height?]).
     */
    const fromGeoPoint: (geoPoint: GeoPoint | undefined) => GeoLocation;
}
//# sourceMappingURL=object.d.ts.map