import { Schema } from 'effect';
import { ForeignKey } from '@dxos/echo-protocol';
import { type Comparator } from '@dxos/util';
import type { BaseObject } from '../types';
export declare const ObjectMetaSchema: Schema.Struct<{
    keys: Schema.mutable<Schema.Array$<Schema.Schema<{
        readonly id: string;
        readonly source: string;
    }, {
        readonly id: string;
        readonly source: string;
    }, never>>>;
}>;
export type ObjectMeta = Schema.Schema.Type<typeof ObjectMetaSchema>;
export declare const foreignKey: (source: string, id: string) => ForeignKey;
export declare const foreignKeyEquals: (a: ForeignKey, b: ForeignKey) => boolean;
/**
 * Get metadata from object.
 * Only callable on the object root.
 * @deprecated Use {@link getMeta}.
 */
export declare const getObjectMeta: (object: any) => ObjectMeta;
export declare const getMeta: (obj: BaseObject) => ObjectMeta;
export declare const compareForeignKeys: Comparator<BaseObject>;
//# sourceMappingURL=meta.d.ts.map