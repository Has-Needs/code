import { Schema } from 'effect';
export declare class SchemaValidator {
    /**
     * Recursively check that schema specifies constructions we can handle.
     * Validates there are no ambiguous discriminated union types.
     */
    static validateSchema(schema: Schema.Schema.AnyNoContext): void;
    static hasTypeAnnotation(rootObjectSchema: Schema.Schema.AnyNoContext, property: string, annotation: symbol): boolean;
    static getPropertySchema(rootObjectSchema: Schema.Schema.AnyNoContext, propertyPath: KeyPath, getProperty?: (path: KeyPath) => any): Schema.Schema.AnyNoContext;
    static getTargetPropertySchema(target: any, prop: string | symbol): Schema.Schema.AnyNoContext;
}
export declare const checkIdNotPresentOnSchema: (schema: Schema.Schema<any, any, any>) => void;
type KeyPath = readonly (string | number)[];
export {};
//# sourceMappingURL=schema-validator.d.ts.map