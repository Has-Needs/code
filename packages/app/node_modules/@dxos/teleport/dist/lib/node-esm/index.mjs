import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  Framer,
  Muxer,
  Teleport,
  TestBuilder,
  TestConnection,
  TestExtension,
  TestExtensionWithStreams,
  TestPeer,
  decodeFrame,
  encodeFrame
} from "./chunk-Z23CICUY.mjs";

// packages/core/mesh/teleport/src/rpc-extension.ts
import { invariant } from "@dxos/invariant";
import { createProtoRpcPeer } from "@dxos/rpc";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/core/mesh/teleport/src/rpc-extension.ts";
var RpcExtension = class {
  constructor(_rpcParams) {
    this._rpcParams = _rpcParams;
    this._isClosed = false;
  }
  get initiator() {
    return this._extensionContext?.initiator;
  }
  get localPeerId() {
    return this._extensionContext?.localPeerId;
  }
  get remotePeerId() {
    return this._extensionContext?.remotePeerId;
  }
  get rpc() {
    invariant(this._rpc, void 0, {
      F: __dxlog_file,
      L: 32,
      S: this,
      A: [
        "this._rpc",
        ""
      ]
    });
    return this._rpc.rpc;
  }
  async onOpen(context) {
    this._extensionContext = context;
    const handlers = await this.getHandlers();
    if (this._isClosed) {
      return;
    }
    const port = await context.createPort("rpc", {
      contentType: 'application/x-protobuf; messageType="dxos.rpc.Message"'
    });
    this._rpc = createProtoRpcPeer({
      ...this._rpcParams,
      handlers,
      port
    });
    await this._rpc.open();
  }
  async onClose(err) {
    this._isClosed = true;
    await this._rpc?.close();
  }
  async onAbort(err) {
    this._isClosed = true;
    await this._rpc?.abort();
  }
  close() {
    this._extensionContext?.close();
  }
};
export {
  Framer,
  Muxer,
  RpcExtension,
  Teleport,
  TestBuilder,
  TestConnection,
  TestExtension,
  TestExtensionWithStreams,
  TestPeer,
  decodeFrame,
  encodeFrame
};
//# sourceMappingURL=index.mjs.map
