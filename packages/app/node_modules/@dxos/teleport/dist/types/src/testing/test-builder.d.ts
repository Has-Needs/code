import { PublicKey } from '@dxos/keys';
import { Teleport } from '../teleport';
type CreatePeerOpts<T extends TestPeer> = {
    factory: () => T;
};
export declare class TestBuilder {
    private readonly _peers;
    createPeer<T extends TestPeer>(opts: CreatePeerOpts<T>): T;
    createPeers<T extends TestPeer>(opts: CreatePeerOpts<T>): Generator<T>;
    destroy(): Promise<void>;
    connect(peer1: TestPeer, peer2: TestPeer): Promise<TestConnection[]>;
    disconnect(peer1: TestPeer, peer2: TestPeer): Promise<void>;
}
export declare class TestPeer {
    readonly peerId: PublicKey;
    readonly connections: Set<TestConnection>;
    constructor(peerId?: PublicKey);
    protected onOpen(connection: TestConnection): Promise<void>;
    protected onClose(connection: TestConnection): Promise<void>;
    createConnection({ initiator, remotePeerId }: {
        initiator: boolean;
        remotePeerId: PublicKey;
    }): TestConnection;
    openConnection(connection: TestConnection): Promise<void>;
    closeConnection(connection: TestConnection): Promise<void>;
    destroy(): Promise<void>;
}
export declare class TestConnection {
    readonly localPeerId: PublicKey;
    readonly remotePeerId: PublicKey;
    readonly initiator: boolean;
    teleport: Teleport;
    constructor(localPeerId: PublicKey, remotePeerId: PublicKey, initiator: boolean);
    whenOpen(open: boolean): Promise<boolean>;
}
export {};
//# sourceMappingURL=test-builder.d.ts.map