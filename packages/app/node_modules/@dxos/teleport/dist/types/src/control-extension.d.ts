import { type PublicKey } from '@dxos/keys';
import { Callback } from '@dxos/util';
import { type ExtensionContext, type TeleportExtension } from './teleport';
type ControlExtensionOpts = {
    heartbeatInterval: number;
    heartbeatTimeout: number;
    onTimeout: (err: any) => void;
};
export declare class ControlExtension implements TeleportExtension {
    private readonly opts;
    private readonly localPeerId;
    private readonly remotePeerId;
    private readonly _ctx;
    readonly onExtensionRegistered: Callback<(extensionName: string) => void>;
    private _extensionContext;
    private _rpc;
    constructor(opts: ControlExtensionOpts, localPeerId: PublicKey, remotePeerId: PublicKey);
    registerExtension(name: string): Promise<void>;
    onOpen(extensionContext: ExtensionContext): Promise<void>;
    onClose(err?: Error): Promise<void>;
    onAbort(err?: Error | undefined): Promise<void>;
}
export {};
//# sourceMappingURL=control-extension.d.ts.map