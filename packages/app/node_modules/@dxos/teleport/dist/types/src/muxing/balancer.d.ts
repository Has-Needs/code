import { type Trigger, Event } from '@dxos/async';
type Chunk = {
    chunk: Uint8Array;
    channelId: number;
    dataLength?: number;
};
/**
 * Load balancer for handling asynchronous calls from multiple channels.
 *
 * Manages a queue of calls from different channels and ensures that the calls
 * are processed in a balanced manner in a round-robin fashion.
 */
export declare class Balancer {
    private readonly _sysChannelId;
    private _lastCallerIndex;
    private _channels;
    private readonly _framer;
    private readonly _sendBuffers;
    private readonly _receiveBuffers;
    private _sending;
    incomingData: Event<Uint8Array<ArrayBufferLike>>;
    readonly stream: import("stream").Duplex;
    constructor(_sysChannelId: number);
    get bytesSent(): number;
    get bytesReceived(): number;
    get buffersCount(): number;
    addChannel(channel: number): void;
    pushData(data: Uint8Array, trigger: Trigger, channelId: number): void;
    destroy(): void;
    private _processIncomingMessage;
    private _getNextCallerId;
    private _enqueueChunk;
    private _getNextChunk;
    private _sendChunks;
}
export declare const encodeChunk: ({ channelId, dataLength, chunk }: Chunk) => Buffer;
export declare const decodeChunk: (data: Uint8Array, withLength: (channelId: number) => boolean) => Chunk;
export {};
//# sourceMappingURL=balancer.d.ts.map