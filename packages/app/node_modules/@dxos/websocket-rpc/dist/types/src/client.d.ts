import { Event } from '@dxos/async';
import { type ProtoRpcPeerOptions } from '@dxos/rpc';
export type WebsocketRpcClientParams<C, S> = {
    url: string;
    authenticationToken?: string;
} & Pick<ProtoRpcPeerOptions<C, S>, 'requested' | 'exposed' | 'handlers' | 'noHandshake'>;
export declare class WebsocketRpcClient<C, S> {
    private readonly _params;
    private _socket?;
    private _rpc?;
    private readonly _connectTrigger;
    readonly connected: Event<void>;
    readonly disconnected: Event<void>;
    readonly error: Event<Error>;
    constructor(_params: WebsocketRpcClientParams<C, S>);
    get url(): string;
    open(): Promise<void>;
    close(): Promise<void>;
    get rpc(): C;
}
//# sourceMappingURL=client.d.ts.map