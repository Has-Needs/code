import { type IncomingMessage } from 'http';
import WebSocket from 'isomorphic-ws';
import { type Socket } from 'node:net';
import { type ProtoRpcPeer, type ProtoRpcPeerOptions } from '@dxos/rpc';
export type ConnectionInfo = {
    request: IncomingMessage;
};
export type ConnectionHandler<C, S> = {
    onOpen?: (rpc: ProtoRpcPeer<C>) => Promise<void>;
    onClose?: (rpc: ProtoRpcPeer<C>) => Promise<void>;
} & Pick<ProtoRpcPeerOptions<C, S>, 'requested' | 'exposed' | 'handlers'>;
export type WebsocketRpcServerParams<C, S> = {
    onConnection: (info: ConnectionInfo) => Promise<ConnectionHandler<C, S>>;
} & WebSocket.ServerOptions;
export declare class WebsocketRpcServer<C, S> {
    private readonly _params;
    private _server?;
    constructor(_params: WebsocketRpcServerParams<C, S>);
    handleUpgrade(request: IncomingMessage, socket: Socket, head: Buffer): void;
    open(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=server.d.ts.map