import { inspect } from 'node:util';
import { equalsSymbol, type Equatable } from '@dxos/debug';
import { type PublicKey } from '@dxos/keys';
/**
 * A vector clock that implements ordering over a set of feed messages.
 */
export declare class Timeframe implements Equatable {
    private readonly _frames;
    constructor(frames?: [PublicKey, number][]);
    toJSON(): Record<string, number>;
    toString(): string;
    equals(object: Timeframe): boolean;
    get(key: PublicKey): number | undefined;
    set(key: PublicKey, seq: number): void;
    frames(): [PublicKey, number][];
    size(): number;
    isEmpty(): boolean;
    /**
     * Returns a new timeframe with specified keys removed.
     * @param keys
     */
    withoutKeys(keys: PublicKey[]): Timeframe;
    map(fn: (frame: [key: PublicKey, seq: number]) => [PublicKey, number]): Timeframe;
    /**
     * Returns a total amount of messages represented by this timeframe.
     */
    totalMessages(): number;
    /**
     * Returns a total amount of messages that are present in this timeframe but are missing in `base`.
     */
    newMessages(base: Timeframe): number;
    /**
     * Used by NodeJS to get textual representation of this object in `console.log`.
     */
    [inspect.custom](): string;
    [equalsSymbol](other: any): boolean;
    /**
     * Merges the values, updating the highest sequence numbers.
     * @param timeframes
     */
    static merge(...timeframes: Timeframe[]): Timeframe;
    /**
     * Compares two timeframes and returns an array of frames from the first timeframe where the sequence number
     * is greater than the associated sequence number from the second timeframe.
     */
    static dependencies(tf1: Timeframe, tf2: Timeframe): Timeframe;
}
//# sourceMappingURL=timeframe.d.ts.map