import { PublicKey } from '@dxos/keys';
import { type TypedMessage } from '@dxos/protocols/proto';
import { type Credential, SpaceMember } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type DelegateSpaceInvitation } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type AsyncCallback, Callback } from '@dxos/util';
import { type FeedInfo } from './feed-state-machine';
import { type MemberInfo } from './member-state-machine';
import { type CredentialProcessor } from '../processor/credential-processor';
export interface SpaceState {
    readonly members: ReadonlyMap<PublicKey, MemberInfo>;
    readonly membershipChainHeads: PublicKey[];
    readonly feeds: ReadonlyMap<PublicKey, FeedInfo>;
    readonly credentials: Credential[];
    readonly genesisCredential: Credential | undefined;
    readonly creator: MemberInfo | undefined;
    readonly invitations: ReadonlyMap<PublicKey, DelegateSpaceInvitation>;
    addCredentialProcessor(processor: CredentialProcessor): Promise<void>;
    removeCredentialProcessor(processor: CredentialProcessor): Promise<void>;
    getCredentialsOfType(type: TypedMessage['@type']): Credential[];
    getMemberRole(memberKey: PublicKey): SpaceMember.Role;
    hasMembershipManagementPermission(memberKey: PublicKey): boolean;
}
export type ProcessOptions = {
    sourceFeed: PublicKey;
    skipVerification?: boolean;
};
export type CredentialEntry = {
    credential: Credential;
    sourceFeed: PublicKey;
    revoked: boolean;
};
/**
 * Validates and processes credentials for a single space.
 * Keeps a list of members and feeds.
 * Keeps and in-memory index of credentials and allows to query them.
 */
export declare class SpaceStateMachine implements SpaceState {
    private readonly _spaceKey;
    private readonly _members;
    private readonly _feeds;
    private readonly _invitations;
    private readonly _credentials;
    private readonly _credentialsById;
    private readonly _processedCredentials;
    private _genesisCredential;
    private _credentialProcessors;
    readonly onCredentialProcessed: Callback<AsyncCallback<Credential>>;
    readonly onMemberRoleChanged: Callback<AsyncCallback<MemberInfo[]>>;
    readonly onFeedAdmitted: Callback<AsyncCallback<FeedInfo>>;
    readonly onDelegatedInvitation: Callback<AsyncCallback<import("./invitation-state-machine").DelegateInvitationCredential>>;
    readonly onDelegatedInvitationRemoved: Callback<AsyncCallback<import("./invitation-state-machine").DelegateInvitationCredential>>;
    constructor(_spaceKey: PublicKey);
    get creator(): MemberInfo | undefined;
    get members(): ReadonlyMap<PublicKey, MemberInfo>;
    get membershipChainHeads(): PublicKey[];
    get feeds(): ReadonlyMap<PublicKey, FeedInfo>;
    get credentials(): Credential[];
    get credentialEntries(): CredentialEntry[];
    get genesisCredential(): Credential | undefined;
    get invitations(): ReadonlyMap<PublicKey, DelegateSpaceInvitation>;
    addCredentialProcessor(processor: CredentialProcessor): Promise<void>;
    removeCredentialProcessor(processor: CredentialProcessor): Promise<void>;
    getCredentialsOfType(type: TypedMessage['@type']): Credential[];
    /**
     * @param credential Message to process.
     * @param fromFeed Key of the feed where this credential is recorded.
     */
    process(credential: Credential, { sourceFeed, skipVerification }: ProcessOptions): Promise<boolean>;
    getMemberRole(memberKey: PublicKey): SpaceMember.Role;
    hasMembershipManagementPermission(memberKey: PublicKey): boolean;
    private _canInviteNewMembers;
}
//# sourceMappingURL=space-state-machine.d.ts.map