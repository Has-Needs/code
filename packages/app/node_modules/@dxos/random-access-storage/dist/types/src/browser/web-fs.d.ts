import { EventEmitter } from 'node:events';
import { type RandomAccessStorage } from 'random-access-storage';
import { Directory, type DiskInfo, type File, type Storage, StorageType } from '../common';
/**
 * Web file systems.
 */
export declare class WebFS implements Storage {
    readonly path: string;
    private readonly _files;
    readonly type = StorageType.WEBFS;
    protected _root?: FileSystemDirectoryHandle;
    constructor(path: string);
    get size(): number;
    private _getFiles;
    private _list;
    private _initialize;
    createDirectory(sub?: string): Directory;
    getOrCreateFile(path: string, filename: string, opts?: any): File;
    private _createFile;
    private _delete;
    reset(): Promise<void>;
    close(): Promise<void>;
    private _getFullFilename;
    getDiskInfo(): Promise<DiskInfo>;
}
export declare class WebFile extends EventEmitter implements File {
    readonly fileName: string;
    private readonly _fileHandle;
    private readonly _destroy;
    /**
     * Current view of the file contents.
     */
    private _buffer;
    private _loadBufferPromise;
    private _flushScheduled;
    private _flushPromise;
    /**
     * Used to discard unnecessary scheduled flushes.
     * If _flushNow() is called with a lower sequence number it should early exit.
     */
    private _flushSequence;
    private _flushes;
    private _operations;
    private _reads;
    private _readBytes;
    private _writes;
    private _writeBytes;
    get _bufferSize(): number | undefined;
    constructor({ fileName, file, destroy, }: {
        file: Promise<FileSystemFileHandle>;
        fileName: string;
        destroy: () => Promise<void>;
    });
    type: StorageType;
    readonly opened: boolean;
    readonly suspended: boolean;
    readonly closed: boolean;
    readonly unlinked: boolean;
    readonly writing: boolean;
    readonly readable: boolean;
    readonly writable: boolean;
    readonly deletable: boolean;
    readonly truncatable: boolean;
    readonly statable: boolean;
    destroyed: boolean;
    directory: string;
    filename: string;
    native: RandomAccessStorage;
    private _loadBuffer;
    private _loadBufferGuarded;
    private _flushCache;
    private _flushLater;
    private _flushNow;
    read(offset: number, size: number): Promise<Buffer>;
    write(offset: number, data: Buffer): Promise<void>;
    del(offset: number, size: number): Promise<void>;
    stat(): Promise<{
        size: number;
    }>;
    truncate(offset: number): Promise<void>;
    flush(): Promise<void>;
    /**
     * It's best to avoid using this method as it doesn't really close a file.
     * We could update the _opened flag and add a guard like for destroyed, but this would break
     * the FileSystemFileHandle sharing required for browser tests to run, where writes are
     * not immediately visible if using different file handles.
     */
    close(): Promise<void>;
    destroy(): Promise<void>;
    private assertNotDestroyed;
}
//# sourceMappingURL=web-fs.d.ts.map