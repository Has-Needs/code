import { inspect } from 'node:util';
import type { RandomAccessStorage } from 'random-access-storage';
import { Directory } from './directory';
import { type File } from './file';
import { type Storage, type StorageType } from './storage';
/**
 * Base class for all storage implementations.
 * https://github.com/random-access-storage
 * https://github.com/random-access-storage/random-access-storage
 */
export declare abstract class AbstractStorage implements Storage {
    readonly path: string;
    protected readonly _files: Map<string, File>;
    abstract readonly type: StorageType;
    constructor(path: string);
    [inspect.custom](): string;
    toJSON(): {
        type: StorageType;
        path: string;
    };
    get size(): number;
    createDirectory(sub?: string): Directory;
    /**
     * Delete all files.
     */
    reset(): Promise<void>;
    protected _list(path: string): Promise<string[]>;
    protected getOrCreateFile(path: string, filename: string, opts?: any): File;
    protected _destroy(): Promise<void> | undefined;
    /**
     * Attempt to reopen file.
     */
    protected _openFile(file: RandomAccessStorage): RandomAccessStorage | undefined;
    protected abstract _createFile(path: string, filename: string, opts?: any): RandomAccessStorage;
    private _getFileIfExists;
    protected _getFiles(path: string): Promise<Map<string, File>>;
    protected _closeFilesInPath(path: string): Promise<void>;
    close(): Promise<void>;
    protected _remove(path: string): Promise<void>;
}
//# sourceMappingURL=abstract-storage.d.ts.map