import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  FullyConnectedTopology,
  MemoryTransportFactory,
  RtcTransportProxyFactory,
  RtcTransportService,
  SwarmNetworkManager,
  TransportKind,
  createRtcTransportFactory,
  createTeleportProtocolFactory
} from "../chunk-QQY4BF6O.mjs";

// packages/core/mesh/network-manager/src/testing/test-builder.ts
import { PublicKey as PublicKey2 } from "@dxos/keys";
import { log as log2 } from "@dxos/log";
import { MemorySignalManager, MemorySignalManagerContext, WebsocketSignalManager } from "@dxos/messaging";
import { schema } from "@dxos/protocols/proto";
import { ConnectionState } from "@dxos/protocols/proto/dxos/client/services";
import { createLinkedPorts, createProtoRpcPeer } from "@dxos/rpc";
import { ComplexMap as ComplexMap2 } from "@dxos/util";
import { TcpTransportFactory } from "#tcp-transport";

// packages/core/mesh/network-manager/src/testing/test-wire-protocol.ts
import { asyncTimeout, Event } from "@dxos/async";
import { PublicKey } from "@dxos/keys";
import { log } from "@dxos/log";
import { TestExtension, TestExtensionWithStreams } from "@dxos/teleport";
import { ComplexMap } from "@dxos/util";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/core/mesh/network-manager/src/testing/test-wire-protocol.ts";
var TestWireProtocol = class {
  constructor(_extensionFactory = () => []) {
    this._extensionFactory = _extensionFactory;
    this.connections = new ComplexMap(PublicKey.hash);
    this.streamConnections = new ComplexMap(PublicKey.hash);
    this.connected = new Event();
    this.disconnected = new Event();
    this.otherConnections = new ComplexMap(({ remotePeerId, extension }) => remotePeerId.toHex() + extension);
    this.factory = createTeleportProtocolFactory(async (teleport) => {
      log("create", {
        remotePeerId: teleport.remotePeerId
      }, {
        F: __dxlog_file,
        L: 35,
        S: this,
        C: (f, a) => f(...a)
      });
      const handleDisconnect = () => {
        this.connections.delete(teleport.remotePeerId);
        this.disconnected.emit(teleport.remotePeerId);
      };
      const extension = new TestExtension({
        onClose: async () => handleDisconnect(),
        onAbort: async () => handleDisconnect()
      });
      this.connections.set(teleport.remotePeerId, extension);
      teleport.addExtension("test", extension);
      this.connected.emit(teleport.remotePeerId);
      const streamExtension = new TestExtensionWithStreams({
        onClose: async () => {
          this.streamConnections.delete(teleport.remotePeerId);
        }
      });
      this.streamConnections.set(teleport.remotePeerId, streamExtension);
      teleport.addExtension("test-stream", streamExtension);
      for (const { name, extension: extension2 } of this._extensionFactory()) {
        this.otherConnections.set({
          remotePeerId: teleport.remotePeerId,
          extension: name
        }, extension2);
        teleport.addExtension(name, extension2);
      }
    });
  }
  async waitForConnection(peerId) {
    if (this.connections.has(peerId)) {
      return this.connections.get(peerId);
    }
    log("waitForConnection", {
      peerId
    }, {
      F: __dxlog_file,
      L: 66,
      S: this,
      C: (f, a) => f(...a)
    });
    await asyncTimeout(
      this.connected.waitFor((connectedId) => connectedId.equals(peerId)),
      // TODO(nf): Make this configurable.
      1e4
    );
    return this.connections.get(peerId);
  }
  async testConnection(peerId, message) {
    const connection = await this.waitForConnection(peerId);
    await connection.test(message);
  }
  async openStream(peerId, streamTag, streamLoadInterval, streamLoadChunkSize) {
    if (!this.streamConnections.has(peerId)) {
      throw new Error("Connection does not exist.");
    }
    const connection = this.streamConnections.get(peerId);
    return connection.addNewStream(streamLoadInterval, streamLoadChunkSize, streamTag);
  }
  async closeStream(peerId, streamTag) {
    if (!this.streamConnections.has(peerId)) {
      throw new Error("Connection does not exist.");
    }
    const connection = this.streamConnections.get(peerId);
    return connection.closeStream(streamTag);
  }
};

// packages/core/mesh/network-manager/src/testing/test-builder.ts
var __dxlog_file2 = "/home/runner/work/dxos/dxos/packages/core/mesh/network-manager/src/testing/test-builder.ts";
var port = process.env.SIGNAL_PORT ?? 4e3;
var TEST_SIGNAL_HOSTS = [
  {
    server: `ws://localhost:${port}/.well-known/dx/signal`
  }
];
var TestBuilder = class {
  constructor(options = {}) {
    this.options = options;
    this._signalContext = new MemorySignalManagerContext();
  }
  createSignalManager() {
    if (this.options.signalHosts) {
      return new WebsocketSignalManager(this.options.signalHosts);
    }
    return new MemorySignalManager(this._signalContext);
  }
  createPeer(peerId = PublicKey2.random()) {
    return new TestPeer(this, peerId, this.options.transport);
  }
};
var TestPeer = class {
  constructor(testBuilder, peerId, transport = testBuilder.options.signalHosts ? TransportKind.WEB_RTC : TransportKind.MEMORY) {
    this.testBuilder = testBuilder;
    this.peerId = peerId;
    this.transport = transport;
    this._swarms = new ComplexMap2(PublicKey2.hash);
    this._signalManager = this.testBuilder.createSignalManager();
    this._networkManager = this.createNetworkManager(this.transport);
    this._networkManager.setPeerInfo({
      identityKey: peerId.toHex(),
      peerKey: peerId.toHex()
    });
  }
  // TODO(burdon): Move to TestBuilder.
  createNetworkManager(transport) {
    let transportFactory;
    if (this.testBuilder.options.signalHosts) {
      log2.info(`using ${transport} transport with signal server.`, void 0, {
        F: __dxlog_file2,
        L: 94,
        S: this,
        C: (f, a) => f(...a)
      });
      switch (transport) {
        case TransportKind.MEMORY:
          throw new Error("Memory transport not supported with signal server.");
        case TransportKind.TCP:
          transportFactory = TcpTransportFactory;
          break;
        case TransportKind.WEB_RTC:
          transportFactory = createRtcTransportFactory();
          break;
        case TransportKind.WEB_RTC_PROXY:
          {
            const [proxyPort, servicePort] = createLinkedPorts();
            this._proxy = createProtoRpcPeer({
              port: proxyPort,
              requested: {
                BridgeService: schema.getService("dxos.mesh.bridge.BridgeService")
              },
              noHandshake: true,
              encodingOptions: {
                preserveAny: true
              }
            });
            this._service = createProtoRpcPeer({
              port: servicePort,
              exposed: {
                BridgeService: schema.getService("dxos.mesh.bridge.BridgeService")
              },
              handlers: {
                BridgeService: new RtcTransportService()
              },
              noHandshake: true,
              encodingOptions: {
                preserveAny: true
              }
            });
            transportFactory = new RtcTransportProxyFactory().setBridgeService(this._proxy.rpc.BridgeService);
          }
          break;
        default:
          throw new Error(`Unsupported transport: ${transport}`);
      }
    } else {
      if (transport !== TransportKind.MEMORY && transport !== TransportKind.TCP) {
        log2.warn(`specified transport ${transport} but no signalling configured, using memory transport instead`, void 0, {
          F: __dxlog_file2,
          L: 140,
          S: this,
          C: (f, a) => f(...a)
        });
      }
      log2.info(`using ${transport} transport without signal server.`, void 0, {
        F: __dxlog_file2,
        L: 142,
        S: this,
        C: (f, a) => f(...a)
      });
      transportFactory = MemoryTransportFactory;
    }
    return new SwarmNetworkManager({
      signalManager: this._signalManager,
      transportFactory
    });
  }
  async open() {
    await this._networkManager.open();
    await this._proxy?.open();
    await this._service?.open();
  }
  async close() {
    await Promise.all(Array.from(this._swarms.values()).map((swarm) => swarm.leave()));
    this._swarms.clear();
    await this._proxy?.close();
    await this._service?.close();
    await this._networkManager.close();
  }
  getSwarm(topic) {
    const swarm = this._swarms.get(topic);
    if (!swarm) {
      throw new Error(`Swarm not found for topic: ${topic}`);
    }
    return swarm;
  }
  createSwarm(topic, extensionFactory = () => []) {
    const swarm = new TestSwarmConnection(this, topic, extensionFactory);
    this._swarms.set(topic, swarm);
    return swarm;
  }
  async goOffline() {
    await this._networkManager.setConnectionState(ConnectionState.OFFLINE);
  }
  async goOnline() {
    await this._networkManager.setConnectionState(ConnectionState.ONLINE);
  }
};
var TestSwarmConnection = class {
  constructor(peer, topic, extensionFactory) {
    this.peer = peer;
    this.topic = topic;
    this.extensionFactory = extensionFactory;
    this.protocol = new TestWireProtocol(this.extensionFactory);
  }
  // TODO(burdon): Need to create new plugin instance per swarm?
  //  If so, then perhaps joinSwarm should return swarm object with access to plugins.
  async join(topology = new FullyConnectedTopology()) {
    await this.peer._networkManager.joinSwarm({
      topic: this.topic,
      peerInfo: {
        peerKey: this.peer.peerId.toHex(),
        identityKey: this.peer.peerId.toHex()
      },
      protocolProvider: this.protocol.factory,
      topology
    });
    return this;
  }
  async leave() {
    await this.peer._networkManager.leaveSwarm(this.topic);
    return this;
  }
};
export {
  TEST_SIGNAL_HOSTS,
  TestBuilder,
  TestPeer,
  TestSwarmConnection
};
//# sourceMappingURL=index.mjs.map
