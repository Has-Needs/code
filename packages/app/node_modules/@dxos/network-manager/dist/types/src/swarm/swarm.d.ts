import { ErrorStream } from '@dxos/debug';
import { PublicKey } from '@dxos/keys';
import { type SwarmEvent, type Messenger, type PeerInfo } from '@dxos/messaging';
import { type Answer } from '@dxos/protocols/proto/dxos/mesh/swarm';
import { type Connection } from './connection';
import { type ConnectionLimiter } from './connection-limiter';
import { type OfferMessage, type SignalMessage } from '../signal';
import { type Topology } from '../topology';
import { type TransportFactory } from '../transport';
import { type Topic } from '../types';
import { type WireProtocolProvider } from '../wire-protocol';
/**
 * A single peer's view of the swarm.
 * Manages a set of peers subscribed on the same topic.
 * Routes signal events and maintains swarm topology.
 */
export declare class Swarm {
    private readonly _topic;
    private readonly _ownPeer;
    private _topology;
    private readonly _protocolProvider;
    private readonly _messenger;
    private readonly _transportFactory;
    private readonly _label;
    private readonly _connectionLimiter;
    private readonly _initiationDelay;
    private readonly _swarmMessenger;
    private _ctx;
    private _listeningHandle?;
    /**
     * Unique id of the swarm, local to the current peer, generated when swarm is joined.
     */
    readonly _instanceId: string;
    readonly errors: ErrorStream;
    constructor(_topic: PublicKey, _ownPeer: PeerInfo, _topology: Topology, _protocolProvider: WireProtocolProvider, _messenger: Messenger, _transportFactory: TransportFactory, _label: string | undefined, _connectionLimiter: ConnectionLimiter, _initiationDelay?: number);
    get connections(): Connection[];
    get ownPeerId(): PublicKey;
    get ownPeer(): import("@dxos/protocols/proto/dxos/edge/messenger").Peer;
    /**
     * Custom label assigned to this swarm. Used in devtools to display human-readable names for swarms.
     */
    get label(): string | undefined;
    get topic(): Topic;
    open(): Promise<void>;
    destroy(): Promise<void>;
    setTopology(topology: Topology): Promise<void>;
    onSwarmEvent(swarmEvent: SwarmEvent): Promise<void>;
    onOffer(message: OfferMessage): Promise<Answer>;
    private _getOfferSenderPeer;
    onSignal(message: SignalMessage): Promise<void>;
    goOffline(): Promise<void>;
    goOnline(): Promise<void>;
    private _getOrCreatePeer;
    private _destroyPeer;
    private _getSwarmController;
    /**
     * Creates a connection then sends message over signal network.
     */
    private _initiateConnection;
    private _closeConnection;
    private _isConnectionEstablishmentInProgress;
    private _isUnregistered;
}
//# sourceMappingURL=swarm.d.ts.map