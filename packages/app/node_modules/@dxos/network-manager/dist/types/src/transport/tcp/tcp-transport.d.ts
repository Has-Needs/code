import { Event } from '@dxos/async';
import { ErrorStream } from '@dxos/debug';
import { type Signal } from '@dxos/protocols/proto/dxos/mesh/swarm';
import { type Transport, type TransportFactory, type TransportOptions, type TransportStats } from '../transport';
export declare const TcpTransportFactory: TransportFactory;
/**
 * Fake transport.
 */
export declare class TcpTransport implements Transport {
    private readonly options;
    private _server?;
    private _socket?;
    private _connected;
    private _closed;
    readonly closed: Event<void>;
    readonly connected: Event<void>;
    readonly errors: ErrorStream;
    constructor(options: TransportOptions);
    get isOpen(): boolean;
    open(): Promise<this>;
    close(): Promise<this>;
    onSignal({ payload }: Signal): Promise<void>;
    getDetails(): Promise<string>;
    getStats(): Promise<TransportStats>;
    private _handleSocket;
}
//# sourceMappingURL=tcp-transport.d.ts.map