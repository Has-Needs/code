import { Stream } from '@dxos/codec-protobuf/stream';
import { type BridgeService, type ConnectionRequest, type SignalRequest, type DataRequest, type BridgeEvent, type CloseRequest, type DetailsRequest, type DetailsResponse, type StatsRequest, type StatsResponse } from '@dxos/protocols/proto/dxos/mesh/bridge';
import { type IceProvider } from '../../signal';
import { type TransportFactory } from '../transport';
export declare class RtcTransportService implements BridgeService {
    private readonly _transportFactory;
    private readonly _openTransports;
    constructor(webrtcConfig?: RTCConfiguration, iceProvider?: IceProvider, _transportFactory?: TransportFactory);
    hasOpenTransports(): boolean;
    open(request: ConnectionRequest): Stream<BridgeEvent>;
    sendSignal({ proxyId, signal }: SignalRequest): Promise<void>;
    getDetails({ proxyId }: DetailsRequest): Promise<DetailsResponse>;
    getStats({ proxyId }: StatsRequest): Promise<StatsResponse>;
    sendData({ proxyId, payload }: DataRequest): Promise<void>;
    close({ proxyId }: CloseRequest): Promise<void>;
    private _safeCloseTransport;
}
//# sourceMappingURL=rtc-transport-service.d.ts.map