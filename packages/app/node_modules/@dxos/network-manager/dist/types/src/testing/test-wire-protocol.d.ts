import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { TestExtension, TestExtensionWithStreams } from '@dxos/teleport';
import type { TestStreamStats, TeleportExtension } from '@dxos/teleport';
import { ComplexMap } from '@dxos/util';
export type TestTeleportExtension = {
    name: string;
    extension: TeleportExtension;
};
export type TestTeleportExtensionFactory = () => TestTeleportExtension[];
export declare class TestWireProtocol {
    private readonly _extensionFactory;
    readonly connections: ComplexMap<PublicKey, TestExtension>;
    readonly streamConnections: ComplexMap<PublicKey, TestExtensionWithStreams>;
    readonly connected: Event<PublicKey>;
    readonly disconnected: Event<PublicKey>;
    readonly otherConnections: ComplexMap<{
        remotePeerId: PublicKey;
        extension: string;
    }, TeleportExtension>;
    constructor(_extensionFactory?: TestTeleportExtensionFactory);
    readonly factory: import("..").WireProtocolProvider;
    waitForConnection(peerId: PublicKey): Promise<TestExtension>;
    testConnection(peerId: PublicKey, message?: string): Promise<void>;
    openStream(peerId: PublicKey, streamTag: string, streamLoadInterval: number, streamLoadChunkSize: number): Promise<string>;
    closeStream(peerId: PublicKey, streamTag: string): Promise<TestStreamStats>;
}
//# sourceMappingURL=test-wire-protocol.d.ts.map