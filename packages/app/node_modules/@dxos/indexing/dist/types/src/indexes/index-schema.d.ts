import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type ObjectStructure } from '@dxos/echo-protocol';
import { type ObjectPointerEncoded } from '@dxos/protocols';
import { IndexKind } from '@dxos/protocols/proto/dxos/echo/indexing';
import { type FindResult, type Index, type IndexQuery, type LoadParams } from '../types';
/**
 * Indexes objects by their typename.
 */
export declare class IndexSchema extends Resource implements Index {
    private _identifier;
    readonly kind: IndexKind;
    readonly updated: Event<void>;
    /**
     * Map `typename` -> Set `index id`.
     * @see https://v8.dev/blog/hash-code for performance estimations.
     */
    private readonly _index;
    get identifier(): string;
    update(id: ObjectPointerEncoded, object: Partial<ObjectStructure>): Promise<boolean>;
    remove(id: ObjectPointerEncoded): Promise<void>;
    find(filter: IndexQuery): Promise<FindResult[]>;
    serialize(): Promise<string>;
    static load({ serialized, identifier }: LoadParams): Promise<IndexSchema>;
}
//# sourceMappingURL=index-schema.d.ts.map