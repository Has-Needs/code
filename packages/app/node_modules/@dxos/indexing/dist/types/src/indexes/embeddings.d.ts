import { Resource } from '@dxos/context';
import type { ExtractInputBlock } from './text';
export interface EmbeddingExtractorOptions {
    /**
     * Extraction model to use.
     */
    model: string;
    /**
     * Combine all chunks into a single vector.
     */
    chunkCombination: 'disabled' | 'mean' | 'max';
    /**
     * In characters.
     */
    maxChunkSize: number;
}
export declare class EmbeddingExtractor extends Resource {
    private _options;
    private _extractor?;
    constructor(options?: Partial<EmbeddingExtractorOptions>);
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    /**
     * Extracts embeddings from the object.
     * @returns Embeddings for each chunk of the object or a single embedding if chunks are combined.
     */
    extract(data: ExtractInputBlock[]): Promise<number[][]>;
}
/**
 * Breaks the data into chunks.
 * @param data - The data to break into chunks.
 * @param maxChunkSize - The maximum size of a chunk in characters.
 * @returns The chunks.
 */
export declare const breakIntoChunks: (data: ExtractInputBlock[], maxChunkSize: number) => ExtractInputBlock[];
//# sourceMappingURL=embeddings.d.ts.map