"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_IOJXLIVL_exports = {};
__export(chunk_IOJXLIVL_exports, {
  Stream: () => Stream
});
module.exports = __toCommonJS(chunk_IOJXLIVL_exports);
var import_context = require("@dxos/context");
var import_invariant = require("@dxos/invariant");
var import_log = require("@dxos/log");
var import_util = require("@dxos/util");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/common/codec-protobuf/src/stream.ts";
var Stream = class _Stream {
  constructor(producer) {
    this._messageHandler = void 0;
    this._closeHandler = void 0;
    this._readyHandler = void 0;
    this._isClosed = false;
    this._closeError = void 0;
    this._producerCleanup = void 0;
    this._isReady = false;
    this._buffer = [];
    this._readyPromise = new Promise((resolve) => {
      this._resolveReadyPromise = resolve;
    });
    this._ctx = new import_context.Context({
      onError: (err) => {
        if (this._isClosed) {
          return;
        }
        this._isClosed = true;
        this._closeError = err;
        this._producerCleanup?.(err);
        this._closeHandler?.(err);
        void this._ctx.dispose();
      }
    }, {
      F: __dxlog_file,
      L: 197
    });
    this._ctx.onDispose(() => this.close());
    try {
      const producerCleanup = producer({
        ctx: this._ctx,
        ready: () => {
          this._markAsReady();
        },
        next: (msg) => {
          if (this._isClosed) {
            (0, import_log.log)("Stream is closed, dropping message.", void 0, {
              F: __dxlog_file,
              L: 222,
              S: this,
              C: (f, a) => f(...a)
            });
            return;
          }
          this._markAsReady();
          if (this._messageHandler) {
            try {
              this._messageHandler(msg);
            } catch (err) {
              (0, import_util.throwUnhandledError)(err);
            }
          } else {
            (0, import_invariant.invariant)(this._buffer, void 0, {
              F: __dxlog_file,
              L: 236,
              S: this,
              A: [
                "this._buffer",
                ""
              ]
            });
            this._buffer.push(msg);
          }
        },
        close: (err) => {
          if (this._isClosed) {
            return;
          }
          this._isClosed = true;
          this._closeError = err;
          this._producerCleanup?.(err);
          try {
            this._closeHandler?.(err);
          } catch (err2) {
            (0, import_util.throwUnhandledError)(err2);
          }
          void this._ctx.dispose();
        }
      });
      if (producerCleanup) {
        this._producerCleanup = producerCleanup;
      }
    } catch (err) {
      this._ctx.raise(err);
    }
  }
  /**
  * Consumes the entire stream to the end until it closes and returns a promise with the resulting items.
  */
  static consume(stream) {
    return new Promise((resolve) => {
      const items = [];
      stream.onReady(() => {
        items.push({
          ready: true
        });
      });
      stream.subscribe((data) => {
        items.push({
          data
        });
      }, (error) => {
        if (error) {
          items.push({
            closed: true,
            error
          });
        } else {
          items.push({
            closed: true
          });
        }
        resolve(items);
      });
    });
  }
  static async consumeData(stream) {
    const entries = await _Stream.consume(stream);
    const res = [];
    for (const entry of entries) {
      if ("data" in entry) {
        res.push(entry.data);
      } else if ("closed" in entry && entry.closed === true) {
        if (entry.error) {
          throw entry.error;
        } else {
          break;
        }
      }
    }
    return res;
  }
  static async first(stream) {
    return new Promise((resolve, reject) => {
      stream.subscribe((data) => {
        resolve(data);
        void stream.close();
      }, (error) => {
        if (error) {
          reject(error);
        } else {
          resolve(void 0);
        }
      });
    });
  }
  /**
  * Maps all data coming through the stream.
  */
  static map(source, map) {
    return new _Stream(({ ready, next, close }) => {
      source.onReady(ready);
      source.subscribe((data) => next(map(data)), close);
      return () => source.close();
    });
  }
  /**
  * Converts Promise<Stream<T>> to Stream<T>.
  */
  static unwrapPromise(streamPromise) {
    if (streamPromise instanceof _Stream) {
      return streamPromise;
    }
    return new _Stream(({ ready, next, close }) => {
      streamPromise.then((stream) => {
        stream.onReady(ready);
        stream.subscribe(next, close);
      }, (err) => {
        close(err);
      });
      return () => {
        streamPromise.then(
          (stream) => stream.close(),
          // eslint-disable-next-line n/handle-callback-err
          (err) => {
          }
        );
      };
    });
  }
  static fromPromise(promise) {
    return new _Stream(({ ready, next, close }) => {
      promise.then((data) => {
        ready();
        next(data);
        close();
      }, (err) => {
        close(err);
      });
    });
  }
  _markAsReady() {
    if (!this._isReady) {
      this._isReady = true;
      this._readyHandler?.();
      this._resolveReadyPromise();
    }
  }
  // TODO(burdon): Can this be cancelled?
  subscribe(onMessage, onClose) {
    (0, import_invariant.invariant)(!this._messageHandler, "Stream is already subscribed to.", {
      F: __dxlog_file,
      L: 277,
      S: this,
      A: [
        "!this._messageHandler",
        "'Stream is already subscribed to.'"
      ]
    });
    (0, import_invariant.invariant)(!this._closeHandler, "Stream is already subscribed to.", {
      F: __dxlog_file,
      L: 278,
      S: this,
      A: [
        "!this._closeHandler",
        "'Stream is already subscribed to.'"
      ]
    });
    (0, import_invariant.invariant)(this._buffer, void 0, {
      F: __dxlog_file,
      L: 279,
      S: this,
      A: [
        "this._buffer",
        ""
      ]
    });
    for (const message of this._buffer) {
      try {
        onMessage(message);
      } catch (err) {
        (0, import_util.throwUnhandledError)(err);
      }
    }
    this._buffer = null;
    if (this._isClosed) {
      onClose?.(this._closeError);
      return;
    }
    this._messageHandler = onMessage;
    this._closeHandler = onClose;
  }
  /**
  * Resolves when stream is ready.
  */
  // TODO(burdon): Gather all callbacks into single observer.
  waitUntilReady() {
    return this._readyPromise;
  }
  /**
  * Registers a callback to be called when stream is ready.
  */
  onReady(onReady) {
    (0, import_invariant.invariant)(!this._readyHandler, "Stream already has a handler for the ready event.", {
      F: __dxlog_file,
      L: 314,
      S: this,
      A: [
        "!this._readyHandler",
        "'Stream already has a handler for the ready event.'"
      ]
    });
    this._readyHandler = onReady;
    if (this._isReady) {
      onReady();
    }
  }
  /**
  * Close the stream and dispose of any resources.
  */
  async close() {
    if (this._isClosed) {
      return;
    }
    this._isClosed = true;
    this._producerCleanup?.();
    this._closeHandler?.(void 0);
    await this._ctx.dispose();
    this._messageHandler = void 0;
    this._closeHandler = void 0;
    this._producerCleanup = void 0;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Stream
});
//# sourceMappingURL=chunk-IOJXLIVL.cjs.map
