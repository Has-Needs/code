import { type Context, Resource } from '@dxos/context';
import type { AutomergeProtocolMessage } from '@dxos/protocols';
import { type AutomergeReplicatorFactory } from '@dxos/teleport-extension-automerge-replicator';
import type { EchoReplicator, EchoReplicatorContext, ReplicatorConnection, ShouldAdvertiseParams, ShouldSyncCollectionParams } from '../automerge';
export type TestReplicatorNetworkOptions = {
    latency?: number;
};
export declare class TestReplicationNetwork extends Resource {
    private readonly _replicators;
    private readonly _latency?;
    constructor(options?: TestReplicatorNetworkOptions);
    protected _close(ctx: Context): Promise<void>;
    createReplicator(): Promise<TestReplicator>;
    private _connectReplicator;
    private _disconnectReplicator;
    private _createConnectionPair;
}
type TestReplicatorParams = {
    onConnect: () => Promise<void>;
    onDisconnect: () => Promise<void>;
};
export declare class TestReplicator implements EchoReplicator {
    private readonly _params;
    constructor(_params: TestReplicatorParams);
    connected: boolean;
    context: EchoReplicatorContext | undefined;
    connections: Set<TestReplicatorConnection>;
    connect(context: EchoReplicatorContext): Promise<void>;
    disconnect(): Promise<void>;
    addConnection(connection: TestReplicatorConnection): Promise<void>;
    removeConnection(connection: TestReplicatorConnection): Promise<void>;
}
export declare class TestReplicatorConnection implements ReplicatorConnection {
    readonly peerId: string;
    readonly readable: ReadableStream<AutomergeProtocolMessage>;
    readonly writable: WritableStream<AutomergeProtocolMessage>;
    otherSide: TestReplicatorConnection | undefined;
    owningReplicator: TestReplicator | undefined;
    constructor(peerId: string, readable: ReadableStream<AutomergeProtocolMessage>, writable: WritableStream<AutomergeProtocolMessage>);
    shouldAdvertise(params: ShouldAdvertiseParams): Promise<boolean>;
    shouldSyncCollection(params: ShouldSyncCollectionParams): boolean;
}
export declare const testAutomergeReplicatorFactory: AutomergeReplicatorFactory;
export declare const brokenAutomergeReplicatorFactory: AutomergeReplicatorFactory;
export {};
//# sourceMappingURL=test-replicator.d.ts.map