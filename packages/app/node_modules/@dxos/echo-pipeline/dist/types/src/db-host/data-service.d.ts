import { type RequestOptions } from '@dxos/codec-protobuf';
import { Stream } from '@dxos/codec-protobuf/stream';
import { type DataService, type FlushRequest, type SubscribeRequest, type BatchedDocumentUpdates, type UpdateSubscriptionRequest, type GetDocumentHeadsRequest, type GetDocumentHeadsResponse, type ReIndexHeadsRequest, type WaitUntilHeadsReplicatedRequest, type UpdateRequest, type GetSpaceSyncStateRequest, type SpaceSyncState } from '@dxos/protocols/proto/dxos/echo/service';
import { type SpaceStateManager } from './space-state-manager';
import { type AutomergeHost } from '../automerge';
export type DataServiceParams = {
    automergeHost: AutomergeHost;
    spaceStateManager: SpaceStateManager;
    updateIndexes: () => Promise<void>;
};
/**
 * Data sync between client and services.
 */
export declare class DataServiceImpl implements DataService {
    /**
     * Map of subscriptions.
     * subscriptionId -> DocumentsSynchronizer
     */
    private readonly _subscriptions;
    private readonly _automergeHost;
    private readonly _spaceStateManager;
    private readonly _updateIndexes;
    constructor(params: DataServiceParams);
    subscribe(request: SubscribeRequest): Stream<BatchedDocumentUpdates>;
    updateSubscription(request: UpdateSubscriptionRequest): Promise<void>;
    update(request: UpdateRequest): Promise<void>;
    flush(request: FlushRequest): Promise<void>;
    getDocumentHeads(request: GetDocumentHeadsRequest): Promise<GetDocumentHeadsResponse>;
    waitUntilHeadsReplicated(request: WaitUntilHeadsReplicatedRequest, options?: RequestOptions | undefined): Promise<void>;
    reIndexHeads(request: ReIndexHeadsRequest, options?: RequestOptions): Promise<void>;
    updateIndexes(): Promise<void>;
    subscribeSpaceSyncState(request: GetSpaceSyncStateRequest): Stream<SpaceSyncState>;
}
//# sourceMappingURL=data-service.d.ts.map