import { Event } from '@dxos/async';
import { type Context, Resource } from '@dxos/context';
import { type DelegateInvitationCredential, type FeedInfo, type MemberInfo } from '@dxos/credentials';
import { type FeedOptions, type FeedWrapper } from '@dxos/feed-store';
import { type PublicKey, type SpaceId } from '@dxos/keys';
import type { FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Timeframe } from '@dxos/timeframe';
import { type AsyncCallback, Callback } from '@dxos/util';
import { type SpaceProtocol } from './space-protocol';
import { type MetadataStore } from '../metadata';
import { type PipelineAccessor } from '../pipeline';
type FeedProvider = (feedKey: PublicKey, opts?: FeedOptions) => Promise<FeedWrapper<FeedMessage>>;
export type SpaceParams = {
    id: SpaceId;
    spaceKey: PublicKey;
    protocol: SpaceProtocol;
    genesisFeed: FeedWrapper<FeedMessage>;
    feedProvider: FeedProvider;
    metadataStore: MetadataStore;
    memberKey: PublicKey;
    snapshotId?: string | undefined;
    onDelegatedInvitationStatusChange: (invitation: DelegateInvitationCredential, isActive: boolean) => Promise<void>;
    onMemberRolesChanged: (member: MemberInfo[]) => Promise<void>;
};
export type CreatePipelineParams = {
    start: Timeframe;
};
/**
 * Spaces are globally addressable databases with access control.
 */
export declare class Space extends Resource {
    readonly onCredentialProcessed: Callback<AsyncCallback<Credential>>;
    readonly stateUpdate: Event<void>;
    readonly protocol: SpaceProtocol;
    private readonly _id;
    private readonly _key;
    private readonly _genesisFeedKey;
    private readonly _feedProvider;
    private readonly _controlPipeline;
    private _controlFeed?;
    private _dataFeed?;
    constructor(params: SpaceParams);
    get id(): SpaceId;
    get key(): PublicKey;
    get genesisFeedKey(): PublicKey;
    get controlFeedKey(): PublicKey | undefined;
    get dataFeedKey(): PublicKey | undefined;
    get spaceState(): import("@dxos/credentials").SpaceState;
    /**
     * @test-only
     */
    get controlPipeline(): PipelineAccessor;
    setControlFeed(feed: FeedWrapper<FeedMessage>): Promise<this>;
    setDataFeed(feed: FeedWrapper<FeedMessage>): Promise<this>;
    /**
     * Use for diagnostics.
     */
    getControlFeeds(): FeedInfo[];
    protected _open(ctx: Context): Promise<void>;
    startProtocol(): Promise<void>;
    protected _close(): Promise<void>;
}
export {};
//# sourceMappingURL=space.d.ts.map