import { type Trigger } from '@dxos/async';
import { type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type AdmissionDiscoveryService, type GetAdmissionCredentialRequest } from '@dxos/protocols/proto/dxos/mesh/teleport';
import { type ExtensionContext, RpcExtension } from '@dxos/teleport';
import { type Space } from './space';
/**
 * Guest's side for a connection to a concrete peer in p2p network during invitation.
 */
export declare class CredentialRetrieverExtension extends RpcExtension<{
    AdmissionDiscoveryService: AdmissionDiscoveryService;
}, {}> {
    private readonly _request;
    private readonly _onResult;
    private _ctx;
    constructor(_request: GetAdmissionCredentialRequest, _onResult: Trigger<Credential>);
    protected getHandlers(): Promise<{}>;
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(): Promise<void>;
    onAbort(): Promise<void>;
}
export declare class CredentialServerExtension extends RpcExtension<{}, {
    AdmissionDiscoveryService: AdmissionDiscoveryService;
}> {
    private readonly _space;
    constructor(_space: Space);
    protected getHandlers(): Promise<{
        AdmissionDiscoveryService: AdmissionDiscoveryService;
    }>;
}
//# sourceMappingURL=admission-discovery-extension.d.ts.map