import type { DocumentId, PeerId } from '@automerge/automerge-repo';
import { Event } from '@dxos/async';
import { Resource, type Context } from '@dxos/context';
export type CollectionSynchronizerParams = {
    sendCollectionState: (collectionId: string, peerId: PeerId, state: CollectionState) => void;
    queryCollectionState: (collectionId: string, peerId: PeerId) => void;
    shouldSyncCollection: (collectionId: string, peerId: PeerId) => boolean;
};
/**
 * Implements collection sync protocol.
 */
export declare class CollectionSynchronizer extends Resource {
    private readonly _sendCollectionState;
    private readonly _queryCollectionState;
    private readonly _shouldSyncCollection;
    /**
     * CollectionId -> State.
     */
    private readonly _perCollectionStates;
    private readonly _activeCollections;
    private readonly _connectedPeers;
    readonly remoteStateUpdated: Event<{
        collectionId: string;
        peerId: PeerId;
        newDocsAppeared: boolean;
    }>;
    constructor(params: CollectionSynchronizerParams);
    protected _open(ctx: Context): Promise<void>;
    getRegisteredCollectionIds(): string[];
    getLocalCollectionState(collectionId: string): CollectionState | undefined;
    setLocalCollectionState(collectionId: string, state: CollectionState): void;
    clearLocalCollectionState(collectionId: string): void;
    getRemoteCollectionStates(collectionId: string): ReadonlyMap<PeerId, CollectionState>;
    refreshCollection(collectionId: string): void;
    /**
     * Callback when a connection to a peer is established.
     */
    onConnectionOpen(peerId: PeerId): void;
    /**
     * Callback when a connection to a peer is closed.
     */
    onConnectionClosed(peerId: PeerId): void;
    /**
     * Callback when a peer queries the state of a collection.
     */
    onCollectionStateQueried(collectionId: string, peerId: PeerId): void;
    /**
     * Callback when a peer sends the state of a collection.
     */
    onRemoteStateReceived(collectionId: string, peerId: PeerId, state: CollectionState): void;
    private _getOrCreatePerCollectionState;
    private _refreshInterestedPeers;
}
export type CollectionState = {
    /**
     * DocumentId -> Heads.
     */
    documents: Record<string, string[]>;
};
export type CollectionStateDiff = {
    missingOnRemote: DocumentId[];
    missingOnLocal: DocumentId[];
    different: DocumentId[];
};
export declare const diffCollectionState: (local: CollectionState, remote: CollectionState) => CollectionStateDiff;
//# sourceMappingURL=collection-synchronizer.d.ts.map