import { type Message, NetworkAdapter, type PeerId } from '@automerge/automerge-repo';
import { Trigger } from '@dxos/async';
export type TestConnectionStateProvider = () => 'on' | 'off';
export declare class TestAdapter extends NetworkAdapter {
    private readonly _params;
    static createPair(connectionStateProvider?: TestConnectionStateProvider): TestAdapter[];
    onConnect: Trigger<void>;
    constructor(_params: {
        send: (message: Message) => void;
    });
    isReady(): boolean;
    whenReady(): Promise<void>;
    connect(peerId: PeerId): void;
    peerCandidate(peerId: PeerId): void;
    peerDisconnected(peerId: PeerId): void;
    send(message: Message): void;
    disconnect(): void;
    receive(message: Message): void;
}
//# sourceMappingURL=test-network-adapter.d.ts.map