import { type Heads } from '@automerge/automerge';
import { type Repo, type DocHandle, type DocumentId } from '@automerge/automerge-repo';
import { Resource } from '@dxos/context';
import { type DatabaseDirectory } from '@dxos/echo-protocol';
import { type BatchedDocumentUpdates, type DocumentUpdate } from '@dxos/protocols/proto/dxos/echo/service';
export type DocumentsSynchronizerParams = {
    repo: Repo;
    sendUpdates: (updates: BatchedDocumentUpdates) => void;
};
interface DocSyncState {
    handle: DocHandle<DatabaseDirectory>;
    lastSentHead?: Heads;
    clearSubscriptions?: () => void;
}
/**
 * Manages a connection and replication between worker's Automerge Repo and the client's Repo.
 */
export declare class DocumentsSynchronizer extends Resource {
    private readonly _params;
    private readonly _syncStates;
    /**
     * Documents that have pending updates.
     * Used to batch updates.
     */
    private readonly _pendingUpdates;
    /**
     * Job that schedules if there are pending updates.
     */
    private _sendUpdatesJob?;
    constructor(_params: DocumentsSynchronizerParams);
    addDocuments(documentIds: DocumentId[], retryCounter?: number): void;
    removeDocuments(documentIds: DocumentId[]): void;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    update(updates: DocumentUpdate[]): Promise<void>;
    private _startSync;
    _subscribeForChanges(syncState: DocSyncState): void;
    private _checkAndSendUpdates;
    private _getPendingChanges;
    private _writeMutation;
}
export {};
//# sourceMappingURL=documents-synchronizer.d.ts.map