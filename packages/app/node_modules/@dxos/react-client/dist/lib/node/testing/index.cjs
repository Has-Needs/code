"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  ClientRepeater: () => ClientRepeater,
  ClientStory: () => ClientStory,
  useClientProvider: () => useClientProvider,
  useMultiClient: () => useMultiClient,
  withClientProvider: () => withClientProvider,
  withMultiClientProvider: () => withMultiClientProvider
});
module.exports = __toCommonJS(testing_exports);
var import_chunk_5RUIFUEC = require("../chunk-5RUIFUEC.cjs");
__reExport(testing_exports, require("@dxos/client/testing"), module.exports);
var import_react = require("react");
var import_debug = require("@dxos/debug");
var import_react2 = __toESM(require("react"));
var import_client = require("@dxos/client");
var import_testing = require("@dxos/client/testing");
var import_react3 = require("@dxos/echo-signals/react");
var import_random = require("@dxos/random");
var import_react4 = __toESM(require("react"));
var import_react_error_boundary = require("react-error-boundary");
var import_async = require("@dxos/async");
var import_testing2 = require("@dxos/client/testing");
var import_log = require("@dxos/log");
var ClientStory = /* @__PURE__ */ (0, import_react.createContext)(void 0);
var useClientProvider = () => {
  return (0, import_react.useContext)(ClientStory) ?? (0, import_debug.raise)(new Error("Missing ClientStory"));
};
var ClientRepeater = (props) => {
  const { component: Component, controls: Controls, count = 1, types, createIdentity, createSpace, onSpaceCreated } = props;
  (0, import_react2.useEffect)(() => {
    (0, import_react3.registerSignalsRuntime)();
  }, []);
  const [clients, setClients] = (0, import_react2.useState)(props.clients ?? []);
  const [spaceKey, setSpaceKey] = (0, import_react2.useState)();
  const testBuilder = (0, import_react2.useRef)(new import_testing.TestBuilder());
  (0, import_react2.useEffect)(() => {
    const timeout = setTimeout(async () => {
      const clients2 = [
        ...Array(count)
      ].map((_) => new import_client.Client({
        services: testBuilder.current.createLocalClientServices(),
        types
      }));
      await Promise.all(clients2.map((client) => client.initialize()));
      if (createIdentity || createSpace) {
        await Promise.all(clients2.map((client) => client.halo.createIdentity()));
      }
      if (createSpace) {
        const client = clients2[0];
        const space = await client.spaces.create({
          name: import_random.faker.commerce.productName()
        });
        setSpaceKey(space.key);
        await onSpaceCreated?.({
          client,
          space
        }, {});
        await Promise.all(clients2.slice(1).flatMap((client2) => (0, import_testing.performInvitation)({
          host: space,
          guest: client2.spaces
        })));
      }
      setClients(clients2);
    });
    return () => clearTimeout(timeout);
  }, []);
  if (clients.length === 0) {
    return null;
  }
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, Controls && /* @__PURE__ */ import_react2.default.createElement(Controls, {
    clients
  }), clients.map((client, index) => /* @__PURE__ */ import_react2.default.createElement(import_chunk_5RUIFUEC.ClientProvider, {
    key: index,
    client
  }, /* @__PURE__ */ import_react2.default.createElement(Component, {
    id: index,
    count: clients.length,
    spaceKey,
    ...props.args
  }))));
};
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/react-client/src/testing/withClientProvider.tsx";
var initializeClient = async (client, { createIdentity, createSpace, onSpaceCreated, onIdentityCreated, onInitialized }, context) => {
  await onInitialized?.(client);
  if (createIdentity || createSpace) {
    if (!client.halo.identity.get()) {
      await client.halo.createIdentity();
      await onIdentityCreated?.({
        client
      });
    }
  }
  let space;
  if (createSpace) {
    space = await client.spaces.create({
      name: "Test Space"
    });
    await onSpaceCreated?.({
      client,
      space
    }, context);
  }
  return {
    space
  };
};
var withClientProvider = ({ createIdentity, createSpace, onSpaceCreated, onIdentityCreated, onInitialized, ...props } = {}) => {
  return (Story, context) => {
    const [data, setData] = (0, import_react4.useState)({});
    const handleInitialized = async (client) => {
      const data2 = await initializeClient(client, {
        createIdentity,
        createSpace,
        onSpaceCreated,
        onIdentityCreated,
        onInitialized
      }, context);
      setData(data2);
    };
    return /* @__PURE__ */ import_react4.default.createElement(ErrorBoundary, null, /* @__PURE__ */ import_react4.default.createElement(import_chunk_5RUIFUEC.ClientProvider, {
      onInitialized: handleInitialized,
      ...props
    }, /* @__PURE__ */ import_react4.default.createElement(ClientStory.Provider, {
      value: data
    }, /* @__PURE__ */ import_react4.default.createElement(Story, null))));
  };
};
var MultiClientContext = /* @__PURE__ */ (0, import_react4.createContext)({
  id: 0
});
var useMultiClient = () => (0, import_react4.useContext)(MultiClientContext);
var withMultiClientProvider = ({ numClients = 2, createIdentity, createSpace, onSpaceCreated, onIdentityCreated, onInitialized, ...props }) => {
  return (Story, context) => {
    const builder = (0, import_react4.useRef)(new import_testing2.TestBuilder());
    const hostRef = (0, import_react4.useRef)();
    const spaceReady = (0, import_react4.useRef)(new import_async.Trigger());
    const handleInitialized = async (client, index) => {
      import_log.log.info("initialized", {
        index
      }, {
        F: __dxlog_file,
        L: 129,
        S: void 0,
        C: (f, a) => f(...a)
      });
      if (createSpace) {
        if (!hostRef.current) {
          hostRef.current = client;
          const { space } = await initializeClient(client, {
            createIdentity,
            createSpace,
            onSpaceCreated,
            onIdentityCreated,
            onInitialized
          }, context);
          spaceReady.current.wake(space);
          import_log.log.info("inviting", {
            index
          }, {
            F: __dxlog_file,
            L: 146,
            S: void 0,
            C: (f, a) => f(...a)
          });
        } else {
          await initializeClient(client, {
            createIdentity,
            onInitialized
          }, context);
          const space = await spaceReady.current.wait();
          if (space) {
            import_log.log.info("joining", {
              index
            }, {
              F: __dxlog_file,
              L: 151,
              S: void 0,
              C: (f, a) => f(...a)
            });
            await Promise.all((0, import_testing2.performInvitation)({
              host: space,
              guest: client.spaces
            }));
          }
        }
      }
    };
    return /* @__PURE__ */ import_react4.default.createElement(ErrorBoundary, null, Array.from({
      length: numClients
    }).map((_, index) => /* @__PURE__ */ import_react4.default.createElement(MultiClientContext.Provider, {
      key: index,
      value: {
        id: index
      }
    }, /* @__PURE__ */ import_react4.default.createElement(import_chunk_5RUIFUEC.ClientProvider, {
      services: builder.current.createLocalClientServices(),
      onInitialized: (client) => handleInitialized(client, index),
      ...props
    }, /* @__PURE__ */ import_react4.default.createElement(Story, null)))));
  };
};
var ErrorBoundary = ({ children }) => {
  const [error, setError] = (0, import_react4.useState)();
  (0, import_react4.useEffect)(() => {
    const handleError = (event) => {
      setError(event.reason);
    };
    window.addEventListener("unhandledrejection", handleError);
    return () => window.removeEventListener("unhandledrejection", handleError);
  }, []);
  if (error) {
    return /* @__PURE__ */ import_react4.default.createElement(ErrorFallback, {
      error,
      resetErrorBoundary: () => setError(void 0)
    });
  }
  return /* @__PURE__ */ import_react4.default.createElement(import_react_error_boundary.ErrorBoundary, {
    FallbackComponent: ErrorFallback
  }, children);
};
var ErrorFallback = ({ error }) => {
  const { name, message, stack } = error instanceof Error ? error : {
    name: "Error",
    message: String(error),
    stack: void 0
  };
  return /* @__PURE__ */ import_react4.default.createElement("div", {
    role: "alert",
    className: "flex flex-col p-4 gap-4 overflow-auto"
  }, /* @__PURE__ */ import_react4.default.createElement("h1", {
    className: "text-xl text-red-500"
  }, name), /* @__PURE__ */ import_react4.default.createElement("div", {
    className: "text-lg"
  }, message), stack && /* @__PURE__ */ import_react4.default.createElement("pre", {
    className: "whitespace-pre-wrap text-sm text-subdued"
  }, stack));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ClientRepeater,
  ClientStory,
  useClientProvider,
  useMultiClient,
  withClientProvider,
  withMultiClientProvider,
  ...require("@dxos/client/testing")
});
//# sourceMappingURL=index.cjs.map
