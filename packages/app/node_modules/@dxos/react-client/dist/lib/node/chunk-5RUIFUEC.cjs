"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_5RUIFUEC_exports = {};
__export(chunk_5RUIFUEC_exports, {
  AgentHostingContext: () => AgentHostingContext,
  AgentHostingProvider: () => AgentHostingProvider,
  ClientContext: () => ClientContext,
  ClientProvider: () => ClientProvider,
  useAgentHostingClient: () => useAgentHostingClient,
  useClient: () => useClient,
  useClientStatus: () => useClientStatus,
  useConfig: () => useConfig,
  useShell: () => useShell,
  useShellDisplay: () => useShellDisplay,
  useStatus: () => useStatus
});
module.exports = __toCommonJS(chunk_5RUIFUEC_exports);
var import_react = __toESM(require("react"));
var import_client = require("@dxos/client");
var import_log = require("@dxos/log");
var import_react2 = __toESM(require("react"));
var import_client2 = require("@dxos/client");
var import_react3 = require("@dxos/echo-signals/react");
var import_log2 = require("@dxos/log");
var import_react_hooks = require("@dxos/react-hooks");
var import_util = require("@dxos/util");
var import_react4 = require("react");
var import_react5 = require("react");
var import_debug = require("@dxos/debug");
var import_react6 = require("react");
var import_react7 = require("react");
var import_debug2 = require("@dxos/debug");
var import_react8 = require("react");
var import_react9 = require("react");
var import_debug3 = require("@dxos/debug");
var ClientContext = (0, import_react4.createContext)(void 0);
var BANNER = (client) => {
  const commitHash = client.config.get("runtime.app.build.commitHash");
  const hash = commitHash ? ` App Commit ${commitHash} 
` : "";
  return `
_/\\/\\/\\/\\/\\____/\\/\\____/\\/\\____/\\/\\/\\/\\______/\\/\\/\\/\\/\\_
_/\\/\\____/\\/\\____/\\/\\/\\/\\____/\\/\\____/\\/\\__/\\/\\_________
_/\\/\\____/\\/\\______/\\/\\______/\\/\\____/\\/\\____/\\/\\/\\/\\___
_/\\/\\____/\\/\\____/\\/\\/\\/\\____/\\/\\____/\\/\\__________/\\/\\_
_/\\/\\/\\/\\/\\____/\\/\\____/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\/\\___

 DXOS Client ${client.version} 
${hash}`;
};
var bannerPrinted = false;
var printBanner = (client) => {
  if (bannerPrinted || window.location.hostname === "localhost") {
    return;
  }
  bannerPrinted = true;
  console.log(`%c${BANNER(client)}`, "font-family: monospace;");
};
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/react-client/src/client/ClientProvider.tsx";
var ClientProvider = /* @__PURE__ */ (0, import_react2.forwardRef)(({ children, config: configProvider, client: clientProvider, services: servicesProvider, status: controlledStatus, fallback: Fallback = () => null, signalsRuntime = true, noBanner, onInitialized, ...options }, forwardedRef) => {
  (0, import_react2.useEffect)(() => {
    signalsRuntime && (0, import_react3.registerSignalsRuntime)();
  }, []);
  const [error, setError] = (0, import_react2.useState)();
  if (error) {
    throw error;
  }
  const [client, setClient] = (0, import_react2.useState)(clientProvider instanceof import_client2.Client ? clientProvider : void 0);
  (0, import_react2.useImperativeHandle)(forwardedRef, () => client, [
    client
  ]);
  const [status, setStatus] = (0, import_react_hooks.useControlledState)(controlledStatus);
  (0, import_react2.useEffect)(() => {
    if (!client) {
      return;
    }
    const subscription = client.status.subscribe((status2) => setStatus(status2));
    return () => subscription.unsubscribe();
  }, [
    client
  ]);
  (0, import_react2.useEffect)(() => {
    let disposed = false;
    const initialize = async (client3) => {
      if (!client3.initialized) {
        await client3.initialize().catch((err) => {
          if (!disposed) {
            setError(err);
          }
        });
        (0, import_log2.log)("client ready", void 0, {
          F: __dxlog_file,
          L: 137,
          S: void 0,
          C: (f, a) => f(...a)
        });
        await onInitialized?.(client3);
        (0, import_log2.log)("initialization complete", void 0, {
          F: __dxlog_file,
          L: 139,
          S: void 0,
          C: (f, a) => f(...a)
        });
      }
      setClient(client3);
      if (!noBanner) {
        printBanner(client3);
      }
    };
    let client2;
    const t = setTimeout(async () => {
      try {
        if (clientProvider) {
          client2 = await (0, import_util.getAsyncProviderValue)(clientProvider);
          await initialize(client2);
        } else {
          const config = await (0, import_util.getAsyncProviderValue)(configProvider);
          (0, import_log2.log)("resolved config", {
            config
          }, {
            F: __dxlog_file,
            L: 159,
            S: void 0,
            C: (f, a) => f(...a)
          });
          const services = await (0, import_util.getAsyncProviderValue)(servicesProvider, config);
          (0, import_log2.log)("created services", {
            services
          }, {
            F: __dxlog_file,
            L: 161,
            S: void 0,
            C: (f, a) => f(...a)
          });
          client2 = new import_client2.Client({
            config,
            services,
            ...options
          });
          (0, import_log2.log)("created client", void 0, {
            F: __dxlog_file,
            L: 163,
            S: void 0,
            C: (f, a) => f(...a)
          });
          await initialize(client2);
        }
      } catch (err) {
        if (!disposed) {
          import_log2.log.catch(err, void 0, {
            F: __dxlog_file,
            L: 168,
            S: void 0,
            C: (f, a) => f(...a)
          });
        }
      }
    });
    return () => {
      (0, import_log2.log)("clean up", void 0, {
        F: __dxlog_file,
        L: 174,
        S: void 0,
        C: (f, a) => f(...a)
      });
      disposed = true;
      clearTimeout(t);
      if (!clientProvider) {
        void client2?.destroy().then(() => {
          (0, import_log2.log)("destroyed", void 0, {
            F: __dxlog_file,
            L: 182,
            S: void 0,
            C: (f, a) => f(...a)
          });
        }).catch((err) => import_log2.log.catch(err, void 0, {
          F: __dxlog_file,
          L: 184,
          S: void 0,
          C: (f, a) => f(...a)
        }));
      }
    };
  }, [
    configProvider,
    clientProvider,
    servicesProvider,
    noBanner
  ]);
  if (!client?.initialized || status !== import_client2.SystemStatus.ACTIVE) {
    return /* @__PURE__ */ import_react2.default.createElement(Fallback, {
      client,
      status
    });
  }
  return /* @__PURE__ */ import_react2.default.createElement(ClientContext.Provider, {
    value: {
      client,
      status
    }
  }, children);
});
var useClient = () => {
  const { client } = (0, import_react5.useContext)(ClientContext) ?? (0, import_debug.raise)(new Error("Missing ClientContext."));
  return client;
};
var useClientStatus = (client) => {
  const [status, setStatus] = (0, import_react6.useState)();
  (0, import_react6.useEffect)(() => {
    if (!client) {
      return;
    }
    const subscription = client.status.subscribe((status2) => setStatus(status2));
    return () => subscription.unsubscribe();
  }, [
    client,
    setStatus
  ]);
  return status;
};
var useConfig = () => {
  const { client } = (0, import_react7.useContext)(ClientContext) ?? (0, import_debug2.raise)(new Error("Missing ClientContext."));
  return client.config;
};
var useShell = () => {
  const client = useClient();
  return client.shell;
};
var useShellDisplay = () => {
  const client = useClient();
  const [display, setDisplay] = (0, import_react8.useState)(client.shell.display);
  (0, import_react8.useEffect)(() => client.shell.onDisplayChange(setDisplay), [
    client
  ]);
  return display;
};
var useStatus = () => {
  const { status } = (0, import_react9.useContext)(ClientContext) ?? (0, import_debug3.raise)(new Error("Missing ClientContext."));
  return status;
};
var __dxlog_file2 = "/home/runner/work/dxos/dxos/packages/sdk/react-client/src/client/AgentHostingProvider.tsx";
var AgentHostingContext = /* @__PURE__ */ (0, import_react.createContext)(null);
var AgentHostingProvider = (props) => {
  const client = useClient();
  const [agentHostingProviderClient] = (0, import_react.useState)(makeClient(client));
  return /* @__PURE__ */ import_react.default.createElement(AgentHostingContext.Provider, {
    value: agentHostingProviderClient
  }, " ", props.children);
};
var useAgentHostingClient = () => {
  return (0, import_react.useContext)(AgentHostingContext);
};
var makeClient = ({ config, halo }) => {
  const agentHostingConfig = config.get("runtime.services.agentHosting");
  if (!agentHostingConfig) {
    (0, import_log.log)("no agent hosting configured", void 0, {
      F: __dxlog_file2,
      L: 39,
      S: void 0,
      C: (f, a) => f(...a)
    });
    return null;
  }
  let agentHostingProviderClient = null;
  switch (agentHostingConfig.type) {
    case "LOCAL_TESTING": {
      (0, import_log.log)("using FakeAgentHostingProvider", void 0, {
        F: __dxlog_file2,
        L: 47,
        S: void 0,
        C: (f, a) => f(...a)
      });
      return new import_client.FakeAgentHostingProvider();
    }
    case "AGENTHOSTING_API": {
      agentHostingProviderClient = new import_client.AgentManagerClient(config, halo);
      if (agentHostingProviderClient.init()) {
        return agentHostingProviderClient;
      } else {
        return null;
      }
    }
    default: {
      import_log.log.error("Unknown agent hosting provider type: " + agentHostingConfig.type, void 0, {
        F: __dxlog_file2,
        L: 62,
        S: void 0,
        C: (f, a) => f(...a)
      });
      return null;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentHostingContext,
  AgentHostingProvider,
  ClientContext,
  ClientProvider,
  useAgentHostingClient,
  useClient,
  useClientStatus,
  useConfig,
  useShell,
  useShellDisplay,
  useStatus
});
//# sourceMappingURL=chunk-5RUIFUEC.cjs.map
