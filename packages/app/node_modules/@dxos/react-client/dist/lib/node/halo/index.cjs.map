{
  "version": 3,
  "sources": ["../../../../src/halo/index.ts", "../../../../src/halo/useContacts.ts", "../../../../src/halo/useCredentials.ts", "../../../../src/halo/useDevices.ts", "../../../../src/halo/useHaloInvitations.ts", "../../../../src/halo/useIdentity.ts", "../../../../src/halo/useKeyStore.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\n// NOTE: Export * fails here.\nexport {\n  type Credential,\n  type Contact,\n  type Identity,\n  type Halo,\n  Device,\n  DeviceKind,\n  DeviceType,\n} from '@dxos/client/halo';\n\nexport * from './useContacts';\nexport * from './useCredentials';\nexport * from './useDevices';\nexport * from './useHaloInvitations';\nexport * from './useIdentity';\nexport * from './useKeyStore';\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport type { Contact } from '@dxos/client/halo';\nimport { useMulticastObservable } from '@dxos/react-hooks';\n\nimport { useClient } from '../client';\n\n/**\n * Returns all known Contacts across all Spaces.\n * Contacts are known members of a common Space.\n * Requires ClientContext to be set via ClientProvider.\n */\nexport const useContacts = (): Contact[] => {\n  const client = useClient();\n  return useMulticastObservable(client.halo.contacts);\n};\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport type { Credential } from '@dxos/client/halo';\nimport { useMulticastObservable } from '@dxos/react-hooks';\n\nimport { useClient } from '../client';\n\nexport const useCredentials = (): Credential[] => {\n  const client = useClient();\n  return useMulticastObservable(client.halo.credentials);\n};\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport type { Device } from '@dxos/client/halo';\nimport { useMulticastObservable } from '@dxos/react-hooks';\n\nimport { useClient } from '../client';\n\nexport const useDevices = (): Device[] => {\n  const client = useClient();\n  return useMulticastObservable(client.halo.devices);\n};\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { useMemo } from 'react';\n\nimport { useMulticastObservable } from '@dxos/react-hooks';\n\nimport { useClient } from '../client';\nimport { useInvitationStatus, type CancellableInvitationObservable } from '../invitations';\n\nexport const useHaloInvitations = (): CancellableInvitationObservable[] => {\n  const client = useClient();\n  return useMulticastObservable(client.halo.invitations);\n};\n\nexport const useHaloInvitation = (invitationId?: string) => {\n  const invitations = useHaloInvitations();\n  const invitation = useMemo(\n    () => invitations.find((invitation) => invitation.get().invitationId === invitationId),\n    [invitations],\n  );\n  return useInvitationStatus(invitation);\n};\n", "//\n// Copyright 2020 DXOS.org\n//\n\nimport { type Identity } from '@dxos/client/halo';\nimport { useMulticastObservable } from '@dxos/react-hooks';\n\nimport { useClient } from '../client';\n\n/**\n * Hook returning DXOS identity object.\n * Requires ClientContext to be set via ClientProvider.\n */\nexport const useIdentity = (): Identity | null => {\n  const client = useClient();\n  return useMulticastObservable(client.halo.identity);\n};\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { useMemo, useReducer } from 'react';\n\n// TODO(burdon): Move to settings plugin.\nexport class KeyStore {\n  private _keyMap = new Map<string, string>();\n\n  constructor(private readonly _defaultKeys: string[] = []) {}\n\n  get map() {\n    return this._keyMap;\n  }\n\n  // TODO(burdon): Create subkeys.\n  initialize(): this {\n    this._defaultKeys.forEach((key) => {\n      const value = localStorage.getItem(key);\n      this.setKey(key, value ?? '');\n    });\n\n    return this;\n  }\n\n  getKey(key: string): void {\n    localStorage.getItem(key);\n  }\n\n  setKey(key: string, value: string): void {\n    localStorage.setItem(key, '');\n    this._keyMap.set(key, value);\n  }\n}\n\n/**\n * Settings store.\n * @deprecated Replace with HALO key store when available.\n */\nexport const useKeyStore = (\n  defaultKeys: string[] = [],\n): [Map<string, string>, (key: string, value: string) => void] => {\n  const [, forceUpdate] = useReducer((x) => x + 1, 0);\n  const store = useMemo(() => new KeyStore(defaultKeys).initialize(), [defaultKeys]);\n  const setKey = (key: string, value: string) => {\n    store.setKey(key, value);\n    forceUpdate();\n  };\n\n  return [store.map, setKey];\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,kBAQO;ACRP,yBAAuC;ACAvC,IAAAA,sBAAuC;ACAvC,IAAAA,sBAAuC;ACDvC,mBAAwB;AAExB,IAAAA,sBAAuC;ACDvC,IAAAA,sBAAuC;ACDvC,IAAAC,gBAAoC;ALU7B,IAAMC,cAAc,MAAA;AACzB,QAAMC,aAASC,iCAAAA;AACf,aAAOC,2CAAuBF,OAAOG,KAAKC,QAAQ;AACpD;ACRO,IAAMC,iBAAiB,MAAA;AAC5B,QAAML,aAASC,iCAAAA;AACf,aAAOC,oBAAAA,wBAAuBF,OAAOG,KAAKG,WAAW;AACvD;ACHO,IAAMC,aAAa,MAAA;AACxB,QAAMP,aAASC,iCAAAA;AACf,aAAOC,oBAAAA,wBAAuBF,OAAOG,KAAKK,OAAO;AACnD;ACDO,IAAMC,qBAAqB,MAAA;AAChC,QAAMT,aAASC,iCAAAA;AACf,aAAOC,oBAAAA,wBAAuBF,OAAOG,KAAKO,WAAW;AACvD;AAEO,IAAMC,oBAAoB,CAACC,iBAAAA;AAChC,QAAMF,cAAcD,mBAAAA;AACpB,QAAMI,iBAAaC,sBACjB,MAAMJ,YAAYK,KAAK,CAACF,gBAAeA,YAAWG,IAAG,EAAGJ,iBAAiBA,YAAAA,GACzE;IAACF;GAAY;AAEf,aAAOO,2CAAoBJ,UAAAA;AAC7B;ACVO,IAAMK,cAAc,MAAA;AACzB,QAAMlB,aAASC,iCAAAA;AACf,aAAOC,oBAAAA,wBAAuBF,OAAOG,KAAKgB,QAAQ;AACpD;ACTO,IAAMC,WAAN,MAAMA;EAGX,YAA6BC,eAAyB,CAAA,GAAI;SAA7BA,eAAAA;SAFrBC,UAAU,oBAAIC,IAAAA;EAEqC;EAE3D,IAAIC,MAAM;AACR,WAAO,KAAKF;EACd;;EAGAG,aAAmB;AACjB,SAAKJ,aAAaK,QAAQ,CAACC,QAAAA;AACzB,YAAMC,QAAQC,aAAaC,QAAQH,GAAAA;AACnC,WAAKI,OAAOJ,KAAKC,SAAS,EAAA;IAC5B,CAAA;AAEA,WAAO;EACT;EAEAI,OAAOL,KAAmB;AACxBE,iBAAaC,QAAQH,GAAAA;EACvB;EAEAI,OAAOJ,KAAaC,OAAqB;AACvCC,iBAAaI,QAAQN,KAAK,EAAA;AAC1B,SAAKL,QAAQY,IAAIP,KAAKC,KAAAA;EACxB;AACF;AAMO,IAAMO,cAAc,CACzBC,cAAwB,CAAA,MAAE;AAE1B,QAAM,CAAA,EAAGC,WAAAA,QAAeC,0BAAW,CAACC,MAAMA,IAAI,GAAG,CAAA;AACjD,QAAMC,YAAQ1B,cAAAA,SAAQ,MAAM,IAAIM,SAASgB,WAAAA,EAAaX,WAAU,GAAI;IAACW;GAAY;AACjF,QAAML,SAAS,CAACJ,KAAaC,UAAAA;AAC3BY,UAAMT,OAAOJ,KAAKC,KAAAA;AAClBS,gBAAAA;EACF;AAEA,SAAO;IAACG,MAAMhB;IAAKO;;AACrB;",
  "names": ["import_react_hooks", "import_react", "useContacts", "client", "useClient", "useMulticastObservable", "halo", "contacts", "useCredentials", "credentials", "useDevices", "devices", "useHaloInvitations", "invitations", "useHaloInvitation", "invitationId", "invitation", "useMemo", "find", "get", "useInvitationStatus", "useIdentity", "identity", "KeyStore", "_defaultKeys", "_keyMap", "Map", "map", "initialize", "forEach", "key", "value", "localStorage", "getItem", "setKey", "getKey", "setItem", "set", "useKeyStore", "defaultKeys", "forceUpdate", "useReducer", "x", "store"]
}
