{
  "version": 3,
  "sources": ["../../../../src/devtools/index.ts", "../../../../src/devtools/useDevtools.ts", "../../../../src/devtools/useStream.ts"],
  "sourcesContent": ["//\n// Copyright 2023 DXOS.org\n//\n\nexport * from '@dxos/client/devtools';\n\nexport * from './useDevtools';\nexport * from './useStream';\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { type DevtoolsHost } from '@dxos/client/devtools';\nimport { raise } from '@dxos/debug';\n\nimport { useClient } from '../client';\n\nexport const useDevtools = (): DevtoolsHost => {\n  const client = useClient();\n  return client.services.services.DevtoolsHost ?? raise(new Error('DevtoolsHost not available.'));\n};\n", "//\n// Copyright 2021 DXOS.org\n//\n\nimport { type DependencyList, useState, useEffect } from 'react';\n\nimport { type Stream } from '@dxos/codec-protobuf/stream';\nimport { log } from '@dxos/log';\n\n/**\n * Subscribe to service API streams.\n */\nexport const useStream = <T>(streamFactory: () => Stream<T>, defaultValue: T, deps: DependencyList = []): T => {\n  const [value, setValue] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    const stream = streamFactory();\n    stream.subscribe(\n      (response: T) => setValue(response),\n      (err) => {\n        if (err) {\n          log.catch(err);\n        }\n      },\n    );\n\n    return () => {\n      void stream.close();\n    };\n  }, deps);\n\n  return value ?? defaultValue;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,6BAAc;ACCd,mBAAsB;ACDtB,mBAAyD;AAGzD,iBAAoB;ADEb,IAAMA,cAAc,MAAA;AACzB,QAAMC,aAASC,iCAAAA;AACf,SAAOD,OAAOE,SAASA,SAASC,oBAAgBC,oBAAM,IAAIC,MAAM,6BAAA,CAAA;AAClE;;ACAO,IAAMC,YAAY,CAAIC,eAAgCC,cAAiBC,OAAuB,CAAA,MAAE;AACrG,QAAM,CAACC,OAAOC,QAAAA,QAAYC,uBAAwBJ,YAAAA;AAClDK,8BAAU,MAAA;AACR,UAAMC,SAASP,cAAAA;AACfO,WAAOC,UACL,CAACC,aAAgBL,SAASK,QAAAA,GAC1B,CAACC,QAAAA;AACC,UAAIA,KAAK;AACPC,uBAAIC,MAAMF,KAAAA,QAAAA;;;;;;MACZ;IACF,CAAA;AAGF,WAAO,MAAA;AACL,WAAKH,OAAOM,MAAK;IACnB;EACF,GAAGX,IAAAA;AAEH,SAAOC,SAASF;AAClB;",
  "names": ["useDevtools", "client", "useClient", "services", "DevtoolsHost", "raise", "Error", "useStream", "streamFactory", "defaultValue", "deps", "value", "setValue", "useState", "useEffect", "stream", "subscribe", "response", "err", "log", "catch", "close"]
}
