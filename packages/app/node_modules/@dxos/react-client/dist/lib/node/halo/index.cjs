"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var halo_exports = {};
__export(halo_exports, {
  Device: () => import_halo.Device,
  DeviceKind: () => import_halo.DeviceKind,
  DeviceType: () => import_halo.DeviceType,
  KeyStore: () => KeyStore,
  useContacts: () => useContacts,
  useCredentials: () => useCredentials,
  useDevices: () => useDevices,
  useHaloInvitation: () => useHaloInvitation,
  useHaloInvitations: () => useHaloInvitations,
  useIdentity: () => useIdentity,
  useKeyStore: () => useKeyStore
});
module.exports = __toCommonJS(halo_exports);
var import_chunk_FYOAVV65 = require("../chunk-FYOAVV65.cjs");
var import_chunk_5RUIFUEC = require("../chunk-5RUIFUEC.cjs");
var import_halo = require("@dxos/client/halo");
var import_react_hooks = require("@dxos/react-hooks");
var import_react_hooks2 = require("@dxos/react-hooks");
var import_react_hooks3 = require("@dxos/react-hooks");
var import_react = require("react");
var import_react_hooks4 = require("@dxos/react-hooks");
var import_react_hooks5 = require("@dxos/react-hooks");
var import_react2 = require("react");
var useContacts = () => {
  const client = (0, import_chunk_5RUIFUEC.useClient)();
  return (0, import_react_hooks.useMulticastObservable)(client.halo.contacts);
};
var useCredentials = () => {
  const client = (0, import_chunk_5RUIFUEC.useClient)();
  return (0, import_react_hooks2.useMulticastObservable)(client.halo.credentials);
};
var useDevices = () => {
  const client = (0, import_chunk_5RUIFUEC.useClient)();
  return (0, import_react_hooks3.useMulticastObservable)(client.halo.devices);
};
var useHaloInvitations = () => {
  const client = (0, import_chunk_5RUIFUEC.useClient)();
  return (0, import_react_hooks4.useMulticastObservable)(client.halo.invitations);
};
var useHaloInvitation = (invitationId) => {
  const invitations = useHaloInvitations();
  const invitation = (0, import_react.useMemo)(() => invitations.find((invitation2) => invitation2.get().invitationId === invitationId), [
    invitations
  ]);
  return (0, import_chunk_FYOAVV65.useInvitationStatus)(invitation);
};
var useIdentity = () => {
  const client = (0, import_chunk_5RUIFUEC.useClient)();
  return (0, import_react_hooks5.useMulticastObservable)(client.halo.identity);
};
var KeyStore = class {
  constructor(_defaultKeys = []) {
    this._defaultKeys = _defaultKeys;
    this._keyMap = /* @__PURE__ */ new Map();
  }
  get map() {
    return this._keyMap;
  }
  // TODO(burdon): Create subkeys.
  initialize() {
    this._defaultKeys.forEach((key) => {
      const value = localStorage.getItem(key);
      this.setKey(key, value ?? "");
    });
    return this;
  }
  getKey(key) {
    localStorage.getItem(key);
  }
  setKey(key, value) {
    localStorage.setItem(key, "");
    this._keyMap.set(key, value);
  }
};
var useKeyStore = (defaultKeys = []) => {
  const [, forceUpdate] = (0, import_react2.useReducer)((x) => x + 1, 0);
  const store = (0, import_react2.useMemo)(() => new KeyStore(defaultKeys).initialize(), [
    defaultKeys
  ]);
  const setKey = (key, value) => {
    store.setKey(key, value);
    forceUpdate();
  };
  return [
    store.map,
    setKey
  ];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Device,
  DeviceKind,
  DeviceType,
  KeyStore,
  useContacts,
  useCredentials,
  useDevices,
  useHaloInvitation,
  useHaloInvitations,
  useIdentity,
  useKeyStore
});
//# sourceMappingURL=index.cjs.map
