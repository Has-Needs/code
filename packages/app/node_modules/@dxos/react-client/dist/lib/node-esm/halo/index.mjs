import { createRequire } from 'node:module';const require = createRequire(import.meta.url);
import {
  useInvitationStatus
} from "../chunk-UYJUBYMU.mjs";
import {
  useClient
} from "../chunk-NBTZZNQ5.mjs";

// packages/sdk/react-client/src/halo/index.ts
import { Device, DeviceKind, DeviceType } from "@dxos/client/halo";

// packages/sdk/react-client/src/halo/useContacts.ts
import { useMulticastObservable } from "@dxos/react-hooks";
var useContacts = () => {
  const client = useClient();
  return useMulticastObservable(client.halo.contacts);
};

// packages/sdk/react-client/src/halo/useCredentials.ts
import { useMulticastObservable as useMulticastObservable2 } from "@dxos/react-hooks";
var useCredentials = () => {
  const client = useClient();
  return useMulticastObservable2(client.halo.credentials);
};

// packages/sdk/react-client/src/halo/useDevices.ts
import { useMulticastObservable as useMulticastObservable3 } from "@dxos/react-hooks";
var useDevices = () => {
  const client = useClient();
  return useMulticastObservable3(client.halo.devices);
};

// packages/sdk/react-client/src/halo/useHaloInvitations.ts
import { useMemo } from "react";
import { useMulticastObservable as useMulticastObservable4 } from "@dxos/react-hooks";
var useHaloInvitations = () => {
  const client = useClient();
  return useMulticastObservable4(client.halo.invitations);
};
var useHaloInvitation = (invitationId) => {
  const invitations = useHaloInvitations();
  const invitation = useMemo(() => invitations.find((invitation2) => invitation2.get().invitationId === invitationId), [
    invitations
  ]);
  return useInvitationStatus(invitation);
};

// packages/sdk/react-client/src/halo/useIdentity.ts
import { useMulticastObservable as useMulticastObservable5 } from "@dxos/react-hooks";
var useIdentity = () => {
  const client = useClient();
  return useMulticastObservable5(client.halo.identity);
};

// packages/sdk/react-client/src/halo/useKeyStore.ts
import { useMemo as useMemo2, useReducer } from "react";
var KeyStore = class {
  constructor(_defaultKeys = []) {
    this._defaultKeys = _defaultKeys;
    this._keyMap = /* @__PURE__ */ new Map();
  }
  get map() {
    return this._keyMap;
  }
  // TODO(burdon): Create subkeys.
  initialize() {
    this._defaultKeys.forEach((key) => {
      const value = localStorage.getItem(key);
      this.setKey(key, value ?? "");
    });
    return this;
  }
  getKey(key) {
    localStorage.getItem(key);
  }
  setKey(key, value) {
    localStorage.setItem(key, "");
    this._keyMap.set(key, value);
  }
};
var useKeyStore = (defaultKeys = []) => {
  const [, forceUpdate] = useReducer((x) => x + 1, 0);
  const store = useMemo2(() => new KeyStore(defaultKeys).initialize(), [
    defaultKeys
  ]);
  const setKey = (key, value) => {
    store.setKey(key, value);
    forceUpdate();
  };
  return [
    store.map,
    setKey
  ];
};
export {
  Device,
  DeviceKind,
  DeviceType,
  KeyStore,
  useContacts,
  useCredentials,
  useDevices,
  useHaloInvitation,
  useHaloInvitations,
  useIdentity,
  useKeyStore
};
//# sourceMappingURL=index.mjs.map
