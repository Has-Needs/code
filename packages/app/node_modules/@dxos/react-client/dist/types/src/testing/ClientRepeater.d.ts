import React, { type FC } from 'react';
import { Client, type PublicKey } from '@dxos/client';
import { type TypedObject } from '@dxos/echo-schema';
import { type WithClientProviderProps } from './withClientProvider';
export type ClientRepeatedComponentProps = {
    id: number;
    count: number;
    spaceKey?: PublicKey;
};
export type ClientRepeaterControlsProps = {
    clients: Client[];
};
export type ClientRepeaterProps<P extends ClientRepeatedComponentProps> = {
    className?: string;
    component: FC<ClientRepeatedComponentProps>;
    controls?: FC<ClientRepeaterControlsProps>;
    count?: number;
    clients?: Client[];
    types?: TypedObject[];
    args?: Omit<P, 'id' | 'count'>;
} & Pick<WithClientProviderProps, 'createIdentity' | 'createSpace' | 'onSpaceCreated'>;
/**
 * Utility component for Storybook stories which sets up clients for n peers.
 * The `Component` property is rendered n times, once for each peer.
 * @deprecated use `withClientProvider`.
 */
export declare const ClientRepeater: <P extends ClientRepeatedComponentProps>(props: ClientRepeaterProps<P>) => React.JSX.Element | null;
//# sourceMappingURL=ClientRepeater.d.ts.map