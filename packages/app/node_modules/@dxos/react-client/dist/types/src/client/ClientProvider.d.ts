import React, { type FunctionComponent, type PropsWithChildren } from 'react';
import { Client, type ClientOptions, type ClientServicesProvider } from '@dxos/client';
import { type Config } from '@dxos/config';
import { type MaybePromise, type Provider } from '@dxos/util';
import { type ClientContextProps } from './context';
/**
 * Properties for the ClientProvider.
 */
export type ClientProviderProps = Omit<ClientOptions, 'config' | 'services'> & Pick<ClientContextProps, 'status'> & PropsWithChildren<{
    /**
     * Client object or async provider to enable to caller to do custom initialization.
     *
     * NOTE: For advanced use cases only.
     */
    client?: Client | Provider<Promise<Client>>;
    /**
     * Config object or async provider.
     *
     * NOTE: If a `client` is provided then `config` is ignored.
     */
    config?: Config | Provider<Promise<Config>>;
    /**
     * Callback to enable the caller to create a custom ClientServicesProvider.
     *
     * NOTE: If a `client` is provided then `services` is ignored.
     */
    services?: ClientServicesProvider | ((config?: Config) => MaybePromise<ClientServicesProvider>);
    /**
     * ReactNode to display until the client is available.
     */
    fallback?: FunctionComponent<Partial<ClientContextProps>>;
    /**
     * Enable (by default) registration of Preact signals runtime for reactive ECHO objects.
     * @see https://www.npmjs.com/package/@preact/signals-react
     */
    signalsRuntime?: boolean;
    /**
     * Skip the DXOS banner.
     */
    noBanner?: boolean;
    /**
     * Post initialization hook to enable to caller to do custom initialization.
     */
    onInitialized?: (client: Client) => MaybePromise<void>;
}>;
/**
 * Root component that provides the DXOS client instance to child components.
 * To be used with the `useClient` hook.
 */
export declare const ClientProvider: React.ForwardRefExoticComponent<Omit<ClientOptions, "services" | "config"> & Pick<ClientContextProps, "status"> & {
    /**
     * Client object or async provider to enable to caller to do custom initialization.
     *
     * NOTE: For advanced use cases only.
     */
    client?: Client | Provider<Promise<Client>>;
    /**
     * Config object or async provider.
     *
     * NOTE: If a `client` is provided then `config` is ignored.
     */
    config?: Config | Provider<Promise<Config>>;
    /**
     * Callback to enable the caller to create a custom ClientServicesProvider.
     *
     * NOTE: If a `client` is provided then `services` is ignored.
     */
    services?: ClientServicesProvider | ((config?: Config) => MaybePromise<ClientServicesProvider>);
    /**
     * ReactNode to display until the client is available.
     */
    fallback?: FunctionComponent<Partial<ClientContextProps>>;
    /**
     * Enable (by default) registration of Preact signals runtime for reactive ECHO objects.
     * @see https://www.npmjs.com/package/@preact/signals-react
     */
    signalsRuntime?: boolean;
    /**
     * Skip the DXOS banner.
     */
    noBanner?: boolean;
    /**
     * Post initialization hook to enable to caller to do custom initialization.
     */
    onInitialized?: (client: Client) => MaybePromise<void>;
} & {
    children?: React.ReactNode | undefined;
} & React.RefAttributes<Client | undefined>>;
//# sourceMappingURL=ClientProvider.d.ts.map