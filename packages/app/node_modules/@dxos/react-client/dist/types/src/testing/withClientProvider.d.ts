import { type StoryContext, type Decorator } from '@storybook/react';
import { type Client } from '@dxos/client';
import { type Space } from '@dxos/client/echo';
import { type MaybePromise } from '@dxos/util';
import { type ClientProviderProps } from '../client';
type InitializeProps = {
    createIdentity?: boolean;
    createSpace?: boolean;
    onInitialized?: (client: Client) => MaybePromise<void>;
    onIdentityCreated?: (props: {
        client: Client;
    }) => MaybePromise<void>;
    onSpaceCreated?: (props: {
        client: Client;
        space: Space;
    }, context: StoryContext | any) => MaybePromise<void>;
};
export type WithClientProviderProps = InitializeProps & Omit<ClientProviderProps, 'onInitialized'>;
/**
 * Decorator that provides the client context.
 */
export declare const withClientProvider: ({ createIdentity, createSpace, onSpaceCreated, onIdentityCreated, onInitialized, ...props }?: WithClientProviderProps) => Decorator;
export type WithMultiClientProviderProps = InitializeProps & Omit<ClientProviderProps, 'onInitialized'> & {
    numClients?: number;
};
export declare const useMultiClient: () => {
    id: number;
};
/**
 * Decorator that creates a scaffold for multiple clients.
 * Orchestrates invitations between a randomly selected host and the remaining clients.
 * NOTE: Should come before withLayout.
 */
export declare const withMultiClientProvider: ({ numClients, createIdentity, createSpace, onSpaceCreated, onIdentityCreated, onInitialized, ...props }: WithMultiClientProviderProps) => Decorator;
export {};
//# sourceMappingURL=withClientProvider.d.ts.map