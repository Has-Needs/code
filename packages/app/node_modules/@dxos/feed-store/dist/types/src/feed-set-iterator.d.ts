import { inspect } from 'node:util';
import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { AbstractFeedIterator } from './feed-iterator';
import { type FeedWrapper } from './feed-wrapper';
import { type FeedBlock } from './types';
/**
 * Select next block.
 */
export type FeedBlockSelector<T> = (blocks: FeedBlock<T>[]) => number | undefined;
export type FeedIndex = {
    feedKey: PublicKey;
    index: number;
};
export type FeedSetIteratorOptions = {
    start?: FeedIndex[];
    stallTimeout?: number;
};
export declare const defaultFeedSetIteratorOptions: {
    stallTimeout: number;
};
/**
 * Iterator that reads blocks from multiple feeds, ordering them based on a traversal callback.
 */
export declare class FeedSetIterator<T extends {}> extends AbstractFeedIterator<T> {
    private readonly _selector;
    readonly options: FeedSetIteratorOptions;
    private readonly _feedQueues;
    private readonly _trigger;
    private readonly _subscriptions;
    readonly stalled: Event<FeedSetIterator<T>>;
    constructor(_selector: FeedBlockSelector<T>, options?: FeedSetIteratorOptions);
    [inspect.custom](): string;
    toJSON(): {
        open: boolean;
        running: boolean;
        indexes: FeedIndex[];
    };
    get size(): number;
    get feeds(): FeedWrapper<T>[];
    get indexes(): FeedIndex[];
    reiterateBlock(block: FeedBlock<T>): void;
    addFeed(feed: FeedWrapper<T>): Promise<void>;
    hasFeed(feedKey: PublicKey): boolean;
    _onOpen(): Promise<void>;
    _onClose(): Promise<void>;
    /**
     * Gets the next block from the selected queue.
     */
    _nextBlock(): Promise<FeedBlock<T> | undefined>;
}
//# sourceMappingURL=feed-set-iterator.d.ts.map