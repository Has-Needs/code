import type { ValueEncoding } from 'hypercore';
import { Keyring } from '@dxos/keyring';
import { type Directory, type Storage } from '@dxos/random-access-storage';
import { type TestGenerator, type TestItem } from './test-generator';
import { FeedFactory } from '../feed-factory';
import { FeedStore } from '../feed-store';
export type TestBuilderOptions<T extends {}> = {
    storage?: Storage;
    root?: Directory;
    keyring?: Keyring;
    valueEncoding?: ValueEncoding<T>;
    generator?: TestGenerator<T>;
};
type PropertyProvider<T extends {}, P> = (cb: TestBuilder<T>) => P;
/**
 * The builder provides building blocks for tests with sensible defaults.
 * - Factory methods trigger the automatic generation of unset required properties.
 * - Avoids explosion of overly specific test functions that require and return large bags of properties.
 */
export declare class TestBuilder<T extends {}> {
    readonly _properties: TestBuilderOptions<T>;
    static readonly ROOT_DIR = "feeds";
    constructor(_properties?: TestBuilderOptions<T>);
    /**
     * Creates a new builder with the current builder's properties.
     */
    clone(): TestBuilder<T>;
    get keyring(): Keyring;
    get storage(): Storage;
    get root(): Directory;
    setKeyring(keyring: Keyring | PropertyProvider<T, Keyring>): this;
    setStorage(storage: Storage, root?: string): this;
    setRoot(root: Directory): this;
    createFeedFactory(): FeedFactory<T>;
    createFeedStore(): FeedStore<T>;
}
/**
 * Builder with default encoder and generator.
 */
export declare class TestItemBuilder extends TestBuilder<TestItem> {
    constructor();
    get valueEncoding(): ValueEncoding<TestItem>;
    get generator(): TestGenerator<TestItem>;
}
export {};
//# sourceMappingURL=test-builder.d.ts.map