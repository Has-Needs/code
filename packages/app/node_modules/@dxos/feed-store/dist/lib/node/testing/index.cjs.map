{
  "version": 3,
  "sources": ["../../../../src/testing/mocks.ts", "../../../../src/testing/test-builder.ts", "../../../../src/testing/test-generator.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport { Event, scheduleTask } from '@dxos/async';\nimport { Context } from '@dxos/context';\nimport { PublicKey } from '@dxos/keys';\n\nimport type { FeedWriter, WriteOptions, WriteReceipt } from '../feed-writer';\n\n/**\n * Mock writer collects and emits messages.\n */\nexport class MockFeedWriter<T extends {}> implements FeedWriter<T> {\n  public readonly written = new Event<[T, WriteReceipt]>();\n  public readonly messages: T[] = [];\n\n  constructor(readonly feedKey = PublicKey.random()) {}\n\n  async write(data: T, { afterWrite }: WriteOptions = {}): Promise<WriteReceipt> {\n    this.messages.push(data);\n\n    const receipt: WriteReceipt = {\n      feedKey: this.feedKey,\n      seq: this.messages.length - 1,\n    };\n\n    await afterWrite?.(receipt);\n\n    scheduleTask(new Context(), () => {\n      this.written.emit([data, receipt]);\n    });\n\n    return receipt;\n  }\n}\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport type { ValueEncoding } from 'hypercore';\n\nimport { Keyring } from '@dxos/keyring';\nimport { createStorage, type Directory, type Storage, StorageType } from '@dxos/random-access-storage';\n\nimport { defaultTestGenerator, defaultValueEncoding, type TestGenerator, type TestItem } from './test-generator';\nimport { FeedFactory } from '../feed-factory';\nimport { FeedStore } from '../feed-store';\n\nexport type TestBuilderOptions<T extends {}> = {\n  storage?: Storage;\n  root?: Directory;\n  keyring?: Keyring;\n  valueEncoding?: ValueEncoding<T>;\n  generator?: TestGenerator<T>;\n};\n\ntype PropertyProvider<T extends {}, P> = (cb: TestBuilder<T>) => P;\n\nconst evaluate = <T extends {}, P>(builder: TestBuilder<T>, arg: P | PropertyProvider<T, P>) =>\n  arg === 'function' ? (arg as Function)(builder) : arg;\n\n/**\n * The builder provides building blocks for tests with sensible defaults.\n * - Factory methods trigger the automatic generation of unset required properties.\n * - Avoids explosion of overly specific test functions that require and return large bags of properties.\n */\nexport class TestBuilder<T extends {}> {\n  static readonly ROOT_DIR = 'feeds';\n\n  constructor(public readonly _properties: TestBuilderOptions<T> = {}) {}\n\n  /**\n   * Creates a new builder with the current builder's properties.\n   */\n  clone(): TestBuilder<T> {\n    return new TestBuilder<T>(Object.assign({}, this._properties));\n  }\n\n  get keyring(): Keyring {\n    return (this._properties.keyring ??= new Keyring());\n  }\n\n  get storage(): Storage {\n    return (this._properties.storage ??= createStorage({ type: StorageType.RAM }));\n  }\n\n  get root(): Directory {\n    return (this._properties.root ??= this.storage.createDirectory(TestBuilder.ROOT_DIR));\n  }\n\n  setKeyring(keyring: Keyring | PropertyProvider<T, Keyring>): this {\n    this._properties.keyring = evaluate(this, keyring);\n    return this;\n  }\n\n  setStorage(storage: Storage, root?: string): this {\n    this._properties.storage = evaluate(this, storage);\n    if (root) {\n      this._properties.root = this.storage.createDirectory(root);\n    }\n\n    return this;\n  }\n\n  setRoot(root: Directory): this {\n    this._properties.root = evaluate(this, root);\n    return this;\n  }\n\n  createFeedFactory(): FeedFactory<T> {\n    return new FeedFactory<T>({\n      root: this.root,\n      signer: this.keyring,\n      hypercore: {\n        valueEncoding: this._properties.valueEncoding,\n      },\n    });\n  }\n\n  createFeedStore(): FeedStore<T> {\n    return new FeedStore<T>({\n      factory: this.createFeedFactory(),\n    });\n  }\n}\n\n/**\n * Builder with default encoder and generator.\n */\nexport class TestItemBuilder extends TestBuilder<TestItem> {\n  constructor() {\n    super({\n      valueEncoding: defaultValueEncoding,\n      generator: defaultTestGenerator,\n    });\n  }\n\n  get valueEncoding() {\n    return this._properties.valueEncoding!;\n  }\n\n  get generator() {\n    return this._properties.generator!;\n  }\n}\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport type { AbstractValueEncoding } from 'hypercore';\n\nimport { sleep } from '@dxos/async';\nimport { type Codec } from '@dxos/codec-protobuf';\nimport { createCodecEncoding } from '@dxos/hypercore';\nimport { faker } from '@dxos/random';\n\nimport { type FeedWriter } from '../feed-writer';\n\nexport type TestItem = {\n  id: string;\n  index: number;\n  value: string;\n};\n\nexport const defaultCodec: Codec<any> = {\n  encode: (obj: any) => Buffer.from(JSON.stringify(obj)),\n  decode: (buffer: Uint8Array) => JSON.parse(buffer.toString()),\n};\n\nexport const defaultValueEncoding: AbstractValueEncoding<any> = createCodecEncoding(defaultCodec);\n\nexport type TestBlockGenerator<T> = (i: number) => T;\n\nexport const defaultTestBlockGenerator: TestBlockGenerator<TestItem> = (i) => ({\n  id: faker.string.uuid(),\n  index: i,\n  value: faker.lorem.sentence(),\n});\n\n/**\n * Writes data to feeds.\n */\nexport class TestGenerator<T extends {}> {\n  _count = 0;\n\n  constructor(private readonly _generate: TestBlockGenerator<T>) {}\n\n  async writeBlocks(\n    writer: FeedWriter<T>,\n    {\n      count = 1,\n      delay,\n    }: {\n      count?: number;\n      delay?: {\n        min: number;\n        max: number;\n      };\n    } = {},\n  ) {\n    return await Promise.all(\n      Array.from(Array(count)).map(async () => {\n        const data = this._generate(this._count++);\n        const receipt = await writer.write(data);\n        if (delay) {\n          await sleep(faker.number.int(delay));\n        }\n\n        return receipt;\n      }),\n    );\n  }\n}\n\nexport const defaultTestGenerator = new TestGenerator<TestItem>(defaultTestBlockGenerator);\n"],
  "mappings": "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",
  "names": ["import_async", "MockFeedWriter", "feedKey", "PublicKey", "random", "written", "Event", "messages", "write", "data", "afterWrite", "push", "receipt", "seq", "length", "scheduleTask", "Context", "emit", "defaultCodec", "encode", "obj", "Buffer", "from", "JSON", "stringify", "decode", "buffer", "parse", "toString", "defaultValueEncoding", "createCodecEncoding", "defaultTestBlockGenerator", "i", "id", "faker", "string", "uuid", "index", "value", "lorem", "sentence", "TestGenerator", "_generate", "_count", "writeBlocks", "writer", "count", "delay", "Promise", "all", "Array", "map", "sleep", "number", "int", "defaultTestGenerator", "evaluate", "builder", "arg", "TestBuilder", "ROOT_DIR", "_properties", "clone", "Object", "assign", "keyring", "Keyring", "storage", "createStorage", "type", "StorageType", "RAM", "root", "createDirectory", "setKeyring", "setStorage", "setRoot", "createFeedFactory", "FeedFactory", "signer", "hypercore", "valueEncoding", "createFeedStore", "FeedStore", "factory", "TestItemBuilder", "generator"]
}
