/**
 * Creates an object composed of the object properties predicate returns truthy for.
 */
export declare const pick: <T extends object, K extends keyof T = keyof T>(obj: T, keys: K[]) => Pick<T, K>;
/**
 * Creates an object composed of the object properties predicate returns truthy for.
 */
export declare const pickBy: (obj: Record<any, any>, predicate: (value: any) => boolean) => Record<any, any>;
/**
 * Omit given props.
 * @param obj
 * @param keys
 */
export declare const omit: <T extends object, K extends keyof T>(obj: T, keys: K[]) => Omit<T, K>;
//# sourceMappingURL=pick.d.ts.map