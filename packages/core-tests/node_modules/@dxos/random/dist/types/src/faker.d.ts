import { type Range } from './util';
export declare const faker: {
    seed: (value: number) => void;
    helpers: {
        arrayElement: <T>(a: T[]) => T;
        multiple: <T>(f: () => T, { count }: {
            count: number | {
                min: number;
                max: number;
            };
        }) => T[];
        uniqueArray: <T>(f: T[] | (() => T), n: number) => T[];
        randomSubset: <T>(array: T[], count?: number | {
            min: number;
            max: number;
        }) => T[];
    };
    number: {
        float: (range?: number | Range) => number;
        int: (range?: number | Range) => number;
    };
    datatype: {
        boolean: (p?: {
            probability: number;
        }) => boolean;
    };
    date: {
        recent: () => Date;
        iso8601: () => string;
    };
    image: {
        url: () => string;
    };
    lorem: {
        word: () => string;
        words: (n?: number | Range) => string;
        sentence: (n?: number | Range) => string;
        sentences: (n?: number | Range) => string;
        paragraph: (n?: number | Range) => string;
        paragraphs: (n?: number | Range) => string;
    };
    string: {
        hexadecimal: (l?: {
            length: number;
        }) => string;
        uuid: () => string;
    };
    internet: {
        email: () => string;
        url: () => string;
    };
    person: {
        firstName: () => string;
        fullName: () => string;
    };
    company: {
        name: () => string;
    };
    commerce: {
        productName: () => string;
    };
    geo: {
        airport: () => {
            name: string;
            code: string;
            location: number[];
        };
        location: () => number[];
    };
    email: {};
    properties: {
        emoji: () => string;
        hue: () => "green" | "purple" | "red" | "violet" | "amber" | "lime" | "emerald" | "teal" | "cyan" | "fuchsia" | "pink" | "rose";
        icon: () => string;
    };
};
//# sourceMappingURL=faker.d.ts.map