import { Event } from '@dxos/async';
import { type QueryAST } from '@dxos/echo-protocol';
import type { QueryContext, QueryResultEntry, QueryRunOptions } from './query-result';
import { type AnyLiveObject } from '../echo-handler';
import { type EchoDatabaseImpl } from '../proxy-db';
export type GraphQueryContextParams = {
    onStart: () => void;
    onStop: () => void;
};
/**
 * Query data source.
 * Implemented by a space or a remote agent.
 * Each query has a separate instance.
 */
export interface QuerySource {
    changed: Event<void>;
    open(): void;
    close(): void;
    /**
     * Synchronous query.
     */
    getResults(): QueryResultEntry[];
    /**
     * One-shot query.
     */
    run(query: QueryAST.Query): Promise<QueryResultEntry[]>;
    /**
     * Set the filter and trigger continuous updates.
     */
    update(query: QueryAST.Query): void;
}
/**
 * Aggregates multiple query sources.
 */
export declare class GraphQueryContext implements QueryContext {
    private readonly _params;
    private readonly _sources;
    private _query?;
    private _ctx?;
    changed: Event<void>;
    constructor(_params: GraphQueryContextParams);
    get sources(): ReadonlySet<QuerySource>;
    start(): void;
    stop(): void;
    getResults(): QueryResultEntry[];
    run(query: QueryAST.Query, { timeout }?: QueryRunOptions): Promise<QueryResultEntry[]>;
    update(query: QueryAST.Query): void;
    addQuerySource(querySource: QuerySource): void;
}
/**
 * Queries objects from the local working set.
 */
export declare class SpaceQuerySource implements QuerySource {
    private readonly _database;
    readonly changed: Event<void>;
    private _ctx;
    private _query;
    private _results?;
    constructor(_database: EchoDatabaseImpl);
    get spaceId(): import("@dxos/keys").SpaceId;
    get spaceKey(): import("@dxos/keys").PublicKey;
    open(): void;
    close(): void;
    private _onUpdate;
    run(query: QueryAST.Query): Promise<QueryResultEntry<AnyLiveObject<any>>[]>;
    getResults(): QueryResultEntry<AnyLiveObject<any>>[];
    update(query: QueryAST.Query): void;
    /**
     * Queries from already loaded objects.
     */
    private _queryWorkingSet;
    private _isValidSourceForQuery;
    private _mapCoreToResult;
    private _filterCore;
}
//# sourceMappingURL=graph-query-context.d.ts.map