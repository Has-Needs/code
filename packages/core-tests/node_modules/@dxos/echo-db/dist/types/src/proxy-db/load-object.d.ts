import type { BaseEchoObject } from '@dxos/echo-schema';
import { type AnyLiveObject } from '../echo-handler';
/**
 * @param obj
 */
export declare const loadObject: <T extends BaseEchoObject>(obj: T) => T;
/**
 * EXPERIMENTAL - the API is subject to change.
 * @param objOrArray - an echo object or collection of objects with references to other echo objects.
 * @param valueAccessor - selector for a reference that needs to be loaded.
 *                        if return type is an array the method exits when all entries are non-null.
 *                        otherwise the method exits when valueAccessor is not null.
 * @param timeout - loading timeout, defaults to 5s.
 *
 * @deprecated Use `await Ref.load()` instead.
 */
export declare const loadObjectReferences: <T extends AnyLiveObject<any>, RefType, DerefType = RefType extends Array<infer U> ? Array<NonNullable<U>> : NonNullable<RefType>>(objOrArray: T | T[], valueAccessor: (obj: T) => RefType, { timeout }?: {
    timeout: number;
}) => Promise<T extends T[] ? Array<DerefType> : DerefType>;
//# sourceMappingURL=load-object.d.ts.map