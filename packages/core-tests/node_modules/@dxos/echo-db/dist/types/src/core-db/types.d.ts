import type { ChangeFn, ChangeOptions, Doc, Heads } from '@automerge/automerge';
import { type Reference } from '@dxos/echo-protocol';
export type DecodedAutomergePrimaryValue = undefined | string | number | boolean | DecodedAutomergePrimaryValue[] | {
    [key: string]: DecodedAutomergePrimaryValue;
} | Reference;
export type KeyPath = readonly (string | number)[];
export interface IDocHandle<T = any> {
    doc(): Doc<T> | undefined;
    change(callback: ChangeFn<T>, options?: ChangeOptions<T>): void;
    changeAt(heads: Heads, callback: ChangeFn<T>, options?: ChangeOptions<T>): Heads | undefined;
    addListener(event: 'change', listener: () => void): void;
    removeListener(event: 'change', listener: () => void): void;
}
export interface DocAccessor<T = any> {
    get handle(): IDocHandle<T>;
    get path(): KeyPath;
}
export declare const DocAccessor: {
    getValue: <T>(accessor: DocAccessor) => T;
};
export declare const isValidKeyPath: (value: unknown) => value is KeyPath;
//# sourceMappingURL=types.d.ts.map