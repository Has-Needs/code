import { type EncodedReference, Reference } from '@dxos/echo-protocol';
import { type AnyLiveObject } from './echo-handler';
import { type EchoDatabase } from './proxy-db';
import type { SerializedObject, SerializedSpace } from './serialized-space';
export type ImportOptions = {
    /**
     * Called for each object before importing.
     * @returns true to import the object, false to skip.
     */
    onObject?: (object: SerializedObject) => Promise<boolean>;
};
export declare class Serializer {
    static version: number;
    export(database: EchoDatabase): Promise<SerializedSpace>;
    import(database: EchoDatabase, data: SerializedSpace, opts?: ImportOptions): Promise<void>;
    exportObject(object: AnyLiveObject<any>): SerializedObject;
    private _importObject;
}
export declare const decodeReferenceJSON: (encoded?: EncodedReference | string) => Reference | undefined;
//# sourceMappingURL=serializer.d.ts.map