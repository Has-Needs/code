import { StackTrace } from '@dxos/debug';
import type { Ref } from '@dxos/echo';
import { RuntimeSchemaRegistry, type BaseObject, type BaseSchema } from '@dxos/echo-schema';
import { DXN, type SpaceId } from '@dxos/keys';
import { type EchoDatabase, type EchoDatabaseImpl } from './proxy-db';
import { type QueryFn, type QuerySource } from './query';
/**
 * Resolution context.
 * Affects how non-absolute DXNs are resolved.
 */
export interface RefResolutionContext {
    /**
     * Space that the resolution is happening from.
     */
    space?: SpaceId;
    /**
     * Queue that the resolution is happening from.
     * This queue will be searched first, and then the space it belongs to.
     */
    queue?: DXN;
}
export interface RefResolverOptions {
    /**
     * Resolution context.
     * Affects how non-absolute DXNs are resolved.
     */
    context?: RefResolutionContext;
    /**
     * Middleware to change the resolved object before returning it.
     * @deprecated On track to be removed.
     */
    middleware?: (obj: BaseObject) => BaseObject;
}
/**
 * Manages cross-space database interactions.
 */
export declare class Hypergraph {
    private readonly _databases;
    private readonly _queueFactories;
    private readonly _owningObjects;
    private readonly _schemaRegistry;
    private readonly _updateEvent;
    private readonly _resolveEvents;
    private readonly _queryContexts;
    private readonly _querySourceProviders;
    get schemaRegistry(): RuntimeSchemaRegistry;
    /**
     * @deprecated
     */
    getSchemaByTypename(typename: string, db: EchoDatabase): Promise<BaseSchema | undefined>;
    /**
     * Register a database.
     * @param spaceId Space id.
     * @param spaceKey Space key.
     * @param database Database backend.
     * @param owningObject Database owner, usually a space.
     */
    _registerDatabase(spaceId: SpaceId, 
    /** @deprecated Use spaceId */
    database: EchoDatabaseImpl, owningObject?: unknown): void;
    _getOwningObject(spaceId: SpaceId): unknown | undefined;
    query: QueryFn;
    private _query;
    /**
     * @param hostDb Host database for reference resolution.
     * @param middleware Called with the loaded object. The caller may change the object.
     * @returns Result of `onLoad`.
     */
    createRefResolver({ context, middleware }: RefResolverOptions): Ref.Resolver;
    /**
     * @param db
     * @param ref
     * @param onResolve will be weakly referenced.
     */
    private _resolveSync;
    private _resolveAsync;
    private _resolveDatabaseObjectAsync;
    private _resolveQueueSync;
    private _resolveQueueObjectAsync;
    registerQuerySourceProvider(provider: QuerySourceProvider): void;
    /**
     * Does not remove the provider from active query contexts.
     */
    unregisterQuerySourceProvider(provider: QuerySourceProvider): void;
    private _onUpdate;
    private _createLiveObjectQueryContext;
    private _createPlainObjectQueryContext;
}
export interface QuerySourceProvider {
    create(): QuerySource;
}
type ObjectDiagnostic = {
    objectId: string;
    spaceId: string;
    loadReason: string;
    loadedStack?: StackTrace;
    query?: string;
};
export declare const OBJECT_DIAGNOSTICS: Map<string, ObjectDiagnostic>;
export {};
//# sourceMappingURL=hypergraph.d.ts.map