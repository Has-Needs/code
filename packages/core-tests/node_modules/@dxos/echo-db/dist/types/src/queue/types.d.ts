import { Schema } from 'effect';
import type { Obj, Relation } from '@dxos/echo';
import { type DXN, type ObjectId } from '@dxos/keys';
/**
 * Client-side view onto an EDGE queue.
 */
export interface Queue<T extends Obj.Any | Relation.Any = Obj.Any | Relation.Any> {
    readonly dxn: DXN;
    readonly isLoading: boolean;
    readonly error: Error | null;
    readonly objects: T[];
    toJSON(): any;
    /**
     * Appends objects to the queue.
     */
    append(objects: T[]): Promise<void>;
    /**
     * Deletes objects from the queue.
     */
    delete(ids: string[]): Promise<void>;
    /**
     * Query all objects in the queue.
     */
    queryObjects(): Promise<T[]>;
    /**
     * Queries objects by id.
     */
    getObjectsById(ids: ObjectId[]): Promise<(T | null)[]>;
    /**
     * Refreshes the queue from the server.
     */
    refresh(): Promise<void>;
}
export declare const Queue: Schema.Schema<Queue>;
//# sourceMappingURL=types.d.ts.map