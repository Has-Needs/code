import { Event, type CleanupFn } from '@dxos/async';
import type { SchemaRegistryPreparedQuery } from './schema-registry-api';
export interface SchemaRegistryQueryResolver<T> {
    changes: Event<void>;
    /**
     * Start reactive query.
     */
    start(): Promise<void>;
    /**
     * Stop reactive query.
     */
    stop(): Promise<void>;
    getResults(): Promise<T[]>;
    getResultsSync(): T[];
}
/**
 * API for the schema queries.
 */
export declare class SchemaRegistryPreparedQueryImpl<T> implements SchemaRegistryPreparedQuery<T> {
    private readonly _resolver;
    private readonly _mutex;
    private readonly _changes;
    private _isReactiveQueryRunning;
    private _subscriberCount;
    private _isFiring;
    constructor(_resolver: SchemaRegistryQueryResolver<T>);
    get results(): T[];
    run(): Promise<T[]>;
    runSync(): T[];
    first(): Promise<T>;
    firstOrUndefined(): Promise<T | undefined>;
    subscribe(cb?: (self: this) => void, opts?: {
        fire?: boolean;
    }): CleanupFn;
    private _onSubscriberCountChange;
    private _start;
    private _stop;
}
//# sourceMappingURL=schema-registry-prepared-query.d.ts.map