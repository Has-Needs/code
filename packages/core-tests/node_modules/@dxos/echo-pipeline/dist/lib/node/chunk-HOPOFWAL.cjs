"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_HOPOFWAL_exports = {};
__export(chunk_HOPOFWAL_exports, {
  filterMatchObject: () => filterMatchObject,
  filterMatchValue: () => filterMatchValue
});
module.exports = __toCommonJS(chunk_HOPOFWAL_exports);
var import_echo_protocol = require("@dxos/echo-protocol");
var import_echo_schema = require("@dxos/echo-schema");
var import_keys = require("@dxos/keys");
var filterMatchObject = (filter, obj) => {
  switch (filter.type) {
    case "object": {
      if (filter.typename !== null) {
        if (!obj.doc.system?.type?.["/"]) {
          const expectedDXN = import_keys.DXN.parse(filter.typename).asTypeDXN();
          if (expectedDXN?.type !== import_echo_schema.EXPANDO_TYPENAME) {
            return false;
          }
        } else {
          const actualDXN = import_keys.DXN.parse(obj.doc.system.type["/"]);
          const expectedDXN = import_keys.DXN.parse(filter.typename);
          if (!compareTypename(expectedDXN, actualDXN)) {
            return false;
          }
        }
      }
      if (filter.id && filter.id.length > 0 && !filter.id.includes(obj.id)) {
        return false;
      }
      if (filter.props) {
        for (const [key, valueFilter] of Object.entries(filter.props)) {
          const value = obj.doc.data[key];
          if (!filterMatchValue(valueFilter, value)) {
            return false;
          }
        }
      }
      if (filter.foreignKeys && filter.foreignKeys.length > 0) {
        const hasMatchingKey = filter.foreignKeys.some((filterKey) => obj.doc.meta.keys.some((objKey) => objKey.source === filterKey.source && objKey.id === filterKey.id));
        if (!hasMatchingKey) {
          return false;
        }
      }
      return true;
    }
    case "text-search": {
      return false;
    }
    case "not": {
      return !filterMatchObject(filter.filter, obj);
    }
    case "and": {
      return filter.filters.every((f) => filterMatchObject(f, obj));
    }
    case "or": {
      return filter.filters.some((f) => filterMatchObject(f, obj));
    }
    default:
      return false;
  }
};
var filterMatchValue = (filter, value) => {
  switch (filter.type) {
    case "compare": {
      const compareValue = filter.value;
      switch (filter.operator) {
        case "eq":
          if ((0, import_echo_protocol.isEncodedReference)(compareValue)) {
            if (!(0, import_echo_protocol.isEncodedReference)(value)) {
              return false;
            }
            return import_keys.DXN.equals((0, import_echo_protocol.decodeReference)(value).toDXN(), (0, import_echo_protocol.decodeReference)(compareValue).toDXN());
          }
          return value === compareValue;
        case "neq":
          return value !== compareValue;
        case "gt":
          return value > compareValue;
        case "gte":
          return value >= compareValue;
        case "lt":
          return value < compareValue;
        case "lte":
          return value <= compareValue;
      }
      break;
    }
    case "in": {
      return filter.values.includes(value);
    }
    case "range": {
      return value >= filter.from && value <= filter.to;
    }
    case "not": {
      return !filterMatchValue(filter.filter, value);
    }
    case "and": {
      return filter.filters.every((f) => filterMatchValue(f, value));
    }
    case "or": {
      return filter.filters.some((f) => filterMatchValue(f, value));
    }
    default:
      return false;
  }
};
var compareTypename = (expectedDXN, actualDXN) => {
  const expectedTypeDXN = expectedDXN.asTypeDXN();
  if (expectedTypeDXN) {
    const actualTypeDXN = actualDXN.asTypeDXN();
    if (!actualTypeDXN) {
      return false;
    }
    if (actualTypeDXN.type !== expectedTypeDXN.type || expectedTypeDXN.version !== void 0 && actualTypeDXN.version !== void 0 && actualTypeDXN.version !== expectedTypeDXN.version) {
      return false;
    }
  } else {
    if (!import_keys.DXN.equals(actualDXN, expectedDXN)) {
      return false;
    }
  }
  return true;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  filterMatchObject,
  filterMatchValue
});
//# sourceMappingURL=chunk-HOPOFWAL.cjs.map
