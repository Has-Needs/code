import { type FeedStore } from '@dxos/feed-store';
import { type Keyring } from '@dxos/keyring';
import { PublicKey } from '@dxos/keys';
import { MemorySignalManagerContext } from '@dxos/messaging';
import { SwarmNetworkManager } from '@dxos/network-manager';
import { type FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type Storage } from '@dxos/random-access-storage';
import { Gossip, Presence } from '@dxos/teleport-extension-gossip';
import { BlobStore } from '@dxos/teleport-extension-object-sync';
import { TestFeedBuilder } from './test-feed-builder';
import { MetadataStore } from '../metadata';
import { SpaceManager, SpaceProtocol, type Space } from '../space';
export type NetworkManagerProvider = () => SwarmNetworkManager;
export declare const MemoryNetworkManagerProvider: (signalContext: MemorySignalManagerContext) => NetworkManagerProvider;
export declare const WebsocketNetworkManagerProvider: (signalUrl: string) => NetworkManagerProvider;
export type TestAgentBuilderOptions = {
    storage?: Storage;
    networkManagerProvider?: NetworkManagerProvider;
};
/**
 * Factory for test agents.
 */
export declare class TestAgentBuilder {
    private readonly _agents;
    private readonly _storage;
    private readonly _networkManagerProvider;
    constructor({ storage, networkManagerProvider }?: TestAgentBuilderOptions);
    close(): Promise<Space[][]>;
    get agents(): TestAgent[];
    getAgent(deviceKey: PublicKey): TestAgent | undefined;
    createPeer(): Promise<TestAgent>;
}
/**
 * Test agent that enables the creation and replication of multiple spaces.
 */
export declare class TestAgent {
    private readonly _networkManagerProvider;
    private readonly _feedBuilder;
    readonly identityKey: PublicKey;
    readonly deviceKey: PublicKey;
    private readonly _spaces;
    readonly storage: Storage;
    readonly keyring: Keyring;
    readonly feedStore: FeedStore<FeedMessage>;
    private _metadataStore?;
    get metadataStore(): MetadataStore;
    private _blobStore?;
    get blobStore(): BlobStore;
    constructor(_networkManagerProvider: NetworkManagerProvider, _feedBuilder: TestFeedBuilder, identityKey: PublicKey, deviceKey: PublicKey);
    close(): Promise<Space[]>;
    get spaces(): Space[];
    getSpace(spaceKey: PublicKey): Space | undefined;
    private _networkManager?;
    get networkManager(): SwarmNetworkManager;
    private _spaceManager?;
    get spaceManager(): SpaceManager;
    createSpace(identityKey?: PublicKey, spaceKey?: PublicKey, genesisKey?: PublicKey, dataKey?: PublicKey, saveMetadata?: boolean): Promise<Space>;
    createSpaceProtocol(topic: PublicKey, gossip?: Gossip): SpaceProtocol;
    createGossip(): Gossip;
    createPresence(gossip?: Gossip): Presence;
    spaceGenesis(space: Space): Promise<void>;
}
//# sourceMappingURL=test-agent-builder.d.ts.map