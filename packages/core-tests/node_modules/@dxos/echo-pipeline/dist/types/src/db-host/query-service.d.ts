import { Stream } from '@dxos/codec-protobuf/stream';
import { Resource } from '@dxos/context';
import { type Indexer } from '@dxos/indexing';
import { type IndexConfig } from '@dxos/protocols/proto/dxos/echo/indexing';
import { type QueryRequest, type QueryResponse, type QueryService } from '@dxos/protocols/proto/dxos/echo/query';
import type { SpaceStateManager } from './space-state-manager';
import { type AutomergeHost } from '../automerge';
export type QueryServiceParams = {
    indexer: Indexer;
    automergeHost: AutomergeHost;
    spaceStateManager: SpaceStateManager;
};
export declare class QueryServiceImpl extends Resource implements QueryService {
    private readonly _params;
    private readonly _queries;
    private _updateQueries;
    constructor(_params: QueryServiceParams);
    _open(): Promise<void>;
    _close(): Promise<void>;
    setConfig(config: IndexConfig): Promise<void>;
    execQuery(request: QueryRequest): Stream<QueryResponse>;
    /**
     * Re-index all loaded documents.
     */
    reindex(): Promise<void>;
    /**
     * Schedule re-execution of all queries.
     */
    invalidateQueries(): void;
    private _createQuery;
    private _executeQueries;
}
//# sourceMappingURL=query-service.d.ts.map