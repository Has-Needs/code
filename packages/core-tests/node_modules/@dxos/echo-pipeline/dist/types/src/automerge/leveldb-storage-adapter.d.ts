import { type StorageAdapterInterface, type Chunk, type StorageKey } from '@automerge/automerge-repo';
import { type MixedEncoding } from 'level-transcoder';
import { Resource } from '@dxos/context';
import { type BatchLevel, type SublevelDB } from '@dxos/kv-store';
import { type MaybePromise } from '@dxos/util';
export interface StorageAdapterDataMonitor {
    recordBytesStored(count: number): void;
    recordBytesLoaded(count: number): void;
    recordLoadDuration(durationMs: number): void;
    recordStoreDuration(durationMs: number): void;
}
export type LevelDBStorageAdapterParams = {
    db: SublevelDB;
    callbacks?: StorageCallbacks;
    monitor?: StorageAdapterDataMonitor;
};
export type BeforeSaveParams = {
    path: StorageKey;
    batch: BatchLevel;
};
export interface StorageCallbacks {
    beforeSave(params: BeforeSaveParams): MaybePromise<void>;
    afterSave(path: StorageKey): MaybePromise<void>;
}
export declare class LevelDBStorageAdapter extends Resource implements StorageAdapterInterface {
    private readonly _params;
    constructor(_params: LevelDBStorageAdapterParams);
    load(keyArray: StorageKey): Promise<Uint8Array | undefined>;
    save(keyArray: StorageKey, binary: Uint8Array): Promise<void>;
    remove(keyArray: StorageKey): Promise<void>;
    loadRange(keyPrefix: StorageKey): Promise<Chunk[]>;
    removeRange(keyPrefix: StorageKey): Promise<void>;
}
export declare const encodingOptions: {
    keyEncoding: MixedEncoding<StorageKey, Uint8Array<ArrayBufferLike>, StorageKey>;
    valueEncoding: string;
};
//# sourceMappingURL=leveldb-storage-adapter.d.ts.map