import { type AuthService } from '@dxos/protocols/proto/dxos/mesh/teleport/auth';
import { type ExtensionContext, RpcExtension } from '@dxos/teleport';
export type AuthProvider = (nonce: Uint8Array) => Promise<Uint8Array | undefined>;
export type AuthVerifier = (nonce: Uint8Array, credential: Uint8Array) => Promise<boolean>;
export type AuthExtensionParams = {
    provider: AuthProvider;
    verifier: AuthVerifier;
    onAuthSuccess: () => void;
    onAuthFailure: () => void;
};
export declare class AuthExtension extends RpcExtension<Services, Services> {
    private readonly _authParams;
    private readonly _ctx;
    constructor(_authParams: AuthExtensionParams);
    protected getHandlers(): Promise<Services>;
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(): Promise<void>;
    onAbort(): Promise<void>;
}
type Services = {
    AuthService: AuthService;
};
export {};
//# sourceMappingURL=auth.d.ts.map