import { type Message } from '@automerge/automerge-repo';
import { type TimeAware } from '@dxos/tracing';
import { type NetworkDataMonitor } from './echo-network-adapter';
import { type StorageAdapterDataMonitor } from './leveldb-storage-adapter';
export type EchoDataMonitorOptions = {
    timeSeriesLength: number;
};
export declare class EchoDataMonitor implements StorageAdapterDataMonitor, NetworkDataMonitor, TimeAware {
    private readonly _params;
    private _lastTick;
    private _activeCounters;
    private _lastCompleteCounters;
    private readonly _localTimeSeries;
    private readonly _storageAverages;
    private readonly _replicationAverages;
    private readonly _sizeByMessage;
    private readonly _lastReceivedMessages;
    private readonly _lastSentMessages;
    private _connectionsCount;
    constructor(_params?: EchoDataMonitorOptions);
    tick(timeMs: number): void;
    computeStats(): EchoDataStats;
    get connectionsCount(): number;
    private _advanceTimeWindow;
    private _addToTimeSeries;
    private _reportPerSecondRate;
    recordPeerConnected(peerId: string): void;
    recordPeerDisconnected(peerId: string): void;
    recordBytesStored(count: number): void;
    recordLoadDuration(durationMs: number): void;
    recordStoreDuration(durationMs: number): void;
    recordBytesLoaded(count: number): void;
    recordMessageSent(message: Message, duration: number): void;
    recordMessageReceived(message: Message): void;
    recordMessageSendingFailed(message: Message): void;
    private _getStatsForType;
    private _computeMessageHistogram;
}
type BaseDataOpStats = {
    payloadSize: number;
    countPerSecond: number;
};
export type TimedDataOpStats = BaseDataOpStats & {
    opDuration: number;
};
type MessageAttributeHistogram = {
    [Message: string]: {
        received: number;
        sent: number;
    };
};
export type EchoDataStats = {
    meta: {
        rateAverageOverSeconds: number;
    };
    storage: {
        reads: TimedDataOpStats;
        writes: TimedDataOpStats;
    };
    replicator: {
        connections: number;
        receivedMessages: BaseDataOpStats;
        sentMessages: TimedDataOpStats & {
            failedPerSecond: number;
        };
        avgSizeByMessage: {
            [Message: string]: number;
        };
        countByMessage: MessageAttributeHistogram;
    };
};
export {};
//# sourceMappingURL=echo-data-monitor.d.ts.map