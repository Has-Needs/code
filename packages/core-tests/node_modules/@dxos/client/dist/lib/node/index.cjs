"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var node_exports = {};
__export(node_exports, {
  AgentClientServiceProvider: () => import_chunk_GXHU364O.AgentClientServiceProvider,
  AgentManagerClient: () => import_chunk_GXHU364O.AgentManagerClient,
  AlreadyJoinedError: () => import_protocols.AlreadyJoinedError,
  ApiError: () => import_protocols.ApiError,
  CancelledError: () => import_protocols.CancelledError,
  Client: () => import_chunk_DTV5D7HV.Client,
  ClientServicesProxy: () => import_chunk_GXHU364O.ClientServicesProxy,
  Config: () => import_config.Config,
  DXOS_VERSION: () => import_chunk_DTV5D7HV.DXOS_VERSION,
  DataCorruptionError: () => import_protocols.DataCorruptionError,
  DatabaseError: () => import_protocols.DatabaseError,
  Defaults: () => import_config.Defaults,
  Dynamics: () => import_config.Dynamics,
  EntityNotFoundError: () => import_protocols.EntityNotFoundError,
  Envs: () => import_config.Envs,
  FakeAgentHostingProvider: () => import_chunk_GXHU364O.FakeAgentHostingProvider,
  IFrameManager: () => import_chunk_GXHU364O.IFrameManager,
  IdentityNotInitializedError: () => import_protocols.IdentityNotInitializedError,
  InvalidConfigError: () => import_protocols.InvalidConfigError,
  InvalidInvitationError: () => import_protocols.InvalidInvitationError,
  InvalidInvitationExtensionRoleError: () => import_protocols.InvalidInvitationExtensionRoleError,
  InvalidStorageVersionError: () => import_protocols.InvalidStorageVersionError,
  Local: () => import_config.Local,
  LocalClientServices: () => import_chunk_GXHU364O.LocalClientServices,
  PublicKey: () => import_keys.PublicKey,
  Remote: () => import_config.Remote,
  RemoteServiceConnectionError: () => import_protocols.RemoteServiceConnectionError,
  RemoteServiceConnectionTimeout: () => import_protocols.RemoteServiceConnectionTimeout,
  RpcClosedError: () => import_protocols.RpcClosedError,
  RpcNotOpenError: () => import_protocols.RpcNotOpenError,
  SharedWorkerConnection: () => import_chunk_GXHU364O.SharedWorkerConnection,
  Shell: () => import_chunk_GXHU364O.Shell,
  ShellDisplay: () => import_iframe.ShellDisplay,
  ShellLayout: () => import_iframe.ShellLayout,
  ShellManager: () => import_chunk_GXHU364O.ShellManager,
  Storage: () => import_config.Storage,
  SystemError: () => import_protocols.SystemError,
  SystemStatus: () => import_services.SystemStatus,
  UnknownModelError: () => import_protocols.UnknownModelError,
  WorkerClientServices: () => import_chunk_GXHU364O.WorkerClientServices,
  createClientServices: () => import_chunk_GXHU364O.createClientServices,
  fromAgent: () => import_chunk_GXHU364O.fromAgent,
  fromHost: () => import_chunk_GXHU364O.fromHost,
  fromSocket: () => import_chunk_GXHU364O.fromSocket,
  fromWorker: () => import_chunk_GXHU364O.fromWorker,
  getUnixSocket: () => import_chunk_GXHU364O.getUnixSocket,
  resolveRef: () => resolveRef
});
module.exports = __toCommonJS(node_exports);
var import_chunk_DTV5D7HV = require("./chunk-DTV5D7HV.cjs");
var import_chunk_GXHU364O = require("./chunk-GXHU364O.cjs");
var import_chunk_MVOI3MV3 = require("./chunk-MVOI3MV3.cjs");
var import_chunk_P7Y3AD6I = require("./chunk-P7Y3AD6I.cjs");
var import_config = require("@dxos/config");
var import_keys = require("@dxos/keys");
var import_protocols = require("@dxos/protocols");
var import_services = require("@dxos/protocols/proto/dxos/client/services");
var import_iframe = require("@dxos/protocols/proto/dxos/iframe");
var import_invariant = require("@dxos/invariant");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/util/helpers.ts";
var resolveRef = async (client, dxn, defaultSpace) => {
  const echoDxn = dxn?.asEchoDXN();
  if (echoDxn) {
    const space = echoDxn.spaceId ? client.spaces.get(echoDxn.spaceId) : defaultSpace;
    if (!space) {
      return void 0;
    }
    return space.db.getObjectById(echoDxn.echoId);
  }
  const queueDxn = dxn?.asQueueDXN();
  if (queueDxn) {
    const { spaceId, objectId } = dxn.asQueueDXN();
    (0, import_invariant.invariant)(objectId, "objectId missing", {
      F: __dxlog_file,
      L: 33,
      S: void 0,
      A: [
        "objectId",
        "'objectId missing'"
      ]
    });
    const queue = client.spaces.get(spaceId)?.queues.get(dxn);
    (0, import_invariant.invariant)(queue, "queue missing", {
      F: __dxlog_file,
      L: 35,
      S: void 0,
      A: [
        "queue",
        "'queue missing'"
      ]
    });
    return queue.objects.find((object) => object.id === objectId);
  }
  return void 0;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentClientServiceProvider,
  AgentManagerClient,
  AlreadyJoinedError,
  ApiError,
  CancelledError,
  Client,
  ClientServicesProxy,
  Config,
  DXOS_VERSION,
  DataCorruptionError,
  DatabaseError,
  Defaults,
  Dynamics,
  EntityNotFoundError,
  Envs,
  FakeAgentHostingProvider,
  IFrameManager,
  IdentityNotInitializedError,
  InvalidConfigError,
  InvalidInvitationError,
  InvalidInvitationExtensionRoleError,
  InvalidStorageVersionError,
  Local,
  LocalClientServices,
  PublicKey,
  Remote,
  RemoteServiceConnectionError,
  RemoteServiceConnectionTimeout,
  RpcClosedError,
  RpcNotOpenError,
  SharedWorkerConnection,
  Shell,
  ShellDisplay,
  ShellLayout,
  ShellManager,
  Storage,
  SystemError,
  SystemStatus,
  UnknownModelError,
  WorkerClientServices,
  createClientServices,
  fromAgent,
  fromHost,
  fromSocket,
  fromWorker,
  getUnixSocket,
  resolveRef
});
//# sourceMappingURL=index.cjs.map
