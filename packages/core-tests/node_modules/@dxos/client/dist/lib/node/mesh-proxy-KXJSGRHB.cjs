"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mesh_proxy_KXJSGRHB_exports = {};
__export(mesh_proxy_KXJSGRHB_exports, {
  MeshProxy: () => MeshProxy
});
module.exports = __toCommonJS(mesh_proxy_KXJSGRHB_exports);
var import_chunk_P7Y3AD6I = require("./chunk-P7Y3AD6I.cjs");
var import_async = require("@dxos/async");
var import_context = require("@dxos/context");
var import_invariant = require("@dxos/invariant");
var import_keys = require("@dxos/keys");
var import_log = require("@dxos/log");
var import_protocols = require("@dxos/protocols");
var import_services = require("@dxos/protocols/proto/dxos/client/services");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/mesh/mesh-proxy.ts";
var MeshProxy = class {
  constructor(_serviceProvider, _traceParent) {
    this._serviceProvider = _serviceProvider;
    this._traceParent = _traceParent;
    this._networkStatusUpdated = new import_async.Event();
    this._networkStatus = import_async.MulticastObservable.from(this._networkStatusUpdated, {
      swarm: import_services.ConnectionState.OFFLINE,
      signaling: []
    });
    this._instanceId = import_keys.PublicKey.random().toHex();
  }
  toJSON() {
    return {
      networkStatus: this._networkStatus.get()
    };
  }
  get networkStatus() {
    return this._networkStatus;
  }
  async updateConfig(swarm) {
    (0, import_invariant.invariant)(this._serviceProvider.services.NetworkService, "NetworkService is not available.", {
      F: __dxlog_file,
      L: 49,
      S: this,
      A: [
        "this._serviceProvider.services.NetworkService",
        "'NetworkService is not available.'"
      ]
    });
    return this._serviceProvider.services.NetworkService.updateConfig({
      swarm
    }, {
      timeout: import_chunk_P7Y3AD6I.RPC_TIMEOUT
    });
  }
  /**
  * @internal
  */
  async _open() {
    import_log.log.trace("dxos.sdk.mesh-proxy.open", import_protocols.trace.begin({
      id: this._instanceId,
      parentId: this._traceParent
    }), {
      F: __dxlog_file,
      L: 57,
      S: this,
      C: (f, a) => f(...a)
    });
    this._ctx = new import_context.Context({
      onError: (err) => import_log.log.catch(err, void 0, {
        F: __dxlog_file,
        L: 58,
        S: this,
        C: (f, a) => f(...a)
      })
    }, {
      F: __dxlog_file,
      L: 58
    });
    (0, import_invariant.invariant)(this._serviceProvider.services.NetworkService, "NetworkService is not available.", {
      F: __dxlog_file,
      L: 60,
      S: this,
      A: [
        "this._serviceProvider.services.NetworkService",
        "'NetworkService is not available.'"
      ]
    });
    const networkStatusStream = this._serviceProvider.services.NetworkService.queryStatus(void 0, {
      timeout: import_chunk_P7Y3AD6I.RPC_TIMEOUT
    });
    networkStatusStream.subscribe((networkStatus) => {
      this._networkStatusUpdated.emit(networkStatus);
    });
    this._ctx.onDispose(() => networkStatusStream.close());
    import_log.log.trace("dxos.sdk.mesh-proxy.open", import_protocols.trace.end({
      id: this._instanceId
    }), {
      F: __dxlog_file,
      L: 69,
      S: this,
      C: (f, a) => f(...a)
    });
  }
  /**
  * @internal
  */
  async _close() {
    await this._ctx?.dispose();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MeshProxy
});
//# sourceMappingURL=mesh-proxy-KXJSGRHB.cjs.map
