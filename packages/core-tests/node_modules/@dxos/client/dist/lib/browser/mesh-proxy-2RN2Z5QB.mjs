import {
  RPC_TIMEOUT
} from "./chunk-UFEX2AOY.mjs";

// packages/sdk/client/src/mesh/mesh-proxy.ts
import { Event, MulticastObservable } from "@dxos/async";
import { Context } from "@dxos/context";
import { invariant } from "@dxos/invariant";
import { PublicKey } from "@dxos/keys";
import { log } from "@dxos/log";
import { trace } from "@dxos/protocols";
import { ConnectionState } from "@dxos/protocols/proto/dxos/client/services";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/mesh/mesh-proxy.ts";
var MeshProxy = class {
  constructor(_serviceProvider, _traceParent) {
    this._serviceProvider = _serviceProvider;
    this._traceParent = _traceParent;
    this._networkStatusUpdated = new Event();
    this._networkStatus = MulticastObservable.from(this._networkStatusUpdated, {
      swarm: ConnectionState.OFFLINE,
      signaling: []
    });
    this._instanceId = PublicKey.random().toHex();
  }
  toJSON() {
    return {
      networkStatus: this._networkStatus.get()
    };
  }
  get networkStatus() {
    return this._networkStatus;
  }
  async updateConfig(swarm) {
    invariant(this._serviceProvider.services.NetworkService, "NetworkService is not available.", {
      F: __dxlog_file,
      L: 49,
      S: this,
      A: [
        "this._serviceProvider.services.NetworkService",
        "'NetworkService is not available.'"
      ]
    });
    return this._serviceProvider.services.NetworkService.updateConfig({
      swarm
    }, {
      timeout: RPC_TIMEOUT
    });
  }
  /**
  * @internal
  */
  async _open() {
    log.trace("dxos.sdk.mesh-proxy.open", trace.begin({
      id: this._instanceId,
      parentId: this._traceParent
    }), {
      F: __dxlog_file,
      L: 57,
      S: this,
      C: (f, a) => f(...a)
    });
    this._ctx = new Context({
      onError: (err) => log.catch(err, void 0, {
        F: __dxlog_file,
        L: 58,
        S: this,
        C: (f, a) => f(...a)
      })
    }, {
      F: __dxlog_file,
      L: 58
    });
    invariant(this._serviceProvider.services.NetworkService, "NetworkService is not available.", {
      F: __dxlog_file,
      L: 60,
      S: this,
      A: [
        "this._serviceProvider.services.NetworkService",
        "'NetworkService is not available.'"
      ]
    });
    const networkStatusStream = this._serviceProvider.services.NetworkService.queryStatus(void 0, {
      timeout: RPC_TIMEOUT
    });
    networkStatusStream.subscribe((networkStatus) => {
      this._networkStatusUpdated.emit(networkStatus);
    });
    this._ctx.onDispose(() => networkStatusStream.close());
    log.trace("dxos.sdk.mesh-proxy.open", trace.end({
      id: this._instanceId
    }), {
      F: __dxlog_file,
      L: 69,
      S: this,
      C: (f, a) => f(...a)
    });
  }
  /**
  * @internal
  */
  async _close() {
    await this._ctx?.dispose();
  }
};
export {
  MeshProxy
};
//# sourceMappingURL=mesh-proxy-2RN2Z5QB.mjs.map
