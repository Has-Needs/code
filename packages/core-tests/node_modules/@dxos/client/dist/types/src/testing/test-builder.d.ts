import { type ExpectStatic } from 'vitest';
import { ClientServicesHost, type ServiceContextRuntimeParams } from '@dxos/client-services';
import { Config } from '@dxos/config';
import { Context } from '@dxos/context';
import { type PublicKey } from '@dxos/keys';
import { type LevelDB } from '@dxos/kv-store';
import { MemorySignalManagerContext } from '@dxos/messaging';
import { TransportKind } from '@dxos/network-manager';
import { type Storage } from '@dxos/random-access-storage';
import { type ProtoRpcPeer } from '@dxos/rpc';
import { Client } from '../client';
import { type EchoDatabase } from '../echo';
import { LocalClientServices } from '../services';
export declare const testConfigWithLocalSignal: Config;
/**
 * Client builder supports different configurations, incl. signaling, transports, storage.
 */
export declare class TestBuilder {
    signalManagerContext: MemorySignalManagerContext;
    private readonly _ctx;
    config: Config;
    storage?: () => Storage;
    level?: () => LevelDB;
    _transport: TransportKind;
    constructor(config?: Config, signalManagerContext?: MemorySignalManagerContext, transport?: TransportKind);
    get ctx(): Context;
    destroy(): Promise<void>;
    /**
     * Create backend service handlers.
     */
    createClientServicesHost(runtimeParams?: ServiceContextRuntimeParams): ClientServicesHost;
    /**
     * Create local services host.
     * @param options - fastPeerPresenceUpdate: enable for faster space-member online/offline status changes.
     */
    createLocalClientServices(options?: {
        fastPeerPresenceUpdate?: boolean;
    }): LocalClientServices;
    /**
     * Create client/server.
     */
    createClientServer(host?: ClientServicesHost): [Client, ProtoRpcPeer<{}>];
    /**
     * Get network manager using local shared memory or remote signal manager.
     */
    private get networking();
}
export declare const testSpaceAutomerge: (expect: ExpectStatic, createDb: EchoDatabase, checkDb?: EchoDatabase) => Promise<{
    objectId: string;
}>;
export declare const syncItemsAutomerge: (expect: ExpectStatic, db1: EchoDatabase, db2: EchoDatabase) => Promise<void>;
/**
 * @deprecated use `@dxos/client-services/testing` `performInvitation` instead.
 */
export declare const joinCommonSpace: ([initialPeer, ...peers]: Client[], spaceKey?: PublicKey) => Promise<PublicKey>;
//# sourceMappingURL=test-builder.d.ts.map