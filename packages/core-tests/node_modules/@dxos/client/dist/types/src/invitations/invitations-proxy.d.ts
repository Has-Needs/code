import { MulticastObservable } from '@dxos/async';
import { AuthenticatingInvitation, CancellableInvitation, type Invitations } from '@dxos/client-protocol';
import { Invitation, type IdentityService, type InvitationsService } from '@dxos/protocols/proto/dxos/client/services';
import { type DeviceProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
export declare class InvitationsProxy implements Invitations {
    private readonly _invitationsService;
    private readonly _identityService;
    private readonly _getInvitationContext;
    private _ctx;
    private _createdUpdate;
    private _acceptedUpdate;
    private _savedUpdate;
    private _created;
    private _accepted;
    private _saved;
    private _invitations;
    private _invitationsLoaded;
    private _opened;
    constructor(_invitationsService: InvitationsService, _identityService: IdentityService | undefined, _getInvitationContext: () => Partial<Invitation> & Pick<Invitation, 'kind'>);
    get created(): MulticastObservable<CancellableInvitation[]>;
    get accepted(): MulticastObservable<AuthenticatingInvitation[]>;
    /**
     * @test-only
     */
    get saved(): MulticastObservable<Invitation[]>;
    get isOpen(): boolean;
    open(): Promise<void>;
    close(): Promise<void>;
    getInvitationOptions(): Invitation;
    share(options?: Partial<Invitation>): CancellableInvitation;
    join(invitation: Invitation | string, deviceProfile?: DeviceProfileDocument): AuthenticatingInvitation;
    private _matchesInvitationContext;
}
//# sourceMappingURL=invitations-proxy.d.ts.map