import { inspect } from 'node:util';
import { MulticastObservable } from '@dxos/async';
import { PropertiesType, type ClientServicesProvider, type Echo, type Space } from '@dxos/client-protocol';
import { type Config } from '@dxos/config';
import { type EchoClient, type QueryFn } from '@dxos/echo-db';
import { PublicKey, SpaceId } from '@dxos/keys';
import { Invitation } from '@dxos/protocols/proto/dxos/client/services';
import { type IndexConfig } from '@dxos/protocols/proto/dxos/echo/indexing';
import { type HaloProxy } from '../halo/halo-proxy';
export declare class SpaceList extends MulticastObservable<Space[]> implements Echo {
    private readonly _config;
    private readonly _serviceProvider;
    private readonly _echoClient;
    private readonly _halo;
    private _ctx;
    private _invitationProxy?;
    private _defaultSpaceId?;
    private readonly _defaultSpaceAvailable;
    private readonly _isReady;
    private readonly _spacesStream;
    private readonly _spaceCreated;
    private readonly _instanceId;
    private get _isReadyState();
    constructor(_config: Config | undefined, _serviceProvider: ClientServicesProvider, _echoClient: EchoClient, _halo: HaloProxy, 
    /**
     * @internal
     */
    _traceParent?: string | undefined);
    [inspect.custom](): string;
    get echoClient(): EchoClient;
    toJSON(): {
        spaces: number | undefined;
    };
    private _updateAndOpenDefaultSpace;
    private _openSpaceAsync;
    private _shouldOpenSpace;
    setConfig(config: IndexConfig): Promise<void>;
    get isReady(): MulticastObservable<boolean>;
    waitUntilReady(): Promise<void>;
    get(): Space[];
    get(spaceIdOrKey: SpaceId | PublicKey): Space | undefined;
    private get _spaces();
    get default(): Space;
    create(meta?: PropertiesType): Promise<Space>;
    join(invitation: Invitation | string): import("@dxos/client-protocol").AuthenticatingInvitation;
    joinBySpaceKey(spaceKey: PublicKey): Promise<Space>;
    /**
     * Query all spaces.
     */
    query: QueryFn;
    private _query;
    private _findProxy;
}
//# sourceMappingURL=space-list.d.ts.map