import { Event } from '@dxos/async';
import { type ClientServices, type ClientServicesProvider } from '@dxos/client-protocol';
import { type ClientServicesHost, type ClientServicesHostParams } from '@dxos/client-services';
import { Config } from '@dxos/config';
import { type ServiceBundle } from '@dxos/rpc';
/**
 * Creates stand-alone services without rpc.
 */
export declare const fromHost: (config?: Config, params?: ClientServicesHostParams, observabilityGroup?: string, signalTelemetryEnabled?: boolean) => Promise<ClientServicesProvider>;
/**
 * Starts a local instance of the service host.
 */
export declare class LocalClientServices implements ClientServicesProvider {
    readonly closed: Event<Error | undefined>;
    private readonly _ctx;
    private readonly _params;
    private _host?;
    signalMetadataTags: any;
    private _isOpen;
    constructor(params: ClientServicesHostParams);
    get descriptors(): ServiceBundle<ClientServices>;
    get services(): Partial<ClientServices>;
    get host(): ClientServicesHost | undefined;
    open(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=local-client-services.d.ts.map