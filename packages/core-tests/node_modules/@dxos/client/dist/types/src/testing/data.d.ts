import { Schema } from 'effect';
import { Expando } from '@dxos/echo-schema';
declare const TextV0Type_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    content: typeof Schema.String;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    content: typeof Schema.String;
}>>;
/** @deprecated */
export declare class TextV0Type extends TextV0Type_base {
}
declare const DocumentType_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    title: Schema.optional<typeof Schema.String>;
    content: import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
        content: typeof Schema.String;
    }, import("@dxos/echo-schema").TypedObjectOptions>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    title: Schema.optional<typeof Schema.String>;
    content: import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
        content: typeof Schema.String;
    }, import("@dxos/echo-schema").TypedObjectOptions>>;
}>>;
/** @deprecated */
export declare class DocumentType extends DocumentType_base {
}
declare const ContactType_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    name: Schema.optional<typeof Schema.String>;
    identifiers: Schema.mutable<Schema.Array$<Schema.Struct<{
        type: typeof Schema.String;
        value: typeof Schema.String;
    }>>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    name: Schema.optional<typeof Schema.String>;
    identifiers: Schema.mutable<Schema.Array$<Schema.Struct<{
        type: typeof Schema.String;
        value: typeof Schema.String;
    }>>>;
}>>;
/** @deprecated */
export declare class ContactType extends ContactType_base {
}
/** @deprecated */
declare const BlockSchema: Schema.Struct<{
    timestamp: typeof Schema.String;
    content: Schema.optional<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
        content: typeof Schema.String;
    }, import("@dxos/echo-schema").TypedObjectOptions>>>;
    object: Schema.optional<import("@dxos/echo-schema").Ref$<Expando>>;
}>;
/** @deprecated */
export interface BlockType extends Schema.Schema.Type<typeof BlockSchema> {
}
/** @deprecated */
export declare const BlockType: Schema.Schema<BlockType, Schema.Schema.Encoded<typeof BlockSchema>>;
declare const MessageType_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    type: Schema.optional<typeof Schema.String>;
    date: Schema.optional<typeof Schema.String>;
    subject: Schema.optional<typeof Schema.String>;
    blocks: Schema.mutable<Schema.Array$<Schema.Struct<{
        timestamp: typeof Schema.String;
        content: Schema.optional<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
            content: typeof Schema.String;
        }, import("@dxos/echo-schema").TypedObjectOptions>>>;
        object: Schema.optional<import("@dxos/echo-schema").Ref$<Expando>>;
    }>>>;
    links: Schema.optional<Schema.Array$<import("@dxos/echo-schema").Ref$<Expando>>>;
    read: Schema.optional<typeof Schema.Boolean>;
    context: Schema.optional<Schema.Struct<{
        space: Schema.optional<typeof Schema.String>;
        schema: Schema.optional<typeof Schema.String>;
        object: Schema.optional<typeof Schema.String>;
    }>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    type: Schema.optional<typeof Schema.String>;
    date: Schema.optional<typeof Schema.String>;
    subject: Schema.optional<typeof Schema.String>;
    blocks: Schema.mutable<Schema.Array$<Schema.Struct<{
        timestamp: typeof Schema.String;
        content: Schema.optional<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
            content: typeof Schema.String;
        }, import("@dxos/echo-schema").TypedObjectOptions>>>;
        object: Schema.optional<import("@dxos/echo-schema").Ref$<Expando>>;
    }>>>;
    links: Schema.optional<Schema.Array$<import("@dxos/echo-schema").Ref$<Expando>>>;
    read: Schema.optional<typeof Schema.Boolean>;
    context: Schema.optional<Schema.Struct<{
        space: Schema.optional<typeof Schema.String>;
        schema: Schema.optional<typeof Schema.String>;
        object: Schema.optional<typeof Schema.String>;
    }>>;
}>>;
/** @deprecated */
export declare class MessageType extends MessageType_base {
}
declare const ThreadType_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    title: Schema.optional<typeof Schema.String>;
    messages: Schema.mutable<Schema.Array$<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
        type: Schema.optional<typeof Schema.String>;
        date: Schema.optional<typeof Schema.String>;
        subject: Schema.optional<typeof Schema.String>;
        blocks: Schema.mutable<Schema.Array$<Schema.Struct<{
            timestamp: typeof Schema.String;
            content: Schema.optional<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
                content: typeof Schema.String;
            }, import("@dxos/echo-schema").TypedObjectOptions>>>;
            object: Schema.optional<import("@dxos/echo-schema").Ref$<Expando>>;
        }>>>;
        links: Schema.optional<Schema.Array$<import("@dxos/echo-schema").Ref$<Expando>>>;
        read: Schema.optional<typeof Schema.Boolean>;
        context: Schema.optional<Schema.Struct<{
            space: Schema.optional<typeof Schema.String>;
            schema: Schema.optional<typeof Schema.String>;
            object: Schema.optional<typeof Schema.String>;
        }>>;
    }, import("@dxos/echo-schema").TypedObjectOptions>>>>;
    context: Schema.optional<Schema.Struct<{
        space: Schema.optional<typeof Schema.String>;
        schema: Schema.optional<typeof Schema.String>;
        object: Schema.optional<typeof Schema.String>;
    }>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    title: Schema.optional<typeof Schema.String>;
    messages: Schema.mutable<Schema.Array$<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
        type: Schema.optional<typeof Schema.String>;
        date: Schema.optional<typeof Schema.String>;
        subject: Schema.optional<typeof Schema.String>;
        blocks: Schema.mutable<Schema.Array$<Schema.Struct<{
            timestamp: typeof Schema.String;
            content: Schema.optional<import("@dxos/echo-schema").Ref$<import("@dxos/echo-schema").TypedObjectFields<{
                content: typeof Schema.String;
            }, import("@dxos/echo-schema").TypedObjectOptions>>>;
            object: Schema.optional<import("@dxos/echo-schema").Ref$<Expando>>;
        }>>>;
        links: Schema.optional<Schema.Array$<import("@dxos/echo-schema").Ref$<Expando>>>;
        read: Schema.optional<typeof Schema.Boolean>;
        context: Schema.optional<Schema.Struct<{
            space: Schema.optional<typeof Schema.String>;
            schema: Schema.optional<typeof Schema.String>;
            object: Schema.optional<typeof Schema.String>;
        }>>;
    }, import("@dxos/echo-schema").TypedObjectOptions>>>>;
    context: Schema.optional<Schema.Struct<{
        space: Schema.optional<typeof Schema.String>;
        schema: Schema.optional<typeof Schema.String>;
        object: Schema.optional<typeof Schema.String>;
    }>>;
}>>;
/** @deprecated */
export declare class ThreadType extends ThreadType_base {
}
export {};
//# sourceMappingURL=data.d.ts.map