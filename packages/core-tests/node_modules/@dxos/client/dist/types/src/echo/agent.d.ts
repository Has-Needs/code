import { Event } from '@dxos/async';
import { type Space } from '@dxos/client-protocol';
import { type QueryResultEntry, type QuerySource, type QuerySourceProvider } from '@dxos/echo-db';
import type { QueryAST } from '@dxos/echo-protocol';
import { type QueryResponse } from '@dxos/protocols/proto/dxos/echo/query';
export declare class AgentQuerySourceProvider implements QuerySourceProvider {
    private readonly _space;
    private readonly _responsePromises;
    private _unsubscribe?;
    /**
     * Constructor.
     * @param _space Space instance that will be used for messaging with the agent through the gossip protocol.
     */
    constructor(_space: Space);
    open(): Promise<void>;
    close(): Promise<void>;
    private _sendRequest;
    private _handleMessage;
    create(): AgentQuerySource;
}
export declare class AgentQuerySource implements QuerySource {
    private readonly _params;
    private _results?;
    private _cancelPreviousRequest?;
    readonly changed: Event<void>;
    constructor(_params: {
        sendRequest: (query: QueryAST.Query) => {
            response: Promise<QueryResponse>;
            cancelRequest: () => void;
        };
    });
    open(): void;
    close(): void;
    getResults(): QueryResultEntry[];
    run(): Promise<QueryResultEntry[]>;
    update(query: QueryAST.Query): void;
}
//# sourceMappingURL=agent.d.ts.map