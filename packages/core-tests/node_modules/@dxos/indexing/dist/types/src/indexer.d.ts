import { Event } from '@dxos/async';
import { type Context, Resource } from '@dxos/context';
import { type LevelDB } from '@dxos/kv-store';
import { type IndexConfig } from '@dxos/protocols/proto/dxos/echo/indexing';
import { type IndexMetadataStore, type IndexStore } from './store';
import { type FindResult, type IdToHeads, type IndexQuery, type ObjectSnapshot } from './types';
export type IndexerParams = {
    db: LevelDB;
    metadataStore: IndexMetadataStore;
    indexStore: IndexStore;
    /**
     * Load documents by their pointers at specific hash.
     */
    loadDocuments: (ids: IdToHeads) => AsyncGenerator<ObjectSnapshot[]>;
    /**
     * Amount of documents processed in a batch to save indexes after.
     */
    indexUpdateBatchSize?: number;
    /**
     * Minimum time between indexing runs.
     */
    indexCooldownTime?: number;
    /**
     * Time budget for indexing run.
     * Does not cover creating new indexes.
     */
    indexTimeBudget?: number;
};
export declare class Indexer extends Resource {
    readonly updated: Event<void>;
    private readonly _db;
    private readonly _metadataStore;
    private readonly _engine;
    private readonly _indexUpdateBatchSize;
    private readonly _indexCooldownTime;
    private readonly _indexTimeBudget;
    private _indexConfig?;
    private _lastRunFinishedAt;
    private _run;
    constructor({ db, metadataStore, indexStore, loadDocuments, indexUpdateBatchSize, indexCooldownTime, indexTimeBudget, }: IndexerParams);
    get initialized(): boolean;
    setConfig(config: IndexConfig): Promise<void>;
    protected _open(ctx: Context): Promise<void>;
    protected _close(ctx: Context): Promise<void>;
    protected _catch(err: Error): Promise<void>;
    execQuery(filter: IndexQuery): Promise<FindResult[]>;
    reindex(idToHeads: IdToHeads): Promise<void>;
    /**
     * Perform any pending index updates.
     */
    updateIndexes(): Promise<void>;
    private _loadIndexes;
    private _promoteNewIndexes;
    private _indexUpdatedObjects;
}
//# sourceMappingURL=indexer.d.ts.map