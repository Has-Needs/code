import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type ObjectStructure } from '@dxos/echo-protocol';
import type { ObjectPointerEncoded } from '@dxos/protocols';
import { IndexKind } from '@dxos/protocols/proto/dxos/echo/indexing';
import { type IndexQuery, type Index, type LoadParams, type FindResult } from '../types';
export declare class IndexText extends Resource implements Index {
    private _identifier;
    readonly kind: IndexKind;
    readonly updated: Event<void>;
    private _orama?;
    _open(): Promise<void>;
    get identifier(): string;
    update(id: ObjectPointerEncoded, object: Partial<ObjectStructure>): Promise<boolean>;
    remove(id: ObjectPointerEncoded): Promise<void>;
    find(filter: IndexQuery): Promise<FindResult[]>;
    serialize(): Promise<string>;
    static load({ serialized, identifier }: LoadParams): Promise<IndexText>;
}
//# sourceMappingURL=index-text.d.ts.map