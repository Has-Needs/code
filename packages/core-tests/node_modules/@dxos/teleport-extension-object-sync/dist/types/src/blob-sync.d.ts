import { Context } from '@dxos/context';
import { type BlobStore } from './blob-store';
import { BlobSyncExtension } from './blob-sync-extension';
export type BlobSyncParams = {
    blobStore: BlobStore;
};
export declare class BlobSync {
    private readonly _params;
    private readonly _ctx;
    private readonly _mutex;
    private readonly _downloadRequests;
    private readonly _extensions;
    constructor(_params: BlobSyncParams);
    open(): Promise<void>;
    close(): Promise<void>;
    /**
     * Resolves when the object with the given id is fully downloaded in the blob store.
     *
     * @param id hex-encoded id of the object to download.
     */
    download(ctx: Context, id: Uint8Array): Promise<void>;
    createExtension(): BlobSyncExtension;
    /**
     * Notify extensions that a blob with the given id was added to the blob store.
     */
    notifyBlobAdded(_id: Uint8Array): Promise<void>;
    private _getWantList;
    private _reconcileUploads;
    private _updateExtensionsWantList;
}
//# sourceMappingURL=blob-sync.d.ts.map