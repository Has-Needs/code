import { type PushStream, type Trigger } from '@dxos/async';
import { type Context } from '@dxos/context';
import { type AdmissionKeypair, Invitation } from '@dxos/protocols/proto/dxos/client/services';
import { type DeviceProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type TeleportParams } from '@dxos/teleport';
import { type EdgeInvitationConfig } from './edge-invitation-handler';
import { type InvitationProtocol } from './invitation-protocol';
export type InvitationConnectionParams = {
    teleport: Partial<TeleportParams>;
    edgeInvitations?: EdgeInvitationConfig;
};
/**
 * Generic handler for Halo and Space invitations.
 * Handles the life-cycle of invitations between peers.
 *
 * Host
 * - Creates an invitation containing a swarm topic (which can be shared via a URL, QR code, or direct message).
 * - Joins the swarm with the topic and waits for guest's introduction.
 * - Wait for guest to authenticate with challenge specified in the invitation.
 * - Waits for guest to present credentials (containing local device and feed keys).
 * - Writes credentials to control feed then exits or waits for more guests (multi use invitations).
 *
 * Guest
 * - Joins the swarm with the topic.
 * - Sends an introduction.
 * - Submits the challenge.
 * - If Space handler then creates a local cloned space (with genesis block).
 * - Sends admission credentials.
 *  ```
 *  [Guest]                                          [Host]
 *   |------------------------------------Introduce-->|
 *   |-------------------------------[Authenticate]-->|
 *   |----------------------------------------Admit-->|
 *  ```
 *
 *  TODO: consider refactoring using xstate making the logic separation more explicit:
 *  TODO: the flow logic should either be contained in invitations-handler or in extensions, not be split across
 *  TODO: potentially re-evaluate host-side API to allow multiple concurrent connection, so that mutex can be removed
 */
export declare class InvitationsHandler {
    private readonly _networkManager;
    private readonly _edgeClient?;
    private readonly _connectionParams?;
    handleInvitationFlow(ctx: Context, stream: PushStream<Invitation>, protocol: InvitationProtocol, invitation: Invitation): void;
    acceptInvitation(ctx: Context, stream: PushStream<Invitation>, protocol: InvitationProtocol, invitation: Invitation, otpEnteredTrigger: Trigger<string>, deviceProfile?: DeviceProfileDocument): void;
    private _joinSwarm;
    private _handleGuestOtpAuth;
    private _handleGuestKpkAuth;
}
export declare const createAdmissionKeypair: () => AdmissionKeypair;
//# sourceMappingURL=invitations-handler.d.ts.map