import { type Context, Resource } from '@dxos/context';
import { type CredentialProcessor } from '@dxos/credentials';
import { type EdgeHttpClient } from '@dxos/edge-client';
import { type FeedWriter } from '@dxos/feed-store';
import { type SpaceId } from '@dxos/keys';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type NotarizationService, type NotarizeRequest } from '@dxos/protocols/proto/dxos/mesh/teleport/notarization';
import { type ExtensionContext, RpcExtension } from '@dxos/teleport';
export type NotarizationPluginParams = {
    spaceId: SpaceId;
    edgeClient?: EdgeHttpClient;
    edgeFeatures?: Runtime.Client.EdgeFeatures;
    activeEdgePollingInterval?: number;
};
export type NotarizeParams = {
    /**
     * For cancellation.
     */
    ctx?: Context;
    /**
     * Credentials to notarize.
     */
    credentials: Credential[];
    /**
     * Timeout for the whole notarization process.
     * Set to 0 to disable.
     * @default {@link DEFAULT_NOTARIZE_TIMEOUT}
     */
    timeout?: number;
    /**
     * Retry timeout.
     * @default {@link DEFAULT_RETRY_TIMEOUT}
     */
    retryTimeout?: number;
    /**
     * Minimum wait time after a peer confirms successful notarization before attempting with a new peer.
     * This is to avoid spamming peers with notarization requests.
     * @default {@link DEFAULT_SUCCESS_DELAY}
     */
    successDelay?: number;
    /**
     * A random amount of time before making or retrying an edge request to help prevent large bursts of requests.
     */
    edgeRetryJitter?: number;
};
/**
 * See NotarizationService proto.
 */
export declare class NotarizationPlugin extends Resource implements CredentialProcessor {
    private readonly _extensionOpened;
    private _writer;
    private readonly _extensions;
    private readonly _processedCredentials;
    private readonly _processCredentialsTriggers;
    private _activeEdgePollingIntervalHandle;
    private readonly _activeEdgePollingInterval;
    private _activeEdgePollingEnabled;
    private readonly _spaceId;
    private readonly _edgeClient;
    constructor(params: NotarizationPluginParams);
    setActiveEdgePollingEnabled(enabled: boolean): void;
    get hasWriter(): boolean;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    /**
     * Request credentials to be notarized.
     */
    notarize({ ctx: opCtx, credentials, timeout, retryTimeout, successDelay, edgeRetryJitter, }: NotarizeParams): Promise<void>;
    private _tryNotarizeCredentialsWithPeers;
    private _tryNotarizeCredentialsWithEdge;
    /**
     * Called with credentials arriving from the control pipeline.
     */
    processCredential(credential: Credential): Promise<void>;
    setWriter(writer: FeedWriter<Credential>): void;
    private _startPeriodicEdgePolling;
    private _stopPeriodicEdgePolling;
    /**
     * The method is used only for adding agent feeds to spaces.
     * When an agent is created we can admit them into all the existing spaces. In case the operation fails
     * this method will fix it on the next space open.
     * Given how rarely this happens there's no need to poll the endpoint.
     */
    private _notarizePendingEdgeCredentials;
    private _waitUntilProcessed;
    /**
     * Requests from other peers to notarize credentials.
     */
    private _onNotarize;
    private _notarizeCredentials;
    createExtension(): NotarizationTeleportExtension;
    private _scheduleTimeout;
}
export type NotarizationTeleportExtensionParams = {
    onOpen: () => Promise<void>;
    onClose: () => Promise<void>;
    onNotarize: (request: NotarizeRequest) => Promise<void>;
};
export declare class NotarizationTeleportExtension extends RpcExtension<Services, Services> {
    private readonly _params;
    constructor(_params: NotarizationTeleportExtensionParams);
    protected getHandlers(): Promise<Services>;
    onOpen(ctx: ExtensionContext): Promise<void>;
    onClose(err?: Error | undefined): Promise<void>;
}
type Services = {
    NotarizationService: NotarizationService;
};
export {};
//# sourceMappingURL=notarization-plugin.d.ts.map