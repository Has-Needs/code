import { type ClientServices } from '@dxos/client-protocol';
import { type Config, type ConfigProto } from '@dxos/config';
import { type PublicKey } from '@dxos/keys';
import { SpaceMember, type Device, type Identity, type LogEntry, type Metrics, type NetworkStatus, type Platform, type Space as SpaceProto } from '@dxos/protocols/proto/dxos/client/services';
import { type SubscribeToFeedsResponse } from '@dxos/protocols/proto/dxos/devtools/host';
import { type SwarmInfo } from '@dxos/protocols/proto/dxos/devtools/swarm';
import { type Epoch } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Resource, type Span } from '@dxos/protocols/proto/dxos/tracing';
import { type ServiceContext } from '../services';
export type Diagnostics = {
    client: {
        config: ConfigProto;
        trace: TraceDiagnostic;
    };
    services: {
        trace: TraceDiagnostic;
        created: string;
        platform: Platform;
        config?: ConfigProto;
        client: {
            version: string;
            storage: {
                version: number;
            };
        };
        identity?: Identity;
        devices?: Device[];
        spaces?: SpaceStats[];
        networkStatus?: NetworkStatus;
        swarms?: SwarmInfo[];
        feeds?: Partial<SubscribeToFeedsResponse.Feed>[];
        metrics?: Metrics;
        storage?: {
            file: string;
            count: number;
        }[];
    };
};
export type TraceDiagnostic = {
    resources: Record<string, Resource>;
    spans: Span[];
    logs: LogEntry[];
};
export type SpaceStats = {
    key: PublicKey;
    properties?: {
        name: string;
    };
    db?: {
        objects: number;
    };
    metrics?: SpaceProto.Metrics & {
        startupTime?: number;
    };
    epochs?: (Epoch & {
        id?: PublicKey;
    })[];
    members?: SpaceMember[];
    pipeline?: SpaceProto.PipelineState;
};
/**
 * Create diagnostics to provide snapshot of current system state.
 */
export declare const createDiagnostics: (clientServices: Partial<ClientServices>, serviceContext: ServiceContext, config: Config) => Promise<Diagnostics["services"]>;
//# sourceMappingURL=diagnostics.d.ts.map