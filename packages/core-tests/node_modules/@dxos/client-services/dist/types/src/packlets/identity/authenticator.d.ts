import { type Event } from '@dxos/async';
import { type CredentialSigner } from '@dxos/credentials';
import { type AuthProvider, type AuthVerifier } from '@dxos/echo-pipeline';
import { type PublicKey } from '@dxos/keys';
import { type ComplexSet } from '@dxos/util';
export declare const createAuthProvider: (signer: CredentialSigner) => AuthProvider;
export type TrustedKeySetAuthVerifierParams = {
    trustedKeysProvider: () => ComplexSet<PublicKey>;
    update: Event<void>;
    /**
     * Timeout to wait for the device key to be added to the trusted set.
     */
    authTimeout: number;
};
/**
 * Verifies credentials of another member in the space based on a set of trusted key.
 * Will wait up to `authTimeout` for the key to be added to the trusted set.
 */
export declare class TrustedKeySetAuthVerifier {
    private readonly _params;
    private _ctx;
    constructor(_params: TrustedKeySetAuthVerifierParams);
    close(): Promise<void>;
    get verifier(): AuthVerifier;
    private _isTrustedKey;
}
//# sourceMappingURL=authenticator.d.ts.map