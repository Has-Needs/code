import { type ClientServices } from '@dxos/client-protocol';
import { type Config } from '@dxos/config';
import { Context } from '@dxos/context';
import { type LevelDB } from '@dxos/kv-store';
import { type SignalManager } from '@dxos/messaging';
import { type TransportFactory } from '@dxos/network-manager';
import { type Storage } from '@dxos/random-access-storage';
import { ServiceContext, type ServiceContextRuntimeParams } from './service-context';
import { ServiceRegistry } from './service-registry';
export type ClientServicesHostParams = {
    /**
     * Can be omitted if `initialize` is later called.
     */
    config?: Config;
    transportFactory?: TransportFactory;
    signalManager?: SignalManager;
    connectionLog?: boolean;
    storage?: Storage;
    level?: LevelDB;
    lockKey?: string;
    callbacks?: ClientServicesHostCallbacks;
    runtimeParams?: ServiceContextRuntimeParams;
};
export type ClientServicesHostCallbacks = {
    onReset?: () => Promise<void>;
};
export type InitializeOptions = {
    config?: Config;
    transportFactory?: TransportFactory;
    signalManager?: SignalManager;
    connectionLog?: boolean;
};
/**
 * Remote service implementation.
 */
export declare class ClientServicesHost {
    private readonly _resourceLock?;
    private readonly _serviceRegistry;
    private readonly _systemService;
    private readonly _loggingService;
    private readonly _tracingService;
    private _config?;
    private readonly _statusUpdate;
    private _signalManager?;
    private _networkManager?;
    private _storage?;
    private _level?;
    private _callbacks?;
    private _devtoolsProxy?;
    private _edgeConnection?;
    private _edgeHttpClient?;
    private _serviceContext;
    private readonly _runtimeParams;
    private diagnosticsBroadcastHandler;
    private _opening;
    private _open;
    private _resetting;
    constructor({ config, transportFactory, signalManager, storage, level, lockKey, callbacks, runtimeParams, }?: ClientServicesHostParams);
    get isOpen(): boolean;
    get config(): Config | undefined;
    get context(): ServiceContext;
    get serviceRegistry(): ServiceRegistry<ClientServices>;
    get descriptors(): import("@dxos/rpc").ServiceBundle<ClientServices>;
    get services(): Partial<ClientServices>;
    /**
     * Initialize the service host with the config.
     * Config can also be provided in the constructor.
     * Can only be called once.
     */
    initialize({ config, ...options }: InitializeOptions): void;
    open(ctx: Context): Promise<void>;
    close(): Promise<void>;
    reset(): Promise<void>;
    private _createIdentity;
}
//# sourceMappingURL=service-host.d.ts.map