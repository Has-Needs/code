import { Event as AsyncEvent } from '@dxos/async';
import { Stream } from '@dxos/codec-protobuf/stream';
import { type Config } from '@dxos/config';
import { type ClearSnapshotsRequest, type DevtoolsHost, // TODO(burdon): Rename DevtoolsService
type EnableDebugLoggingRequest, type EnableDebugLoggingResponse, type Event, type GetConfigResponse, type GetNetworkPeersRequest, type GetNetworkPeersResponse, type GetSpaceSnapshotRequest, type GetSpaceSnapshotResponse, type ResetStorageRequest, type SaveSpaceSnapshotRequest, type SaveSpaceSnapshotResponse, type SubscribeToCredentialMessagesRequest, type SubscribeToCredentialMessagesResponse, type SubscribeToFeedBlocksRequest, type SubscribeToFeedBlocksResponse, type SubscribeToFeedsRequest, type SubscribeToFeedsResponse, type SubscribeToItemsRequest, type SubscribeToItemsResponse, type SubscribeToKeyringKeysRequest, type SubscribeToKeyringKeysResponse, type SubscribeToNetworkTopicsResponse, type SubscribeToSpacesRequest, type SubscribeToSpacesResponse, type SubscribeToSignalStatusResponse, type SignalResponse, type SubscribeToSwarmInfoResponse, type StorageInfo, type GetSnapshotsResponse, type SubscribeToMetadataResponse, type GetBlobsResponse } from '@dxos/protocols/proto/dxos/devtools/host';
import { type ServiceContext } from '../services';
export declare class DevtoolsHostEvents {
    readonly ready: AsyncEvent<void>;
}
export type DevtoolsServiceParams = {
    events: DevtoolsHostEvents;
    config: Config;
    context: ServiceContext;
};
/**
 * @deprecated
 */
export declare class DevtoolsServiceImpl implements DevtoolsHost {
    private readonly params;
    constructor(params: DevtoolsServiceParams);
    events(request: void): Stream<Event>;
    getConfig(request: void): Promise<GetConfigResponse>;
    getStorageInfo(): Promise<StorageInfo>;
    getBlobs(): Promise<GetBlobsResponse>;
    getSnapshots(): Promise<GetSnapshotsResponse>;
    resetStorage(request: ResetStorageRequest): Promise<void>;
    enableDebugLogging(request: EnableDebugLoggingRequest): Promise<EnableDebugLoggingResponse>;
    disableDebugLogging(request: EnableDebugLoggingRequest): Promise<EnableDebugLoggingResponse>;
    subscribeToKeyringKeys(request: SubscribeToKeyringKeysRequest): Stream<SubscribeToKeyringKeysResponse>;
    subscribeToCredentialMessages(request: SubscribeToCredentialMessagesRequest): Stream<SubscribeToCredentialMessagesResponse>;
    subscribeToSpaces(request: SubscribeToSpacesRequest): Stream<SubscribeToSpacesResponse>;
    subscribeToItems(request: SubscribeToItemsRequest): Stream<SubscribeToItemsResponse>;
    subscribeToFeeds(request: SubscribeToFeedsRequest): Stream<SubscribeToFeedsResponse>;
    subscribeToFeedBlocks(request: SubscribeToFeedBlocksRequest): Stream<SubscribeToFeedBlocksResponse>;
    getSpaceSnapshot(request: GetSpaceSnapshotRequest): Promise<GetSpaceSnapshotResponse>;
    saveSpaceSnapshot(request: SaveSpaceSnapshotRequest): Promise<SaveSpaceSnapshotResponse>;
    clearSnapshots(request: ClearSnapshotsRequest): Promise<void>;
    getNetworkPeers(request: GetNetworkPeersRequest): Promise<GetNetworkPeersResponse>;
    subscribeToNetworkTopics(request: void): Stream<SubscribeToNetworkTopicsResponse>;
    subscribeToSignalStatus(request: void): Stream<SubscribeToSignalStatusResponse>;
    subscribeToSignal(): Stream<SignalResponse>;
    subscribeToSwarmInfo(): Stream<SubscribeToSwarmInfoResponse>;
    subscribeToMetadata(): Stream<SubscribeToMetadataResponse>;
}
//# sourceMappingURL=devtools.d.ts.map