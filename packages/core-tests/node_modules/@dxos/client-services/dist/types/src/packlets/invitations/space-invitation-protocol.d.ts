import { type Keyring } from '@dxos/keyring';
import { type PublicKey } from '@dxos/keys';
import { AlreadyJoinedError, type ApiError, InvalidInvitationError } from '@dxos/protocols';
import { Invitation } from '@dxos/protocols/proto/dxos/client/services';
import { type ProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type AdmissionRequest, type AdmissionResponse, type IntroductionRequest } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type InvitationProtocol } from './invitation-protocol';
import { type DataSpaceManager, type SigningContext } from '../spaces';
export declare class SpaceInvitationProtocol implements InvitationProtocol {
    private readonly _spaceManager;
    private readonly _signingContext;
    private readonly _keyring;
    private readonly _spaceKey?;
    constructor(_spaceManager: DataSpaceManager, _signingContext: SigningContext, _keyring: Keyring, _spaceKey?: PublicKey | undefined);
    toJSON(): object;
    checkCanInviteNewMembers(): ApiError | undefined;
    getInvitationContext(): Partial<Invitation> & Pick<Invitation, 'kind'>;
    admit(invitation: Invitation, request: AdmissionRequest, guestProfile?: ProfileDocument | undefined): Promise<AdmissionResponse>;
    delegate(invitation: Invitation): Promise<PublicKey>;
    cancelDelegation(invitation: Invitation): Promise<void>;
    checkInvitation(invitation: Partial<Invitation>): InvalidInvitationError | AlreadyJoinedError | undefined;
    createIntroduction(): IntroductionRequest;
    createAdmissionRequest(): Promise<AdmissionRequest>;
    accept(response: AdmissionResponse): Promise<Partial<Invitation>>;
}
//# sourceMappingURL=space-invitation-protocol.d.ts.map