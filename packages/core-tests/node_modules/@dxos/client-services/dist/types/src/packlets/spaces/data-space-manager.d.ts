import { type AutomergeUrl, type DocumentId } from '@automerge/automerge-repo';
import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { type CredentialSigner } from '@dxos/credentials';
import { type EchoEdgeReplicator, type EchoHost, type MeshEchoReplicator, type MetadataStore, type SpaceManager } from '@dxos/echo-pipeline';
import type { EdgeConnection, EdgeHttpClient } from '@dxos/edge-client';
import { type FeedStore } from '@dxos/feed-store';
import { type Keyring } from '@dxos/keyring';
import { PublicKey, type SpaceId } from '@dxos/keys';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { EdgeReplicationSetting } from '@dxos/protocols/proto/dxos/echo/metadata';
import { SpaceMember, type Credential, type ProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Timeframe } from '@dxos/timeframe';
import { ComplexMap } from '@dxos/util';
import { DataSpace } from './data-space';
import { type InvitationsManager } from '../invitations';
export interface SigningContext {
    identityKey: PublicKey;
    deviceKey: PublicKey;
    credentialSigner: CredentialSigner;
    recordCredential: (credential: Credential) => Promise<void>;
    getProfile: () => ProfileDocument | undefined;
}
export type AcceptSpaceOptions = {
    spaceKey: PublicKey;
    genesisFeedKey: PublicKey;
    /**
     * Latest known timeframe for the control pipeline.
     * We will try to catch up to this timeframe before starting the data pipeline.
     */
    controlTimeframe?: Timeframe;
    /**
     * Latest known timeframe for the data pipeline.
     * We will try to catch up to this timeframe before initializing the database.
     */
    dataTimeframe?: Timeframe;
};
export type AdmitMemberOptions = {
    spaceKey: PublicKey;
    identityKey: PublicKey;
    role: SpaceMember.Role;
    profile?: ProfileDocument;
    delegationCredentialId?: PublicKey;
};
export type DataSpaceManagerParams = {
    spaceManager: SpaceManager;
    metadataStore: MetadataStore;
    keyring: Keyring;
    signingContext: SigningContext;
    feedStore: FeedStore<FeedMessage>;
    echoHost: EchoHost;
    invitationsManager: InvitationsManager;
    edgeConnection?: EdgeConnection;
    edgeHttpClient?: EdgeHttpClient;
    meshReplicator?: MeshEchoReplicator;
    echoEdgeReplicator?: EchoEdgeReplicator;
    runtimeParams?: DataSpaceManagerRuntimeParams;
    edgeFeatures?: Runtime.Client.EdgeFeatures;
};
export type DataSpaceManagerRuntimeParams = {
    spaceMemberPresenceAnnounceInterval?: number;
    spaceMemberPresenceOfflineTimeout?: number;
    activeEdgeNotarizationPollingInterval?: number;
    disableP2pReplication?: boolean;
};
export type CreateSpaceOptions = {
    rootUrl?: AutomergeUrl;
    documents?: Record<DocumentId, Uint8Array>;
};
export declare class DataSpaceManager extends Resource {
    readonly updated: Event<void>;
    private readonly _spaces;
    private readonly _instanceId;
    private readonly _spaceManager;
    private readonly _metadataStore;
    private readonly _keyring;
    private readonly _signingContext;
    private readonly _feedStore;
    private readonly _echoHost;
    private readonly _invitationsManager;
    private readonly _edgeConnection?;
    private readonly _edgeHttpClient?;
    private readonly _edgeFeatures?;
    private readonly _meshReplicator?;
    private readonly _echoEdgeReplicator?;
    private readonly _runtimeParams?;
    constructor(params: DataSpaceManagerParams);
    get spaces(): ComplexMap<PublicKey, DataSpace>;
    getSpaceById(spaceId: SpaceId): DataSpace | undefined;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    /**
     * Creates a new space writing the genesis credentials to the control feed.
     */
    createSpace(options?: CreateSpaceOptions): Promise<DataSpace>;
    isDefaultSpace(space: DataSpace): Promise<boolean>;
    createDefaultSpace(): Promise<DataSpace>;
    private _getSpaceRootDocument;
    acceptSpace(opts: AcceptSpaceOptions): Promise<DataSpace>;
    admitMember(options: AdmitMemberOptions): Promise<Credential>;
    /**
     * Wait until the space data pipeline is fully initialized.
     * Used by invitation handler.
     * TODO(dmaretskyi): Consider removing.
     */
    waitUntilSpaceReady(spaceKey: PublicKey): Promise<void>;
    requestSpaceAdmissionCredential(spaceKey: PublicKey): Promise<Credential>;
    setSpaceEdgeReplicationSetting(spaceKey: PublicKey, setting: EdgeReplicationSetting): Promise<void>;
    private _constructSpace;
    private _connectEchoMeshReplicator;
    private _handleMemberRoleChanges;
    private _handleNewPeerConnected;
    private _handleInvitationStatusChange;
    private _createDelegatedInvitations;
}
//# sourceMappingURL=data-space-manager.d.ts.map