import { type ProtoRpcPeerOptions } from '@dxos/rpc';
import { type ExtensionContext, type TeleportExtension } from './teleport';
export declare abstract class RpcExtension<Client, Server> implements TeleportExtension {
    private readonly _rpcParams;
    private _extensionContext;
    private _rpc?;
    private _isClosed;
    constructor(_rpcParams: Omit<ProtoRpcPeerOptions<Client, Server>, 'port' | 'handlers'>);
    get initiator(): boolean;
    get localPeerId(): import("@dxos/keys").PublicKey;
    get remotePeerId(): import("@dxos/keys").PublicKey;
    get rpc(): Client;
    protected abstract getHandlers(): Promise<Server>;
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(err?: Error | undefined): Promise<void>;
    onAbort(err?: Error | undefined): Promise<void>;
    close(): void;
}
//# sourceMappingURL=rpc-extension.d.ts.map