{
  "version": 3,
  "sources": ["../../../src/rpc-extension.ts"],
  "sourcesContent": ["//\n// Copyright 2022 DXOS.org\n//\n\nimport { invariant } from '@dxos/invariant';\nimport { createProtoRpcPeer, type ProtoRpcPeer, type ProtoRpcPeerOptions } from '@dxos/rpc';\n\nimport { type ExtensionContext, type TeleportExtension } from './teleport';\n\nexport abstract class RpcExtension<Client, Server> implements TeleportExtension {\n  // TODO(dmaretskyi): Type optionally.\n  private _extensionContext!: ExtensionContext;\n  private _rpc?: ProtoRpcPeer<Client>;\n\n  private _isClosed = false;\n\n  constructor(private readonly _rpcParams: Omit<ProtoRpcPeerOptions<Client, Server>, 'port' | 'handlers'>) {}\n\n  get initiator() {\n    return this._extensionContext?.initiator;\n  }\n\n  get localPeerId() {\n    return this._extensionContext?.localPeerId;\n  }\n\n  get remotePeerId() {\n    return this._extensionContext?.remotePeerId;\n  }\n\n  get rpc(): Client {\n    invariant(this._rpc);\n    return this._rpc.rpc;\n  }\n\n  protected abstract getHandlers(): Promise<Server>;\n\n  async onOpen(context: ExtensionContext): Promise<void> {\n    this._extensionContext = context;\n\n    const handlers = await this.getHandlers();\n\n    if (this._isClosed) {\n      return;\n    }\n\n    const port = await context.createPort('rpc', {\n      contentType: 'application/x-protobuf; messageType=\"dxos.rpc.Message\"',\n    });\n    this._rpc = createProtoRpcPeer({\n      ...this._rpcParams,\n      handlers,\n      port,\n    });\n\n    await this._rpc.open();\n  }\n\n  async onClose(err?: Error | undefined): Promise<void> {\n    this._isClosed = true;\n    await this._rpc?.close();\n  }\n\n  async onAbort(err?: Error | undefined): Promise<void> {\n    this._isClosed = true;\n    await this._rpc?.abort();\n  }\n\n  close(): void {\n    this._extensionContext?.close();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAIA,SAASA,iBAAiB;AAC1B,SAASC,0BAAuE;;AAIzE,IAAeC,eAAf,MAAeA;EAOpB,YAA6BC,YAA4E;SAA5EA,aAAAA;SAFrBC,YAAY;EAEsF;EAE1G,IAAIC,YAAY;AACd,WAAO,KAAKC,mBAAmBD;EACjC;EAEA,IAAIE,cAAc;AAChB,WAAO,KAAKD,mBAAmBC;EACjC;EAEA,IAAIC,eAAe;AACjB,WAAO,KAAKF,mBAAmBE;EACjC;EAEA,IAAIC,MAAc;AAChBT,cAAU,KAAKU,MAAI,QAAA;;;;;;;;;AACnB,WAAO,KAAKA,KAAKD;EACnB;EAIA,MAAME,OAAOC,SAA0C;AACrD,SAAKN,oBAAoBM;AAEzB,UAAMC,WAAW,MAAM,KAAKC,YAAW;AAEvC,QAAI,KAAKV,WAAW;AAClB;IACF;AAEA,UAAMW,OAAO,MAAMH,QAAQI,WAAW,OAAO;MAC3CC,aAAa;IACf,CAAA;AACA,SAAKP,OAAOT,mBAAmB;MAC7B,GAAG,KAAKE;MACRU;MACAE;IACF,CAAA;AAEA,UAAM,KAAKL,KAAKQ,KAAI;EACtB;EAEA,MAAMC,QAAQC,KAAwC;AACpD,SAAKhB,YAAY;AACjB,UAAM,KAAKM,MAAMW,MAAAA;EACnB;EAEA,MAAMC,QAAQF,KAAwC;AACpD,SAAKhB,YAAY;AACjB,UAAM,KAAKM,MAAMa,MAAAA;EACnB;EAEAF,QAAc;AACZ,SAAKf,mBAAmBe,MAAAA;EAC1B;AACF;",
  "names": ["invariant", "createProtoRpcPeer", "RpcExtension", "_rpcParams", "_isClosed", "initiator", "_extensionContext", "localPeerId", "remotePeerId", "rpc", "_rpc", "onOpen", "context", "handlers", "getHandlers", "port", "createPort", "contentType", "open", "onClose", "err", "close", "onAbort", "abort"]
}
