"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var node_exports = {};
__export(node_exports, {
  Framer: () => import_chunk_IL4CNIZ3.Framer,
  Muxer: () => import_chunk_IL4CNIZ3.Muxer,
  RpcExtension: () => RpcExtension,
  Teleport: () => import_chunk_IL4CNIZ3.Teleport,
  TestBuilder: () => import_chunk_IL4CNIZ3.TestBuilder,
  TestConnection: () => import_chunk_IL4CNIZ3.TestConnection,
  TestExtension: () => import_chunk_IL4CNIZ3.TestExtension,
  TestExtensionWithStreams: () => import_chunk_IL4CNIZ3.TestExtensionWithStreams,
  TestPeer: () => import_chunk_IL4CNIZ3.TestPeer,
  decodeFrame: () => import_chunk_IL4CNIZ3.decodeFrame,
  encodeFrame: () => import_chunk_IL4CNIZ3.encodeFrame
});
module.exports = __toCommonJS(node_exports);
var import_chunk_IL4CNIZ3 = require("./chunk-IL4CNIZ3.cjs");
var import_invariant = require("@dxos/invariant");
var import_rpc = require("@dxos/rpc");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/core/mesh/teleport/src/rpc-extension.ts";
var RpcExtension = class {
  constructor(_rpcParams) {
    this._rpcParams = _rpcParams;
    this._isClosed = false;
  }
  get initiator() {
    return this._extensionContext?.initiator;
  }
  get localPeerId() {
    return this._extensionContext?.localPeerId;
  }
  get remotePeerId() {
    return this._extensionContext?.remotePeerId;
  }
  get rpc() {
    (0, import_invariant.invariant)(this._rpc, void 0, {
      F: __dxlog_file,
      L: 32,
      S: this,
      A: [
        "this._rpc",
        ""
      ]
    });
    return this._rpc.rpc;
  }
  async onOpen(context) {
    this._extensionContext = context;
    const handlers = await this.getHandlers();
    if (this._isClosed) {
      return;
    }
    const port = await context.createPort("rpc", {
      contentType: 'application/x-protobuf; messageType="dxos.rpc.Message"'
    });
    this._rpc = (0, import_rpc.createProtoRpcPeer)({
      ...this._rpcParams,
      handlers,
      port
    });
    await this._rpc.open();
  }
  async onClose(err) {
    this._isClosed = true;
    await this._rpc?.close();
  }
  async onAbort(err) {
    this._isClosed = true;
    await this._rpc?.abort();
  }
  close() {
    this._extensionContext?.close();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Framer,
  Muxer,
  RpcExtension,
  Teleport,
  TestBuilder,
  TestConnection,
  TestExtension,
  TestExtensionWithStreams,
  TestPeer,
  decodeFrame,
  encodeFrame
});
//# sourceMappingURL=index.cjs.map
