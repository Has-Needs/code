import type { FileStat, RandomAccessStorage, RandomAccessStorageProperties } from 'random-access-storage';
import { type StorageType } from './storage';
/**
 * Random access file wrapper.
 * https://github.com/random-access-storage/random-access-storage
 */
export interface File extends RandomAccessStorageProperties {
    readonly destroyed: boolean;
    readonly directory: string;
    readonly filename: string;
    readonly type: StorageType;
    readonly native: RandomAccessStorage;
    write(offset: number, data: Buffer): Promise<void>;
    read(offset: number, size: number): Promise<Buffer>;
    del(offset: number, size: number): Promise<void>;
    stat(): Promise<FileStat>;
    close(): Promise<Error | void>;
    destroy(): Promise<Error | void>;
    /**
     * Save changes to disk.
     */
    flush?(): Promise<void>;
    truncate?(offset: number): Promise<void>;
    clone?(): RandomAccessStorage;
}
/**
 * Construct async File wrapper.
 * NOTE: This is safe since these are interface methods only (not used internally).
 */
export declare const wrapFile: (native: RandomAccessStorage, type: StorageType) => File;
//# sourceMappingURL=file.d.ts.map