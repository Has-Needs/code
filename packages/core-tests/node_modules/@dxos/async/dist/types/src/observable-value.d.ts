import { type CleanupFn } from './cleanup';
/**
 * Return type for processes that support cancellable subscriptions.
 * The handler object implements the observable events.
 * @deprecated
 */
export interface ObservableValue<Events, Value = unknown> {
    value?: Value;
    setValue(value: Value): void;
    subscribe(handler: Events): CleanupFn;
}
/**
 * Provider that manages a set of subscriptions.
 * @deprecated
 */
export declare class ObservableProvider<Events extends {}, Value = unknown> implements ObservableValue<Events, Value> {
    protected readonly _handlers: Set<Events>;
    private readonly _proxy;
    private _value?;
    /**
     * Proxy used to dispatch callbacks to each subscription.
     */
    get callback(): Events;
    get value(): Value | undefined;
    setValue(value: Value): void;
    subscribe(handler: Events): CleanupFn;
}
/**
 * @deprecated
 */
export interface CancellableObservableEvents {
    onCancelled?(): void;
}
/**
 * @deprecated
 */
export interface CancellableObservable<Events extends CancellableObservableEvents, Value = unknown> extends ObservableValue<Events, Value> {
    cancel(): Promise<void>;
}
/**
 * Implements subscriptions with ability to be cancelled.
 * @deprecated
 */
export declare class CancellableObservableProvider<Events extends CancellableObservableEvents> extends ObservableProvider<Events> {
    private readonly _handleCancel?;
    private _cancelled;
    constructor(_handleCancel?: (() => Promise<void>) | undefined);
    get cancelled(): boolean;
    cancel(): Promise<void>;
}
//# sourceMappingURL=observable-value.d.ts.map