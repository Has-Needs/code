import { type PublicKey } from '@dxos/keys';
import { type TypedMessage, type TYPES } from '@dxos/protocols/proto';
import { type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
export declare const getCredentialAssertion: (credential: Credential) => TypedMessage;
export declare const isValidAuthorizedDeviceCredential: (credential: Credential, identityKey: PublicKey, deviceKey: PublicKey) => boolean;
export type SpecificCredential<T> = Omit<Credential, 'subject'> & {
    subject: Omit<Credential['subject'], 'assertion'> & {
        assertion: T;
    };
};
export declare const checkCredentialType: <K extends keyof TYPES>(credential: Credential, type: K) => credential is SpecificCredential<TYPES[K]>;
export declare const credentialTypeFilter: <K extends keyof TYPES>(type: K) => (credential: Credential) => credential is SpecificCredential<TYPES[K]>;
//# sourceMappingURL=assertions.d.ts.map