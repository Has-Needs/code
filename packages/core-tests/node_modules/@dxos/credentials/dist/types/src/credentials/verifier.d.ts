import { type PublicKey } from '@dxos/keys';
import { type Chain, type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
export declare const SIGNATURE_TYPE_ED25519 = "ED25519Signature";
export type VerificationResult = {
    kind: 'pass';
} | {
    kind: 'fail';
    errors: string[];
};
export declare const verifyCredential: (credential: Credential) => Promise<VerificationResult>;
/**
 * Verifies that the signature is valid and was made by the signer.
 * Does not validate other semantics (e.g. chains).
 */
export declare const verifyCredentialSignature: (credential: Credential) => Promise<VerificationResult>;
/**
 * Verifies that the signer has the delegated authority to create credentials on behalf of the issuer.
 */
export declare const verifyChain: (chain: Chain, authority: PublicKey, subject: PublicKey) => Promise<VerificationResult>;
//# sourceMappingURL=verifier.d.ts.map