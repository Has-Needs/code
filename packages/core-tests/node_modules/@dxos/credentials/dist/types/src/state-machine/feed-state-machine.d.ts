import { PublicKey } from '@dxos/keys';
import { type AdmittedFeed, type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type AsyncCallback, Callback } from '@dxos/util';
export interface FeedInfo {
    key: PublicKey;
    /**
     * Parent feed from the feed tree.
     * This is the feed where the AdmittedFeed assertion is written.
     * The genesis feed will have itself as a parent.
     */
    parent: PublicKey;
    credential: Credential;
    assertion: AdmittedFeed;
}
/**
 * Tracks the feed tree for a space.
 * Provides a list of admitted feeds.
 */
export declare class FeedStateMachine {
    private readonly _spaceKey;
    private _feeds;
    readonly onFeedAdmitted: Callback<AsyncCallback<FeedInfo>>;
    constructor(_spaceKey: PublicKey);
    get feeds(): ReadonlyMap<PublicKey, FeedInfo>;
    /**
     * Processes the AdmittedFeed credential.
     * Assumes the credential is already pre-verified
     * and the issuer has been authorized to issue credentials of this type.
     * @param fromFeed Key of the feed where this credential is recorded.
     */
    process(credential: Credential, fromFeed: PublicKey): Promise<void>;
}
//# sourceMappingURL=feed-state-machine.d.ts.map