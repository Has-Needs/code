import substitutions from "../../../substitutions.js";
import * as dxos_edge_messenger from "./messenger.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/signal.proto}
 */
export interface JoinRequest {
    topic: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    peer: dxos_edge_messenger.Peer;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/signal.proto}
 */
export interface LeaveRequest {
    topic: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    peer: dxos_edge_messenger.Peer;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/signal.proto}
 */
export interface QueryRequest {
    topic: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/signal.proto}
 */
export interface Message {
    author: dxos_edge_messenger.Peer;
    recipient: dxos_edge_messenger.Peer;
    payload: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
}
/**
 * Goes on Pub/Sub swarm topic and as a Join stream in RPC.
 *
 * Defined in:
 *   {@link file://./../../../dxos/edge/signal.proto}
 */
export interface SwarmEvent {
    topic: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * The peer was announced as available on the swarm.
     */
    peerAvailable?: SwarmEvent.PeerAvailable;
    /**
     * The peer left, or their announcement timed out.
     */
    peerLeft?: SwarmEvent.PeerLeft;
}
export declare namespace SwarmEvent {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/edge/signal.proto}
     */
    interface PeerAvailable {
        peer: dxos_edge_messenger.Peer;
        since: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
        /**
         * Options:
         *   - proto3_optional = true
         */
        until?: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
        /**
         * Only relevant in Pub/Sub. Optional, the host topic to eagerly send PeerAvailable messages back to.
         *
         * Options:
         *   - proto3_optional = true
         */
        announceBackToHost?: Uint8Array;
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/edge/signal.proto}
     */
    interface PeerLeft {
        peer: dxos_edge_messenger.Peer;
    }
}
//# sourceMappingURL=signal.d.ts.map