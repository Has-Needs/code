import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import type { Invitation } from "./client/invitation_pb.js";
import type { Config } from "./config_pb.js";
import type { TimeframeVector } from "./echo/timeframe_pb.js";
import type { PublicKey } from "./keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/bot.proto.
 */
export declare const file_dxos_bot: GenFile;
/**
 * TODO(burdon): Rename.
 *
 * @generated from message dxos.bot.BotPackageSpecifier
 */
export type BotPackageSpecifier = Message<"dxos.bot.BotPackageSpecifier"> & {
    /**
     * @generated from oneof dxos.bot.BotPackageSpecifier.kind
     */
    kind: {
        /**
         * / DXN of the bot in the DXNS registry.
         *
         * @generated from field: string name = 1;
         */
        value: string;
        case: "name";
    } | {
        /**
         * @generated from field: string ipfs_cid = 2;
         */
        value: string;
        case: "ipfsCid";
    } | {
        /**
         * @generated from field: string local_path = 3;
         */
        value: string;
        case: "localPath";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message dxos.bot.BotPackageSpecifier.
 * Use `create(BotPackageSpecifierSchema)` to create a new message.
 */
export declare const BotPackageSpecifierSchema: GenMessage<BotPackageSpecifier>;
/**
 * @generated from message dxos.bot.Bot
 */
export type Bot = Message<"dxos.bot.Bot"> & {
    /**
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * TODO: Rename to state.
     *
     * @generated from field: optional dxos.bot.Bot.Status status = 2;
     */
    status?: Bot_Status;
    /**
     * / The state that the bot aims to be in. Can be only either RUNNING or STOPPED.
     *
     * @generated from field: optional dxos.bot.Bot.Status desired_state = 55;
     */
    desiredState?: Bot_Status;
    /**
     * @generated from field: optional int32 attempts_to_achieve_desired_state = 56;
     */
    attemptsToAchieveDesiredState?: number;
    /**
     * @generated from field: optional dxos.bot.BotPackageSpecifier package_specifier = 3;
     */
    packageSpecifier?: BotPackageSpecifier;
    /**
     * @generated from field: optional google.protobuf.Timestamp last_start = 4;
     */
    lastStart?: Timestamp;
    /**
     * @generated from field: optional dxos.keys.PublicKey space_key = 5;
     */
    spaceKey?: PublicKey;
    /**
     * @generated from field: optional dxos.bot.Bot.Runtime runtime = 6;
     */
    runtime?: Bot_Runtime;
    /**
     * @generated from field: optional dxos.bot.BotReport report = 7;
     */
    report?: BotReport;
};
/**
 * Describes the message dxos.bot.Bot.
 * Use `create(BotSchema)` to create a new message.
 */
export declare const BotSchema: GenMessage<Bot>;
/**
 * @generated from message dxos.bot.Bot.Runtime
 */
export type Bot_Runtime = Message<"dxos.bot.Bot.Runtime"> & {
    /**
     * @generated from field: optional int32 exit_code = 1;
     */
    exitCode?: number;
    /**
     * @generated from field: optional string exit_signal = 2;
     */
    exitSignal?: string;
    /**
     * @generated from field: optional string error = 3;
     */
    error?: string;
};
/**
 * Describes the message dxos.bot.Bot.Runtime.
 * Use `create(Bot_RuntimeSchema)` to create a new message.
 */
export declare const Bot_RuntimeSchema: GenMessage<Bot_Runtime>;
/**
 * TODO(burdon): Rename to state.
 *
 * @generated from enum dxos.bot.Bot.Status
 */
export declare enum Bot_Status {
    /**
     * / Bot is stopped.
     *
     * @generated from enum value: STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * / Starting bot process.
     *
     * @generated from enum value: STARTING = 1;
     */
    STARTING = 1,
    /**
     * / Bot is running.
     *
     * @generated from enum value: RUNNING = 2;
     */
    RUNNING = 2,
    /**
     * / Bot is stopping.
     *
     * @generated from enum value: STOPPING = 3;
     */
    STOPPING = 3,
    /**
     * / Bot is being spawned. Bot factory is downloading the bot bundle and initializing resources.
     *
     * @generated from enum value: SPAWNING = 4;
     */
    SPAWNING = 4
}
/**
 * Describes the enum dxos.bot.Bot.Status.
 */
export declare const Bot_StatusSchema: GenEnum<Bot_Status>;
/**
 * @generated from message dxos.bot.GetBotsResponse
 */
export type GetBotsResponse = Message<"dxos.bot.GetBotsResponse"> & {
    /**
     * @generated from field: repeated dxos.bot.Bot bots = 1;
     */
    bots: Bot[];
};
/**
 * Describes the message dxos.bot.GetBotsResponse.
 * Use `create(GetBotsResponseSchema)` to create a new message.
 */
export declare const GetBotsResponseSchema: GenMessage<GetBotsResponse>;
/**
 * @generated from message dxos.bot.SpawnBotRequest
 */
export type SpawnBotRequest = Message<"dxos.bot.SpawnBotRequest"> & {
    /**
     * @generated from field: optional dxos.bot.BotPackageSpecifier package = 1;
     */
    package?: BotPackageSpecifier;
    /**
     * / Invitation for the bot to join the target space.
     *
     * @generated from field: optional dxos.client.services.Invitation invitation = 2;
     */
    invitation?: Invitation;
    /**
     * / Key of the space bot is invited to.
     *
     * @generated from field: optional dxos.keys.PublicKey space_key = 3;
     */
    spaceKey?: PublicKey;
};
/**
 * Describes the message dxos.bot.SpawnBotRequest.
 * Use `create(SpawnBotRequestSchema)` to create a new message.
 */
export declare const SpawnBotRequestSchema: GenMessage<SpawnBotRequest>;
/**
 * @generated from message dxos.bot.SendCommandRequest
 */
export type SendCommandRequest = Message<"dxos.bot.SendCommandRequest"> & {
    /**
     * @generated from field: optional string bot_id = 1;
     */
    botId?: string;
    /**
     * @generated from field: optional bytes command = 2;
     */
    command?: Uint8Array;
};
/**
 * Describes the message dxos.bot.SendCommandRequest.
 * Use `create(SendCommandRequestSchema)` to create a new message.
 */
export declare const SendCommandRequestSchema: GenMessage<SendCommandRequest>;
/**
 * @generated from message dxos.bot.SendCommandResponse
 */
export type SendCommandResponse = Message<"dxos.bot.SendCommandResponse"> & {
    /**
     * @generated from field: optional bytes response = 1;
     */
    response?: Uint8Array;
};
/**
 * Describes the message dxos.bot.SendCommandResponse.
 * Use `create(SendCommandResponseSchema)` to create a new message.
 */
export declare const SendCommandResponseSchema: GenMessage<SendCommandResponse>;
/**
 * @generated from message dxos.bot.GetLogsResponse
 */
export type GetLogsResponse = Message<"dxos.bot.GetLogsResponse"> & {
    /**
     * @generated from field: bytes chunk = 1;
     */
    chunk: Uint8Array;
};
/**
 * Describes the message dxos.bot.GetLogsResponse.
 * Use `create(GetLogsResponseSchema)` to create a new message.
 */
export declare const GetLogsResponseSchema: GenMessage<GetLogsResponse>;
/**
 * @generated from message dxos.bot.GetLogsRequest
 */
export type GetLogsRequest = Message<"dxos.bot.GetLogsRequest"> & {
    /**
     * @generated from field: string bot_id = 1;
     */
    botId: string;
};
/**
 * Describes the message dxos.bot.GetLogsRequest.
 * Use `create(GetLogsRequestSchema)` to create a new message.
 */
export declare const GetLogsRequestSchema: GenMessage<GetLogsRequest>;
/**
 * @generated from message dxos.bot.BotReport
 */
export type BotReport = Message<"dxos.bot.BotReport"> & {
    /**
     * / Details of the space the bot was spawned for.
     *
     * @generated from field: optional dxos.echo.timeframe.TimeframeVector processed_timeframe = 1;
     */
    processedTimeframe?: TimeframeVector;
};
/**
 * Describes the message dxos.bot.BotReport.
 * Use `create(BotReportSchema)` to create a new message.
 */
export declare const BotReportSchema: GenMessage<BotReport>;
/**
 * @generated from message dxos.bot.InitializeRequest
 */
export type InitializeRequest = Message<"dxos.bot.InitializeRequest"> & {
    /**
     * / Bot runtime configuration.
     *
     * @generated from field: optional dxos.config.Config config = 1;
     */
    config?: Config;
    /**
     * / Invitation for the bot to join the target space.
     *
     * @generated from field: optional dxos.client.services.Invitation invitation = 2;
     */
    invitation?: Invitation;
    /**
     * / ID of the bot.
     *
     * @generated from field: optional string id = 3;
     */
    id?: string;
};
/**
 * Describes the message dxos.bot.InitializeRequest.
 * Use `create(InitializeRequestSchema)` to create a new message.
 */
export declare const InitializeRequestSchema: GenMessage<InitializeRequest>;
/**
 * @generated from message dxos.bot.StartRequest
 */
export type StartRequest = Message<"dxos.bot.StartRequest"> & {
    /**
     * / Bot runtime configuration.
     *
     * @generated from field: dxos.config.Config config = 1;
     */
    config?: Config;
};
/**
 * Describes the message dxos.bot.StartRequest.
 * Use `create(StartRequestSchema)` to create a new message.
 */
export declare const StartRequestSchema: GenMessage<StartRequest>;
/**
 * / Service that is used by clients to communicate with bot factory.
 *
 * @generated from service dxos.bot.BotFactoryService
 */
export declare const BotFactoryService: GenService<{
    /**
     * @generated from rpc dxos.bot.BotFactoryService.GetBots
     */
    getBots: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof GetBotsResponseSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.SpawnBot
     */
    spawnBot: {
        methodKind: "unary";
        input: typeof SpawnBotRequestSchema;
        output: typeof BotSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.Start
     */
    start: {
        methodKind: "unary";
        input: typeof BotSchema;
        output: typeof BotSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.Stop
     */
    stop: {
        methodKind: "unary";
        input: typeof BotSchema;
        output: typeof BotSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.Remove
     */
    remove: {
        methodKind: "unary";
        input: typeof BotSchema;
        output: typeof EmptySchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.GetLogs
     */
    getLogs: {
        methodKind: "server_streaming";
        input: typeof GetLogsRequestSchema;
        output: typeof GetLogsResponseSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.SendCommand
     */
    sendCommand: {
        methodKind: "unary";
        input: typeof SendCommandRequestSchema;
        output: typeof SendCommandResponseSchema;
    };
    /**
     * @generated from rpc dxos.bot.BotFactoryService.RemoveAll
     */
    removeAll: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof EmptySchema;
    };
}>;
/**
 * / Service that is used by bots communicating with bot factory.
 *
 * @generated from service dxos.bot.BotService
 */
export declare const BotService: GenService<{
    /**
     * / Initialize Client, create profile, and join a space.
     *
     * @generated from rpc dxos.bot.BotService.Initialize
     */
    initialize: {
        methodKind: "unary";
        input: typeof InitializeRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * / Start an initialized bot.
     *
     * @generated from rpc dxos.bot.BotService.Start
     */
    start: {
        methodKind: "unary";
        input: typeof StartRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * / Custom commands sent to the bot factory.
     *
     * @generated from rpc dxos.bot.BotService.Command
     */
    command: {
        methodKind: "unary";
        input: typeof SendCommandRequestSchema;
        output: typeof SendCommandResponseSchema;
    };
    /**
     * / Stop the bot.
     *
     * @generated from rpc dxos.bot.BotService.Stop
     */
    stop: {
        methodKind: "unary";
        input: typeof EmptySchema;
        output: typeof EmptySchema;
    };
    /**
     * / Send periodic reports of the bot's state.
     *
     * @generated from rpc dxos.bot.BotService.StartReporting
     */
    startReporting: {
        methodKind: "server_streaming";
        input: typeof EmptySchema;
        output: typeof BotReportSchema;
    };
}>;
//# sourceMappingURL=bot_pb.d.ts.map