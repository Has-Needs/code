import substitutions from "../../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export declare enum ConnectionState {
    CONNECTED = 0,
    DISCONNECTED_NORMAL = 1,
    DISCONNECTED_ABRUPT = 2
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export interface Peer {
    /**
     * Options:
     *   - proto3_optional = true
     */
    swarmKey?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    identityKey?: string;
    peerKey: string;
    /**
     * State of the connection to the swarm.
     *
     * Options:
     *   - proto3_optional = true
     */
    connectionState?: ConnectionState;
    /**
     * Options:
     *   - proto3_optional = true
     */
    connected?: number;
    /**
     * UNIX timestamp of the disconnection.
     * @example 1715142000000
     *
     * Options:
     *   - proto3_optional = true
     */
    disconnected?: number;
    /**
     * Optional opeage data that represents peer state is updated on `join` request and all peers in swarm are notified.
     * Is not used for WebRTC protocol, but is useful for another purposes of Swarms, e. g. call room users states.
     *
     * Options:
     *   - proto3_optional = true
     */
    state?: Uint8Array;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export interface Message {
    /**
     * Options:
     *   - proto3_optional = true
     */
    timestamp?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    source?: Peer;
    target?: Peer[];
    /**
     * Maybe be used to address a service at EDGE, but also to address components inside the client.
     *
     * Options:
     *   - proto3_optional = true
     */
    serviceId?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    payload?: ReturnType<(typeof substitutions)["google.protobuf.Any"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export interface SwarmRequest {
    /**
     * Options:
     *   - proto3_optional = true
     */
    action?: SwarmRequest.Action;
    swarmKeys?: string[];
}
export declare namespace SwarmRequest {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/edge/messenger.proto}
     */
    enum Action {
        INFO = 0,
        JOIN = 1,
        LEAVE = 2
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export interface SwarmResponse {
    swarmKey: string;
    /**
     * The list of peers in the swarm.
     */
    peers?: Peer[];
    /**
     * The list of peers that recently left the swarm.
     */
    inactivePeers?: Peer[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/edge/messenger.proto}
 */
export interface TextMessage {
    /**
     * Options:
     *   - proto3_optional = true
     */
    message?: string;
}
//# sourceMappingURL=messenger.d.ts.map