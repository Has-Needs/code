import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import type { TimeframeVector } from "./timeframe_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/object.proto.
 */
export declare const file_dxos_echo_object: GenFile;
/**
 * *
 * Wrapper for all ECHO messages.
 *
 * @generated from message dxos.echo.object.EchoObject
 */
export type EchoObject = Message<"dxos.echo.object.EchoObject"> & {
    /**
     * @generated from field: string object_id = 1;
     */
    objectId: string;
    /**
     * / Metadata for the genesis mutation.
     *
     * @generated from field: optional dxos.echo.object.MutationMeta meta = 2;
     */
    meta?: MutationMeta;
    /**
     * / Present in mutations creating new items and snapshots.
     *
     * @generated from field: optional dxos.echo.object.EchoObject.Genesis genesis = 10;
     */
    genesis?: EchoObject_Genesis;
    /**
     * @generated from field: optional dxos.echo.object.EchoObject.Snapshot snapshot = 13;
     */
    snapshot?: EchoObject_Snapshot;
    /**
     * / May be present in snapshots. In that case the mutations must be applied on top of the snapshot.
     *
     * @generated from field: repeated dxos.echo.object.EchoObject.Mutation mutations = 14;
     */
    mutations: EchoObject_Mutation[];
};
/**
 * Describes the message dxos.echo.object.EchoObject.
 * Use `create(EchoObjectSchema)` to create a new message.
 */
export declare const EchoObjectSchema: GenMessage<EchoObject>;
/**
 * @generated from message dxos.echo.object.EchoObject.Genesis
 */
export type EchoObject_Genesis = Message<"dxos.echo.object.EchoObject.Genesis"> & {
    /**
     * @generated from field: string model_type = 2;
     */
    modelType: string;
    /**
     * @generated from field: optional string model_version = 3;
     */
    modelVersion?: string;
};
/**
 * Describes the message dxos.echo.object.EchoObject.Genesis.
 * Use `create(EchoObject_GenesisSchema)` to create a new message.
 */
export declare const EchoObject_GenesisSchema: GenMessage<EchoObject_Genesis>;
/**
 * @generated from message dxos.echo.object.EchoObject.Snapshot
 */
export type EchoObject_Snapshot = Message<"dxos.echo.object.EchoObject.Snapshot"> & {
    /**
     * TODO(dmaretskyi): Change to enum?
     *
     * @generated from field: optional bool deleted = 1;
     */
    deleted?: boolean;
    /**
     * @generated from field: optional string parent_id = 2;
     */
    parentId?: string;
    /**
     * / Set the model to the provided snapshot.
     *
     * @generated from field: optional google.protobuf.Any model = 10;
     */
    model?: Any;
};
/**
 * Describes the message dxos.echo.object.EchoObject.Snapshot.
 * Use `create(EchoObject_SnapshotSchema)` to create a new message.
 */
export declare const EchoObject_SnapshotSchema: GenMessage<EchoObject_Snapshot>;
/**
 * @generated from message dxos.echo.object.EchoObject.Mutation
 */
export type EchoObject_Mutation = Message<"dxos.echo.object.EchoObject.Mutation"> & {
    /**
     * @generated from field: optional dxos.echo.object.MutationMeta meta = 1;
     */
    meta?: MutationMeta;
    /**
     * / Set parent id
     *
     * @generated from field: optional string parent_id = 10;
     */
    parentId?: string;
    /**
     * @generated from field: optional dxos.echo.object.EchoObject.Mutation.Action action = 11;
     */
    action?: EchoObject_Mutation_Action;
    /**
     * Encoded model mutation, format is defined by model's codec.
     *
     * @generated from field: optional google.protobuf.Any model = 12;
     */
    model?: Any;
};
/**
 * Describes the message dxos.echo.object.EchoObject.Mutation.
 * Use `create(EchoObject_MutationSchema)` to create a new message.
 */
export declare const EchoObject_MutationSchema: GenMessage<EchoObject_Mutation>;
/**
 * @generated from enum dxos.echo.object.EchoObject.Mutation.Action
 */
export declare enum EchoObject_Mutation_Action {
    /**
     * @generated from enum value: NOOP = 0;
     */
    NOOP = 0,
    /**
     * @generated from enum value: DELETE = 1;
     */
    DELETE = 1,
    /**
     * @generated from enum value: RESTORE = 2;
     */
    RESTORE = 2
}
/**
 * Describes the enum dxos.echo.object.EchoObject.Mutation.Action.
 */
export declare const EchoObject_Mutation_ActionSchema: GenEnum<EchoObject_Mutation_Action>;
/**
 * @generated from message dxos.echo.object.MutationMeta
 */
export type MutationMeta = Message<"dxos.echo.object.MutationMeta"> & {
    /**
     * @generated from field: optional dxos.keys.PublicKey feed_key = 1;
     */
    feedKey?: PublicKey;
    /**
     * @generated from field: optional int32 seq = 2;
     */
    seq?: number;
    /**
     * @generated from field: optional dxos.keys.PublicKey member_key = 3;
     */
    memberKey?: PublicKey;
    /**
     * @generated from field: optional dxos.echo.timeframe.TimeframeVector timeframe = 4;
     */
    timeframe?: TimeframeVector;
    /**
     * / If this mutation was created by this client, this field will be set to the tag in the mutation.
     *
     * @generated from field: repeated string client_tag = 5;
     */
    clientTag: string[];
};
/**
 * Describes the message dxos.echo.object.MutationMeta.
 * Use `create(MutationMetaSchema)` to create a new message.
 */
export declare const MutationMetaSchema: GenMessage<MutationMeta>;
/**
 * @generated from message dxos.echo.object.EchoObjectBatch
 */
export type EchoObjectBatch = Message<"dxos.echo.object.EchoObjectBatch"> & {
    /**
     * @generated from field: repeated dxos.echo.object.EchoObject objects = 1;
     */
    objects: EchoObject[];
};
/**
 * Describes the message dxos.echo.object.EchoObjectBatch.
 * Use `create(EchoObjectBatchSchema)` to create a new message.
 */
export declare const EchoObjectBatchSchema: GenMessage<EchoObjectBatch>;
//# sourceMappingURL=object_pb.d.ts.map