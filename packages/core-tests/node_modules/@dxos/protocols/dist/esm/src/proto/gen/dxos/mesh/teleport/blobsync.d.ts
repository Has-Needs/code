import type { RequestOptions } from "@dxos/codec-protobuf";
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface WantList {
    /**
     * Requested blobs. If bitfield is empty, all chunks are requested.
     */
    blobs?: WantList.Entry[];
}
export declare namespace WantList {
    /**
     * Defined in:
     *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
     */
    interface Entry {
        id: Uint8Array;
        /**
         * Size of chunk in bytes. Must be a power of 2. Default is 4096.
         * If chunk_size is missing, host will provide it.
         *
         * Options:
         *   - proto3_optional = true
         */
        chunkSize?: number;
        /**
         * Bitfield of requested chunks.
         * Every bit represents a chunk.
         * Chunks are indexed from MSB to LSB.
         *
         * If bitfield is missing, all chunks are requested.
         *
         * Options:
         *   - proto3_optional = true
         */
        bitfield?: Uint8Array;
    }
}
/**
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface BlobChunk {
    id: Uint8Array;
    /**
     * In bytes
     *
     * Options:
     *   - proto3_optional = true
     */
    chunkSize?: number;
    /**
     * Offset from the start of blob in bytes.
     *
     * Options:
     *   - proto3_optional = true
     */
    chunkOffset?: number;
    /**
     * Total length of blob.
     *
     * Options:
     *   - proto3_optional = true
     */
    totalLength?: number;
    payload: Uint8Array;
}
/**
 * Allows synchronization of opaque data objects between two peers.
 * Loosely based on Bittorrent protocol.
 *
 * Defined in:
 *   {@link file://./../../../../dxos/mesh/teleport/blobsync.proto}
 */
export interface BlobSyncService {
    /**
     * Notify the peer that we want to receive specified objects.
     */
    want: (request: WantList, options?: RequestOptions) => Promise<void>;
    /**
     * Send an object to the peer.
     */
    push: (request: BlobChunk, options?: RequestOptions) => Promise<void>;
}
//# sourceMappingURL=blobsync.d.ts.map