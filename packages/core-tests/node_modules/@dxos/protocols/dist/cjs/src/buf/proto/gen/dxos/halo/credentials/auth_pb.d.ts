import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/halo/credentials/auth.proto.
 */
export declare const file_dxos_halo_credentials_auth: GenFile;
/**
 * *
 * The payload for a SignedMessage sent during handshake for replication authentication.
 *
 * @generated from message dxos.halo.credentials.auth.Auth
 */
export type Auth = Message<"dxos.halo.credentials.auth.Auth"> & {
    /**
     * / The publicKey of the target Space for these credentials.
     *
     * @generated from field: dxos.keys.PublicKey space_key = 1;
     */
    spaceKey?: PublicKey;
    /**
     * / The publicKey of the authenticating Device.
     *
     * @generated from field: dxos.keys.PublicKey device_key = 2;
     */
    deviceKey?: PublicKey;
    /**
     * / The publicKey of the authenticating Identity.
     *
     * @generated from field: dxos.keys.PublicKey identity_key = 3;
     */
    identityKey?: PublicKey;
    /**
     * / The publicKey of the authenticating Identity.
     *
     * @generated from field: optional dxos.keys.PublicKey feed_key = 4;
     */
    feedKey?: PublicKey;
    /**
     * / FeedAdmit message to the should be written to a control feed in case the `feed_key` is not admitted to the space.
     *
     * @generated from field: optional google.protobuf.Any feed_admit = 5;
     */
    feedAdmit?: Any;
};
/**
 * Describes the message dxos.halo.credentials.auth.Auth.
 * Use `create(AuthSchema)` to create a new message.
 */
export declare const AuthSchema: GenMessage<Auth>;
//# sourceMappingURL=auth_pb.d.ts.map