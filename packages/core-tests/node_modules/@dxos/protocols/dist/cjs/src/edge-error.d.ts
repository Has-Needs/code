import { type EdgeErrorData, type EdgeHttpFailure } from './edge';
export declare class EdgeCallFailedError extends Error {
    static fromProcessingFailureCause(cause: Error): EdgeCallFailedError;
    static fromHttpFailure(response: Response): EdgeCallFailedError;
    static fromUnsuccessfulResponse(response: Response, body: EdgeHttpFailure): EdgeCallFailedError;
    readonly reason: string;
    readonly errorData?: EdgeErrorData;
    readonly isRetryable?: boolean;
    readonly retryAfterMs?: number;
    constructor(args: {
        reason: string;
        isRetryable?: boolean;
        errorData?: EdgeErrorData;
        retryAfterMs?: number;
        cause?: Error;
    });
}
export declare class EdgeAuthChallengeError extends EdgeCallFailedError {
    readonly challenge: string;
    constructor(challenge: string, errorData: EdgeErrorData);
}
export declare const createRetryableHttpFailure: (args: {
    reason: any;
    retryAfterSeconds: number;
}) => Response;
//# sourceMappingURL=edge-error.d.ts.map