import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Record_Extension } from "./registry_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/type.proto.
 */
export declare const file_dxos_type: GenFile;
/**
 * TODO(wittjosiah): Shared with config. Factor out?
 *
 * @generated from message dxos.type.Repo
 */
export type Repo = Message<"dxos.type.Repo"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * @generated from field: string url = 2;
     */
    url: string;
    /**
     * @generated from field: string version = 3;
     */
    version: string;
};
/**
 * Describes the message dxos.type.Repo.
 * Use `create(RepoSchema)` to create a new message.
 */
export declare const RepoSchema: GenMessage<Repo>;
/**
 *
 * Registered as `type.app`.
 *
 *
 * @generated from message dxos.type.App
 */
export type App = Message<"dxos.type.App"> & {
    /**
     * *
     * Optional **semver 2.0** compliant record version.
     * Should conform to the semver regex (see https://semver.org/).
     *
     * @generated from field: optional string version = 1;
     */
    version?: string;
    /**
     * @generated from field: optional string license = 2;
     */
    license?: string;
    /**
     * @generated from field: repeated dxos.type.Repo repos = 3;
     */
    repos: Repo[];
    /**
     * / App bundle content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
     *
     * @generated from field: optional bytes bundle = 4;
     */
    bundle?: Uint8Array;
    /**
     * @generated from oneof dxos.type.App.kind
     */
    kind: {
        /**
         * @generated from field: dxos.type.App.Web web = 100;
         */
        value: App_Web;
        case: "web";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * @generated from field: optional dxos.registry.Record.Extension extension = 200;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.App.
 * Use `create(AppSchema)` to create a new message.
 */
export declare const AppSchema: GenMessage<App>;
/**
 * @generated from message dxos.type.App.Web
 */
export type App_Web = Message<"dxos.type.App.Web"> & {
    /**
     * / Relative path in resource to entrypoint, defaults to index.html.
     *
     * @generated from field: optional string index_file = 1;
     */
    indexFile?: string;
    /**
     * / Relative path in resource to entrypoint, defaults to main.js.
     *
     * @generated from field: optional string entry_point = 2;
     */
    entryPoint?: string;
};
/**
 * Describes the message dxos.type.App.Web.
 * Use `create(App_WebSchema)` to create a new message.
 */
export declare const App_WebSchema: GenMessage<App_Web>;
/**
 *
 * Registered as `type.bot`.
 *
 *
 * @generated from message dxos.type.Bot
 */
export type Bot = Message<"dxos.type.Bot"> & {
    /**
     * *
     * Optional **semver 2.0** compliant record version.
     * Should conform to the semver regex (see https://semver.org/).
     *
     * @generated from field: string version = 1;
     */
    version: string;
    /**
     * @generated from field: string license = 2;
     */
    license: string;
    /**
     * @generated from field: repeated dxos.type.Repo repos = 3;
     */
    repos: Repo[];
    /**
     * / Bot bundle content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
     *
     * @generated from field: bytes bundle = 4;
     */
    bundle: Uint8Array;
    /**
     * / Only for spawning bots that are expected to be vendored with bot-factory.
     * / This would be the path to the bot executable in bot-factory's file-system.
     *
     * @generated from field: string local_path = 5;
     */
    localPath: string;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.Bot.
 * Use `create(BotSchema)` to create a new message.
 */
export declare const BotSchema: GenMessage<Bot>;
/**
 *
 * Registered as `type.state-machine`.
 *
 *
 * @generated from message dxos.type.StateMachine
 */
export type StateMachine = Message<"dxos.type.StateMachine"> & {
    /**
     * / Set of protobuf messages.
     *
     * @generated from field: google.protobuf.Struct mutation_protobuf_defs = 1;
     */
    mutationProtobufDefs?: JsonObject;
    /**
     * / Set of protobuf messages.
     *
     * @generated from field: google.protobuf.Struct snapshot_protobuf_defs = 2;
     */
    snapshotProtobufDefs?: JsonObject;
    /**
     * @generated from field: bytes code_ipfs_cid = 3;
     */
    codeIpfsCid: Uint8Array;
};
/**
 * Describes the message dxos.type.StateMachine.
 * Use `create(StateMachineSchema)` to create a new message.
 */
export declare const StateMachineSchema: GenMessage<StateMachine>;
/**
 *
 * Registered as `type.file`.
 *
 *
 * @generated from message dxos.type.File
 */
export type File = Message<"dxos.type.File"> & {
    /**
     * MIME type of the file content: https://developer.mozilla.org/en-US/docs/Glossary/MIME_type.
     *
     * @generated from field: string content_type = 1;
     */
    contentType: string;
    /**
     * @generated from field: string file_name = 2;
     */
    fileName: string;
    /**
     * / File content Id in the CID v0 format (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats).
     *
     * @generated from field: bytes bundle = 3;
     */
    bundle: Uint8Array;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.File.
 * Use `create(FileSchema)` to create a new message.
 */
export declare const FileSchema: GenMessage<File>;
/**
 *
 * Registered as `type.kube`.
 *
 *
 * @generated from message dxos.type.KUBE
 */
export type KUBE = Message<"dxos.type.KUBE"> & {
    /**
     * @generated from field: string url = 1;
     */
    url: string;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.KUBE.
 * Use `create(KUBESchema)` to create a new message.
 */
export declare const KUBESchema: GenMessage<KUBE>;
/**
 *
 * Registered as `type.service`.
 *
 *
 * @generated from message dxos.type.Service
 */
export type Service = Message<"dxos.type.Service"> & {
    /**
     * TODO(dmaretskyi): How are service type's defined?
     *
     * @generated from field: string type = 1;
     */
    type: string;
    /**
     * KUBE record's CID that hosts this service.
     *
     * @generated from field: bytes kube = 2;
     */
    kube: Uint8Array;
    /**
     * Extension field's payload depends on service type and has extra data specific to that service.
     * Within this schema extension might be `type.service.ipfs` or `type.service.bot-factory`.
     *
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.Service.
 * Use `create(ServiceSchema)` to create a new message.
 */
export declare const ServiceSchema: GenMessage<Service>;
/**
 *
 * Registered as `type.service.ipfs`.
 *
 *
 * @generated from message dxos.type.IPFS
 */
export type IPFS = Message<"dxos.type.IPFS"> & {
    /**
     * @generated from field: string protocol = 1;
     */
    protocol: string;
    /**
     * @generated from field: repeated string addresses = 2;
     */
    addresses: string[];
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.IPFS.
 * Use `create(IPFSSchema)` to create a new message.
 */
export declare const IPFSSchema: GenMessage<IPFS>;
/**
 *
 * Registered as `type.service.bot-factory`.
 *
 *
 * @generated from message dxos.type.BotFactory
 */
export type BotFactory = Message<"dxos.type.BotFactory"> & {
    /**
     * @generated from field: string topic = 1;
     */
    topic: string;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.BotFactory.
 * Use `create(BotFactorySchema)` to create a new message.
 */
export declare const BotFactorySchema: GenMessage<BotFactory>;
/**
 *
 * Registered as `type.service.signal`.
 *
 *
 * @generated from message dxos.type.Signal
 */
export type Signal = Message<"dxos.type.Signal"> & {
    /**
     * @generated from field: string bootstrap = 1;
     */
    bootstrap: string;
    /**
     * @generated from field: string url = 2;
     */
    url: string;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.Signal.
 * Use `create(SignalSchema)` to create a new message.
 */
export declare const SignalSchema: GenMessage<Signal>;
/**
 *
 * Registered as `type.service.app-server`.
 *
 *
 * @generated from message dxos.type.AppServer
 */
export type AppServer = Message<"dxos.type.AppServer"> & {
    /**
     * @generated from field: string url = 1;
     */
    url: string;
    /**
     * @generated from field: dxos.registry.Record.Extension extension = 100;
     */
    extension?: Record_Extension;
};
/**
 * Describes the message dxos.type.AppServer.
 * Use `create(AppServerSchema)` to create a new message.
 */
export declare const AppServerSchema: GenMessage<AppServer>;
//# sourceMappingURL=type_pb.d.ts.map