import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { Credential } from "../../halo/credentials_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/mesh/teleport/notarization.proto.
 */
export declare const file_dxos_mesh_teleport_notarization: GenFile;
/**
 * @generated from message dxos.mesh.teleport.notarization.NotarizeRequest
 */
export type NotarizeRequest = Message<"dxos.mesh.teleport.notarization.NotarizeRequest"> & {
    /**
     * *
     * Write specified credentials to the control feed of the space.
     * Credentials with ids that are already present in the control pipeline must be skipped.
     *
     * @generated from field: repeated dxos.halo.credentials.Credential credentials = 1;
     */
    credentials: Credential[];
};
/**
 * Describes the message dxos.mesh.teleport.notarization.NotarizeRequest.
 * Use `create(NotarizeRequestSchema)` to create a new message.
 */
export declare const NotarizeRequestSchema: GenMessage<NotarizeRequest>;
/**
 * *
 * Allows peers to request their credentials be written to the control feed.
 * Useful for new devices bootstraping their feeds into the space.
 *
 * @generated from service dxos.mesh.teleport.notarization.NotarizationService
 */
export declare const NotarizationService: GenService<{
    /**
     * @generated from rpc dxos.mesh.teleport.notarization.NotarizationService.Notarize
     */
    notarize: {
        methodKind: "unary";
        input: typeof NotarizeRequestSchema;
        output: typeof EmptySchema;
    };
}>;
//# sourceMappingURL=notarization_pb.d.ts.map