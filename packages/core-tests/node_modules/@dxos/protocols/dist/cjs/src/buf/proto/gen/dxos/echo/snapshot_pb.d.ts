import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { TimeframeVector } from "./timeframe_pb.js";
import type { EchoObject } from "./object_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/echo/snapshot.proto.
 */
export declare const file_dxos_echo_snapshot: GenFile;
/**
 * *
 * Snapshots define full space state at a given point in time.
 * They must have enough information to be able to recover the space state without reading the feed messages.
 *
 * Each snapshot is identified by a space key and a timeframe.
 * The timeframe defines the set of feed messages that have already been processed.
 * When loading from the snapshot, application would skip all of the feed messages up to (and including) the provided timeframe.
 *
 * @generated from message dxos.echo.snapshot.SpaceSnapshot
 */
export type SpaceSnapshot = Message<"dxos.echo.snapshot.SpaceSnapshot"> & {
    /**
     * @generated from field: bytes space_key = 1;
     */
    spaceKey: Uint8Array;
    /**
     * @generated from field: optional dxos.echo.timeframe.TimeframeVector timeframe = 2;
     */
    timeframe?: TimeframeVector;
    /**
     * Unix timestamp of the snapshot creation time. For information purposes only.
     * TODO(dmaretskyi): Convert to google.protobuf.Timestamp.
     *
     * @generated from field: optional int32 timestamp = 3;
     */
    timestamp?: number;
    /**
     * @generated from field: dxos.echo.snapshot.EchoSnapshot database = 11;
     */
    database?: EchoSnapshot;
};
/**
 * Describes the message dxos.echo.snapshot.SpaceSnapshot.
 * Use `create(SpaceSnapshotSchema)` to create a new message.
 */
export declare const SpaceSnapshotSchema: GenMessage<SpaceSnapshot>;
/**
 * *
 * Database Snapshot
 *
 * @generated from message dxos.echo.snapshot.EchoSnapshot
 */
export type EchoSnapshot = Message<"dxos.echo.snapshot.EchoSnapshot"> & {
    /**
     * @generated from field: repeated dxos.echo.object.EchoObject items = 1;
     */
    items: EchoObject[];
};
/**
 * Describes the message dxos.echo.snapshot.EchoSnapshot.
 * Use `create(EchoSnapshotSchema)` to create a new message.
 */
export declare const EchoSnapshotSchema: GenMessage<EchoSnapshot>;
//# sourceMappingURL=snapshot_pb.d.ts.map