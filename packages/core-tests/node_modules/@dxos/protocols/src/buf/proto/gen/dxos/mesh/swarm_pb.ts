//
// Copyright 2022 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/mesh/swarm.proto (package dxos.mesh.swarm, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import { file_dxos_keys } from "../keys_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/mesh/swarm.proto.
 */
export const file_dxos_mesh_swarm: GenFile = /*@__PURE__*/
  fileDesc("ChVkeG9zL21lc2gvc3dhcm0ucHJvdG8SD2R4b3MubWVzaC5zd2FybSKzAQoMU3dhcm1NZXNzYWdlEiMKBXRvcGljGAMgASgLMhQuZHhvcy5rZXlzLlB1YmxpY0tleRIoCgpzZXNzaW9uX2lkGAQgASgLMhQuZHhvcy5rZXlzLlB1YmxpY0tleRIqCgRkYXRhGAUgASgLMhwuZHhvcy5tZXNoLnN3YXJtLk1lc3NhZ2VEYXRhEigKCm1lc3NhZ2VfaWQYBiABKAsyFC5keG9zLmtleXMuUHVibGljS2V5Is0BCgtNZXNzYWdlRGF0YRInCgVvZmZlchgBIAEoCzIWLmR4b3MubWVzaC5zd2FybS5PZmZlckgAEikKBmFuc3dlchgCIAEoCzIXLmR4b3MubWVzaC5zd2FybS5BbnN3ZXJIABIpCgZzaWduYWwYAyABKAsyFy5keG9zLm1lc2guc3dhcm0uU2lnbmFsSAASNAoMc2lnbmFsX2JhdGNoGAQgASgLMhwuZHhvcy5tZXNoLnN3YXJtLlNpZ25hbEJhdGNoSABCCQoHcGF5bG9hZCIHCgVPZmZlciJiCgZBbnN3ZXISDgoGYWNjZXB0GAEgASgIEjMKEG9mZmVyX21lc3NhZ2VfaWQYAiABKAsyFC5keG9zLmtleXMuUHVibGljS2V5SACIAQFCEwoRX29mZmVyX21lc3NhZ2VfaWQiMgoGU2lnbmFsEigKB3BheWxvYWQYASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0IjcKC1NpZ25hbEJhdGNoEigKB3NpZ25hbHMYASADKAsyFy5keG9zLm1lc2guc3dhcm0uU2lnbmFsYgZwcm90bzM", [file_google_protobuf_struct, file_dxos_keys]);

/**
 * *
 * Use for:
 * - Initial peer discovery (initiate session id between two peers).
 * - RTC negotiation (SDP offer/answer and ICE).
 *
 * @generated from message dxos.mesh.swarm.SwarmMessage
 */
export type SwarmMessage = Message<"dxos.mesh.swarm.SwarmMessage"> & {
  /**
   * / Swarm identifier.
   *
   * @generated from field: dxos.keys.PublicKey topic = 3;
   */
  topic?: PublicKey;

  /**
   * / Unique connection identifier.
   *
   * @generated from field: dxos.keys.PublicKey session_id = 4;
   */
  sessionId?: PublicKey;

  /**
   * / Message payload.
   *
   * @generated from field: dxos.mesh.swarm.MessageData data = 5;
   */
  data?: MessageData;

  /**
   * / Unique message identifier. Used for ACK and matching Answers to Offers.
   *
   * @generated from field: dxos.keys.PublicKey message_id = 6;
   */
  messageId?: PublicKey;
};

/**
 * Describes the message dxos.mesh.swarm.SwarmMessage.
 * Use `create(SwarmMessageSchema)` to create a new message.
 */
export const SwarmMessageSchema: GenMessage<SwarmMessage> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 0);

/**
 * @generated from message dxos.mesh.swarm.MessageData
 */
export type MessageData = Message<"dxos.mesh.swarm.MessageData"> & {
  /**
   * @generated from oneof dxos.mesh.swarm.MessageData.payload
   */
  payload: {
    /**
     * @generated from field: dxos.mesh.swarm.Offer offer = 1;
     */
    value: Offer;
    case: "offer";
  } | {
    /**
     * @generated from field: dxos.mesh.swarm.Answer answer = 2;
     */
    value: Answer;
    case: "answer";
  } | {
    /**
     * *
     * @deprecated Use SignalBatch instead.
     *
     * @generated from field: dxos.mesh.swarm.Signal signal = 3;
     */
    value: Signal;
    case: "signal";
  } | {
    /**
     * @generated from field: dxos.mesh.swarm.SignalBatch signal_batch = 4;
     */
    value: SignalBatch;
    case: "signalBatch";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message dxos.mesh.swarm.MessageData.
 * Use `create(MessageDataSchema)` to create a new message.
 */
export const MessageDataSchema: GenMessage<MessageData> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 1);

/**
 * @generated from message dxos.mesh.swarm.Offer
 */
export type Offer = Message<"dxos.mesh.swarm.Offer"> & {
};

/**
 * Describes the message dxos.mesh.swarm.Offer.
 * Use `create(OfferSchema)` to create a new message.
 */
export const OfferSchema: GenMessage<Offer> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 2);

/**
 * @generated from message dxos.mesh.swarm.Answer
 */
export type Answer = Message<"dxos.mesh.swarm.Answer"> & {
  /**
   * @generated from field: bool accept = 1;
   */
  accept: boolean;

  /**
   * / MessageId of the Offer being answered.
   *
   * @generated from field: optional dxos.keys.PublicKey offer_message_id = 2;
   */
  offerMessageId?: PublicKey;
};

/**
 * Describes the message dxos.mesh.swarm.Answer.
 * Use `create(AnswerSchema)` to create a new message.
 */
export const AnswerSchema: GenMessage<Answer> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 3);

/**
 * @generated from message dxos.mesh.swarm.Signal
 */
export type Signal = Message<"dxos.mesh.swarm.Signal"> & {
  /**
   * @generated from field: google.protobuf.Struct payload = 1;
   */
  payload?: JsonObject;
};

/**
 * Describes the message dxos.mesh.swarm.Signal.
 * Use `create(SignalSchema)` to create a new message.
 */
export const SignalSchema: GenMessage<Signal> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 4);

/**
 * @generated from message dxos.mesh.swarm.SignalBatch
 */
export type SignalBatch = Message<"dxos.mesh.swarm.SignalBatch"> & {
  /**
   * @generated from field: repeated dxos.mesh.swarm.Signal signals = 1;
   */
  signals: Signal[];
};

/**
 * Describes the message dxos.mesh.swarm.SignalBatch.
 * Use `create(SignalBatchSchema)` to create a new message.
 */
export const SignalBatchSchema: GenMessage<SignalBatch> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_swarm, 5);

