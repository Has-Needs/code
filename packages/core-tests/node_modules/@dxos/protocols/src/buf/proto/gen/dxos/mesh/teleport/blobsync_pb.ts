//
// Copyright 2022 DXOS.org
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts,import_extension=js"
// @generated from file dxos/mesh/teleport/blobsync.proto (package dxos.mesh.teleport.blobsync, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file dxos/mesh/teleport/blobsync.proto.
 */
export const file_dxos_mesh_teleport_blobsync: GenFile = /*@__PURE__*/
  fileDesc("CiFkeG9zL21lc2gvdGVsZXBvcnQvYmxvYnN5bmMucHJvdG8SG2R4b3MubWVzaC50ZWxlcG9ydC5ibG9ic3luYyKnAQoIV2FudExpc3QSOgoFYmxvYnMYASADKAsyKy5keG9zLm1lc2gudGVsZXBvcnQuYmxvYnN5bmMuV2FudExpc3QuRW50cnkaXwoFRW50cnkSCgoCaWQYASABKAwSFwoKY2h1bmtfc2l6ZRgCIAEoBUgAiAEBEhUKCGJpdGZpZWxkGAMgASgMSAGIAQFCDQoLX2NodW5rX3NpemVCCwoJX2JpdGZpZWxkIqgBCglCbG9iQ2h1bmsSCgoCaWQYASABKAwSFwoKY2h1bmtfc2l6ZRgCIAEoBUgAiAEBEhkKDGNodW5rX29mZnNldBgDIAEoBUgBiAEBEhkKDHRvdGFsX2xlbmd0aBgEIAEoBUgCiAEBEg8KB3BheWxvYWQYZCABKAxCDQoLX2NodW5rX3NpemVCDwoNX2NodW5rX29mZnNldEIPCg1fdG90YWxfbGVuZ3RoMqABCg9CbG9iU3luY1NlcnZpY2USRQoEV2FudBIlLmR4b3MubWVzaC50ZWxlcG9ydC5ibG9ic3luYy5XYW50TGlzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRJGCgRQdXNoEiYuZHhvcy5tZXNoLnRlbGVwb3J0LmJsb2JzeW5jLkJsb2JDaHVuaxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eWIGcHJvdG8z", [file_google_protobuf_empty, file_google_protobuf_any]);

/**
 * @generated from message dxos.mesh.teleport.blobsync.WantList
 */
export type WantList = Message<"dxos.mesh.teleport.blobsync.WantList"> & {
  /**
   * / Requested blobs. If bitfield is empty, all chunks are requested.
   *
   * @generated from field: repeated dxos.mesh.teleport.blobsync.WantList.Entry blobs = 1;
   */
  blobs: WantList_Entry[];
};

/**
 * Describes the message dxos.mesh.teleport.blobsync.WantList.
 * Use `create(WantListSchema)` to create a new message.
 */
export const WantListSchema: GenMessage<WantList> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_blobsync, 0);

/**
 * @generated from message dxos.mesh.teleport.blobsync.WantList.Entry
 */
export type WantList_Entry = Message<"dxos.mesh.teleport.blobsync.WantList.Entry"> & {
  /**
   * @generated from field: bytes id = 1;
   */
  id: Uint8Array;

  /**
   * *
   * Size of chunk in bytes. Must be a power of 2. Default is 4096.
   * If chunk_size is missing, host will provide it.
   *
   * @generated from field: optional int32 chunk_size = 2;
   */
  chunkSize?: number;

  /**
   * *
   * Bitfield of requested chunks.
   * Every bit represents a chunk.
   * Chunks are indexed from MSB to LSB.
   *
   * If bitfield is missing, all chunks are requested.
   *
   * @generated from field: optional bytes bitfield = 3;
   */
  bitfield?: Uint8Array;
};

/**
 * Describes the message dxos.mesh.teleport.blobsync.WantList.Entry.
 * Use `create(WantList_EntrySchema)` to create a new message.
 */
export const WantList_EntrySchema: GenMessage<WantList_Entry> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_blobsync, 0, 0);

/**
 * @generated from message dxos.mesh.teleport.blobsync.BlobChunk
 */
export type BlobChunk = Message<"dxos.mesh.teleport.blobsync.BlobChunk"> & {
  /**
   * @generated from field: bytes id = 1;
   */
  id: Uint8Array;

  /**
   * / In bytes
   *
   * @generated from field: optional int32 chunk_size = 2;
   */
  chunkSize?: number;

  /**
   * / Offset from the start of blob in bytes.
   *
   * @generated from field: optional int32 chunk_offset = 3;
   */
  chunkOffset?: number;

  /**
   * / Total length of blob.
   *
   * @generated from field: optional int32 total_length = 4;
   */
  totalLength?: number;

  /**
   * @generated from field: bytes payload = 100;
   */
  payload: Uint8Array;
};

/**
 * Describes the message dxos.mesh.teleport.blobsync.BlobChunk.
 * Use `create(BlobChunkSchema)` to create a new message.
 */
export const BlobChunkSchema: GenMessage<BlobChunk> = /*@__PURE__*/
  messageDesc(file_dxos_mesh_teleport_blobsync, 1);

/**
 * *
 * Allows synchronization of opaque data objects between two peers.
 * Loosely based on Bittorrent protocol.
 *
 * @generated from service dxos.mesh.teleport.blobsync.BlobSyncService
 */
export const BlobSyncService: GenService<{
  /**
   * / Notify the peer that we want to receive specified objects.
   *
   * @generated from rpc dxos.mesh.teleport.blobsync.BlobSyncService.Want
   */
  want: {
    methodKind: "unary";
    input: typeof WantListSchema;
    output: typeof EmptySchema;
  },
  /**
   * / Send an object to the peer.
   *
   * @generated from rpc dxos.mesh.teleport.blobsync.BlobSyncService.Push
   */
  push: {
    methodKind: "unary";
    input: typeof BlobChunkSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_dxos_mesh_teleport_blobsync, 0);

