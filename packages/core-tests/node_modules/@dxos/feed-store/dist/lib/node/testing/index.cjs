"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testing_exports = {};
__export(testing_exports, {
  MockFeedWriter: () => MockFeedWriter,
  TestBuilder: () => TestBuilder,
  TestGenerator: () => TestGenerator,
  TestItemBuilder: () => TestItemBuilder,
  defaultCodec: () => defaultCodec,
  defaultTestBlockGenerator: () => defaultTestBlockGenerator,
  defaultTestGenerator: () => defaultTestGenerator,
  defaultValueEncoding: () => defaultValueEncoding
});
module.exports = __toCommonJS(testing_exports);
var import_chunk_YOYJCS5J = require("../chunk-YOYJCS5J.cjs");
var import_async = require("@dxos/async");
var import_context = require("@dxos/context");
var import_keys = require("@dxos/keys");
var import_keyring = require("@dxos/keyring");
var import_random_access_storage = require("@dxos/random-access-storage");
var import_async2 = require("@dxos/async");
var import_hypercore = require("@dxos/hypercore");
var import_random = require("@dxos/random");
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/common/feed-store/src/testing/mocks.ts";
var MockFeedWriter = class {
  constructor(feedKey = import_keys.PublicKey.random()) {
    this.feedKey = feedKey;
    this.written = new import_async.Event();
    this.messages = [];
  }
  async write(data, { afterWrite } = {}) {
    this.messages.push(data);
    const receipt = {
      feedKey: this.feedKey,
      seq: this.messages.length - 1
    };
    await afterWrite?.(receipt);
    (0, import_async.scheduleTask)(new import_context.Context(void 0, {
      F: __dxlog_file,
      L: 30
    }), () => {
      this.written.emit([
        data,
        receipt
      ]);
    });
    return receipt;
  }
};
var defaultCodec = {
  encode: (obj) => Buffer.from(JSON.stringify(obj)),
  decode: (buffer) => JSON.parse(buffer.toString())
};
var defaultValueEncoding = (0, import_hypercore.createCodecEncoding)(defaultCodec);
var defaultTestBlockGenerator = (i) => ({
  id: import_random.faker.string.uuid(),
  index: i,
  value: import_random.faker.lorem.sentence()
});
var TestGenerator = class {
  constructor(_generate) {
    this._generate = _generate;
    this._count = 0;
  }
  async writeBlocks(writer, { count = 1, delay } = {}) {
    return await Promise.all(Array.from(Array(count)).map(async () => {
      const data = this._generate(this._count++);
      const receipt = await writer.write(data);
      if (delay) {
        await (0, import_async2.sleep)(import_random.faker.number.int(delay));
      }
      return receipt;
    }));
  }
};
var defaultTestGenerator = new TestGenerator(defaultTestBlockGenerator);
var evaluate = (builder, arg) => arg === "function" ? arg(builder) : arg;
var TestBuilder = class _TestBuilder {
  static {
    this.ROOT_DIR = "feeds";
  }
  constructor(_properties = {}) {
    this._properties = _properties;
  }
  /**
  * Creates a new builder with the current builder's properties.
  */
  clone() {
    return new _TestBuilder(Object.assign({}, this._properties));
  }
  get keyring() {
    return this._properties.keyring ??= new import_keyring.Keyring();
  }
  get storage() {
    return this._properties.storage ??= (0, import_random_access_storage.createStorage)({
      type: import_random_access_storage.StorageType.RAM
    });
  }
  get root() {
    return this._properties.root ??= this.storage.createDirectory(_TestBuilder.ROOT_DIR);
  }
  setKeyring(keyring) {
    this._properties.keyring = evaluate(this, keyring);
    return this;
  }
  setStorage(storage, root) {
    this._properties.storage = evaluate(this, storage);
    if (root) {
      this._properties.root = this.storage.createDirectory(root);
    }
    return this;
  }
  setRoot(root) {
    this._properties.root = evaluate(this, root);
    return this;
  }
  createFeedFactory() {
    return new import_chunk_YOYJCS5J.FeedFactory({
      root: this.root,
      signer: this.keyring,
      hypercore: {
        valueEncoding: this._properties.valueEncoding
      }
    });
  }
  createFeedStore() {
    return new import_chunk_YOYJCS5J.FeedStore({
      factory: this.createFeedFactory()
    });
  }
};
var TestItemBuilder = class extends TestBuilder {
  constructor() {
    super({
      valueEncoding: defaultValueEncoding,
      generator: defaultTestGenerator
    });
  }
  get valueEncoding() {
    return this._properties.valueEncoding;
  }
  get generator() {
    return this._properties.generator;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MockFeedWriter,
  TestBuilder,
  TestGenerator,
  TestItemBuilder,
  defaultCodec,
  defaultTestBlockGenerator,
  defaultTestGenerator,
  defaultValueEncoding
});
//# sourceMappingURL=index.cjs.map
