import { type Signer } from '@dxos/crypto';
import type { HypercoreOptions } from '@dxos/hypercore';
import { type PublicKey } from '@dxos/keys';
import { type Directory } from '@dxos/random-access-storage';
import { FeedWrapper } from './feed-wrapper';
export type FeedFactoryOptions = {
    root: Directory;
    signer?: Signer;
    hypercore?: HypercoreOptions;
};
export type FeedOptions = HypercoreOptions & {
    writable?: boolean;
    /**
     * Optional hook called before data is written after being verified.
     * Called for writes done by this peer as well as for data replicated from other peers.
     * NOTE: The callback must be invoked to complete the write operation.
     * @param peer Always null in hypercore@9.12.0.
     */
    onwrite?: (index: number, data: any, peer: null, cb: (err: Error | null) => void) => void;
};
/**
 * Hypercore factory.
 */
export declare class FeedFactory<T extends {}> {
    private readonly _root;
    private readonly _signer?;
    private readonly _hypercoreOptions?;
    constructor({ root, signer, hypercore }: FeedFactoryOptions);
    get storageRoot(): Directory;
    createFeed(publicKey: PublicKey, options?: FeedOptions): Promise<FeedWrapper<T>>;
}
//# sourceMappingURL=feed-factory.d.ts.map