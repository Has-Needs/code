{
  "version": 3,
  "sources": ["../../../../src/testing/types.ts", "../../../../src/testing/utils.ts"],
  "sourcesContent": ["//\n// Copyright 2024 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport { EchoObject, EchoRelation, Expando, TypedObject } from '../object';\nimport { Ref, type Ref$ } from '../ref';\n\n// TODO(burdon): These are non-canonical test types, so we really shouldn't export and use in other classes (compare with @dxos/sdk/testing).\nexport namespace Testing {\n  //\n  // Primitives\n  //\n\n  const Circle = Schema.Struct({ type: Schema.Literal('circle'), radius: Schema.Number });\n  const Square = Schema.Struct({ type: Schema.Literal('square'), side: Schema.Number });\n  const Shape = Schema.Union(Circle, Square);\n\n  //\n  // Simple types\n  //\n\n  const TestNestedSchema = Schema.mutable(Schema.Struct({ field: Schema.String }));\n  export type TestNestedSchema = Schema.Schema.Type<typeof TestNestedSchema>;\n  export const TestNestedType = TestNestedSchema.pipe(\n    EchoObject({ typename: 'example.com/type/TestNested', version: '0.1.0' }),\n  );\n\n  //\n  // Complex types\n  // TODO(burdon): Change to Type.Obj.\n  //\n\n  export class EmptySchemaType extends TypedObject({\n    typename: 'example.com/type/Empty',\n    version: '0.1.0',\n  })({}) {}\n\n  const fields = {\n    string: Schema.String,\n    number: Schema.Number,\n    nullableShapeArray: Schema.mutable(Schema.Array(Schema.Union(Shape, Schema.Null))),\n    boolean: Schema.Boolean,\n    null: Schema.Null,\n    undefined: Schema.Undefined,\n    stringArray: Schema.mutable(Schema.Array(Schema.String)),\n    twoDimNumberArray: Schema.mutable(Schema.Array(Schema.mutable(Schema.Array(Schema.Number)))),\n    object: TestNestedSchema,\n    objectArray: Schema.mutable(Schema.Array(TestNestedSchema)),\n    nested: Schema.optional(Ref(TestNestedType)),\n    other: Schema.Any,\n  };\n\n  export const TestSchema = Schema.mutable(Schema.partial(Schema.Struct(fields)));\n  export type TestSchema = Schema.Schema.Type<typeof TestSchema>;\n\n  export class TestSchemaType extends TypedObject({\n    typename: 'example.com/type/Test',\n    version: '0.1.0',\n  })(fields, { partial: true }) {} // TODO(burdon): Partial?\n\n  // TODO(burdon): Why do we use need this rather then TestSchemaType?\n  export const TestType = TestSchema.pipe(\n    EchoObject({\n      typename: 'example.com/type/Test',\n      version: '0.1.0',\n    }),\n  );\n\n  export class TestClass {\n    field = 'value';\n    toJSON() {\n      return { field: this.field };\n    }\n  }\n\n  // TODO(dmaretskyi): Another top-level Schema.mutable call as a workaround for the regression in the last minor.\n  export const TestSchemaWithClass = Schema.mutable(\n    Schema.extend(\n      TestSchema,\n      Schema.mutable(\n        Schema.Struct({\n          classInstance: Schema.optional(Schema.instanceOf(TestClass)),\n        }),\n      ),\n    ),\n  );\n\n  export type TestSchemaWithClass = Schema.Schema.Type<typeof TestSchemaWithClass>;\n\n  export class Contact extends TypedObject({\n    typename: 'example.com/type/Contact',\n    version: '0.1.0',\n  })(\n    {\n      name: Schema.String,\n      username: Schema.String,\n      email: Schema.String,\n      tasks: Schema.suspend((): Schema.mutable<Schema.Array$<Ref$<Task>>> => Schema.mutable(Schema.Array(Ref(Task)))),\n      address: Schema.Struct({\n        city: Schema.optional(Schema.String),\n        state: Schema.optional(Schema.String),\n        zip: Schema.optional(Schema.String),\n        coordinates: Schema.Struct({\n          lat: Schema.optional(Schema.Number),\n          lng: Schema.optional(Schema.Number),\n        }),\n      }),\n    },\n    { partial: true },\n  ) {}\n\n  export class Task extends TypedObject({\n    typename: 'example.com/type/Task',\n    version: '0.1.0',\n  })(\n    {\n      title: Schema.optional(Schema.String),\n      completed: Schema.optional(Schema.Boolean),\n      assignee: Schema.optional(Ref(Contact)),\n      previous: Schema.optional(Schema.suspend((): Ref$<Task> => Ref(Task))),\n      subTasks: Schema.optional(Schema.mutable(Schema.Array(Schema.suspend((): Ref$<Task> => Ref(Task))))),\n      description: Schema.optional(Schema.String),\n    },\n    { partial: true },\n  ) {}\n\n  // TOOD(burdon): Ref$ breaks if using new syntax (since ID is not declared).\n\n  // export const Task = Schema.Struct({\n  //   title: Schema.String,\n  //   completed: Schema.Boolean,\n  //   assignee: Schema.optional(Ref(Schema.suspend((): Ref$<Contact> => Ref(Contact)))),\n  //   previous: Schema.optional(Ref(Schema.suspend((): Ref$<Task> => Ref(Task)))),\n  //   subTasks: Schema.optional(Schema.Array(Ref(Schema.suspend((): Ref$<Task> => Ref(Task))))),\n  //   description: Schema.optional(Schema.String),\n  // }).pipe(\n  //   EchoObject({\n  //     typename: 'example.com/type/Task',\n  //     version: '0.1.0',\n  //   }),\n  // );\n\n  // export type Task = Schema.Schema.Type<typeof Task>;\n\n  // export const Contact = Schema.Struct({\n  //   name: Schema.String,\n  //   username: Schema.String,\n  //   email: Schema.String,\n  //   // TOOD(burdon): Should model via relations?\n  //   // tasks: Schema.mutable(Schema.Array(Ref(Task))),\n  //   address: Schema.Struct({\n  //     city: Schema.optional(Schema.String),\n  //     state: Schema.optional(Schema.String),\n  //     zip: Schema.optional(Schema.String),\n  //     coordinates: Schema.Struct({\n  //       lat: Schema.optional(Schema.Number),\n  //       lng: Schema.optional(Schema.Number),\n  //     }),\n  //   }),\n  // }).pipe(\n  //   EchoObject({\n  //     typename: 'example.com/type/Contact',\n  //     version: '0.1.0',\n  //   }),\n  // );\n\n  // export type Contact = Schema.Schema.Type<typeof Contact>;\n\n  export enum RecordType {\n    UNDEFINED = 0,\n    PERSONAL = 1,\n    WORK = 2,\n  }\n\n  export class Container extends TypedObject({\n    typename: 'example.com/type/Container',\n    version: '0.1.0',\n  })(\n    {\n      objects: Schema.mutable(Schema.Array(Ref(Expando))),\n      records: Schema.mutable(\n        Schema.Array(\n          Schema.partial(\n            Schema.Struct({\n              title: Schema.String,\n              description: Schema.String,\n              contacts: Schema.mutable(Schema.Array(Ref(Contact))),\n              type: Schema.Enums(RecordType),\n            }),\n          ),\n        ),\n      ),\n    },\n    { partial: true },\n  ) {}\n\n  export const HasManager = Schema.Struct({\n    since: Schema.optional(Schema.String),\n  }).pipe(\n    EchoRelation({\n      typename: 'example.com/type/HasManager',\n      version: '0.1.0',\n      source: Contact,\n      target: Contact,\n    }),\n  );\n  export interface HasManager extends Schema.Schema.Type<typeof HasManager> {}\n}\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { effect } from '@preact/signals-core';\nimport { type SchemaAST } from 'effect';\n\nimport { registerSignalsRuntime } from '@dxos/echo-signals';\nimport { deepMapValues } from '@dxos/util';\n\nregisterSignalsRuntime();\n\n// TODO(burdon): Move to util.\nexport const updateCounter = (touch: () => void) => {\n  let updateCount = -1;\n  const unsubscribe = effect(() => {\n    touch();\n    updateCount++;\n  });\n\n  return {\n    // https://github.com/tc39/proposal-explicit-resource-management\n    [Symbol.dispose]: unsubscribe,\n    get count() {\n      return updateCount;\n    },\n  };\n};\n\n/**\n * Converts AST to a format that can be compared with test matchers.\n */\nexport const prepareAstForCompare = (obj: SchemaAST.AST): any =>\n  deepMapValues(obj, (value: any, recurse, key) => {\n    if (typeof value === 'function') {\n      return null;\n    }\n\n    if (value instanceof RegExp) {\n      return value;\n    }\n\n    // Convert symbols to strings.\n    if (typeof value === 'object') {\n      const clone = { ...value };\n      for (const sym of Object.getOwnPropertySymbols(clone as any)) {\n        clone[sym.toString()] = clone[sym];\n        delete clone[sym];\n      }\n      return recurse(clone);\n    }\n\n    return recurse(value);\n  });\n"],
  "mappings": ";;;;;;;;;;AAIA,SAASA,cAAc;UAMNC,UAAAA;AAKf,QAAMC,SAASC,OAAOC,OAAO;IAAEC,MAAMF,OAAOG,QAAQ,QAAA;IAAWC,QAAQJ,OAAOK;EAAO,CAAA;AACrF,QAAMC,SAASN,OAAOC,OAAO;IAAEC,MAAMF,OAAOG,QAAQ,QAAA;IAAWI,MAAMP,OAAOK;EAAO,CAAA;AACnF,QAAMG,QAAQR,OAAOS,MAAMV,QAAQO,MAAAA;AAMnC,QAAMI,mBAAmBV,OAAOW,QAAQX,OAAOC,OAAO;IAAEW,OAAOZ,OAAOa;EAAO,CAAA,CAAA;WAEhEC,iBAAiBJ,iBAAiBK,KAC7CC,WAAW;IAAEC,UAAU;IAA+BC,SAAS;EAAQ,CAAA,CAAA;EAQlE,MAAMC,wBAAwBC,YAAY;IAC/CH,UAAU;IACVC,SAAS;EACX,CAAA,EAAG,CAAC,CAAA,EAAA;EAAI;WAHKC,kBAAAA;AAKb,QAAME,SAAS;IACbC,QAAQtB,OAAOa;IACfU,QAAQvB,OAAOK;IACfmB,oBAAoBxB,OAAOW,QAAQX,OAAOyB,MAAMzB,OAAOS,MAAMD,OAAOR,OAAO0B,IAAI,CAAA,CAAA;IAC/EC,SAAS3B,OAAO4B;IAChBC,MAAM7B,OAAO0B;IACbI,WAAW9B,OAAO+B;IAClBC,aAAahC,OAAOW,QAAQX,OAAOyB,MAAMzB,OAAOa,MAAM,CAAA;IACtDoB,mBAAmBjC,OAAOW,QAAQX,OAAOyB,MAAMzB,OAAOW,QAAQX,OAAOyB,MAAMzB,OAAOK,MAAM,CAAA,CAAA,CAAA;IACxF6B,QAAQxB;IACRyB,aAAanC,OAAOW,QAAQX,OAAOyB,MAAMf,gBAAAA,CAAAA;IACzC0B,QAAQpC,OAAOqC,SAASC,IAAAA,SAAIxB,cAAAA,CAAAA;IAC5ByB,OAAOvC,OAAOwC;EAChB;WAEaC,aAAazC,OAAOW,QAAQX,OAAO0C,QAAQ1C,OAAOC,OAAOoB,MAAAA,CAAAA,CAAAA;EAG/D,MAAMsB,uBAAuBvB,YAAY;IAC9CH,UAAU;IACVC,SAAS;EACX,CAAA,EAAGG,QAAQ;IAAEqB,SAAS;EAAK,CAAA,EAAA;EAAI;WAHlBC,iBAAAA;WAMAC,WAAWH,SAAAA,WAAW1B,KACjCC,WAAW;IACTC,UAAU;IACVC,SAAS;EACX,CAAA,CAAA;EAGK,MAAM2B,UAAAA;IAAN;AACLjC,mBAAQ;;IACRkC,SAAS;AACP,aAAO;QAAElC,OAAO,KAAKA;MAAM;IAC7B;EACF;WALaiC,YAAAA;WAQAE,sBAAsB/C,OAAOW,QACxCX,OAAOgD,OAAMlD,SACX2C,YACAzC,OAAOW,QACLX,OAAOC,OAAO;IACZgD,eAAejD,OAAOqC,SAASrC,OAAOkD,WAAWL,SAAAA,CAAAA;EACnD,CAAA,CAAA,CAAA,CAAA;EAOC,MAAMM,gBAAgB/B,YAAY;IACvCH,UAAU;IACVC,SAAS;EACX,CAAA,EACE;IACEkC,MAAMpD,OAAOa;IACbwC,UAAUrD,OAAOa;IACjByC,OAAOtD,OAAOa;IACd0C,OAAOvD,OAAOwD,QAAQ,MAAiDxD,OAAOW,QAAQX,OAAOyB,MAAMa,IAAImB,IAAAA,CAAAA,CAAAA,CAAAA;IACvGC,SAAS1D,OAAOC,OAAO;MACrB0D,MAAM3D,OAAOqC,SAASrC,OAAOa,MAAM;MACnC+C,OAAO5D,OAAOqC,SAASrC,OAAOa,MAAM;MACpCgD,KAAK7D,OAAOqC,SAASrC,OAAOa,MAAM;MAClCiD,aAAa9D,OAAOC,OAAO;QACzB8D,KAAK/D,OAAOqC,SAASrC,OAAOK,MAAM;QAClC2D,KAAKhE,OAAOqC,SAASrC,OAAOK,MAAM;MACpC,CAAA;IACF,CAAA;EACF,GACA;IAAEqC,SAAS;EAAK,CAAA,EAAA;EACf;WApBUS,UAAAA;EAsBN,MAAMM,aAAarC,YAAY;IACpCH,UAAU;IACVC,SAAS;EACX,CAAA,EACE;IACE+C,OAAOjE,OAAOqC,SAASrC,OAAOa,MAAM;IACpCqD,WAAWlE,OAAOqC,SAASrC,OAAO4B,OAAO;IACzCuC,UAAUnE,OAAOqC,SAASC,IAAIa,OAAAA,CAAAA;IAC9BiB,UAAUpE,OAAOqC,SAASrC,OAAOwD,QAAQ,MAAkBlB,IAAImB,IAAAA,CAAAA,CAAAA;IAC/DY,UAAUrE,OAAOqC,SAASrC,OAAOW,QAAQX,OAAOyB,MAAMzB,OAAOwD,QAAQ,MAAkBlB,IAAImB,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;IAC3Fa,aAAatE,OAAOqC,SAASrC,OAAOa,MAAM;EAC5C,GACA;IAAE6B,SAAS;EAAK,CAAA,EAAA;EACf;WAbUe,OAAAA;YAyDDc,YAAAA;;;;cAAAA,eAAAA,SAAAA,aAAAA,CAAAA,EAAAA;EAML,MAAMC,kBAAkBpD,YAAY;IACzCH,UAAU;IACVC,SAAS;EACX,CAAA,EACE;IACEuD,SAASzE,OAAOW,QAAQX,OAAOyB,MAAMa,IAAIoC,OAAAA,CAAAA,CAAAA;IACzCC,SAAS3E,OAAOW,QACdX,OAAOyB,MACLzB,OAAO0C,QACL1C,OAAOC,OAAO;MACZgE,OAAOjE,OAAOa;MACdyD,aAAatE,OAAOa;MACpB+D,UAAU5E,OAAOW,QAAQX,OAAOyB,MAAMa,IAAIa,OAAAA,CAAAA,CAAAA;MAC1CjD,MAAMF,OAAO6E,MAAK/E,SAACyE,UAAAA;IACrB,CAAA,CAAA,CAAA,CAAA;EAIR,GACA;IAAE7B,SAAS;EAAK,CAAA,EAAA;EACf;WApBU8B,YAAAA;WAsBAM,aAAa9E,OAAOC,OAAO;IACtC8E,OAAO/E,OAAOqC,SAASrC,OAAOa,MAAM;EACtC,CAAA,EAAGE,KACDiE,aAAa;IACX/D,UAAU;IACVC,SAAS;IACT+D,QAAQ9B;IACR+B,QAAQ/B;EACV,CAAA,CAAA;AAGJ,GAvMiBrD,YAAAA,UAAAA,CAAAA,EAAAA;;;;ACNjB,SAASqF,cAAc;AAGvB,SAASC,8BAA8B;AACvC,SAASC,qBAAqB;AAE9BC,uBAAAA;AAGO,IAAMC,gBAAgB,CAACC,UAAAA;AAC5B,MAAIC,cAAc;AAClB,QAAMC,cAAcC,OAAO,MAAA;AACzBH,UAAAA;AACAC;EACF,CAAA;AAEA,SAAO;;IAEL,CAACG,OAAOC,OAAO,GAAGH;IAClB,IAAII,QAAQ;AACV,aAAOL;IACT;EACF;AACF;AAKO,IAAMM,uBAAuB,CAACC,QACnCC,cAAcD,KAAK,CAACE,OAAYC,SAASC,QAAAA;AACvC,MAAI,OAAOF,UAAU,YAAY;AAC/B,WAAO;EACT;AAEA,MAAIA,iBAAiBG,QAAQ;AAC3B,WAAOH;EACT;AAGA,MAAI,OAAOA,UAAU,UAAU;AAC7B,UAAMI,QAAQ;MAAE,GAAGJ;IAAM;AACzB,eAAWK,OAAOC,OAAOC,sBAAsBH,KAAAA,GAAe;AAC5DA,YAAMC,IAAIG,SAAQ,CAAA,IAAMJ,MAAMC,GAAAA;AAC9B,aAAOD,MAAMC,GAAAA;IACf;AACA,WAAOJ,QAAQG,KAAAA;EACjB;AAEA,SAAOH,QAAQD,KAAAA;AACjB,CAAA;",
  "names": ["Schema", "Testing", "Circle", "Schema", "Struct", "type", "Literal", "radius", "Number", "Square", "side", "Shape", "Union", "TestNestedSchema", "mutable", "field", "String", "TestNestedType", "pipe", "EchoObject", "typename", "version", "EmptySchemaType", "TypedObject", "fields", "string", "number", "nullableShapeArray", "Array", "Null", "boolean", "Boolean", "null", "undefined", "Undefined", "stringArray", "twoDimNumberArray", "object", "objectArray", "nested", "optional", "Ref", "other", "Any", "TestSchema", "partial", "TestSchemaType", "TestType", "TestClass", "toJSON", "TestSchemaWithClass", "extend", "classInstance", "instanceOf", "Contact", "name", "username", "email", "tasks", "suspend", "Task", "address", "city", "state", "zip", "coordinates", "lat", "lng", "title", "completed", "assignee", "previous", "subTasks", "description", "RecordType", "Container", "objects", "Expando", "records", "contacts", "Enums", "HasManager", "since", "EchoRelation", "source", "target", "effect", "registerSignalsRuntime", "deepMapValues", "registerSignalsRuntime", "updateCounter", "touch", "updateCount", "unsubscribe", "effect", "Symbol", "dispose", "count", "prepareAstForCompare", "obj", "deepMapValues", "value", "recurse", "key", "RegExp", "clone", "sym", "Object", "getOwnPropertySymbols", "toString"]
}
