import { type Schema } from 'effect';
import { type ForeignKey } from '@dxos/echo-protocol';
import { DXN, ObjectId } from '@dxos/keys';
import { type ObjectMeta } from './meta';
import { EntityKind } from '../ast';
/**
 * Entity kind.
 */
export declare const EntityKindId: unique symbol;
/**
 * DXN to the object itself.
 */
export declare const SelfDXNId: unique symbol;
/**
 * Property name for self DXN when object is serialized to JSON.
 */
export declare const ATTR_SELF_DXN = "@self";
/**
 * DXN to the object type.
 */
export declare const TypeId: unique symbol;
/**
 * Property name for typename when object is serialized to JSON.
 */
export declare const ATTR_TYPE = "@type";
/**
 * Reference to the object schema.
 */
export declare const SchemaId: unique symbol;
/**
 * Deletion marker.
 */
export declare const DeletedId: unique symbol;
/**
 * Property name for deleted when object is serialized to JSON.
 */
export declare const ATTR_DELETED = "@deleted";
/**
 * Metadata section.
 */
export declare const MetaId: unique symbol;
/**
 * Property name for meta when object is serialized to JSON.
 */
export declare const ATTR_META = "@meta";
/**
 * Used to access relation source ref on live ECHO objects.
 * Reading this symbol must return `Live<EchoObject<any>>` or a DXN.
 */
export declare const RelationSourceDXNId: unique symbol;
/**
 * Property name for relation source when object is serialized to JSON.
 */
export declare const ATTR_RELATION_SOURCE = "@relationSource";
/**
 * Used to access relation target ref on live ECHO objects.
 * Reading this symbol must return `Live<EchoObject<any>>` or a DXN.
 */
export declare const RelationTargetDXNId: unique symbol;
/**
 * Property name for relation target when object is serialized to JSON.
 */
export declare const ATTR_RELATION_TARGET = "@relationTarget";
/**
 * Used to access relation source ref on live ECHO objects.
 * Reading this symbol must return `Live<EchoObject<any>>` or a DXN.
 */
export declare const RelationSourceId: unique symbol;
/**
 * Used to access relation target ref on live ECHO objects.
 * Reading this symbol must return `Live<EchoObject<any>>` or a DXN.
 */
export declare const RelationTargetId: unique symbol;
/**
 * Internal runtime representation of an object.
 * The fields are accessed through getter functions.
 */
export interface InternalObjectProps {
    id: ObjectId;
    readonly [SelfDXNId]?: DXN;
    readonly [TypeId]?: DXN;
    /**
     * Returns the schema for the object.
     */
    readonly [SchemaId]?: Schema.Schema.AnyNoContext;
    readonly [EntityKindId]: EntityKind;
    readonly [DeletedId]?: boolean;
    readonly [MetaId]?: ObjectMeta;
    readonly [RelationSourceDXNId]?: DXN;
    readonly [RelationTargetDXNId]?: DXN;
    readonly [RelationSourceId]?: InternalObjectProps;
    readonly [RelationTargetId]?: InternalObjectProps;
}
/**
 * JSON representation of an object or relation.
 */
export interface ObjectJSON {
    id: string;
    [ATTR_SELF_DXN]?: DXN.String;
    [ATTR_TYPE]: DXN.String;
    [ATTR_DELETED]?: boolean;
    [ATTR_META]?: ObjectMetaJSON;
    [ATTR_RELATION_SOURCE]?: DXN.String;
    [ATTR_RELATION_TARGET]?: DXN.String;
}
export interface ObjectMetaJSON {
    keys: ForeignKey[];
}
export declare function assertObjectModelShape(obj: unknown): asserts obj is InternalObjectProps;
//# sourceMappingURL=model.d.ts.map