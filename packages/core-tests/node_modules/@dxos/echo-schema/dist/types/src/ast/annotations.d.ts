import { Schema, SchemaAST } from 'effect';
import { DXN } from '@dxos/keys';
import { type Primitive } from '@dxos/util';
import { EntityKind } from './entity-kind';
/**
 * ECHO identifier (for a stored schema).
 * Must be a `dxn:echo:` URI.
 */
export declare const TypeIdentifierAnnotationId: unique symbol;
export declare const getTypeIdentifierAnnotation: (schema: Schema.Schema.All) => string | undefined;
/**
 * ECHO type.
 */
export declare const TypeAnnotationId: unique symbol;
export declare const Typename: Schema.filter<typeof Schema.String>;
export declare const Version: Schema.filter<typeof Schema.String>;
/**
 * Payload stored under {@link TypeAnnotationId}.
 */
export declare const TypeAnnotation: Schema.Struct<{
    kind: Schema.Enums<typeof EntityKind>;
    typename: Schema.filter<typeof Schema.String>;
    version: Schema.filter<typeof Schema.String>;
    /**
     * If this is a relation, the schema of the source object.
     * Must be present if entity kind is {@link EntityKind.Relation}.
     */
    sourceSchema: Schema.optional<Schema.refine<string, typeof Schema.NonEmptyString>>;
    /**
     * If this is a relation, the schema of the target object.
     * Must be present if entity kind is {@link EntityKind.Relation}.
     */
    targetSchema: Schema.optional<Schema.refine<string, typeof Schema.NonEmptyString>>;
}>;
export interface TypeAnnotation extends Schema.Schema.Type<typeof TypeAnnotation> {
}
export type TypeMeta = Pick<TypeAnnotation, 'typename' | 'version'>;
/**
 * @returns {@link TypeAnnotation} from a schema.
 * Schema must have been created with {@link TypedObject} or {@link TypedLink} or manually assigned an appropriate annotation.
 */
export declare const getTypeAnnotation: (schema: Schema.Schema.All) => TypeAnnotation | undefined;
/**
 * @returns {@link EntityKind} from a schema.
 */
export declare const getEntityKind: (schema: Schema.Schema.All) => EntityKind | undefined;
/**
 * @deprecated Use {@link Type.getTypename} instead.
 * @returns Schema typename (without dxn: prefix or version number).
 */
export declare const getSchemaTypename: (schema: Schema.Schema.All) => string | undefined;
/**
 * @deprecated Use {@link Type.getVersion} instead.
 * @returns Schema version in semver format.
 */
export declare const getSchemaVersion: (schema: Schema.Schema.All) => string | undefined;
/**
 * PropertyMeta (metadata for dynamic schema properties).
 * For user-defined annotations.
 */
export declare const PropertyMetaAnnotationId: unique symbol;
export type PropertyMetaValue = Primitive | Record<string, Primitive> | Primitive[];
export type PropertyMetaAnnotation = {
    [name: string]: PropertyMetaValue;
};
export declare const PropertyMeta: (name: string, value: PropertyMetaValue) => <A, I, R>(self: Schema.Schema<A, I, R>) => Schema.Schema<A, I, R>;
export declare const getPropertyMetaAnnotation: <T>(prop: SchemaAST.PropertySignature, name: string) => T | undefined;
/**
 * Schema reference.
 */
export declare const ReferenceAnnotationId: unique symbol;
export type ReferenceAnnotationValue = TypeAnnotation;
export declare const getReferenceAnnotation: (schema: Schema.Schema.AnyNoContext) => TypeAnnotation | undefined;
/**
 * SchemaMeta.
 */
export declare const SchemaMetaSymbol: unique symbol;
export type SchemaMeta = TypeMeta & {
    id: string;
};
/**
 * Identifies label property or JSON path expression.
 * Either a string or an array of strings representing field accessors each matched in priority order.
 */
export declare const LabelAnnotationId: unique symbol;
export declare const LabelAnnotation: import("./annotation-helper").AnnotationHelper<string[]>;
/**
 * Default field to be used on referenced schema to lookup the value.
 */
export declare const FieldLookupAnnotationId: unique symbol;
/**
 * Generate test data.
 */
export declare const GeneratorAnnotationId: unique symbol;
/** [path, probability] */
export type GeneratorAnnotationValue = string | [string, number];
export declare const GeneratorAnnotation: import("./annotation-helper").AnnotationHelper<GeneratorAnnotationValue>;
/**
 * @returns DXN of the schema.
 *
 * For non-stored schema returns `dxn:type:`.
 * For stored schema returns `dxn:echo:`.
 * @deprecated Use `Type.getDXN`.
 */
export declare const getSchemaDXN: (schema: Schema.Schema.All) => DXN | undefined;
//# sourceMappingURL=annotations.d.ts.map