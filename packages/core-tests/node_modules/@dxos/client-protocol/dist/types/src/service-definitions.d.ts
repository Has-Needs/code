import { type Event } from '@dxos/async';
import type { FunctionRegistryService } from '@dxos/protocols/proto/dxos/agent/functions';
import type { DevicesService, IdentityService, InvitationsService, LoggingService, NetworkService, SpacesService, SystemService, ContactsService, EdgeAgentService } from '@dxos/protocols/proto/dxos/client/services';
import type { DevtoolsHost } from '@dxos/protocols/proto/dxos/devtools/host';
import type { QueryService } from '@dxos/protocols/proto/dxos/echo/query';
import type { DataService } from '@dxos/protocols/proto/dxos/echo/service';
import type { AppService, ShellService, WorkerService } from '@dxos/protocols/proto/dxos/iframe';
import type { BridgeService } from '@dxos/protocols/proto/dxos/mesh/bridge';
import type { TracingService } from '@dxos/protocols/proto/dxos/tracing';
import { type ServiceBundle } from '@dxos/rpc';
export type ClientServices = {
    SystemService: SystemService;
    NetworkService: NetworkService;
    LoggingService: LoggingService;
    IdentityService: IdentityService;
    InvitationsService: InvitationsService;
    QueryService: QueryService;
    DevicesService: DevicesService;
    SpacesService: SpacesService;
    DataService: DataService;
    ContactsService: ContactsService;
    EdgeAgentService: EdgeAgentService;
    FunctionRegistryService: FunctionRegistryService;
    DevtoolsHost: DevtoolsHost;
    TracingService: TracingService;
};
/**
 * Provide access to client services definitions and service handler.
 */
export interface ClientServicesProvider {
    /**
     * The connection to the services provider was terminated.
     * This should fire if the services disconnect unexpectedly or during a client reset.
     */
    closed: Event<Error | undefined>;
    descriptors: ServiceBundle<ClientServices>;
    services: Partial<ClientServices>;
    open(): Promise<void>;
    close(): Promise<void>;
}
/**
 * Services supported by host.
 */
export declare const clientServiceBundle: ServiceBundle<ClientServices>;
export type IframeServiceBundle = {
    BridgeService: BridgeService;
};
export declare const iframeServiceBundle: ServiceBundle<IframeServiceBundle>;
export type WorkerServiceBundle = {
    WorkerService: WorkerService;
};
export declare const workerServiceBundle: ServiceBundle<WorkerServiceBundle>;
export type AppServiceBundle = {
    AppService: AppService;
};
export declare const appServiceBundle: ServiceBundle<AppServiceBundle>;
export type ShellServiceBundle = {
    ShellService: ShellService;
};
export declare const shellServiceBundle: ServiceBundle<ShellServiceBundle>;
//# sourceMappingURL=service-definitions.d.ts.map