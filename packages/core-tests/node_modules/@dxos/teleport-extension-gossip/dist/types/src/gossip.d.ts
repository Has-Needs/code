import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { type GossipMessage } from '@dxos/protocols/proto/dxos/mesh/teleport/gossip';
import { GossipExtension } from './gossip-extension';
export type GossipParams = {
    localPeerId: PublicKey;
};
/**
 * Gossip extensions manager.
 * Keeps track of all peers that are connected to the local peer.
 * Routes received announces to all connected peers.
 * Exposes API send announce to everybody and subscribe to .
 */
export declare class Gossip {
    private readonly _params;
    private readonly _ctx;
    private readonly _listeners;
    private readonly _receivedMessages;
    /**
     * Keys scheduled to be cleared from _receivedMessages on the next iteration.
     */
    private readonly _toClear;
    private readonly _connections;
    readonly connectionClosed: Event<PublicKey>;
    constructor(_params: GossipParams);
    get localPeerId(): PublicKey;
    open(): Promise<void>;
    close(): Promise<void>;
    getConnections(): PublicKey[];
    createExtension({ remotePeerId }: {
        remotePeerId: PublicKey;
    }): GossipExtension;
    postMessage(channel: string, payload: any): void;
    listen(channel: string, callback: (message: GossipMessage) => void): {
        unsubscribe: () => void;
    };
    private _callListeners;
    private _propagateAnnounce;
    private _performGc;
    private _sendAnnounceWithTimeoutTracking;
}
//# sourceMappingURL=gossip.d.ts.map