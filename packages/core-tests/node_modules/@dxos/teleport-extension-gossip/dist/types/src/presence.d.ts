import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { PublicKey } from '@dxos/keys';
import { type PeerState } from '@dxos/protocols/proto/dxos/mesh/presence';
import { type Gossip } from './gossip';
export type PresenceParams = {
    /**
     * Interval between presence announces.
     */
    announceInterval: number;
    /**
     * Timeout after which a peer is considered offline.
     * Should be greater than announceInterval.
     */
    offlineTimeout: number;
    /**
     * Identity key of the local peer.
     */
    identityKey: PublicKey;
    gossip: Gossip;
};
/**
 * Presence manager.
 * Keeps track of all peers that are connected to the local peer.
 * Routes received presence announces to all connected peers.
 * Exposes API to get the list of peers that are online.
 */
export declare class Presence extends Resource {
    private readonly _params;
    readonly updated: Event<void>;
    readonly newPeer: Event<PeerState>;
    private readonly _peerStates;
    private readonly _peersByIdentityKey;
    constructor(_params: PresenceParams);
    protected _open(): Promise<void>;
    protected _catch(err: Error): Promise<void>;
    getPeers(): PeerState[];
    getPeersByIdentityKey(key: PublicKey): PeerState[];
    getPeersOnline(): PeerState[];
    private _isOnline;
    getLocalState(): PeerState;
    private _receiveAnnounces;
    private _removePeerFromIdentityKeyIndex;
    private _updatePeerInIdentityKeyIndex;
}
//# sourceMappingURL=presence.d.ts.map