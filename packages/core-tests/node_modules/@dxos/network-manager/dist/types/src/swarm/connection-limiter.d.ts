import { DeferredTask } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
export declare const MAX_CONCURRENT_INITIATING_CONNECTIONS = 50;
export type ConnectionLimiterOptions = {
    maxConcurrentInitConnections?: number;
};
/**
 * Limits the amount of concurrent connections with 'CONNECTING' state.
 */
export declare class ConnectionLimiter {
    private readonly _ctx;
    private readonly _maxConcurrentInitConnections;
    /**
     * Queue of promises to resolve when initiating connections amount is below the limit.
     */
    private readonly _waitingPromises;
    resolveWaitingPromises: DeferredTask;
    constructor({ maxConcurrentInitConnections }?: ConnectionLimiterOptions);
    /**
     * @returns Promise that resolves in queue when connections amount with 'CONNECTING' state is below the limit.
     */
    connecting(sessionId: PublicKey): Promise<void>;
    /**
     * Rejects promise returned by `connecting` method.
     */
    doneConnecting(sessionId: PublicKey): void;
}
//# sourceMappingURL=connection-limiter.d.ts.map