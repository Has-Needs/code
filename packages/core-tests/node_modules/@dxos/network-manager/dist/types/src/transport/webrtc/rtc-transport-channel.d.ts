import { Event as AsyncEvent } from '@dxos/async';
import { Resource } from '@dxos/context';
import { ErrorStream } from '@dxos/debug';
import { type Signal } from '@dxos/protocols/proto/dxos/mesh/swarm';
import { type RtcPeerConnection } from './rtc-peer-connection';
import { type Transport, type TransportOptions, type TransportStats } from '../transport';
/**
 * A WebRTC connection data channel.
 * Manages a WebRTC connection to a remote peer using an abstract signalling mechanism.
 */
export declare class RtcTransportChannel extends Resource implements Transport {
    private readonly _connection;
    private readonly _options;
    readonly closed: AsyncEvent<void>;
    readonly connected: AsyncEvent<void>;
    readonly errors: ErrorStream;
    private _channel;
    private _stream;
    private _streamDataFlushedCallback;
    private _isChannelCreationInProgress;
    constructor(_connection: RtcPeerConnection, _options: TransportOptions);
    get isRtcChannelCreationInProgress(): boolean;
    onConnectionError(error: Error): void;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    private _initChannel;
    private _handleChannelWrite;
    private _safeCloseChannel;
    onSignal(signal: Signal): Promise<void>;
    getDetails(): Promise<string>;
    getStats(): Promise<TransportStats>;
}
//# sourceMappingURL=rtc-transport-channel.d.ts.map