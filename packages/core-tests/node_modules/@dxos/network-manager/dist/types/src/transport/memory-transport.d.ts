import { Event } from '@dxos/async';
import { ErrorStream } from '@dxos/debug';
import { type Signal } from '@dxos/protocols/proto/dxos/mesh/swarm';
import { type Transport, type TransportFactory, type TransportOptions } from './transport';
export declare const MemoryTransportFactory: TransportFactory;
/**
 * Fake transport.
 */
export declare class MemoryTransport implements Transport {
    private readonly _options;
    private static readonly _connections;
    private readonly _instanceId;
    private readonly _remote;
    private readonly _outgoingDelay;
    private readonly _incomingDelay;
    private _closed;
    private _remoteInstanceId;
    private _remoteConnection?;
    readonly closed: Event<void>;
    readonly connected: Event<void>;
    readonly errors: ErrorStream;
    constructor(_options: TransportOptions);
    get isOpen(): boolean;
    open(): Promise<this>;
    close(): Promise<this>;
    onSignal({ payload }: Signal): Promise<void>;
    getDetails(): Promise<string>;
    getStats(): Promise<{
        bytesSent: number;
        bytesReceived: number;
        packetsSent: number;
        packetsReceived: number;
    }>;
}
//# sourceMappingURL=memory-transport.d.ts.map