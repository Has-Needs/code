import { type Context } from '@dxos/context';
import { PublicKey } from '@dxos/keys';
import { type SignalRPCClient } from './signal-rpc-client';
import type { Message, SwarmEvent } from '../signal-methods';
export declare class SignalLocalState {
    private readonly _onMessage;
    private readonly _onSwarmEvent;
    /**
     * Swarm events streams. Keys represent actually joined topic and peerId.
     */
    private readonly _swarmStreams;
    /**
     * Represent desired joined topic and peerId.
     */
    private readonly _joinedTopics;
    /**
     * Represent desired message subscriptions.
     */
    private readonly _subscribedMessages;
    constructor(_onMessage: (params: Message) => Promise<void>, _onSwarmEvent: (params: SwarmEvent) => Promise<void>);
    safeCloseStreams(): Promise<{
        failureCount: number;
    }>;
    join({ topic, peerId }: {
        topic: PublicKey;
        peerId: PublicKey;
    }): void;
    leave({ topic, peerId }: {
        topic: PublicKey;
        peerId: PublicKey;
    }): void;
    subscribeMessages(peerId: PublicKey): void;
    unsubscribeMessages(peerId: PublicKey): void;
    reconcile(ctx: Context, client: SignalRPCClient): Promise<void>;
    private _reconcileSwarmSubscriptions;
    private _reconcileMessageSubscriptions;
}
//# sourceMappingURL=signal-local-state.d.ts.map