// packages/core/echo/echo-signals/src/runtime/index.ts
var runtimeList = [];
var runtimeUsed = false;
var registerSignalsRuntime = (runtime) => {
  if (runtimeUsed) {
  }
  runtimeList.push(runtime);
};
var CompositeSignal = class {
  constructor(_signals, debugInfo = void 0) {
    this._signals = _signals;
    this.debugInfo = debugInfo;
  }
  notifyRead() {
    for (const signal of this._signals) {
      signal.notifyRead();
    }
  }
  notifyWrite() {
    for (const signal of this._signals) {
      signal.notifyWrite();
    }
  }
  toString() {
    return "CompositeSignal";
  }
};
var CompositeRuntime = class {
  batch(cb) {
    runtimeUsed = true;
    const callBatchRecursively = (index) => {
      if (index >= runtimeList.length) {
        return cb();
      } else {
        return runtimeList[index].batch(() => callBatchRecursively(index + 1));
      }
    };
    return callBatchRecursively(0);
  }
  createSignal(debugInfo) {
    runtimeUsed = true;
    return new CompositeSignal(runtimeList.map((runtime) => runtime.createSignal(debugInfo)), debugInfo);
  }
  untracked(cb) {
    runtimeUsed = true;
    const callUntrackedRecursively = (index) => {
      if (index >= runtimeList.length) {
        return cb();
      } else {
        return runtimeList[index].untracked(() => callUntrackedRecursively(index + 1));
      }
    };
    return callUntrackedRecursively(0);
  }
};
var compositeRuntime = new CompositeRuntime();

export {
  runtimeList,
  registerSignalsRuntime,
  compositeRuntime
};
//# sourceMappingURL=chunk-AAIHXYHY.mjs.map
