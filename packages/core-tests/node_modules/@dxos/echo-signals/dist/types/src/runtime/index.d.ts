export interface GenericSignal {
    /**
     * Simulate a read operation on the signal.
     * Subscribes the current computation to the signal.
     */
    notifyRead(): void;
    /**
     * Simulate a write operation on the signal.
     * Notifies all subscribed computations about the change.
     */
    notifyWrite(): void;
}
export interface SignalRuntime {
    /**
     * @param debugInfo - Optional string name or owner object of the signal. Used for debugging purposes.
     */
    createSignal(debugInfo?: unknown): GenericSignal;
    /**
     * All writes inside the callback will be batched and notified when the callback is finished.
     */
    batch(cb: () => void): void;
    /**
     * @deprecated Temporary measure to prevent ECHO from subscribing to signals within its internals.
     */
    untracked<T>(cb: () => T): T;
}
export declare const runtimeList: SignalRuntime[];
/**
 * Registeres a signal runtime (e.g., Preact Signals or SolidJS).
 * ECHO will hook into the runtime so that ECHO objects generate signal-like notifications on changes.
 * Registration is done at the module level (e.g., in the main module of the runtime).
 * Multiple runtimes can be registered at once.
 */
export declare const registerSignalsRuntime: (runtime: SignalRuntime) => void;
/**
 * Runtime that represents a composite of all mutliple runtimes.
 * Signal notification would be broadcast to all runtimes individually.
 * Batches are executed in each runtime.
 */
export declare const compositeRuntime: SignalRuntime;
//# sourceMappingURL=index.d.ts.map