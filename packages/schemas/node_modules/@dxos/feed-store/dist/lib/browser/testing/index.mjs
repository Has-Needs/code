import "@dxos/node-std/globals";
import {
  FeedFactory,
  FeedStore
} from "../chunk-WS47OKDO.mjs";

// packages/common/feed-store/src/testing/mocks.ts
import { Event, scheduleTask } from "@dxos/async";
import { Context } from "@dxos/context";
import { PublicKey } from "@dxos/keys";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/common/feed-store/src/testing/mocks.ts";
var MockFeedWriter = class {
  constructor(feedKey = PublicKey.random()) {
    this.feedKey = feedKey;
    this.written = new Event();
    this.messages = [];
  }
  async write(data, { afterWrite } = {}) {
    this.messages.push(data);
    const receipt = {
      feedKey: this.feedKey,
      seq: this.messages.length - 1
    };
    await afterWrite?.(receipt);
    scheduleTask(new Context(void 0, {
      F: __dxlog_file,
      L: 30
    }), () => {
      this.written.emit([
        data,
        receipt
      ]);
    });
    return receipt;
  }
};

// packages/common/feed-store/src/testing/test-builder.ts
import { Keyring } from "@dxos/keyring";
import { createStorage, StorageType } from "@dxos/random-access-storage";

// packages/common/feed-store/src/testing/test-generator.ts
import { sleep } from "@dxos/async";
import { createCodecEncoding } from "@dxos/hypercore";
import { faker } from "@dxos/random";
var defaultCodec = {
  encode: (obj) => Buffer.from(JSON.stringify(obj)),
  decode: (buffer) => JSON.parse(buffer.toString())
};
var defaultValueEncoding = createCodecEncoding(defaultCodec);
var defaultTestBlockGenerator = (i) => ({
  id: faker.string.uuid(),
  index: i,
  value: faker.lorem.sentence()
});
var TestGenerator = class {
  constructor(_generate) {
    this._generate = _generate;
    this._count = 0;
  }
  async writeBlocks(writer, { count = 1, delay } = {}) {
    return await Promise.all(Array.from(Array(count)).map(async () => {
      const data = this._generate(this._count++);
      const receipt = await writer.write(data);
      if (delay) {
        await sleep(faker.number.int(delay));
      }
      return receipt;
    }));
  }
};
var defaultTestGenerator = new TestGenerator(defaultTestBlockGenerator);

// packages/common/feed-store/src/testing/test-builder.ts
var evaluate = (builder, arg) => arg === "function" ? arg(builder) : arg;
var TestBuilder = class _TestBuilder {
  static {
    this.ROOT_DIR = "feeds";
  }
  constructor(_properties = {}) {
    this._properties = _properties;
  }
  /**
  * Creates a new builder with the current builder's properties.
  */
  clone() {
    return new _TestBuilder(Object.assign({}, this._properties));
  }
  get keyring() {
    return this._properties.keyring ??= new Keyring();
  }
  get storage() {
    return this._properties.storage ??= createStorage({
      type: StorageType.RAM
    });
  }
  get root() {
    return this._properties.root ??= this.storage.createDirectory(_TestBuilder.ROOT_DIR);
  }
  setKeyring(keyring) {
    this._properties.keyring = evaluate(this, keyring);
    return this;
  }
  setStorage(storage, root) {
    this._properties.storage = evaluate(this, storage);
    if (root) {
      this._properties.root = this.storage.createDirectory(root);
    }
    return this;
  }
  setRoot(root) {
    this._properties.root = evaluate(this, root);
    return this;
  }
  createFeedFactory() {
    return new FeedFactory({
      root: this.root,
      signer: this.keyring,
      hypercore: {
        valueEncoding: this._properties.valueEncoding
      }
    });
  }
  createFeedStore() {
    return new FeedStore({
      factory: this.createFeedFactory()
    });
  }
};
var TestItemBuilder = class extends TestBuilder {
  constructor() {
    super({
      valueEncoding: defaultValueEncoding,
      generator: defaultTestGenerator
    });
  }
  get valueEncoding() {
    return this._properties.valueEncoding;
  }
  get generator() {
    return this._properties.generator;
  }
};
export {
  MockFeedWriter,
  TestBuilder,
  TestGenerator,
  TestItemBuilder,
  defaultCodec,
  defaultTestBlockGenerator,
  defaultTestGenerator,
  defaultValueEncoding
};
//# sourceMappingURL=index.mjs.map
