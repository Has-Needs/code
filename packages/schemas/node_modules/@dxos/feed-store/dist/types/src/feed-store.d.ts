import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { type FeedFactory, type FeedOptions } from './feed-factory';
import { type FeedWrapper } from './feed-wrapper';
export interface FeedStoreOptions<T extends {}> {
    factory: FeedFactory<T>;
}
/**
 * Persistent hypercore store.
 */
export declare class FeedStore<T extends {}> {
    private readonly _feeds;
    private readonly _mutexes;
    private readonly _factory;
    private _closed;
    readonly feedOpened: Event<FeedWrapper<T>>;
    constructor({ factory }: FeedStoreOptions<T>);
    get size(): number;
    get feeds(): FeedWrapper<T>[];
    /**
     * Get the open feed if it exists.
     */
    getFeed(publicKey: PublicKey): FeedWrapper<T> | undefined;
    /**
     * Gets or opens a feed.
     * The feed is readonly unless a secret key is provided.
     */
    openFeed(feedKey: PublicKey, { writable, sparse }?: FeedOptions): Promise<FeedWrapper<T>>;
    /**
     * Close all feeds.
     */
    close(): Promise<void>;
}
//# sourceMappingURL=feed-store.d.ts.map