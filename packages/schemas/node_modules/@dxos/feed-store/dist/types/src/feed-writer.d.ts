import { type PublicKey } from '@dxos/keys';
export type WriteReceipt = {
    feedKey: PublicKey;
    seq: number;
};
export type WriteOptions = {
    /**
     * Called after the write is complete.
     * Runs and completes before the mutation is read from the pipeline.
     */
    afterWrite?: (receipt: WriteReceipt) => Promise<void>;
};
export interface FeedWriter<T extends {}> {
    /**
     * Write data to the feed.
     * Awaits `afterWrite` before returning.
     */
    write(data: T, options?: WriteOptions): Promise<WriteReceipt>;
}
export declare const createFeedWriter: <T extends {}>(cb: (data: T) => Promise<WriteReceipt>) => FeedWriter<T>;
export declare const writeMessages: <T extends {}>(writer: FeedWriter<T>, messages: T[]) => Promise<WriteReceipt[]>;
//# sourceMappingURL=feed-writer.d.ts.map