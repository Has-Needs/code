import { type FeedWrapper } from './feed-wrapper';
import { type FeedBlock } from './types';
/**
 * Base class for an async iterable feed.
 */
export declare abstract class AbstractFeedIterator<T> implements AsyncIterable<FeedBlock<T>> {
    private readonly _stopTrigger;
    protected _open: boolean;
    protected _running: boolean;
    toJSON(): {
        open: boolean;
        running: boolean;
    };
    get isOpen(): boolean;
    get isRunning(): boolean;
    open(): Promise<void>;
    close(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    [Symbol.asyncIterator](): AsyncGenerator<FeedBlock<T>, void, unknown>;
    _generator(): AsyncGenerator<FeedBlock<T>, void, unknown>;
    abstract _onOpen(): Promise<void>;
    abstract _onClose(): Promise<void>;
    abstract _nextBlock(): Promise<FeedBlock<T> | undefined>;
}
/**
 * Iterator that reads blocks from a single feed.
 */
export declare class FeedIterator<T extends {}> extends AbstractFeedIterator<T> {
    private readonly _feed;
    private readonly _queue;
    constructor(_feed: FeedWrapper<T>);
    _onOpen(): Promise<void>;
    _onClose(): Promise<void>;
    _nextBlock(): Promise<FeedBlock<T> | undefined>;
}
//# sourceMappingURL=feed-iterator.d.ts.map