import type { RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../substitutions.js";
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface StartRequest {
    origin: string;
    /**
     * Key for the iframe resource lock used to determine when the service is closing.
     *
     * Options:
     *   - proto3_optional = true
     */
    lockKey?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    observabilityGroup?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    signalTelemetryEnabled?: boolean;
}
/**
 * Iframe-to-worker RPCs.
 *
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface WorkerService {
    start: (request: StartRequest, options?: RequestOptions) => Promise<void>;
    stop: (request: void, options?: RequestOptions) => Promise<void>;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export declare enum ShellDisplay {
    NONE = 0,
    FULLSCREEN = 1
}
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface AppContextRequest {
    /**
     * The display mode that shell should use.
     *
     * Options:
     *   - proto3_optional = true
     */
    display?: ShellDisplay;
    /**
     * The key of the joined space.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * The id of the joined space.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceId?: string;
    /**
     * Target to redirect to after a successful invitation.
     *
     * Options:
     *   - proto3_optional = true
     */
    target?: string;
    /**
     * Shell cannot reload the app from within an iframe.
     *
     * Options:
     *   - proto3_optional = true
     */
    reset?: boolean;
}
/**
 * App RPCs for the shell.
 *
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface AppService {
    setContext: (request: AppContextRequest, options?: RequestOptions) => Promise<void>;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export declare enum ShellLayout {
    DEFAULT = 0,
    INITIALIZE_IDENTITY = 1,
    INITIALIZE_IDENTITY_FROM_INVITATION = 2,
    INITIALIZE_IDENTITY_FROM_RECOVERY = 9,
    IDENTITY = 3,
    SHARE_IDENTITY = 4,
    EDIT_PROFILE = 5,
    SPACE = 6,
    JOIN_SPACE = 7,
    STATUS = 8
}
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface LayoutRequest {
    /**
     * Determins which panel of the shell is opened.
     */
    layout: ShellLayout;
    /**
     * Invitation code to join a space/identity.
     *
     * Options:
     *   - proto3_optional = true
     */
    invitationCode?: string;
    /**
     * Key of the space to share.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Id of the space to share.
     *
     * Options:
     *   - proto3_optional = true
     */
    spaceId?: string;
    /**
     * Target to include in an invitation for redirecting after a successful invitation.
     *
     * Options:
     *   - proto3_optional = true
     */
    target?: string;
}
/**
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface InvitationUrlRequest {
    /**
     * Base URL for invitations.
     */
    invitationUrl: string;
    /**
     * Query parameter for device invitations.
     */
    deviceInvitationParam: string;
    /**
     * Query parameter for space invitations.
     */
    spaceInvitationParam: string;
}
/**
 * Shell UI RPCs.
 *
 * Defined in:
 *   {@link file://./../../dxos/iframe.proto}
 */
export interface ShellService {
    setLayout: (request: LayoutRequest, options?: RequestOptions) => Promise<void>;
    setInvitationUrl: (request: InvitationUrlRequest, options?: RequestOptions) => Promise<void>;
}
//# sourceMappingURL=iframe.d.ts.map