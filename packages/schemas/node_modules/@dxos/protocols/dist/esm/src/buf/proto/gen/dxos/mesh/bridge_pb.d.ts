import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { PublicKey } from "../keys_pb.js";
import type { Signal } from "./swarm_pb.js";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/mesh/bridge.proto.
 */
export declare const file_dxos_mesh_bridge: GenFile;
/**
 * @generated from message dxos.mesh.bridge.BridgeEvent
 */
export type BridgeEvent = Message<"dxos.mesh.bridge.BridgeEvent"> & {
    /**
     * @generated from oneof dxos.mesh.bridge.BridgeEvent.type
     */
    type: {
        /**
         * @generated from field: dxos.mesh.bridge.BridgeEvent.ConnectionEvent connection = 1;
         */
        value: BridgeEvent_ConnectionEvent;
        case: "connection";
    } | {
        /**
         * @generated from field: dxos.mesh.bridge.BridgeEvent.SignalEvent signal = 2;
         */
        value: BridgeEvent_SignalEvent;
        case: "signal";
    } | {
        /**
         * @generated from field: dxos.mesh.bridge.BridgeEvent.DataEvent data = 3;
         */
        value: BridgeEvent_DataEvent;
        case: "data";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message dxos.mesh.bridge.BridgeEvent.
 * Use `create(BridgeEventSchema)` to create a new message.
 */
export declare const BridgeEventSchema: GenMessage<BridgeEvent>;
/**
 * @generated from message dxos.mesh.bridge.BridgeEvent.ConnectionEvent
 */
export type BridgeEvent_ConnectionEvent = Message<"dxos.mesh.bridge.BridgeEvent.ConnectionEvent"> & {
    /**
     * @generated from field: dxos.mesh.bridge.ConnectionState state = 1;
     */
    state: ConnectionState;
    /**
     * TODO(burdon): Error type.
     *
     * @generated from field: optional string error = 2;
     */
    error?: string;
};
/**
 * Describes the message dxos.mesh.bridge.BridgeEvent.ConnectionEvent.
 * Use `create(BridgeEvent_ConnectionEventSchema)` to create a new message.
 */
export declare const BridgeEvent_ConnectionEventSchema: GenMessage<BridgeEvent_ConnectionEvent>;
/**
 * @generated from message dxos.mesh.bridge.BridgeEvent.SignalEvent
 */
export type BridgeEvent_SignalEvent = Message<"dxos.mesh.bridge.BridgeEvent.SignalEvent"> & {
    /**
     * @generated from field: dxos.mesh.swarm.Signal payload = 1;
     */
    payload?: Signal;
};
/**
 * Describes the message dxos.mesh.bridge.BridgeEvent.SignalEvent.
 * Use `create(BridgeEvent_SignalEventSchema)` to create a new message.
 */
export declare const BridgeEvent_SignalEventSchema: GenMessage<BridgeEvent_SignalEvent>;
/**
 * @generated from message dxos.mesh.bridge.BridgeEvent.DataEvent
 */
export type BridgeEvent_DataEvent = Message<"dxos.mesh.bridge.BridgeEvent.DataEvent"> & {
    /**
     * @generated from field: bytes payload = 1;
     */
    payload: Uint8Array;
};
/**
 * Describes the message dxos.mesh.bridge.BridgeEvent.DataEvent.
 * Use `create(BridgeEvent_DataEventSchema)` to create a new message.
 */
export declare const BridgeEvent_DataEventSchema: GenMessage<BridgeEvent_DataEvent>;
/**
 * @generated from message dxos.mesh.bridge.ConnectionRequest
 */
export type ConnectionRequest = Message<"dxos.mesh.bridge.ConnectionRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
    /**
     * @generated from field: bool initiator = 2;
     */
    initiator: boolean;
    /**
     * @generated from field: string remote_peer_key = 3;
     */
    remotePeerKey: string;
    /**
     * @generated from field: string own_peer_key = 4;
     */
    ownPeerKey: string;
    /**
     * @generated from field: string topic = 5;
     */
    topic: string;
};
/**
 * Describes the message dxos.mesh.bridge.ConnectionRequest.
 * Use `create(ConnectionRequestSchema)` to create a new message.
 */
export declare const ConnectionRequestSchema: GenMessage<ConnectionRequest>;
/**
 * @generated from message dxos.mesh.bridge.SignalRequest
 */
export type SignalRequest = Message<"dxos.mesh.bridge.SignalRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
    /**
     * @generated from field: dxos.mesh.swarm.Signal signal = 2;
     */
    signal?: Signal;
};
/**
 * Describes the message dxos.mesh.bridge.SignalRequest.
 * Use `create(SignalRequestSchema)` to create a new message.
 */
export declare const SignalRequestSchema: GenMessage<SignalRequest>;
/**
 * @generated from message dxos.mesh.bridge.DataRequest
 */
export type DataRequest = Message<"dxos.mesh.bridge.DataRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
    /**
     * @generated from field: bytes payload = 2;
     */
    payload: Uint8Array;
};
/**
 * Describes the message dxos.mesh.bridge.DataRequest.
 * Use `create(DataRequestSchema)` to create a new message.
 */
export declare const DataRequestSchema: GenMessage<DataRequest>;
/**
 * @generated from message dxos.mesh.bridge.CloseRequest
 */
export type CloseRequest = Message<"dxos.mesh.bridge.CloseRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.bridge.CloseRequest.
 * Use `create(CloseRequestSchema)` to create a new message.
 */
export declare const CloseRequestSchema: GenMessage<CloseRequest>;
/**
 * @generated from message dxos.mesh.bridge.DetailsRequest
 */
export type DetailsRequest = Message<"dxos.mesh.bridge.DetailsRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.bridge.DetailsRequest.
 * Use `create(DetailsRequestSchema)` to create a new message.
 */
export declare const DetailsRequestSchema: GenMessage<DetailsRequest>;
/**
 * @generated from message dxos.mesh.bridge.DetailsResponse
 */
export type DetailsResponse = Message<"dxos.mesh.bridge.DetailsResponse"> & {
    /**
     * @generated from field: string details = 1;
     */
    details: string;
};
/**
 * Describes the message dxos.mesh.bridge.DetailsResponse.
 * Use `create(DetailsResponseSchema)` to create a new message.
 */
export declare const DetailsResponseSchema: GenMessage<DetailsResponse>;
/**
 * @generated from message dxos.mesh.bridge.StatsRequest
 */
export type StatsRequest = Message<"dxos.mesh.bridge.StatsRequest"> & {
    /**
     * @generated from field: dxos.keys.PublicKey proxy_id = 1;
     */
    proxyId?: PublicKey;
};
/**
 * Describes the message dxos.mesh.bridge.StatsRequest.
 * Use `create(StatsRequestSchema)` to create a new message.
 */
export declare const StatsRequestSchema: GenMessage<StatsRequest>;
/**
 * @generated from message dxos.mesh.bridge.StatsResponse
 */
export type StatsResponse = Message<"dxos.mesh.bridge.StatsResponse"> & {
    /**
     * @generated from field: google.protobuf.Struct stats = 1;
     */
    stats?: JsonObject;
};
/**
 * Describes the message dxos.mesh.bridge.StatsResponse.
 * Use `create(StatsResponseSchema)` to create a new message.
 */
export declare const StatsResponseSchema: GenMessage<StatsResponse>;
/**
 * @generated from enum dxos.mesh.bridge.ConnectionState
 */
export declare enum ConnectionState {
    /**
     * @generated from enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from enum value: CONNECTING = 1;
     */
    CONNECTING = 1,
    /**
     * @generated from enum value: CONNECTED = 2;
     */
    CONNECTED = 2,
    /**
     * @generated from enum value: CLOSED = 3;
     */
    CLOSED = 3
}
/**
 * Describes the enum dxos.mesh.bridge.ConnectionState.
 */
export declare const ConnectionStateSchema: GenEnum<ConnectionState>;
/**
 *
 * Broker connections between processes and peers.
 *
 *
 * @generated from service dxos.mesh.bridge.BridgeService
 */
export declare const BridgeService: GenService<{
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.Open
     */
    open: {
        methodKind: "server_streaming";
        input: typeof ConnectionRequestSchema;
        output: typeof BridgeEventSchema;
    };
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.SendSignal
     */
    sendSignal: {
        methodKind: "unary";
        input: typeof SignalRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.SendData
     */
    sendData: {
        methodKind: "unary";
        input: typeof DataRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.Close
     */
    close: {
        methodKind: "unary";
        input: typeof CloseRequestSchema;
        output: typeof EmptySchema;
    };
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.GetDetails
     */
    getDetails: {
        methodKind: "unary";
        input: typeof DetailsRequestSchema;
        output: typeof DetailsResponseSchema;
    };
    /**
     * /
     *
     * @generated from rpc dxos.mesh.bridge.BridgeService.GetStats
     */
    getStats: {
        methodKind: "unary";
        input: typeof StatsRequestSchema;
        output: typeof StatsResponseSchema;
    };
}>;
//# sourceMappingURL=bridge_pb.d.ts.map