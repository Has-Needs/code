import type { RequestOptions } from "@dxos/codec-protobuf";
import substitutions from "../../../substitutions.js";
import * as dxos_config from "../config.js";
import * as dxos_halo_credentials from "../halo/credentials.js";
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface Service {
    name: string;
    status: Service.Status;
    addresses?: string[];
    type: Service.Type;
    wellKnowns?: WellKnown[];
}
export declare namespace Service {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/service/supervisor.proto}
     */
    enum Status {
        UNKNOWN = 0,
        STARTED = 1,
        STOPPED = 2,
        FAILED = 3
    }
    /**
     * Defined in:
     *   {@link file://./../../../dxos/service/supervisor.proto}
     */
    enum Type {
        NONE = 0,
        PROCESS = 1,
        SERVICE = 2
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface Services {
    services?: Service[];
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface WellKnown {
    url: string;
    description: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface WellKnowns {
    wellKnowns?: WellKnowns.WellKnownsByService[];
}
export declare namespace WellKnowns {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/service/supervisor.proto}
     */
    interface WellKnownsByService {
        serviceName: string;
        wellKnowns?: WellKnown[];
    }
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface ConfigPair {
    key: string;
    value: string;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface GetConfigResponse {
    config: dxos_config.Config;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface SetConfigRequest {
    config: ConfigPair;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface SetConfigResponse {
    config: ConfigPair;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface InitAuthSequenceResponse {
    nonce: Uint8Array;
    kubeKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface Authentication {
    presentation: dxos_halo_credentials.Presentation;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface AuthenticateResponse {
    /**
     * Options:
     *   - proto3_optional = true
     */
    token?: string;
    /**
     * Options:
     *   - proto3_optional = true
     */
    credential?: dxos_halo_credentials.Credential;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/service/supervisor.proto}
 */
export interface Supervisor {
    authenticate: (request: Authentication, options?: RequestOptions) => Promise<AuthenticateResponse>;
    initAuthSequence: (request: void, options?: RequestOptions) => Promise<InitAuthSequenceResponse>;
    getConfig: (request: void, options?: RequestOptions) => Promise<GetConfigResponse>;
    setConfig: (request: SetConfigRequest, options?: RequestOptions) => Promise<SetConfigResponse>;
    status: (request: void, options?: RequestOptions) => Promise<Services>;
}
//# sourceMappingURL=supervisor.d.ts.map