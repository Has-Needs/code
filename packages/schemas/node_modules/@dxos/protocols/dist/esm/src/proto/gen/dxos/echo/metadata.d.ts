import substitutions from "../../../substitutions.js";
import * as dxos_client_services from "../client/services.js";
import * as dxos_echo_model_document from "./model/document.js";
import * as dxos_halo_credentials from "../halo/credentials.js";
/**
 * Main metadata record.
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface EchoMetadata {
    /**
     * Version number that is incremented every time there's a breaking change to the storage schema.
     * This is used to detect if the storage schema has changed since the last time the client was run.
     * Loading data from a different version will might result in an error.
     */
    version: number;
    created: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
    updated: ReturnType<(typeof substitutions)["google.protobuf.Timestamp"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    identity?: IdentityRecord;
    /**
     * List of the data spaces.
     */
    spaces?: SpaceMetadata[];
    invitations?: dxos_client_services.Invitation[];
}
/**
 * Per-space metadata. Frequent updates. Keep small.
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface SmallSpaceMetadata {
}
/**
 * Per-space metadata. Infrequent updates.
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface LargeSpaceMetadata {
    /**
     * Options:
     *   - proto3_optional = true
     */
    controlPipelineSnapshot?: ControlPipelineSnapshot;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface SpaceCache {
    /**
     * Properties snapshot.
     *
     * Options:
     *   - proto3_optional = true
     */
    properties?: dxos_echo_model_document.ObjectSnapshot;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface SpaceMetadata {
    /**
     * Space key.
     */
    key: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * ACTIVE, INACTIVE, etc.
     *
     * Options:
     *   - proto3_optional = true
     */
    state?: dxos_client_services.SpaceState;
    /**
     * Options:
     *   - proto3_optional = true
     */
    genesisFeedKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Key of the writable control feed.
     *
     * Options:
     *   - proto3_optional = true
     */
    controlFeedKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * List of all feed associated with the space.
     */
    feedKeys?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>[];
    /**
     * Key of the writable data feed.
     *
     * Options:
     *   - proto3_optional = true
     */
    dataFeedKey?: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    controlTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    dataTimeframe?: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
    /**
     * Options:
     *   - proto3_optional = true
     */
    cache?: SpaceCache;
    /**
     * Options:
     *   - proto3_optional = true
     */
    edgeReplication?: EdgeReplicationSetting;
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export declare enum EdgeReplicationSetting {
    DISABLED = 0,
    ENABLED = 1
}
/**
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface ControlPipelineSnapshot {
    /**
     * Timeframe of the last message included in the snapshot.
     */
    timeframe: ReturnType<(typeof substitutions)["dxos.echo.timeframe.TimeframeVector"]["decode"]>;
    messages?: ControlPipelineSnapshot.ControlMessage[];
}
export declare namespace ControlPipelineSnapshot {
    /**
     * Defined in:
     *   {@link file://./../../../dxos/echo/metadata.proto}
     */
    interface ControlMessage {
        feedKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
        credential: dxos_halo_credentials.Credential;
    }
}
/**
 * Information needed to bootstrap an Identity.
 *
 * Defined in:
 *   {@link file://./../../../dxos/echo/metadata.proto}
 */
export interface IdentityRecord {
    identityKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    deviceKey: ReturnType<(typeof substitutions)["dxos.keys.PublicKey"]["decode"]>;
    haloSpace: SpaceMetadata;
    /**
     * TODO(burdon): Not yet implemented. Must be null.
     *
     * Options:
     *   - proto3_optional = true
     */
    profileSpace?: SpaceMetadata;
    /**
     * Cached profile.
     *
     * Options:
     *   - proto3_optional = true
     */
    profile?: dxos_halo_credentials.ProfileDocument;
}
//# sourceMappingURL=metadata.d.ts.map