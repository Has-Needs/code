import { PublicKey } from '@dxos/keys';
import { Timeframe } from '@dxos/timeframe';
export declare const substitutions: {
    'dxos.keys.PublicKey': {
        encode: (value: PublicKey) => {
            data: Uint8Array<ArrayBufferLike>;
        };
        decode: (value: any) => PublicKey;
    };
    'dxos.keys.PrivateKey': {
        encode: (value: Buffer) => {
            data: Uint8Array<ArrayBuffer>;
        };
        decode: (value: any) => Buffer<ArrayBufferLike>;
    };
    'dxos.echo.timeframe.TimeframeVector': {
        encode: (timeframe: Timeframe) => {
            frames: {
                feedKey: Uint8Array<ArrayBufferLike>;
                seq: number;
            }[];
        };
        decode: (vector: any) => Timeframe;
    };
};
declare const _default: {
    'google.protobuf.Timestamp': {
        encode: (value: Date) => any;
        decode: (value: any) => Date;
    };
    'dxos.keys.PublicKey': {
        encode: (value: PublicKey) => {
            data: Uint8Array<ArrayBufferLike>;
        };
        decode: (value: any) => PublicKey;
    };
    'dxos.keys.PrivateKey': {
        encode: (value: Buffer) => {
            data: Uint8Array<ArrayBuffer>;
        };
        decode: (value: any) => Buffer<ArrayBufferLike>;
    };
    'dxos.echo.timeframe.TimeframeVector': {
        encode: (timeframe: Timeframe) => {
            frames: {
                feedKey: Uint8Array<ArrayBufferLike>;
                seq: number;
            }[];
        };
        decode: (vector: any) => Timeframe;
    };
    'google.protobuf.Struct': {
        encode: (value: import("@dxos/codec-protobuf").Struct) => any;
        decode: (value: any) => import("@dxos/codec-protobuf").Struct;
    };
    'google.protobuf.Any': {
        encode: (value: import("@dxos/codec-protobuf").WithTypeUrl<{}>, context: import("@dxos/codec-protobuf").TypeMapperContext, schema: import("@dxos/codec-protobuf").Schema<any>, options: import("@dxos/codec-protobuf").EncodingOptions) => any;
        decode: (value: any, context: import("@dxos/codec-protobuf").TypeMapperContext, schema: import("@dxos/codec-protobuf").Schema<any>, options: import("@dxos/codec-protobuf").EncodingOptions) => import("@dxos/codec-protobuf").WithTypeUrl<any>;
    };
};
export default _default;
//# sourceMappingURL=substitutions.d.ts.map