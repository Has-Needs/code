import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import type { PublicKey } from "../keys_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/halo/signed.proto.
 */
export declare const file_dxos_halo_signed: GenFile;
/**
 *
 * A key which includes its parent keys and SignedMessages leading back to the root of its authority.
 * For example, if IdentityA signed for DeviceA, which signed for DeviceB, which signed for DeviceC the chain
 * would comprised: DeviceC->DeviceB->DeviceA->IdentityA moving from tip to root.
 *
 *
 * @generated from message dxos.halo.signed.KeyChain
 */
export type KeyChain = Message<"dxos.halo.signed.KeyChain"> & {
    /**
     * @generated from field: dxos.keys.PublicKey public_key = 1;
     */
    publicKey?: PublicKey;
    /**
     * @generated from field: dxos.halo.signed.SignedMessage message = 2;
     */
    message?: SignedMessage;
    /**
     * @generated from field: repeated dxos.halo.signed.KeyChain parents = 3;
     */
    parents: KeyChain[];
};
/**
 * Describes the message dxos.halo.signed.KeyChain.
 * Use `create(KeyChainSchema)` to create a new message.
 */
export declare const KeyChainSchema: GenMessage<KeyChain>;
/**
 * *
 * A generic container message used whenever messages are signed (e.g. SpaceCredential)
 *
 * @generated from message dxos.halo.signed.SignedMessage
 */
export type SignedMessage = Message<"dxos.halo.signed.SignedMessage"> & {
    /**
     * / The signed message contents.
     *
     * @generated from field: dxos.halo.signed.SignedMessage.Signed signed = 1;
     */
    signed?: SignedMessage_Signed;
    /**
     * / An array of Signatures, one for each key that signed the message.
     *
     * @generated from field: repeated dxos.halo.signed.SignedMessage.Signature signatures = 2;
     */
    signatures: SignedMessage_Signature[];
};
/**
 * Describes the message dxos.halo.signed.SignedMessage.
 * Use `create(SignedMessageSchema)` to create a new message.
 */
export declare const SignedMessageSchema: GenMessage<SignedMessage>;
/**
 *
 * Provides the common metadata needed for all signed objects.
 *
 *
 * @generated from message dxos.halo.signed.SignedMessage.Signed
 */
export type SignedMessage_Signed = Message<"dxos.halo.signed.SignedMessage.Signed"> & {
    /**
     * / RFC-3339 datetime string.
     *
     * @generated from field: string created = 1;
     */
    created: string;
    /**
     * @generated from field: bytes nonce = 2;
     */
    nonce: Uint8Array;
    /**
     * / The payload to be signed.
     *
     * @generated from field: google.protobuf.Any payload = 10;
     */
    payload?: Any;
};
/**
 * Describes the message dxos.halo.signed.SignedMessage.Signed.
 * Use `create(SignedMessage_SignedSchema)` to create a new message.
 */
export declare const SignedMessage_SignedSchema: GenMessage<SignedMessage_Signed>;
/**
 *
 * The signature data itself.
 *
 *
 * @generated from message dxos.halo.signed.SignedMessage.Signature
 */
export type SignedMessage_Signature = Message<"dxos.halo.signed.SignedMessage.Signature"> & {
    /**
     * / The publicKey of the keypair that made this signature.
     *
     * @generated from field: dxos.keys.PublicKey key = 1;
     */
    key?: PublicKey;
    /**
     * / The bytes of the signature.
     *
     * @generated from field: bytes signature = 2;
     */
    signature: Uint8Array;
    /**
     * / The certification chain of SignedMessages for this key.
     *
     * @generated from field: optional dxos.halo.signed.KeyChain key_chain = 3;
     */
    keyChain?: KeyChain;
};
/**
 * Describes the message dxos.halo.signed.SignedMessage.Signature.
 * Use `create(SignedMessage_SignatureSchema)` to create a new message.
 */
export declare const SignedMessage_SignatureSchema: GenMessage<SignedMessage_Signature>;
//# sourceMappingURL=signed_pb.d.ts.map