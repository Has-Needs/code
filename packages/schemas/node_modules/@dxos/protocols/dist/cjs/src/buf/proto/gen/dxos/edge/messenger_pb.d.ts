import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import type { Message as Message$1 } from "@bufbuild/protobuf";
/**
 * Describes the file dxos/edge/messenger.proto.
 */
export declare const file_dxos_edge_messenger: GenFile;
/**
 *
 * Network peer.
 *
 * TODO(burdon): Distinguish between point-to-point and broadcast messaging.
 * TODO(burdon): Rename PeerInfo?
 * TODO(mykola): Separate peer info and peer state into different messages.
 *
 * @generated from message dxos.edge.messenger.Peer
 */
export type Peer = Message$1<"dxos.edge.messenger.Peer"> & {
    /**
     * TODO(burdon): Rename topic?
     *
     * @generated from field: optional string swarm_key = 1;
     */
    swarmKey?: string;
    /**
     * @generated from field: optional string identity_key = 2;
     */
    identityKey?: string;
    /**
     * @generated from field: string peer_key = 3;
     */
    peerKey: string;
    /**
     * *
     * State of the connection to the swarm.
     *
     * *
     * UNIX timestamp of the connection.
     * @example 1715142000000
     *
     * @generated from field: optional dxos.edge.messenger.ConnectionState connection_state = 5;
     */
    connectionState?: ConnectionState;
    /**
     * Note: it is not `int64` because `int64` is compiled as a `string` in 'buf' and as a `number` in 'proto-js'.
     *
     * @generated from field: optional double connected = 6;
     */
    connected?: number;
    /**
     * *
     * UNIX timestamp of the disconnection.
     * @example 1715142000000
     *
     * @generated from field: optional double disconnected = 7;
     */
    disconnected?: number;
    /**
     * *
     * Optional opeage data that represents peer state is updated on `join` request and all peers in swarm are notified.
     * Is not used for WebRTC protocol, but is useful for another purposes of Swarms, e. g. call room users states.
     *
     * @generated from field: optional bytes state = 4;
     */
    state?: Uint8Array;
};
/**
 * Describes the message dxos.edge.messenger.Peer.
 * Use `create(PeerSchema)` to create a new message.
 */
export declare const PeerSchema: GenMessage<Peer>;
/**
 *
 * Message envelope.
 *
 *
 * @generated from message dxos.edge.messenger.Message
 */
export type Message = Message$1<"dxos.edge.messenger.Message"> & {
    /**
     * @generated from field: optional string timestamp = 1;
     */
    timestamp?: string;
    /**
     * Routing.
     *
     * @generated from field: optional dxos.edge.messenger.Peer source = 10;
     */
    source?: Peer;
    /**
     * @generated from field: repeated dxos.edge.messenger.Peer target = 11;
     */
    target: Peer[];
    /**
     * / List of valid services is defined in the `EdgeService` enum.
     * / Maybe be used to address a service at EDGE, but also to address components inside the client.
     *
     * @generated from field: optional string service_id = 20;
     */
    serviceId?: string;
    /**
     * @generated from field: optional google.protobuf.Any payload = 100;
     */
    payload?: Any;
};
/**
 * Describes the message dxos.edge.messenger.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export declare const MessageSchema: GenMessage<Message>;
/**
 *
 * Swarms are used to publish and subscribe to messages based on a topic.
 *
 *
 * @generated from message dxos.edge.messenger.SwarmRequest
 */
export type SwarmRequest = Message$1<"dxos.edge.messenger.SwarmRequest"> & {
    /**
     * @generated from field: optional dxos.edge.messenger.SwarmRequest.Action action = 1;
     */
    action?: SwarmRequest_Action;
    /**
     * TODO(burdon): Rename topic?
     *
     * @generated from field: repeated string swarmKeys = 2;
     */
    swarmKeys: string[];
};
/**
 * Describes the message dxos.edge.messenger.SwarmRequest.
 * Use `create(SwarmRequestSchema)` to create a new message.
 */
export declare const SwarmRequestSchema: GenMessage<SwarmRequest>;
/**
 * @generated from enum dxos.edge.messenger.SwarmRequest.Action
 */
export declare enum SwarmRequest_Action {
    /**
     * @generated from enum value: INFO = 0;
     */
    INFO = 0,
    /**
     * @generated from enum value: JOIN = 1;
     */
    JOIN = 1,
    /**
     * @generated from enum value: LEAVE = 2;
     */
    LEAVE = 2
}
/**
 * Describes the enum dxos.edge.messenger.SwarmRequest.Action.
 */
export declare const SwarmRequest_ActionSchema: GenEnum<SwarmRequest_Action>;
/**
 * @generated from message dxos.edge.messenger.SwarmResponse
 */
export type SwarmResponse = Message$1<"dxos.edge.messenger.SwarmResponse"> & {
    /**
     * @generated from field: string swarmKey = 1;
     */
    swarmKey: string;
    /**
     * *
     * The list of peers in the swarm.
     *
     * @generated from field: repeated dxos.edge.messenger.Peer peers = 2;
     */
    peers: Peer[];
    /**
     * *
     * The list of peers that recently left the swarm.
     *
     * @generated from field: repeated dxos.edge.messenger.Peer inactive_peers = 3;
     */
    inactivePeers: Peer[];
};
/**
 * Describes the message dxos.edge.messenger.SwarmResponse.
 * Use `create(SwarmResponseSchema)` to create a new message.
 */
export declare const SwarmResponseSchema: GenMessage<SwarmResponse>;
/**
 *
 * Text message.
 *
 *
 * @generated from message dxos.edge.messenger.TextMessage
 */
export type TextMessage = Message$1<"dxos.edge.messenger.TextMessage"> & {
    /**
     * @generated from field: optional string message = 1;
     */
    message?: string;
};
/**
 * Describes the message dxos.edge.messenger.TextMessage.
 * Use `create(TextMessageSchema)` to create a new message.
 */
export declare const TextMessageSchema: GenMessage<TextMessage>;
/**
 * @generated from enum dxos.edge.messenger.ConnectionState
 */
export declare enum ConnectionState {
    /**
     * @generated from enum value: CONNECTED = 0;
     */
    CONNECTED = 0,
    /**
     * @generated from enum value: DISCONNECTED_NORMAL = 1;
     */
    DISCONNECTED_NORMAL = 1,
    /**
     * @generated from enum value: DISCONNECTED_ABRUPT = 2;
     */
    DISCONNECTED_ABRUPT = 2
}
/**
 * Describes the enum dxos.edge.messenger.ConnectionState.
 */
export declare const ConnectionStateSchema: GenEnum<ConnectionState>;
//# sourceMappingURL=messenger_pb.d.ts.map