"use strict";
//
// Copyright 2020 DXOS.org
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.substitutions = void 0;
const codec_protobuf_1 = require("@dxos/codec-protobuf");
const keys_1 = require("@dxos/keys");
const timeframe_1 = require("@dxos/timeframe");
exports.substitutions = {
    'dxos.keys.PublicKey': {
        encode: (value) => ({ data: value.asUint8Array() }),
        decode: (value) => keys_1.PublicKey.from(value.data),
    },
    // TODO(dmaretskyi): Shouldn't be substituted to PublicKey.
    'dxos.keys.PrivateKey': {
        encode: (value) => ({ data: new Uint8Array(value) }),
        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data)).asBuffer(),
    },
    'dxos.echo.timeframe.TimeframeVector': {
        encode: (timeframe) => ({
            frames: timeframe.frames().map(([feedKey, seq]) => ({ feedKey: feedKey.asUint8Array(), seq })),
        }),
        decode: (vector) => {
            var _a;
            return new timeframe_1.Timeframe(((_a = vector.frames) !== null && _a !== void 0 ? _a : [])
                .filter((frame) => frame.feedKey != null && frame.seq != null)
                .map((frame) => [keys_1.PublicKey.from(frame.feedKey), frame.seq]));
        },
    },
};
exports.default = {
    ...codec_protobuf_1.anySubstitutions,
    ...codec_protobuf_1.structSubstitutions,
    ...exports.substitutions,
    ...codec_protobuf_1.timestampSubstitutions,
};
//# sourceMappingURL=substitutions.js.map