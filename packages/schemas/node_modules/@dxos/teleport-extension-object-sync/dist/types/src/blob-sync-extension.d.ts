import { type BlobChunk, type BlobSyncService, type WantList } from '@dxos/protocols/proto/dxos/mesh/teleport/blobsync';
import { type ExtensionContext, RpcExtension } from '@dxos/teleport';
import { type BlobStore } from './blob-store';
export type BlobSyncExtensionParams = {
    blobStore: BlobStore;
    onOpen: () => Promise<void>;
    onClose: () => Promise<void>;
    onAbort: () => Promise<void>;
    onPush: (data: BlobChunk) => Promise<void>;
};
/**
 * Manages replication between a set of feeds for a single teleport session.
 */
export declare class BlobSyncExtension extends RpcExtension<ServiceBundle, ServiceBundle> {
    private readonly _params;
    private readonly _ctx;
    private _lastWantListUpdate;
    private _localWantList;
    private readonly _updateWantList;
    private _currentUploads;
    private readonly _upload;
    /**
     * Set of id's remote peer wants.
     */
    remoteWantList: WantList;
    constructor(_params: BlobSyncExtensionParams);
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(err?: Error | undefined): Promise<void>;
    onAbort(err?: Error | undefined): Promise<void>;
    protected getHandlers(): Promise<ServiceBundle>;
    push(data: BlobChunk): Promise<void>;
    updateWantList(wantList: WantList): void;
    reconcileUploads(): void;
    private _pickBlobChunks;
}
type ServiceBundle = {
    BlobSyncService: BlobSyncService;
};
export {};
//# sourceMappingURL=blob-sync-extension.d.ts.map