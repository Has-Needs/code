import { type Any } from '@dxos/codec-protobuf';
import { PublicKey } from '@dxos/keys';
import { type PeerInfo, type Message } from '@dxos/messaging';
import { type Answer } from '@dxos/protocols/proto/dxos/mesh/swarm';
import { type OfferMessage, type SignalMessage, type SignalMessenger } from './signal-messenger';
export type SwarmMessengerOptions = {
    sendMessage: (params: Message) => Promise<void>;
    onOffer: (message: OfferMessage) => Promise<Answer>;
    onSignal: (message: SignalMessage) => Promise<void>;
    topic: PublicKey;
};
/**
 * Adds offer/answer and signal interfaces.
 */
export declare class SwarmMessenger implements SignalMessenger {
    private readonly _ctx;
    private readonly _sendMessage;
    private readonly _onSignal;
    private readonly _onOffer;
    private readonly _topic;
    private readonly _offerRecords;
    constructor({ sendMessage, onSignal, onOffer, topic }: SwarmMessengerOptions);
    receiveMessage({ author, recipient, payload, }: {
        author: PeerInfo;
        recipient: PeerInfo;
        payload: Any;
    }): Promise<void>;
    signal(message: SignalMessage): Promise<void>;
    offer(message: OfferMessage): Promise<Answer>;
    private _sendReliableMessage;
    private _resolveAnswers;
    private _handleOffer;
    private _handleSignal;
}
//# sourceMappingURL=swarm-messenger.d.ts.map