import { type PublicKey } from '@dxos/keys';
import { type SwarmController, type Topology } from './topology';
export interface MMSTTopologyOptions {
    /**
     * Number of connections the peer will originate by itself.
     */
    originateConnections?: number;
    /**
     * Maximum number of connections allowed, all other connections will be dropped.
     */
    maxPeers?: number;
    /**
     * Size of random sample from which peer candidates are selected.
     */
    sampleSize?: number;
}
export declare class MMSTTopology implements Topology {
    private readonly _originateConnections;
    private readonly _maxPeers;
    private readonly _sampleSize;
    private _controller?;
    private _sampleCollected;
    private _lastAction;
    constructor({ originateConnections, maxPeers, sampleSize }?: MMSTTopologyOptions);
    init(controller: SwarmController): void;
    update(): void;
    forceUpdate(): void;
    onOffer(peer: PublicKey): Promise<boolean>;
    destroy(): Promise<void>;
    private _runAlgorithm;
    toString(): string;
}
//# sourceMappingURL=mmst-topology.d.ts.map