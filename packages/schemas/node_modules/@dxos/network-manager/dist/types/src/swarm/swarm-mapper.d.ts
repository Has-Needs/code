import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { type ConnectionState } from './connection';
import { type Swarm } from './swarm';
/**
 * State of the connection to the remote peer with additional info derived from network mapping.
 */
export type PeerState = ConnectionState | 'INDIRECTLY_CONNECTED' | 'ME';
/**
 * Information about remote peer, directly or indirectly connected.
 */
export interface PeerInfo {
    id: PublicKey;
    state: PeerState;
    connections: PublicKey[];
}
export declare class SwarmMapper {
    private readonly _swarm;
    private readonly _subscriptions;
    private readonly _connectionSubscriptions;
    private readonly _peers;
    readonly mapUpdated: Event<PeerInfo[]>;
    get peers(): PeerInfo[];
    constructor(_swarm: Swarm);
    private _update;
    destroy(): void;
}
//# sourceMappingURL=swarm-mapper.d.ts.map