import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { type PeerInfo, type SignalManager } from '@dxos/messaging';
import { ConnectionState } from '@dxos/protocols/proto/dxos/client/services';
import { ConnectionLog } from './connection-log';
import { Swarm, SwarmMapper } from './swarm';
import { type Topology } from './topology';
import { type TransportFactory } from './transport';
import { type WireProtocolProvider } from './wire-protocol';
/**
 * Represents a single connection to a remote peer.
 */
export type SwarmConnection = {
    close(): Promise<void>;
};
export type SwarmOptions = {
    /**
     * Swarm topic.
     */
    topic: PublicKey;
    /**
     * This node's peer info.
     */
    peerInfo?: PeerInfo;
    /**
     * Protocol to use for every connection.
     */
    protocolProvider: WireProtocolProvider;
    /**
     * Requested topology. Must be a new instance for every swarm.
     */
    topology?: Topology;
    /**
     * Custom label assigned to this swarm.
     * Used in devtools to display human-readable names for swarms.
     */
    label?: string;
};
export type SwarmNetworkManagerOptions = {
    transportFactory: TransportFactory;
    signalManager: SignalManager;
    enableDevtoolsLogging?: boolean;
    peerInfo?: PeerInfo;
};
/**
 * Manages p2p connection to the swarm.
 */
export declare class SwarmNetworkManager {
    private readonly _mappers;
    private readonly _transportFactory;
    private readonly _signalManager;
    private readonly _messenger;
    private readonly _signalConnection;
    private readonly _connectionLimiter;
    private readonly _connectionLog?;
    private readonly _instanceId;
    private _peerInfo?;
    private _connectionState;
    readonly connectionStateChanged: Event<ConnectionState>;
    readonly topicsUpdated: Event<void>;
    constructor({ transportFactory, signalManager, enableDevtoolsLogging, peerInfo }: SwarmNetworkManagerOptions);
    get connectionLog(): ConnectionLog | undefined;
    get connectionState(): ConnectionState;
    get topics(): PublicKey[];
    getSwarmMap(topic: PublicKey): SwarmMapper | undefined;
    getSwarm(topic: PublicKey): Swarm | undefined;
    setPeerInfo(peerInfo: PeerInfo): void;
    open(): Promise<void>;
    close(): Promise<void>;
    /**
     * Join the swarm.
     */
    joinSwarm({ topic, //
    topology, protocolProvider: protocol, label, }: SwarmOptions): Promise<SwarmConnection>;
    /**
     * Close the connection.
     */
    leaveSwarm(topic: PublicKey): Promise<void>;
    setConnectionState(state: ConnectionState): Promise<void>;
}
//# sourceMappingURL=network-manager.d.ts.map