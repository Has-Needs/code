import { Event } from '@dxos/async';
import { Resource } from '@dxos/context';
import { PublicKey } from '@dxos/keys';
import { type TestBuilder } from './test-builder';
import { Messenger } from '../messenger';
import { type SignalManager } from '../signal-manager';
import { type Message, type PeerInfo } from '../signal-methods';
export declare class TestPeer extends Resource {
    private readonly testBuilder;
    peerId: PublicKey;
    signalManager: SignalManager;
    messenger: Messenger;
    defaultReceived: Event<Message>;
    constructor(testBuilder: TestBuilder);
    get peerInfo(): PeerInfo;
    waitTillReceive(message: Message): Promise<Message>;
    waitForPeerAvailable(topic: PublicKey, peer: PeerInfo): Promise<import("@dxos/protocols/proto/dxos/edge/signal").SwarmEvent>;
    waitForPeerLeft(topic: PublicKey, peer: PeerInfo): Promise<import("@dxos/protocols/proto/dxos/edge/signal").SwarmEvent>;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
}
//# sourceMappingURL=test-peer.d.ts.map