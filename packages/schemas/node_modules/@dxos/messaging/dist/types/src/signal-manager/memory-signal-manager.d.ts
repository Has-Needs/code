import { Event } from '@dxos/async';
import { type Any } from '@dxos/codec-protobuf';
import { PublicKey } from '@dxos/keys';
import { type SwarmResponse } from '@dxos/protocols/proto/dxos/edge/messenger';
import { type QueryRequest } from '@dxos/protocols/proto/dxos/edge/signal';
import { ComplexMap, ComplexSet } from '@dxos/util';
import { type SignalManager } from './signal-manager';
import { type SwarmEvent, type PeerInfo, type SignalStatus, type Message } from '../signal-methods';
/**
 * Common signaling context that connects multiple MemorySignalManager instances.
 */
export declare class MemorySignalManagerContext {
    readonly swarmEvent: Event<SwarmEvent>;
    readonly swarms: ComplexMap<PublicKey, ComplexSet<import("@dxos/protocols/proto/dxos/edge/messenger").Peer>>;
    readonly connections: ComplexMap<import("@dxos/protocols/proto/dxos/edge/messenger").Peer, MemorySignalManager>;
}
/**
 * In memory signal manager for testing.
 */
export declare class MemorySignalManager implements SignalManager {
    private readonly _context;
    readonly statusChanged: Event<SignalStatus[]>;
    readonly swarmEvent: Event<SwarmEvent>;
    readonly onMessage: Event<Message>;
    /**  Will be used to emit SwarmEvents on .open() and .close() */
    private _joinedSwarms;
    private _ctx;
    private readonly _freezeTrigger;
    constructor(_context: MemorySignalManagerContext);
    open(): Promise<void>;
    close(): Promise<void>;
    getStatus(): SignalStatus[];
    join({ topic, peer }: {
        topic: PublicKey;
        peer: PeerInfo;
    }): Promise<void>;
    leave({ topic, peer }: {
        topic: PublicKey;
        peer: PeerInfo;
    }): Promise<void>;
    query(request: QueryRequest): Promise<SwarmResponse>;
    sendMessage({ author, recipient, payload, }: {
        author: PeerInfo;
        recipient: PeerInfo;
        payload: Any;
    }): Promise<void>;
    subscribeMessages(peerInfo: PeerInfo): Promise<void>;
    unsubscribeMessages(peerInfo: PeerInfo): Promise<void>;
    freeze(): void;
    unfreeze(): void;
}
//# sourceMappingURL=memory-signal-manager.d.ts.map