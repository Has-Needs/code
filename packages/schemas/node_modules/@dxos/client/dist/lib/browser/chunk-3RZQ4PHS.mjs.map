{
  "version": 3,
  "sources": ["../../../src/devtools/index.ts", "../../../src/devtools/devtools.ts"],
  "sourcesContent": ["//\n// Copyright 2021 DXOS.org\n//\n\nexport type { DevtoolsHost } from '@dxos/protocols/proto/dxos/devtools/host';\nexport { KeyType } from '@dxos/protocols/proto/dxos/halo/keys';\n\nexport * from './devtools';\n", "//\n// Copyright 2022 DXOS.org\n//\n\nimport { next as am } from '@automerge/automerge';\nimport { cbor } from '@automerge/automerge-repo';\n\nimport { type Halo, type Space } from '@dxos/client-protocol';\nimport { type ClientServicesHost, type DataSpace } from '@dxos/client-services';\nimport { exposeModule, importModule } from '@dxos/debug';\nimport { PublicKey } from '@dxos/keys';\nimport { log } from '@dxos/log';\nimport { createBundledRpcServer, type RpcPeer, type RpcPort } from '@dxos/rpc';\nimport { TRACE_PROCESSOR, type TraceProcessor, type DiagnosticMetadata } from '@dxos/tracing';\nimport { joinTables } from '@dxos/util';\n\nimport { type Client } from '../client';\nimport { SpaceState, Filter, getMeta } from '../echo';\n\n// Didn't want to add a dependency on feed store.\ntype FeedWrapper = unknown;\n\nexposeModule('@automerge/automerge', am);\n\n/**\n * A hook bound to window.__DXOS__.\n */\nexport interface DevtoolsHook {\n  client?: Client;\n  host?: ClientServicesHost;\n\n  tracing: TraceProcessor;\n\n  spaces?: Accessor<Space | DataSpace>;\n  feeds?: Accessor<FeedWrapper>;\n  halo?: Halo;\n\n  openClientRpcServer: () => Promise<boolean>;\n\n  openDevtoolsApp?: () => void;\n\n  downloadDiagnostics?: () => Promise<void>;\n\n  reset: () => void;\n\n  /**\n   * Import modules exposed by `exposeModule` from @dxos/debug.\n   */\n  importModule: (module: string) => unknown;\n\n  listDiagnostics: () => Promise<void>;\n\n  fetchDiagnostics: (id: string, instanceTag?: string) => Promise<void>;\n\n  exportProfile?: () => Promise<void>;\n\n  importProfile?: () => Promise<void>;\n\n  /**\n   * Utility function.\n   */\n  joinTables: any;\n\n  // Globals/\n  Filter: typeof Filter;\n\n  getMeta: typeof getMeta;\n}\n\nexport type MountOptions = {\n  client?: Client;\n  host?: ClientServicesHost;\n};\n\nexport const mountDevtoolsHooks = ({ client, host }: MountOptions) => {\n  let server: RpcPeer;\n  let diagnostics: DiagnosticMetadata[] = [];\n\n  const hook: DevtoolsHook = {\n    // To debug client from console using 'window.__DXOS__.client'.\n    client,\n    host,\n    tracing: TRACE_PROCESSOR,\n\n    openClientRpcServer: async () => {\n      if (!client) {\n        log.error('Client not available');\n        return false;\n      }\n\n      if (server) {\n        log('Closing existing client RPC server.');\n        await server.close();\n      }\n\n      log('Opening devtools client RPC server...');\n      server = createBundledRpcServer({\n        services: client.services.descriptors,\n        handlers: client.services.services,\n        port,\n      });\n\n      await server.open().catch((err) => {\n        log.error(`Failed to open RPC server: ${err}`);\n        return false;\n      });\n\n      log('Opened devtools client RPC server.');\n      return true;\n    },\n\n    reset,\n\n    importModule,\n\n    listDiagnostics: async () => {\n      diagnostics = await TRACE_PROCESSOR.diagnosticsChannel.discover();\n      // eslint-disable-next-line no-console\n      console.table(\n        diagnostics.map((diagnostic) => ({\n          ...diagnostic,\n          get fetch() {\n            queueMicrotask(async () => {\n              // eslint-disable-next-line no-console\n              const { data, error } = await TRACE_PROCESSOR.diagnosticsChannel.fetch(diagnostic);\n              if (error) {\n                log.error(`Error fetching diagnostic ${diagnostic.id}: ${error}`);\n                return;\n              }\n\n              // eslint-disable-next-line no-console\n              console.table(data);\n            });\n            return undefined;\n          },\n        })),\n      );\n    },\n\n    // TODO(dmaretskyi): Joins across multiple diagnostics.\n    fetchDiagnostics: async (id, instanceTag) => {\n      const { data, error } = await TRACE_PROCESSOR.diagnosticsChannel.fetch({ id, instanceTag });\n      if (error) {\n        log.error(`Error fetching diagnostic ${id}: ${error}`);\n        return;\n      }\n\n      return data;\n    },\n\n    joinTables,\n\n    // Globals.\n    Filter,\n    getMeta,\n  };\n\n  if (client) {\n    hook.spaces = createAccessor({\n      getAll: () => client.spaces.get(),\n      getByKey: (key) => client.spaces.get().find((space) => space.key.equals(key)),\n      getSearchMap: () =>\n        new Map(\n          client.spaces\n            .get()\n            .flatMap((space) => [\n              [space.id, space],\n              ...(space.state.get() === SpaceState.SPACE_READY ? ([[space.properties.name, space]] as const) : []),\n              [space.key.toHex(), space],\n            ]),\n        ),\n    });\n    hook.halo = client.halo;\n\n    hook.openDevtoolsApp = async () => {\n      const vault = client.config?.values.runtime?.client?.remoteSource ?? 'https://halo.dxos.org';\n\n      // Check if we're serving devtools locally on the usual port.\n      let hasLocalDevtools = false;\n      try {\n        await fetch('http://localhost:5174/');\n        hasLocalDevtools = true;\n      } catch {}\n\n      const isDev = window.location.href.includes('.dev.') || window.location.href.includes('localhost');\n      const devtoolsApp = hasLocalDevtools\n        ? 'http://localhost:5174/'\n        : `https://devtools${isDev ? '.dev.' : '.'}dxos.org/`;\n      const devtoolsUrl = `${devtoolsApp}?target=${vault}`;\n      window.open(devtoolsUrl, '_blank');\n    };\n\n    hook.downloadDiagnostics = async () => {\n      const diagnostics = JSON.stringify(await client.diagnostics(), null, 4);\n      downloadFile(\n        diagnostics,\n        'application/json',\n        `diagnostics-${window.location.hostname}-${new Date().toISOString()}.json`,\n      );\n    };\n\n    hook.exportProfile = async () => {\n      const { createLevel, createStorageObjects, exportProfileData } = await import('@dxos/client-services');\n\n      const storageConfig = client.config.get('runtime.client.storage', {})!;\n\n      const { storage } = createStorageObjects(storageConfig);\n      const level = await createLevel(storageConfig);\n\n      log.info('begin profile export', { storageConfig });\n      const archive = await exportProfileData({ storage, level });\n\n      log.info('done profile export', { storageEntries: archive.storage.length });\n\n      downloadFile(cbor.encode(archive), 'application/octet-stream', 'profile.dxprofile');\n    };\n\n    hook.importProfile = async () => {\n      log.warn('Make sure to clear your data before importing a profile (Site Settings -> Clear data)');\n\n      const data = await uploadFile();\n\n      const { createLevel, createStorageObjects, decodeProfileArchive, importProfileData } = await import(\n        '@dxos/client-services'\n      );\n\n      const storageConfig = client.config.get('runtime.client.storage', {})!;\n\n      // Kill client so it doesn't interfere.\n      await client.destroy().catch(() => {});\n\n      const { storage } = createStorageObjects(storageConfig);\n      const level = await createLevel(storageConfig);\n\n      const archive = decodeProfileArchive(data);\n      log.info('begin profile import', { storageConfig, storageEntries: archive.storage.length });\n\n      await importProfileData({ storage, level }, archive);\n\n      log.info('done profile import');\n\n      window.location.reload();\n    };\n  }\n  if (host) {\n    hook.spaces = createAccessor({\n      getAll: () => Array.from(host.context.dataSpaceManager?.spaces.values() ?? []),\n      getByKey: (key) => host.context.dataSpaceManager?.spaces.get(key),\n      getSearchMap: () =>\n        new Map(\n          Array.from(host.context.dataSpaceManager?.spaces.values() ?? []).flatMap((space) => [\n            [space.key.toHex(), space],\n          ]),\n        ),\n    });\n\n    hook.feeds = createAccessor({\n      getAll: () => Array.from(host.context.feedStore?.feeds.values() ?? []),\n      getByKey: (key) => host.context.feedStore?.feeds.find((feed) => feed.key.equals(key)),\n      getSearchMap: () =>\n        new Map(Array.from(host.context.feedStore?.feeds.values() ?? []).flatMap((feed) => [[feed.key.toHex(), feed]])),\n    });\n  }\n\n  ((globalThis as any).__DXOS__ as DevtoolsHook) = hook;\n\n  let warningShown = false;\n  Object.defineProperty(globalThis, 'dxos', {\n    get: () => {\n      if (!warningShown) {\n        warningShown = true;\n        log.warn('globalThis.dxos is an undocumented API and may changed or removed entirely without notice.');\n      }\n      return hook;\n    },\n    configurable: true,\n  });\n};\n\nexport const unmountDevtoolsHooks = () => {\n  delete (globalThis as any).__DXOS__;\n  delete (globalThis as any).dxos;\n};\n\ntype AccessorOptions<T> = {\n  getAll?: () => T[];\n  getByKey?: (key: PublicKey) => T | undefined;\n  getSearchMap?: () => Map<string, T>;\n};\n\ntype Accessor<T> = {\n  (keyOrSearch: PublicKey | string): T | undefined;\n  (): T[];\n};\n\nconst createAccessor =\n  <T>({ getByKey, getSearchMap, getAll }: AccessorOptions<T>): Accessor<T> =>\n  (keyOrSearch?: PublicKey | string) => {\n    if (typeof keyOrSearch === 'undefined') {\n      return getAll?.() ?? [];\n    }\n    if (keyOrSearch instanceof PublicKey) {\n      return getByKey?.(keyOrSearch);\n    }\n    const searchSpace = getSearchMap?.() ?? new Map();\n    if (searchSpace.has(keyOrSearch)) {\n      return searchSpace.get(keyOrSearch);\n    }\n    for (const [key, value] of searchSpace.entries()) {\n      if (key.startsWith(keyOrSearch)) {\n        return value;\n      }\n    }\n    for (const [key, value] of searchSpace.entries()) {\n      if (key.includes(keyOrSearch)) {\n        return value;\n      }\n    }\n    return undefined;\n  };\n\nconst port: RpcPort = {\n  send: async (message) =>\n    window.postMessage(\n      {\n        data: Array.from(message),\n        source: 'dxos-client',\n      },\n      '*',\n    ),\n\n  subscribe: (callback) => {\n    const handler = (event: MessageEvent<any>) => {\n      if (event.source !== window) {\n        return;\n      }\n\n      const message = event.data;\n      if (typeof message !== 'object' || message === null || message.source !== 'content-script') {\n        return;\n      }\n\n      callback(new Uint8Array(message.data));\n    };\n\n    window.addEventListener('message', handler);\n    return () => window.removeEventListener('message', handler);\n  },\n};\n\n/**\n * Delete all data in the browser without depending on other packages.\n */\nconst reset = async () => {\n  log.info(`Deleting all data from ${typeof window.localStorage !== 'undefined' ? window.location?.origin : ''}`);\n\n  if (typeof localStorage !== 'undefined') {\n    localStorage.clear();\n    log.info('Cleared local storage');\n  }\n\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator.storage !== 'undefined' &&\n    typeof navigator.storage.getDirectory === 'function'\n  ) {\n    const root = await navigator.storage.getDirectory();\n    for await (const entry of (root as any).keys() as Iterable<string>) {\n      try {\n        await root.removeEntry(entry, { recursive: true });\n      } catch (err) {\n        log.error(`Failed to delete ${entry}: ${err}`);\n      }\n    }\n    log.info('Cleared OPFS');\n\n    if (typeof location !== 'undefined' && typeof location.reload === 'function') {\n      location.reload();\n    } else if (typeof close === 'function') {\n      close(); // For web workers.\n    }\n  }\n};\n\nconst downloadFile = (data: string | Uint8Array, contentType: string, filename: string) => {\n  const url = URL.createObjectURL(new Blob([data], { type: contentType }));\n  const element = document.createElement('a');\n  element.setAttribute('href', url);\n  element.setAttribute('download', filename);\n  element.setAttribute('target', 'download');\n  element.click();\n};\n\nconst uploadFile = (): Promise<Uint8Array> => {\n  return new Promise((resolve, reject) => {\n    const dropArea = document.createElement('div');\n    dropArea.style.width = '100%';\n    dropArea.style.height = '100%';\n    dropArea.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    dropArea.style.display = 'flex';\n    dropArea.style.justifyContent = 'center';\n    dropArea.style.alignItems = 'center';\n    dropArea.style.position = 'fixed';\n\n    const text = document.createElement('p');\n    text.textContent = 'Drop file here';\n    text.style.color = 'white';\n    text.style.fontSize = '24px';\n\n    dropArea.appendChild(text);\n    document.body.appendChild(dropArea);\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault();\n      const file = event.dataTransfer?.files?.[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const arrayBuffer = reader.result as ArrayBuffer;\n          const uint8Array = new Uint8Array(arrayBuffer);\n          resolve(uint8Array);\n        };\n        reader.onerror = () => {\n          reject(new Error('Failed to read file'));\n        };\n        reader.readAsArrayBuffer(file);\n      }\n      dropArea.remove();\n    };\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault();\n    };\n\n    const handleDragLeave = () => {\n      dropArea.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    };\n\n    const handleDragEnter = () => {\n      dropArea.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n    };\n\n    dropArea.addEventListener('drop', handleDrop);\n    dropArea.addEventListener('dragover', handleDragOver);\n    dropArea.addEventListener('dragleave', handleDragLeave);\n    dropArea.addEventListener('dragenter', handleDragEnter);\n  });\n};\n"],
  "mappings": "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",
  "names": ["KeyType", "next", "am", "cbor", "exposeModule", "importModule", "PublicKey", "log", "createBundledRpcServer", "TRACE_PROCESSOR", "joinTables", "exposeModule", "am", "mountDevtoolsHooks", "client", "host", "server", "diagnostics", "hook", "tracing", "TRACE_PROCESSOR", "openClientRpcServer", "log", "error", "close", "createBundledRpcServer", "services", "descriptors", "handlers", "port", "open", "catch", "err", "reset", "importModule", "listDiagnostics", "diagnosticsChannel", "discover", "console", "table", "map", "diagnostic", "fetch", "queueMicrotask", "data", "id", "undefined", "fetchDiagnostics", "instanceTag", "joinTables", "Filter", "getMeta", "spaces", "createAccessor", "getAll", "get", "getByKey", "key", "find", "space", "equals", "getSearchMap", "Map", "flatMap", "state", "SpaceState", "SPACE_READY", "properties", "name", "toHex", "halo", "openDevtoolsApp", "vault", "config", "values", "runtime", "remoteSource", "hasLocalDevtools", "isDev", "window", "location", "href", "includes", "devtoolsApp", "devtoolsUrl", "downloadDiagnostics", "JSON", "stringify", "downloadFile", "hostname", "Date", "toISOString", "exportProfile", "createLevel", "createStorageObjects", "exportProfileData", "storageConfig", "storage", "level", "info", "archive", "storageEntries", "length", "cbor", "encode", "importProfile", "warn", "uploadFile", "decodeProfileArchive", "importProfileData", "destroy", "reload", "Array", "from", "context", "dataSpaceManager", "feeds", "feedStore", "feed", "globalThis", "__DXOS__", "warningShown", "Object", "defineProperty", "configurable", "unmountDevtoolsHooks", "dxos", "keyOrSearch", "PublicKey", "searchSpace", "has", "value", "entries", "startsWith", "send", "message", "postMessage", "source", "subscribe", "callback", "handler", "event", "Uint8Array", "addEventListener", "removeEventListener", "localStorage", "origin", "clear", "navigator", "getDirectory", "root", "entry", "keys", "removeEntry", "recursive", "contentType", "filename", "url", "URL", "createObjectURL", "Blob", "type", "element", "document", "createElement", "setAttribute", "click", "Promise", "resolve", "reject", "dropArea", "style", "width", "height", "backgroundColor", "display", "justifyContent", "alignItems", "position", "text", "textContent", "color", "fontSize", "appendChild", "body", "handleDrop", "preventDefault", "file", "dataTransfer", "files", "reader", "FileReader", "onload", "arrayBuffer", "result", "uint8Array", "onerror", "Error", "readAsArrayBuffer", "remove", "handleDragOver", "handleDragLeave", "handleDragEnter"]
}
