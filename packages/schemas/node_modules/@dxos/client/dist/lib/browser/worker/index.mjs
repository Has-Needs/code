import {
  mountDevtoolsHooks
} from "../chunk-3RZQ4PHS.mjs";
import "../chunk-NHOVA3RZ.mjs";
import "../chunk-H47QBELA.mjs";
import "../chunk-WMNYEGBR.mjs";
import {
  LOCK_KEY
} from "../chunk-4LGJGFVR.mjs";
import "../chunk-UFEX2AOY.mjs";

// packages/sdk/client/src/worker/onconnect.ts
import { Trigger } from "@dxos/async";
import { Config, Defaults, Envs, Local, Storage } from "@dxos/config";
import { log } from "@dxos/log";
import { createWorkerPort } from "@dxos/rpc-tunnel";
import { TRACE_PROCESSOR } from "@dxos/tracing";
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client/src/worker/onconnect.ts";
TRACE_PROCESSOR.setInstanceTag("shared-worker");
var releaseLock;
var lockPromise = new Promise((resolve) => releaseLock = resolve);
var lockAcquired = new Trigger();
void navigator.locks.request(LOCK_KEY, (lock) => {
  lockAcquired.wake();
  return lockPromise;
});
var setupRuntime = async () => {
  const { WorkerRuntime } = await import("@dxos/client-services");
  const workerRuntime = new WorkerRuntime({
    configProvider: async () => {
      const config = new Config(await Storage(), Envs(), Local(), Defaults());
      log.config({
        filter: config.get("runtime.client.log.filter"),
        prefix: config.get("runtime.client.log.prefix")
      }, void 0, {
        F: __dxlog_file,
        L: 30,
        S: void 0,
        C: (f, a) => f(...a)
      });
      return config;
    },
    acquireLock: () => lockAcquired.wait(),
    releaseLock: () => releaseLock(),
    onStop: async () => {
      self.close();
    }
  });
  mountDevtoolsHooks({
    host: workerRuntime.host
  });
  return workerRuntime;
};
var workerRuntimePromise = setupRuntime();
var start = Date.now();
void workerRuntimePromise.then((workerRuntime) => workerRuntime.start()).then(() => {
  log.info("worker ready", {
    initTimeMs: Date.now() - start
  }, {
    F: __dxlog_file,
    L: 56,
    S: void 0,
    C: (f, a) => f(...a)
  });
}, (err) => {
  log.catch(err, void 0, {
    F: __dxlog_file,
    L: 59,
    S: void 0,
    C: (f, a) => f(...a)
  });
});
var onconnect = async (event) => {
  log.info("onconnect", {
    event
  }, {
    F: __dxlog_file,
    L: 64,
    S: void 0,
    C: (f, a) => f(...a)
  });
  const port = event.ports[0];
  const systemChannel = new MessageChannel();
  const appChannel = new MessageChannel();
  port.onmessage = (event2) => {
    globalThis.localStorage_dxlog = event2.data.dxlog;
  };
  port.postMessage({
    command: "init",
    payload: {
      systemPort: systemChannel.port1,
      appPort: appChannel.port1
    }
  }, [
    systemChannel.port1,
    appChannel.port1
  ]);
  const workerRuntime = await workerRuntimePromise;
  await workerRuntime.createSession({
    systemPort: createWorkerPort({
      port: systemChannel.port2
    }),
    appPort: createWorkerPort({
      port: appChannel.port2
    })
  });
};
var getWorkerServiceHost = async () => (await workerRuntimePromise).host;
export {
  getWorkerServiceHost,
  onconnect
};
//# sourceMappingURL=index.mjs.map
