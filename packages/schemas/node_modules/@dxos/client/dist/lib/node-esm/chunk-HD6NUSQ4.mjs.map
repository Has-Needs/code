{
  "version": 3,
  "sources": ["../../../src/echo/index.ts", "../../../src/echo/util.ts", "../../../src/echo/import.ts"],
  "sourcesContent": ["//\n// Copyright 2023 DXOS.org\n//\n\nexport { SpaceId } from '@dxos/keys';\nexport { type Echo, type Space, type PropertiesType, type PropertiesTypeProps } from '@dxos/client-protocol';\nexport {\n  compareForeignKeys,\n  createQueueDXN,\n  getMeta,\n  getSchema,\n  getType,\n  getTypename,\n  Expando,\n  type ObjectMeta,\n  Ref,\n  RefArray,\n  type TypedObject,\n} from '@dxos/echo-schema';\nexport { type Live, live, isLiveObject, makeRef, refFromDXN } from '@dxos/live-object';\nexport {\n  DocAccessor,\n  type EchoDatabase,\n  Query,\n  Filter,\n  type Hypergraph,\n  type IDocHandle,\n  ObjectVersion,\n  type ObjectMigration,\n  Queue,\n  type QueryResult,\n  type AnyLiveObject,\n  ResultFormat,\n  type Selection,\n  type SubscriptionHandle,\n  createDocAccessor,\n  createObject,\n  createSubscription,\n  defineObjectMigration,\n  fromCursor,\n  isEchoObject,\n  getObjectCore,\n  getRangeFromCursor,\n  getSource,\n  getTarget,\n  getTextInRange,\n  getVersion,\n  loadObjectReferences,\n  toCursor,\n  toCursorRange,\n  updateText,\n  isRelation,\n} from '@dxos/echo-db';\n\n// TODO(dmaretskyi): Remove this export.\nexport { decodeReference as internalDecodeReference } from '@dxos/echo-protocol';\n\nexport { IndexKind } from '@dxos/protocols/proto/dxos/echo/indexing';\nexport { QueryOptions } from '@dxos/protocols/proto/dxos/echo/filter';\nexport { SpaceMember, SpaceState } from '@dxos/protocols/proto/dxos/client/services';\nexport { SpaceMember as HaloSpaceMember } from '@dxos/protocols/proto/dxos/halo/credentials';\nexport { TextKind } from '@dxos/protocols/proto/dxos/echo/model/text';\nexport { type SpaceSyncState } from '@dxos/protocols/proto/dxos/echo/service';\n\nexport {\n  createEmptyEdgeSyncState,\n  fullyQualifiedId,\n  FQ_ID_LENGTH,\n  OBJECT_ID_LENGTH,\n  SPACE_ID_LENGTH,\n  EchoObjectSchema,\n  ReactiveObjectSchema,\n  SpaceSchema,\n  getSpace,\n  getSyncSummary,\n  isSpace,\n  parseFullyQualifiedId,\n  parseId,\n  type Progress,\n  type PeerSyncState,\n  type SpaceSyncStateMap,\n} from './util';\nexport { importSpace } from './import';\n", "//\n// Copyright 2023 DXOS.org\n//\n\nimport { Schema } from 'effect';\n\nimport { type Space } from '@dxos/client-protocol';\nimport { type Type, Obj } from '@dxos/echo';\nimport { type SpaceSyncState, type AnyLiveObject, getDatabaseFromObject } from '@dxos/echo-db';\nimport { invariant } from '@dxos/invariant';\nimport { isLiveObject, type Live } from '@dxos/live-object';\n\nimport { SpaceProxy } from './space-proxy';\n\n// TODO(burdon): Move to @dxos/keys.\nexport const SPACE_ID_LENGTH = 33;\nexport const OBJECT_ID_LENGTH = 26;\nexport const FQ_ID_LENGTH = SPACE_ID_LENGTH + OBJECT_ID_LENGTH + 1;\n\nexport const isSpace = (object: unknown): object is Space => object instanceof SpaceProxy;\n\nexport const SpaceSchema: Schema.Schema<Space> = Schema.Any.pipe(\n  Schema.filter((x) => isSpace(x)),\n  Schema.annotations({ title: 'Space' }),\n);\n\n// TODO(dmaretskyi): Move to @dxos/echo-schema.\nexport const ReactiveObjectSchema: Schema.Schema<Live<any>> = Schema.Any.pipe(\n  Schema.filter((x) => isLiveObject(x)),\n  Schema.annotations({ title: 'Live' }),\n);\nexport const EchoObjectSchema: Schema.Schema<AnyLiveObject<any>> = Schema.Any.pipe(\n  Schema.filter((x) => Obj.isObject(x)),\n  Schema.annotations({ title: 'EchoObject' }),\n);\n\nexport const getSpace = (object?: Live<any>): Space | undefined => {\n  if (!object) {\n    return undefined;\n  }\n\n  const db = getDatabaseFromObject(object);\n  const id = db?.spaceId;\n  if (id) {\n    const owner = db.graph._getOwningObject(id);\n    if (owner instanceof SpaceProxy) {\n      return owner;\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Fully qualified id of a reactive object is a combination of the space id and the object id.\n * @returns Fully qualified id of a reactive object.\n * @deprecated Prefer DXNs.\n */\nexport const fullyQualifiedId = (object: Live<any>): string => {\n  const space = getSpace(object);\n  return space ? `${space.id}:${object.id}` : object.id;\n};\n\n/**\n * @deprecated Use `parseId` instead.\n */\nexport const parseFullyQualifiedId = (id: string): [string, string] => {\n  const [spaceId, objectId] = id.split(':');\n  invariant(objectId, 'invalid id');\n  return [spaceId, objectId];\n};\n\nexport const parseId = (id?: string): { spaceId?: Type.SpaceId; objectId?: Type.ObjectId } => {\n  if (!id) {\n    return {};\n  } else if (id.length === SPACE_ID_LENGTH) {\n    return { spaceId: id as Type.SpaceId };\n  } else if (id.length === OBJECT_ID_LENGTH) {\n    return { objectId: id as Type.ObjectId };\n  } else if (id.length === FQ_ID_LENGTH && id.indexOf(':') === SPACE_ID_LENGTH) {\n    const [spaceId, objectId] = id.split(':');\n    return { spaceId: spaceId as Type.SpaceId, objectId: objectId as Type.ObjectId };\n  } else {\n    return {};\n  }\n};\n\n//\n// EDGE Sync State\n//\n\nexport type Progress = { count: number; total: number };\n\nexport type PeerSyncState = Omit<SpaceSyncState.PeerState, 'peerId'>;\n\nexport type SpaceSyncStateMap = Record<Type.SpaceId, PeerSyncState>;\n\nexport const createEmptyEdgeSyncState = (): PeerSyncState => ({\n  missingOnLocal: 0,\n  missingOnRemote: 0,\n  localDocumentCount: 0,\n  remoteDocumentCount: 0,\n  differentDocuments: 0,\n});\n\nexport const getSyncSummary = (syncMap: SpaceSyncStateMap): PeerSyncState => {\n  return Object.entries(syncMap).reduce<PeerSyncState>((summary, [_spaceId, peerState]) => {\n    summary.missingOnLocal += peerState.missingOnLocal;\n    summary.missingOnRemote += peerState.missingOnRemote;\n    summary.localDocumentCount += peerState.localDocumentCount;\n    summary.remoteDocumentCount += peerState.remoteDocumentCount;\n    summary.differentDocuments += peerState.differentDocuments;\n    return summary;\n  }, createEmptyEdgeSyncState());\n};\n", "//\n// Copyright 2024 DXOS.org\n//\n\nimport { TYPE_PROPERTIES } from '@dxos/client-protocol';\nimport type { EchoDatabase, SerializedSpace } from '@dxos/echo-db';\nimport { decodeReferenceJSON, Filter, Serializer } from '@dxos/echo-db';\n\nexport const importSpace = async (database: EchoDatabase, data: SerializedSpace) => {\n  const {\n    objects: [properties],\n  } = await database.query(Filter.typename(TYPE_PROPERTIES)).run();\n\n  await new Serializer().import(database, data, {\n    onObject: async (object) => {\n      const { '@type': typeEncoded, ...data } = object;\n      const type = decodeReferenceJSON(typeEncoded);\n      // Handle Space Properties\n      if (properties && type?.objectId === TYPE_PROPERTIES) {\n        Object.entries(data).forEach(([name, value]) => {\n          if (!name.startsWith('@')) {\n            properties[name] = value;\n          }\n        });\n        return false;\n      }\n      return true;\n    },\n  });\n};\n"],
  "mappings": "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",
  "names": ["SpaceId", "compareForeignKeys", "createQueueDXN", "getMeta", "getSchema", "getType", "getTypename", "Expando", "Ref", "RefArray", "live", "isLiveObject", "makeRef", "refFromDXN", "DocAccessor", "Query", "Filter", "ObjectVersion", "Queue", "ResultFormat", "createDocAccessor", "createObject", "createSubscription", "defineObjectMigration", "fromCursor", "isEchoObject", "getObjectCore", "getRangeFromCursor", "getSource", "getTarget", "getTextInRange", "getVersion", "loadObjectReferences", "toCursor", "toCursorRange", "updateText", "isRelation", "internalDecodeReference", "IndexKind", "QueryOptions", "SpaceMember", "SpaceState", "HaloSpaceMember", "TextKind", "Schema", "Obj", "getDatabaseFromObject", "invariant", "isLiveObject", "SPACE_ID_LENGTH", "OBJECT_ID_LENGTH", "FQ_ID_LENGTH", "isSpace", "object", "SpaceProxy", "SpaceSchema", "Schema", "Any", "pipe", "filter", "x", "annotations", "title", "ReactiveObjectSchema", "isLiveObject", "EchoObjectSchema", "Obj", "isObject", "getSpace", "undefined", "db", "getDatabaseFromObject", "id", "spaceId", "owner", "graph", "_getOwningObject", "fullyQualifiedId", "space", "parseFullyQualifiedId", "objectId", "split", "invariant", "parseId", "length", "indexOf", "createEmptyEdgeSyncState", "missingOnLocal", "missingOnRemote", "localDocumentCount", "remoteDocumentCount", "differentDocuments", "getSyncSummary", "syncMap", "Object", "entries", "reduce", "summary", "_spaceId", "peerState", "TYPE_PROPERTIES", "decodeReferenceJSON", "Filter", "Serializer", "importSpace", "database", "data", "objects", "properties", "query", "Filter", "typename", "TYPE_PROPERTIES", "run", "Serializer", "import", "onObject", "object", "typeEncoded", "type", "decodeReferenceJSON", "objectId", "Object", "entries", "forEach", "name", "value", "startsWith"]
}
