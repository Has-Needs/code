import { type Halo, type Space } from '@dxos/client-protocol';
import { type ClientServicesHost, type DataSpace } from '@dxos/client-services';
import { PublicKey } from '@dxos/keys';
import { type TraceProcessor } from '@dxos/tracing';
import { type Client } from '../client';
import { Filter, getMeta } from '../echo';
type FeedWrapper = unknown;
/**
 * A hook bound to window.__DXOS__.
 */
export interface DevtoolsHook {
    client?: Client;
    host?: ClientServicesHost;
    tracing: TraceProcessor;
    spaces?: Accessor<Space | DataSpace>;
    feeds?: Accessor<FeedWrapper>;
    halo?: Halo;
    openClientRpcServer: () => Promise<boolean>;
    openDevtoolsApp?: () => void;
    downloadDiagnostics?: () => Promise<void>;
    reset: () => void;
    /**
     * Import modules exposed by `exposeModule` from @dxos/debug.
     */
    importModule: (module: string) => unknown;
    listDiagnostics: () => Promise<void>;
    fetchDiagnostics: (id: string, instanceTag?: string) => Promise<void>;
    exportProfile?: () => Promise<void>;
    importProfile?: () => Promise<void>;
    /**
     * Utility function.
     */
    joinTables: any;
    Filter: typeof Filter;
    getMeta: typeof getMeta;
}
export type MountOptions = {
    client?: Client;
    host?: ClientServicesHost;
};
export declare const mountDevtoolsHooks: ({ client, host }: MountOptions) => void;
export declare const unmountDevtoolsHooks: () => void;
type Accessor<T> = {
    (keyOrSearch: PublicKey | string): T | undefined;
    (): T[];
};
export {};
//# sourceMappingURL=devtools.d.ts.map