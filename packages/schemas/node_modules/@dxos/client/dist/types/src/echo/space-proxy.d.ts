import { MulticastObservable } from '@dxos/async';
import { type ClientServicesProvider, type Space, type SpaceInternal } from '@dxos/client-protocol';
import { inspectCustom, type CustomInspectable, type CustomInspectFunction } from '@dxos/debug';
import { type QueueFactory, type AnyLiveObject, type CoreDatabase, type EchoClient, type EchoDatabase } from '@dxos/echo-db';
import { type PublicKey, type SpaceId } from '@dxos/keys';
import { Invitation, SpaceState, type Contact, type Space as SpaceData, type SpaceMember, type UpdateMemberRoleRequest } from '@dxos/protocols/proto/dxos/client/services';
import { type SpaceSnapshot } from '@dxos/protocols/proto/dxos/echo/snapshot';
import { type GossipMessage } from '@dxos/protocols/proto/dxos/mesh/teleport/gossip';
export declare class SpaceProxy implements Space, CustomInspectable {
    private _clientServices;
    private _data;
    private _ctx;
    /**
     * Sent whenever any space data changes.
     */
    private readonly _anySpaceUpdate;
    private readonly _pipelineUpdate;
    private _initializing;
    private readonly _db;
    private readonly _internal;
    private readonly _invitationsProxy;
    private readonly _state;
    private readonly _pipeline;
    private readonly _membersUpdate;
    private readonly _members;
    private readonly _queues;
    private _databaseOpen;
    private _error;
    private _properties?;
    constructor(_clientServices: ClientServicesProvider, _data: SpaceData, echoClient: EchoClient);
    toJSON(): {
        id: SpaceId;
        db: {
            id: SpaceId;
            objects: number;
        };
        state: string;
    };
    get id(): SpaceId;
    get key(): PublicKey;
    get db(): EchoDatabase;
    get queues(): QueueFactory;
    /**
     * @deprecated
     */
    get crud(): CoreDatabase;
    get isOpen(): boolean;
    get properties(): AnyLiveObject<any>;
    get state(): MulticastObservable<SpaceState>;
    /**
     * @inheritdoc
     */
    get pipeline(): MulticastObservable<SpaceData.PipelineState>;
    /**
     * @inheritdoc
     */
    get invitations(): MulticastObservable<import("@dxos/client-protocol").CancellableInvitation[]>;
    /**
     * @inheritdoc
     */
    get members(): MulticastObservable<SpaceMember[]>;
    /**
     * @inheritdoc
     */
    get internal(): SpaceInternal;
    get error(): Error | undefined;
    get [Symbol.toStringTag](): string;
    [inspectCustom]: CustomInspectFunction;
    /**
     * Current state of the space.
     * The database is ready to be used in `SpaceState.SPACE_READY` state.
     * Presence is available in `SpaceState.SPACE_CONTROL_ONLY` state.
     */
    private get _currentState();
    private _initialize;
    private _initializeDb;
    private _reset;
    open(): Promise<void>;
    close(): Promise<void>;
    /**
     * Waits until the space is in the ready state, with database initialized.
     */
    waitUntilReady(): Promise<this>;
    /**
     * Post a message to the space.
     */
    postMessage(channel: string, message: any): Promise<void>;
    /**
     * Listen for messages posted to the space.
     */
    listen(channel: string, callback: (message: GossipMessage) => void): () => Promise<void>;
    /**
     * Creates a delegated or interactive invitation.
     */
    share(options?: Partial<Invitation>): import("@dxos/client-protocol").CancellableInvitation;
    admitContact(contact: Contact): Promise<void>;
    /**
     * Requests member role update.
     */
    updateMemberRole(request: Omit<UpdateMemberRoleRequest, 'spaceKey'>): Promise<void>;
    /**
     * Implementation method.
     */
    createSnapshot(): Promise<SpaceSnapshot>;
    private _removeMember;
    private _createEpoch;
    private _getCredentials;
    private _getEpochs;
    private _migrate;
    private _setEdgeReplicationPreference;
    private _throwIfNotInitialized;
    private _export;
}
//# sourceMappingURL=space-proxy.d.ts.map