import { Event } from '@dxos/async';
import { type ClientServices, type ClientServicesProvider } from '@dxos/client-protocol';
import { Config } from '@dxos/config';
import type { PublicKey } from '@dxos/keys';
import { type ServiceBundle } from '@dxos/rpc';
import { SharedWorkerConnection } from './shared-worker-connection';
/**
 * Creates services provider connected via worker.
 */
export declare const fromWorker: (config: Config | undefined, options: Omit<WorkerClientServicesParams, "config">) => Promise<WorkerClientServices>;
export type WorkerClientServicesParams = {
    config: Config;
    createWorker: () => SharedWorker;
    logFilter?: string;
    observabilityGroup?: string;
    signalTelemetryEnabled?: boolean;
};
/**
 * Proxy to host client service in worker.
 */
export declare class WorkerClientServices implements ClientServicesProvider {
    readonly closed: Event<Error | undefined>;
    readonly joinedSpace: Event<PublicKey>;
    private _isOpen;
    private readonly _config;
    private readonly _createWorker;
    private readonly _logFilter;
    private _runtime;
    private _services;
    private _loggingStream?;
    private readonly _observabilityGroup?;
    private readonly _signalTelemetryEnabled;
    constructor({ config, createWorker, logFilter, observabilityGroup, signalTelemetryEnabled, }: WorkerClientServicesParams);
    get descriptors(): ServiceBundle<ClientServices>;
    get services(): Partial<ClientServices>;
    get runtime(): SharedWorkerConnection;
    open(): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=worker-client-services.d.ts.map