import { type Config } from '@dxos/config';
import { type RpcPort } from '@dxos/rpc';
import { type MaybePromise, type Provider } from '@dxos/util';
export type SharedWorkerConnectionOptions = {
    config: Config | Provider<MaybePromise<Config>>;
    systemPort: RpcPort;
    /**
     * @deprecated Only used with iframes.
     */
    shellPort?: RpcPort;
};
/**
 * Manages the client connection to the shared worker.
 */
export declare class SharedWorkerConnection {
    private readonly _id;
    private readonly _configProvider;
    private readonly _systemPort;
    private _release;
    private _config;
    private _transportService;
    private _systemRpc;
    constructor({ config, systemPort }: SharedWorkerConnectionOptions);
    open(params: {
        origin: string;
        observabilityGroup?: string;
        signalTelemetryEnabled?: boolean;
    }): Promise<void>;
    close(): Promise<void>;
    private _lockKey;
}
//# sourceMappingURL=shared-worker-connection.d.ts.map