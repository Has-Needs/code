import { Schema } from 'effect';
import { type Space } from '@dxos/client-protocol';
import { type Type } from '@dxos/echo';
import { type SpaceSyncState, type AnyLiveObject } from '@dxos/echo-db';
import { type Live } from '@dxos/live-object';
export declare const SPACE_ID_LENGTH = 33;
export declare const OBJECT_ID_LENGTH = 26;
export declare const FQ_ID_LENGTH: number;
export declare const isSpace: (object: unknown) => object is Space;
export declare const SpaceSchema: Schema.Schema<Space>;
export declare const ReactiveObjectSchema: Schema.Schema<Live<any>>;
export declare const EchoObjectSchema: Schema.Schema<AnyLiveObject<any>>;
export declare const getSpace: (object?: Live<any>) => Space | undefined;
/**
 * Fully qualified id of a reactive object is a combination of the space id and the object id.
 * @returns Fully qualified id of a reactive object.
 * @deprecated Prefer DXNs.
 */
export declare const fullyQualifiedId: (object: Live<any>) => string;
/**
 * @deprecated Use `parseId` instead.
 */
export declare const parseFullyQualifiedId: (id: string) => [string, string];
export declare const parseId: (id?: string) => {
    spaceId?: Type.SpaceId;
    objectId?: Type.ObjectId;
};
export type Progress = {
    count: number;
    total: number;
};
export type PeerSyncState = Omit<SpaceSyncState.PeerState, 'peerId'>;
export type SpaceSyncStateMap = Record<Type.SpaceId, PeerSyncState>;
export declare const createEmptyEdgeSyncState: () => PeerSyncState;
export declare const getSyncSummary: (syncMap: SpaceSyncStateMap) => PeerSyncState;
//# sourceMappingURL=util.d.ts.map