import { PublicKey } from '@dxos/keys';
import { type AutomergeReplicator, type AutomergeReplicatorFactory } from '@dxos/teleport-extension-automerge-replicator';
import { type EchoReplicator, type EchoReplicatorContext } from './echo-replicator';
/**
 * Used to replicate with other peers over the network.
 */
export declare class MeshEchoReplicator implements EchoReplicator {
    /**
     * We might have multiple connections open with a peer (one per space), but there'll be only one enabled
     * connection at any given moment, because there's a single repo for all the spaces.
     * When a connection closes (space was closed) it gets removed from the list and the next connection
     * in the line gets enabled.
     */
    private readonly _connectionsPerPeer;
    /**
     * A set of all connections (enabled and disabled).
     */
    private readonly _connections;
    /**
     * spaceId -> deviceKey[]
     */
    private readonly _authorizedDevices;
    private _context;
    connect(context: EchoReplicatorContext): Promise<void>;
    disconnect(): Promise<void>;
    createExtension(extensionFactory?: AutomergeReplicatorFactory): AutomergeReplicator;
    authorizeDevice(spaceKey: PublicKey, deviceKey: PublicKey): Promise<void>;
}
//# sourceMappingURL=mesh-echo-replicator.d.ts.map