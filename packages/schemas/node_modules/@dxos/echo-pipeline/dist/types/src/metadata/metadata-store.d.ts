import { Event } from '@dxos/async';
import { PublicKey } from '@dxos/keys';
import { Invitation, SpaceState } from '@dxos/protocols/proto/dxos/client/services';
import { type ControlPipelineSnapshot, type EchoMetadata, type SpaceMetadata, type IdentityRecord, type SpaceCache, type EdgeReplicationSetting } from '@dxos/protocols/proto/dxos/echo/metadata';
import { type Directory } from '@dxos/random-access-storage';
import { type Timeframe } from '@dxos/timeframe';
export interface AddSpaceOptions {
    key: PublicKey;
    genesisFeed: PublicKey;
}
declare const EchoMetadata: import("@dxos/codec-protobuf").ProtoCodec<EchoMetadata>;
export declare class MetadataStore {
    private _metadata;
    private _spaceLargeMetadata;
    private _metadataFile?;
    readonly update: Event<EchoMetadata>;
    private readonly _invitationCleanupCtx;
    constructor(directory: Directory);
    get metadata(): EchoMetadata;
    get version(): number;
    /**
     * Returns a list of currently saved spaces. The list and objects in it can be modified addSpace and
     * addSpaceFeed functions.
     */
    get spaces(): SpaceMetadata[];
    private _readFile;
    close(): Promise<void>;
    /**
     * Loads metadata from persistent storage.
     */
    load(): Promise<void>;
    private _save;
    private _loadSpaceLargeMetadata;
    private _saveSpaceLargeMetadata;
    flush(): Promise<void>;
    _getSpace(spaceKey: PublicKey): SpaceMetadata;
    hasSpace(spaceKey: PublicKey): boolean;
    private _getLargeSpaceMetadata;
    /**
     * Clears storage - doesn't work for now.
     */
    clear(): Promise<void>;
    getIdentityRecord(): IdentityRecord | undefined;
    setIdentityRecord(record: IdentityRecord): Promise<void>;
    getInvitations(): Invitation[];
    addInvitation(invitation: Invitation): Promise<void>;
    removeInvitation(invitationId: string): Promise<void>;
    addSpace(record: SpaceMetadata): Promise<void>;
    setSpaceDataLatestTimeframe(spaceKey: PublicKey, timeframe: Timeframe): Promise<void>;
    setSpaceControlLatestTimeframe(spaceKey: PublicKey, timeframe: Timeframe): Promise<void>;
    setCache(spaceKey: PublicKey, cache: SpaceCache): Promise<void>;
    setWritableFeedKeys(spaceKey: PublicKey, controlFeedKey: PublicKey, dataFeedKey: PublicKey): Promise<void>;
    setSpaceState(spaceKey: PublicKey, state: SpaceState): Promise<void>;
    getSpaceControlPipelineSnapshot(spaceKey: PublicKey): ControlPipelineSnapshot | undefined;
    setSpaceControlPipelineSnapshot(spaceKey: PublicKey, snapshot: ControlPipelineSnapshot): Promise<void>;
    getSpaceEdgeReplicationSetting(spaceKey: PublicKey): EdgeReplicationSetting | undefined;
    setSpaceEdgeReplicationSetting(spaceKey: PublicKey, setting: EdgeReplicationSetting): Promise<void>;
}
export declare const hasInvitationExpired: (invitation: Invitation) => boolean;
export {};
//# sourceMappingURL=metadata-store.d.ts.map