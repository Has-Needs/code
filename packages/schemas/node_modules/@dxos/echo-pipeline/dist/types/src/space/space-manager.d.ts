import { type DelegateInvitationCredential, type MemberInfo } from '@dxos/credentials';
import { type FeedStore } from '@dxos/feed-store';
import { PublicKey } from '@dxos/keys';
import { type SwarmNetworkManager } from '@dxos/network-manager';
import type { FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type SpaceMetadata } from '@dxos/protocols/proto/dxos/echo/metadata';
import type { Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Teleport } from '@dxos/teleport';
import { type BlobStore } from '@dxos/teleport-extension-object-sync';
import { ComplexMap } from '@dxos/util';
import { Space } from './space';
import { type SwarmIdentity } from './space-protocol';
import { type MetadataStore } from '../metadata';
export type SpaceManagerParams = {
    feedStore: FeedStore<FeedMessage>;
    networkManager: SwarmNetworkManager;
    metadataStore: MetadataStore;
    blobStore: BlobStore;
    disableP2pReplication?: boolean;
};
export type ConstructSpaceParams = {
    metadata: SpaceMetadata;
    swarmIdentity: SwarmIdentity;
    memberKey: PublicKey;
    /**
     * Called when connection auth passed successful.
     */
    onAuthorizedConnection: (session: Teleport) => void;
    onAuthFailure?: (session: Teleport) => void;
    onDelegatedInvitationStatusChange: (invitation: DelegateInvitationCredential, isActive: boolean) => Promise<void>;
    onMemberRolesChanged: (member: MemberInfo[]) => Promise<void>;
};
export type RequestSpaceAdmissionCredentialParams = {
    spaceKey: PublicKey;
    identityKey: PublicKey;
    swarmIdentity: SwarmIdentity;
    timeout: number;
};
/**
 * Manages a collection of ECHO (Data) Spaces.
 */
export declare class SpaceManager {
    private readonly _spaces;
    private readonly _feedStore;
    private readonly _networkManager;
    private readonly _metadataStore;
    private readonly _blobStore;
    private readonly _instanceId;
    private readonly _disableP2pReplication;
    constructor({ feedStore, networkManager, metadataStore, blobStore, disableP2pReplication }: SpaceManagerParams);
    get spaces(): ComplexMap<PublicKey, Space>;
    open(): Promise<void>;
    close(): Promise<void>;
    constructSpace({ metadata, swarmIdentity, onAuthorizedConnection, onAuthFailure, onDelegatedInvitationStatusChange, onMemberRolesChanged, memberKey, }: ConstructSpaceParams): Promise<Space>;
    requestSpaceAdmissionCredential(params: RequestSpaceAdmissionCredentialParams): Promise<Credential>;
    findSpaceByRootDocumentId(documentId: string): Space | undefined;
}
//# sourceMappingURL=space-manager.d.ts.map