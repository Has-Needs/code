import { type DocHandle, type DocumentId } from '@automerge/automerge-repo';
import { Event } from '@dxos/async';
import { Resource, Context } from '@dxos/context';
import { type DatabaseDirectory } from '@dxos/echo-protocol';
import { type SpaceId } from '@dxos/keys';
import { DatabaseRoot } from './database-root';
export declare class SpaceStateManager extends Resource {
    private readonly _roots;
    private readonly _rootBySpace;
    private readonly _perRootContext;
    private readonly _lastSpaceDocumentList;
    readonly spaceDocumentListUpdated: Event<SpaceDocumentListUpdatedEvent>;
    protected _close(ctx: Context): Promise<void>;
    get roots(): ReadonlyMap<DocumentId, DatabaseRoot>;
    getRootByDocumentId(documentId: DocumentId): DatabaseRoot | undefined;
    getSpaceRootDocumentId(spaceId: SpaceId): DocumentId | undefined;
    getRootBySpaceId(spaceId: SpaceId): DatabaseRoot | undefined;
    assignRootToSpace(spaceId: SpaceId, handle: DocHandle<DatabaseDirectory>): Promise<DatabaseRoot>;
}
export declare class SpaceDocumentListUpdatedEvent {
    readonly spaceId: SpaceId;
    readonly spaceRootId: DocumentId;
    readonly previousRootId: DocumentId | undefined;
    readonly documentIds: DocumentId[];
    constructor(spaceId: SpaceId, spaceRootId: DocumentId, previousRootId: DocumentId | undefined, documentIds: DocumentId[]);
}
//# sourceMappingURL=space-state-manager.d.ts.map