import { NetworkAdapter, type Message, type PeerId, type PeerMetadata } from '@automerge/automerge-repo';
import { type PublicKey } from '@dxos/keys';
import { type EchoReplicator, type RemoteDocumentExistenceCheckParams, type ShouldAdvertiseParams, type ShouldSyncCollectionParams } from './echo-replicator';
export interface NetworkDataMonitor {
    recordPeerConnected(peerId: string): void;
    recordPeerDisconnected(peerId: string): void;
    recordMessageSent(message: Message, duration: number): void;
    recordMessageReceived(message: Message): void;
    recordMessageSendingFailed(message: Message): void;
}
export type EchoNetworkAdapterParams = {
    getContainingSpaceForDocument: (documentId: string) => Promise<PublicKey | null>;
    isDocumentInRemoteCollection: (params: RemoteDocumentExistenceCheckParams) => Promise<boolean>;
    onCollectionStateQueried: (collectionId: string, peerId: PeerId) => void;
    onCollectionStateReceived: (collectionId: string, peerId: PeerId, state: unknown) => void;
    monitor?: NetworkDataMonitor;
};
/**
 * Manages a set of {@link EchoReplicator} instances.
 */
export declare class EchoNetworkAdapter extends NetworkAdapter {
    private readonly _params;
    private readonly _replicators;
    /**
     * Remote peer id -> connection.
     */
    private readonly _connections;
    private _lifecycleState;
    private readonly _connected;
    private readonly _ready;
    constructor(_params: EchoNetworkAdapterParams);
    isReady(): boolean;
    whenReady(): Promise<void>;
    connect(peerId: PeerId, peerMetadata?: PeerMetadata | undefined): void;
    send(message: Message): void;
    disconnect(): void;
    open(): Promise<void>;
    close(): Promise<this | undefined>;
    whenConnected(): Promise<void>;
    onConnectionAuthScopeChanged(peer: PeerId): void;
    addReplicator(replicator: EchoReplicator): Promise<void>;
    removeReplicator(replicator: EchoReplicator): Promise<void>;
    shouldAdvertise(peerId: PeerId, params: ShouldAdvertiseParams): Promise<boolean>;
    shouldSyncCollection(peerId: PeerId, params: ShouldSyncCollectionParams): boolean;
    queryCollectionState(collectionId: string, targetId: PeerId): void;
    sendCollectionState(collectionId: string, targetId: PeerId, state: unknown): void;
    getPeersInterestedInCollection(collectionId: string): PeerId[];
    private _send;
    private _onConnectionOpen;
    private _onMessage;
    private _onConnectionClosed;
    /**
     * Trigger doc-synchronizer shared documents set recalculation. Happens on peer-candidate.
     * TODO(y): replace with a proper API call when sharePolicy update becomes supported by automerge-repo
     */
    private _onConnectionAuthScopeChanged;
    private _emitPeerCandidate;
}
export declare const createEchoPeerMetadata: () => PeerMetadata;
export declare const isEchoPeerMetadata: (metadata: PeerMetadata) => boolean;
//# sourceMappingURL=echo-network-adapter.d.ts.map