import { Event } from '@dxos/async';
import { type Context } from '@dxos/context';
import { type CredentialSigner } from '@dxos/credentials';
import { type Signer } from '@dxos/crypto';
import { type Space } from '@dxos/echo-pipeline';
import { type EdgeConnection } from '@dxos/edge-client';
import { type IdentityDid, PublicKey, type SpaceId } from '@dxos/keys';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type DeviceProfileDocument, type ProfileDocument, type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type DeviceAdmissionRequest } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type Presence } from '@dxos/teleport-extension-gossip';
import { type ComplexMap } from '@dxos/util';
import { TrustedKeySetAuthVerifier } from './authenticator';
export type IdentityParams = {
    did: IdentityDid;
    identityKey: PublicKey;
    deviceKey: PublicKey;
    signer: Signer;
    space: Space;
    presence?: Presence;
    edgeConnection?: EdgeConnection;
    edgeFeatures?: Runtime.Client.EdgeFeatures;
};
/**
 * Agent identity manager, which includes the agent's Halo space.
 */
export declare class Identity {
    readonly space: Space;
    private readonly _signer;
    private readonly _presence?;
    private readonly _deviceStateMachine;
    private readonly _profileStateMachine;
    private readonly _defaultSpaceStateMachine;
    private readonly _edgeFeedReplicator?;
    readonly authVerifier: TrustedKeySetAuthVerifier;
    readonly did: IdentityDid;
    readonly identityKey: PublicKey;
    readonly deviceKey: PublicKey;
    readonly stateUpdate: Event<void>;
    constructor(params: IdentityParams);
    get authorizedDeviceKeys(): ComplexMap<PublicKey, DeviceProfileDocument>;
    get defaultSpaceId(): SpaceId | undefined;
    open(ctx: Context): Promise<void>;
    joinNetwork(): Promise<void>;
    close(ctx: Context): Promise<void>;
    ready(): Promise<void>;
    get profileDocument(): ProfileDocument | undefined;
    /**
     * @test-only
     */
    get controlPipeline(): import("@dxos/echo-pipeline").PipelineAccessor;
    get haloSpaceId(): SpaceId;
    get haloSpaceKey(): PublicKey;
    get haloGenesisFeedKey(): PublicKey;
    get deviceCredentialChain(): import("@dxos/protocols/proto/dxos/halo/credentials").Chain | undefined;
    get presence(): Presence | undefined;
    get signer(): Signer;
    /**
     * Issues credentials as identity.
     * Requires identity to be ready.
     */
    getIdentityCredentialSigner(): CredentialSigner;
    /**
     * Issues credentials as device.
     */
    getDeviceCredentialSigner(): CredentialSigner;
    updateDefaultSpace(spaceId: SpaceId): Promise<void>;
    admitDevice({ deviceKey, controlFeedKey, dataFeedKey }: DeviceAdmissionRequest): Promise<Credential>;
    private _onFeedAdded;
}
//# sourceMappingURL=identity.d.ts.map