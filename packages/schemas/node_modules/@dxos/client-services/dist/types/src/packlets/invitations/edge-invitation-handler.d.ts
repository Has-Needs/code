import { type Context } from '@dxos/context';
import { type EdgeHttpClient } from '@dxos/edge-client';
import { type DeviceProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type AdmissionResponse, type AdmissionRequest } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type InvitationProtocol } from './invitation-protocol';
import { type FlowLockHolder, type GuardedInvitationState } from './invitation-state';
export interface EdgeInvitationHandlerCallbacks {
    onInvitationSuccess(response: AdmissionResponse, request: AdmissionRequest): Promise<void>;
}
export declare const MAX_RETRIES_PER_INVITATION = 5;
export declare const DEFAULT_REQUEST_RETRY_INTERVAL_MS = 3000;
export declare const DEFAULT_REQUEST_RETRY_JITTER_MS = 500;
export type EdgeInvitationConfig = {
    retryInterval?: number;
    retryJitter?: number;
};
export declare class EdgeInvitationHandler implements FlowLockHolder {
    private readonly _client;
    private readonly _callbacks;
    private _flowLock;
    private readonly _retryInterval;
    private readonly _retryJitter;
    constructor(config: EdgeInvitationConfig | undefined, _client: EdgeHttpClient | undefined, _callbacks: EdgeInvitationHandlerCallbacks);
    handle(ctx: Context, guardedState: GuardedInvitationState, protocol: InvitationProtocol, deviceProfile?: DeviceProfileDocument): void;
    private _handleSpaceInvitationFlow;
    private _mapToAdmissionResponse;
    private _joinSpaceByInvitation;
    hasFlowLock(): boolean;
    private _calculateNextRetryMs;
}
//# sourceMappingURL=edge-invitation-handler.d.ts.map