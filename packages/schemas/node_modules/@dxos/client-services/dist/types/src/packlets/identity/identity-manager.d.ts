import { Event } from '@dxos/async';
import { Context } from '@dxos/context';
import { type MetadataStore, type SpaceManager } from '@dxos/echo-pipeline';
import { type EdgeConnection } from '@dxos/edge-client';
import { type FeedStore } from '@dxos/feed-store';
import { type Keyring } from '@dxos/keyring';
import { PublicKey } from '@dxos/keys';
import { Device } from '@dxos/protocols/proto/dxos/client/services';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import { type FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type IdentityRecord } from '@dxos/protocols/proto/dxos/echo/metadata';
import { type DeviceProfileDocument, type ProfileDocument, type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { Timeframe } from '@dxos/timeframe';
import { Identity } from './identity';
export type JoinIdentityParams = {
    identityKey: PublicKey;
    deviceKey: PublicKey;
    haloSpaceKey: PublicKey;
    haloGenesisFeedKey: PublicKey;
    controlFeedKey: PublicKey;
    dataFeedKey: PublicKey;
    authorizedDeviceCredential: Credential;
    /**
     * Latest known timeframe for the control pipeline.
     * We will try to catch up to this timeframe before starting the data pipeline.
     */
    controlTimeframe?: Timeframe;
    deviceProfile?: DeviceProfileDocument;
};
export type CreateIdentityOptions = {
    profile?: ProfileDocument;
    deviceProfile?: DeviceProfileDocument;
};
export type IdentityManagerParams = {
    metadataStore: MetadataStore;
    keyring: Keyring;
    feedStore: FeedStore<FeedMessage>;
    spaceManager: SpaceManager;
    edgeConnection?: EdgeConnection;
    edgeFeatures?: Runtime.Client.EdgeFeatures;
    devicePresenceAnnounceInterval?: number;
    devicePresenceOfflineTimeout?: number;
};
export declare class IdentityManager {
    readonly stateUpdate: Event<void>;
    private readonly _metadataStore;
    private readonly _keyring;
    private readonly _feedStore;
    private readonly _spaceManager;
    private readonly _devicePresenceAnnounceInterval;
    private readonly _devicePresenceOfflineTimeout;
    private readonly _edgeConnection;
    private readonly _edgeFeatures;
    private _identity?;
    constructor(params: IdentityManagerParams);
    get identity(): Identity | undefined;
    open(ctx: Context): Promise<void>;
    close(): Promise<void>;
    createIdentity({ profile, deviceProfile }?: CreateIdentityOptions): Promise<Identity>;
    createDefaultDeviceProfile(): DeviceProfileDocument;
    /**
     * Prepare an identity object as the first step of acceptIdentity flow.
     */
    prepareIdentity(params: JoinIdentityParams): Promise<{
        identity: Identity;
        identityRecord: IdentityRecord;
    }>;
    /**
     * Accept an existing identity. Expects its device key to be authorized (now or later).
     */
    acceptIdentity(identity: Identity, identityRecord: IdentityRecord, profile?: DeviceProfileDocument): Promise<void>;
    /**
     * Update the profile document of an existing identity.
     */
    updateProfile(profile: ProfileDocument): Promise<ProfileDocument>;
    updateDeviceProfile(profile: DeviceProfileDocument): Promise<Device>;
    private _constructIdentity;
    private _constructSpace;
}
//# sourceMappingURL=identity-manager.d.ts.map