import { type Keyring } from '@dxos/keyring';
import { type PublicKey } from '@dxos/keys';
import { AlreadyJoinedError, type ApiError } from '@dxos/protocols';
import { Invitation } from '@dxos/protocols/proto/dxos/client/services';
import type { DeviceProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type AdmissionRequest, type AdmissionResponse, type IntroductionRequest } from '@dxos/protocols/proto/dxos/halo/invitations';
import { type InvitationProtocol } from './invitation-protocol';
import { type Identity, type JoinIdentityParams } from '../identity';
export declare class DeviceInvitationProtocol implements InvitationProtocol {
    private readonly _keyring;
    private readonly _getIdentity;
    private readonly _acceptIdentity;
    constructor(_keyring: Keyring, _getIdentity: () => Identity, _acceptIdentity: (identity: JoinIdentityParams) => Promise<Identity>);
    toJSON(): object;
    checkCanInviteNewMembers(): ApiError | undefined;
    getInvitationContext(): Partial<Invitation> & Pick<Invitation, 'kind'>;
    delegate(): Promise<PublicKey>;
    cancelDelegation(): Promise<void>;
    admit(_: Invitation, request: AdmissionRequest): Promise<AdmissionResponse>;
    checkInvitation(invitation: Partial<Invitation>): AlreadyJoinedError | undefined;
    createIntroduction(): IntroductionRequest;
    createAdmissionRequest(deviceProfile?: DeviceProfileDocument): Promise<AdmissionRequest>;
    accept(response: AdmissionResponse, request: AdmissionRequest): Promise<Partial<Invitation>>;
}
//# sourceMappingURL=device-invitation-protocol.d.ts.map