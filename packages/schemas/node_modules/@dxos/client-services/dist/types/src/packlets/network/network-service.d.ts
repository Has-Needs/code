import { Stream } from '@dxos/codec-protobuf/stream';
import { type EdgeConnection } from '@dxos/edge-client';
import { type SignalManager } from '@dxos/messaging';
import { type SwarmNetworkManager } from '@dxos/network-manager';
import { type SubscribeSwarmStateRequest, type NetworkService, type NetworkStatus, type UpdateConfigRequest } from '@dxos/protocols/proto/dxos/client/services';
import { type Peer, type SwarmResponse } from '@dxos/protocols/proto/dxos/edge/messenger';
import { type LeaveRequest, type JoinRequest, type Message, type QueryRequest } from '@dxos/protocols/proto/dxos/edge/signal';
export declare class NetworkServiceImpl implements NetworkService {
    private readonly networkManager;
    private readonly signalManager;
    private readonly edgeConnection?;
    constructor(networkManager: SwarmNetworkManager, signalManager: SignalManager, edgeConnection?: EdgeConnection | undefined);
    queryStatus(): Stream<NetworkStatus>;
    updateConfig(request: UpdateConfigRequest): Promise<void>;
    joinSwarm(request: JoinRequest): Promise<void>;
    leaveSwarm(request: LeaveRequest): Promise<void>;
    querySwarm(request: QueryRequest): Promise<SwarmResponse>;
    subscribeSwarmState(request: SubscribeSwarmStateRequest): Stream<SwarmResponse>;
    sendMessage(message: Message): Promise<void>;
    subscribeMessages(peer: Peer): Stream<Message>;
}
//# sourceMappingURL=network-service.d.ts.map