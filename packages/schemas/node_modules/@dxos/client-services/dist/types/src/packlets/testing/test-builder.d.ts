import { type Config } from '@dxos/config';
import { EchoHost, MetadataStore, SpaceManager, MeshEchoReplicator } from '@dxos/echo-pipeline';
import { FeedStore } from '@dxos/feed-store';
import { Keyring } from '@dxos/keyring';
import { type LevelDB } from '@dxos/kv-store';
import { MemorySignalManagerContext, type SignalManager } from '@dxos/messaging';
import { SwarmNetworkManager } from '@dxos/network-manager';
import { StorageType, type Storage } from '@dxos/random-access-storage';
import { BlobStore } from '@dxos/teleport-extension-object-sync';
import { InvitationsManager } from '../invitations';
import { ClientServicesHost, ServiceContext, type ServiceContextRuntimeParams } from '../services';
import { DataSpaceManager, type DataSpaceManagerRuntimeParams, type SigningContext } from '../spaces';
export declare const createServiceHost: (config: Config, signalManagerContext: MemorySignalManagerContext) => ClientServicesHost;
export declare const createServiceContext: ({ signalManagerFactory, storage, runtimeParams, }?: {
    signalManagerFactory?: () => Promise<SignalManager>;
    storage?: Storage;
    runtimeParams?: ServiceContextRuntimeParams;
}) => Promise<ServiceContext>;
export declare const createPeers: (numPeers: number, signalManagerFactory?: () => Promise<SignalManager>) => Promise<ServiceContext[]>;
export declare const createIdentity: (peer: ServiceContext) => Promise<ServiceContext>;
export declare class TestBuilder {
    readonly signalContext: MemorySignalManagerContext;
    private readonly _ctx;
    createPeer(peerOptions?: TestPeerOpts): TestPeer;
    destroy(): Promise<void>;
}
export type TestPeerOpts = {
    dataStore?: StorageType;
    dataSpaceParams?: DataSpaceManagerRuntimeParams;
};
export type TestPeerProps = {
    storage?: Storage;
    level?: LevelDB;
    feedStore?: FeedStore<any>;
    metadataStore?: MetadataStore;
    keyring?: Keyring;
    networkManager?: SwarmNetworkManager;
    spaceManager?: SpaceManager;
    dataSpaceManager?: DataSpaceManager;
    signingContext?: SigningContext;
    blobStore?: BlobStore;
    echoHost?: EchoHost;
    meshEchoReplicator?: MeshEchoReplicator;
    invitationsManager?: InvitationsManager;
};
export declare class TestPeer {
    private readonly _signalContext;
    private readonly _opts;
    private _props;
    constructor(_signalContext: MemorySignalManagerContext, _opts?: TestPeerOpts);
    get props(): TestPeerProps;
    get storage(): Storage;
    get keyring(): Keyring;
    get level(): LevelDB;
    get feedStore(): FeedStore<any>;
    get metadataStore(): MetadataStore;
    get blobStore(): BlobStore;
    get networkManager(): SwarmNetworkManager;
    get spaceManager(): SpaceManager;
    get identity(): SigningContext;
    get echoHost(): EchoHost;
    get meshEchoReplicator(): MeshEchoReplicator;
    get dataSpaceManager(): DataSpaceManager;
    get invitationsManager(): InvitationsManager;
    createIdentity(): Promise<void>;
    destroy(): Promise<void>;
}
export declare const createSigningContext: (keyring: Keyring) => Promise<SigningContext>;
//# sourceMappingURL=test-builder.d.ts.map