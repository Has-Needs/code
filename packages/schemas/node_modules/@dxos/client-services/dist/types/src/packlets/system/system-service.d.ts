import { type Event } from '@dxos/async';
import { Stream } from '@dxos/codec-protobuf/stream';
import { type Config } from '@dxos/config';
import { GetDiagnosticsRequest, type SystemService, type SystemStatus, type UpdateStatusRequest, type QueryStatusRequest, type QueryStatusResponse, type Platform } from '@dxos/protocols/proto/dxos/client/services';
import { type MaybePromise } from '@dxos/util';
import { type Diagnostics } from '../diagnostics';
export type SystemServiceOptions = {
    config?: () => MaybePromise<Config | undefined>;
    statusUpdate: Event<void>;
    getCurrentStatus: () => SystemStatus;
    getDiagnostics: () => Promise<Partial<Diagnostics['services']>>;
    onUpdateStatus: (status: SystemStatus) => MaybePromise<void>;
    onReset: () => MaybePromise<void>;
};
export declare class SystemServiceImpl implements SystemService {
    private readonly _config?;
    private readonly _statusUpdate;
    private readonly _getCurrentStatus;
    private readonly _onUpdateStatus;
    private readonly _onReset;
    private readonly _getDiagnostics;
    constructor({ config, statusUpdate, getDiagnostics, onUpdateStatus, getCurrentStatus, onReset, }: SystemServiceOptions);
    getConfig(): Promise<import("@dxos/config").ConfigProto>;
    /**
     * NOTE: Since this is serialized as a JSON object, we allow the option to serialize keys.
     */
    getDiagnostics({ keys }?: GetDiagnosticsRequest): Promise<{
        timestamp: Date;
        diagnostics: any;
    }>;
    getPlatform(): Promise<Platform>;
    updateStatus({ status }: UpdateStatusRequest): Promise<void>;
    queryStatus({ interval }?: QueryStatusRequest): Stream<QueryStatusResponse>;
    reset(): Promise<void>;
}
//# sourceMappingURL=system-service.d.ts.map