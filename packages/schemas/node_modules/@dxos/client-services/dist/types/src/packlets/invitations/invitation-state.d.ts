/**
 * A utility object for serializing invitation state changes by multiple concurrent
 * invitation flow connections.
 */
import { Mutex, type PushStream } from '@dxos/async';
import { type Context } from '@dxos/context';
import { Invitation } from '@dxos/protocols/proto/dxos/client/services';
export interface FlowLockHolder {
    hasFlowLock(): boolean;
}
export interface GuardedInvitationState {
    mutex: Mutex;
    current: Invitation;
    complete(newState: Partial<Invitation>): void;
    set(lockHolder: FlowLockHolder | null, newState: Invitation.State): boolean;
    error(lockHolder: FlowLockHolder | null, error: any): boolean;
}
export declare const createGuardedInvitationState: (ctx: Context, invitation: Invitation, stream: PushStream<Invitation>) => GuardedInvitationState;
//# sourceMappingURL=invitation-state.d.ts.map