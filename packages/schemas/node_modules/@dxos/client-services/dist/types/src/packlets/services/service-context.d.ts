import { Trigger } from '@dxos/async';
import { Context, Resource } from '@dxos/context';
import { EchoHost, MetadataStore, SpaceManager } from '@dxos/echo-pipeline';
import type { EdgeHttpClient, EdgeConnection } from '@dxos/edge-client';
import { FeedStore } from '@dxos/feed-store';
import { Keyring } from '@dxos/keyring';
import { type LevelDB } from '@dxos/kv-store';
import { type SignalManager } from '@dxos/messaging';
import { type SwarmNetworkManager } from '@dxos/network-manager';
import { Invitation } from '@dxos/protocols/proto/dxos/client/services';
import { type Runtime } from '@dxos/protocols/proto/dxos/config';
import type { FeedMessage } from '@dxos/protocols/proto/dxos/echo/feed';
import { type ProfileDocument } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type Storage } from '@dxos/random-access-storage';
import { BlobStore } from '@dxos/teleport-extension-object-sync';
import { EdgeAgentManager } from '../agents';
import { IdentityManager, type CreateIdentityOptions, type IdentityManagerParams } from '../identity';
import { EdgeIdentityRecoveryManager } from '../identity/identity-recovery-manager';
import { type InvitationConnectionParams, InvitationsHandler, InvitationsManager, type InvitationProtocol } from '../invitations';
import { DataSpaceManager, type DataSpaceManagerRuntimeParams } from '../spaces';
export type ServiceContextRuntimeParams = Pick<IdentityManagerParams, 'devicePresenceOfflineTimeout' | 'devicePresenceAnnounceInterval'> & DataSpaceManagerRuntimeParams & {
    invitationConnectionDefaultParams?: InvitationConnectionParams;
    disableP2pReplication?: boolean;
    enableVectorIndexing?: boolean;
};
/**
 * Shared backend for all client services.
 */
export declare class ServiceContext extends Resource {
    readonly storage: Storage;
    readonly level: LevelDB;
    readonly networkManager: SwarmNetworkManager;
    readonly signalManager: SignalManager;
    private readonly _edgeConnection;
    private readonly _edgeHttpClient;
    readonly _runtimeParams?: ServiceContextRuntimeParams | undefined;
    private readonly _edgeFeatures?;
    private readonly _edgeIdentityUpdateMutex;
    readonly initialized: Trigger<void>;
    readonly metadataStore: MetadataStore;
    readonly blobStore: BlobStore;
    readonly feedStore: FeedStore<FeedMessage>;
    readonly keyring: Keyring;
    readonly spaceManager: SpaceManager;
    readonly identityManager: IdentityManager;
    readonly recoveryManager: EdgeIdentityRecoveryManager;
    readonly invitations: InvitationsHandler;
    readonly invitationsManager: InvitationsManager;
    readonly echoHost: EchoHost;
    private readonly _meshReplicator?;
    private readonly _echoEdgeReplicator?;
    dataSpaceManager?: DataSpaceManager;
    edgeAgentManager?: EdgeAgentManager;
    private readonly _handlerFactories;
    private _deviceSpaceSync?;
    private readonly _instanceId;
    constructor(storage: Storage, level: LevelDB, networkManager: SwarmNetworkManager, signalManager: SignalManager, _edgeConnection: EdgeConnection | undefined, _edgeHttpClient: EdgeHttpClient | undefined, _runtimeParams?: ServiceContextRuntimeParams | undefined, _edgeFeatures?: Runtime.Client.EdgeFeatures | undefined);
    protected _open(ctx: Context): Promise<void>;
    protected _close(ctx: Context): Promise<void>;
    createIdentity(params?: CreateIdentityOptions): Promise<import("../identity").Identity>;
    getInvitationHandler(invitation: Partial<Invitation> & Pick<Invitation, 'kind'>): InvitationProtocol;
    broadcastProfileUpdate(profile: ProfileDocument | undefined): Promise<void>;
    private _acceptIdentity;
    private _checkStorageVersion;
    private _initialize;
    private _setNetworkIdentity;
}
//# sourceMappingURL=service-context.d.ts.map