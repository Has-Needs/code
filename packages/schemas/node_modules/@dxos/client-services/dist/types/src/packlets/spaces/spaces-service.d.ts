import { Stream } from '@dxos/codec-protobuf/stream';
import { type SpaceManager } from '@dxos/echo-pipeline';
import { type CreateEpochRequest, type PostMessageRequest, type QueryCredentialsRequest, type QuerySpacesResponse, type Space, type SpacesService, type SubscribeMessagesRequest, type UpdateSpaceRequest, type WriteCredentialsRequest, type UpdateMemberRoleRequest, type AdmitContactRequest, type JoinSpaceResponse, type JoinBySpaceKeyRequest, type CreateEpochResponse, type ExportSpaceResponse, type ExportSpaceRequest, type ImportSpaceRequest, type ImportSpaceResponse } from '@dxos/protocols/proto/dxos/client/services';
import { type Credential } from '@dxos/protocols/proto/dxos/halo/credentials';
import { type GossipMessage } from '@dxos/protocols/proto/dxos/mesh/teleport/gossip';
import { type Provider } from '@dxos/util';
import { type DataSpaceManager } from './data-space-manager';
import { type IdentityManager } from '../identity';
export declare class SpacesServiceImpl implements SpacesService {
    private readonly _identityManager;
    private readonly _spaceManager;
    private readonly _getDataSpaceManager;
    constructor(_identityManager: IdentityManager, _spaceManager: SpaceManager, _getDataSpaceManager: Provider<Promise<DataSpaceManager>>);
    createSpace(): Promise<Space>;
    updateSpace({ spaceKey, state, edgeReplication }: UpdateSpaceRequest): Promise<void>;
    updateMemberRole(request: UpdateMemberRoleRequest): Promise<void>;
    querySpaces(): Stream<QuerySpacesResponse>;
    postMessage({ spaceKey, channel, message }: PostMessageRequest): Promise<void>;
    subscribeMessages({ spaceKey, channel }: SubscribeMessagesRequest): Stream<GossipMessage>;
    queryCredentials({ spaceKey, noTail }: QueryCredentialsRequest): Stream<Credential>;
    writeCredentials({ spaceKey, credentials }: WriteCredentialsRequest): Promise<void>;
    createEpoch({ spaceKey, migration, automergeRootUrl }: CreateEpochRequest): Promise<CreateEpochResponse>;
    admitContact(request: AdmitContactRequest): Promise<void>;
    joinBySpaceKey({ spaceKey }: JoinBySpaceKeyRequest): Promise<JoinSpaceResponse>;
    exportSpace(request: ExportSpaceRequest): Promise<ExportSpaceResponse>;
    importSpace(request: ImportSpaceRequest): Promise<ImportSpaceResponse>;
    private _joinByAdmission;
    private _serializeSpace;
    private _requireIdentity;
    private _updateMetrics;
}
//# sourceMappingURL=spaces-service.d.ts.map