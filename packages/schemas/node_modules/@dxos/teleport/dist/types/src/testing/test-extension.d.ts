import { Trigger } from '@dxos/async';
import { type ExtensionContext, type TeleportExtension } from '../teleport';
interface TestExtensionCallbacks {
    onOpen?: () => Promise<void>;
    onClose?: () => Promise<void>;
    onAbort?: () => Promise<void>;
}
export declare class TestExtension implements TeleportExtension {
    readonly callbacks: TestExtensionCallbacks;
    readonly open: Trigger<void>;
    readonly closed: Trigger<void>;
    readonly aborted: Trigger<void>;
    extensionContext: ExtensionContext | undefined;
    private _rpc;
    constructor(callbacks?: TestExtensionCallbacks);
    get remotePeerId(): import("@dxos/keys").PublicKey | undefined;
    onOpen(context: ExtensionContext): Promise<void>;
    onClose(err?: Error): Promise<void>;
    onAbort(err?: Error): Promise<void>;
    test(message?: string): Promise<void>;
    /**
     * Force-close the connection.
     */
    closeConnection(err?: Error): Promise<void>;
}
export {};
//# sourceMappingURL=test-extension.d.ts.map