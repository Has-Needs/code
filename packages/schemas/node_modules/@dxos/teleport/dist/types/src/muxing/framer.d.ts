import { Duplex } from 'node:stream';
import { Event } from '@dxos/async';
import { type RpcPort } from './rpc-port';
/**
 * Converts a stream of binary messages into a framed RpcPort.
 * Buffers are written prefixed by their length encoded as a varint.
 */
export declare class Framer {
    private _messageCb?;
    private _subscribeCb?;
    private _buffer?;
    private _sendCallbacks;
    private _bytesSent;
    private _bytesReceived;
    private _writable;
    readonly drain: Event<void>;
    private readonly _stream;
    readonly port: RpcPort;
    get stream(): Duplex;
    get bytesSent(): number;
    get bytesReceived(): number;
    get writable(): boolean;
    private _processResponseQueue;
    /**
     * Attempts to pop frames from the buffer and call the message callback.
     */
    private _popFrames;
    destroy(): void;
}
/**
 * Attempts to read a frame from the input buffer.
 */
export declare const decodeFrame: (buffer: Buffer, offset: number) => {
    payload: Buffer;
    bytesConsumed: number;
} | undefined;
export declare const encodeFrame: (payload: Uint8Array) => Buffer;
//# sourceMappingURL=framer.d.ts.map