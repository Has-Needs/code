import { Duplex } from 'node:stream';
import { Event } from '@dxos/async';
import { type PublicKey } from '@dxos/keys';
import { type ConnectionInfo } from '@dxos/protocols/proto/dxos/devtools/swarm';
import { type RpcPort } from './rpc-port';
export type CleanupCb = void | (() => void);
export type CreateChannelOpts = {
    /**
     * MIME type of the wire content.
     *
     * Examples:
     *  - application/octet-stream
     *  - application/x-protobuf; messageType="dxos.rpc.Message"
     */
    contentType?: string;
};
export type MuxerStats = {
    timestamp: number;
    channels: ConnectionInfo.StreamStats[];
    bytesSent: number;
    bytesReceived: number;
    bytesSentRate?: number;
    bytesReceivedRate?: number;
    readBufferSize?: number;
    writeBufferSize?: number;
};
/**
 * Channel based multiplexer.
 *
 * Can be used to open a number of channels represented by streams or RPC ports.
 * Performs framing for RPC ports.
 * Will buffer data until the remote peer opens the channel.
 *
 * The API will not advertise channels that as they are opened by the remote peer.
 * A higher level API (could be build on top of this muxer) for channel discovery is required.
 */
export declare class Muxer {
    private readonly _balancer;
    private readonly _channelsByLocalId;
    private readonly _channelsByTag;
    private readonly _ctx;
    private _sessionId?;
    private _nextId;
    private _closing;
    private _destroying;
    private _disposed;
    private _lastStats?;
    private readonly _lastChannelStats;
    afterClosed: Event<Error | undefined>;
    statsUpdated: Event<MuxerStats>;
    readonly stream: Duplex;
    constructor();
    setSessionId(sessionId: PublicKey): void;
    get sessionIdString(): string;
    /**
     * Creates a duplex Node.js-style stream.
     * The remote peer is expected to call `createStream` with the same tag.
     * The stream is immediately readable and writable.
     * NOTE: The data will be buffered until the stream is opened remotely with the same tag (may cause a memory leak).
     */
    createStream(tag: string, opts?: CreateChannelOpts): Promise<Duplex>;
    /**
     * Creates an RPC port.
     * The remote peer is expected to call `createPort` with the same tag.
     * The port is immediately usable.
     * NOTE: The data will be buffered until the stream is opened remotely with the same tag (may cause a memory leak).
     */
    createPort(tag: string, opts?: CreateChannelOpts): Promise<RpcPort>;
    close(err?: Error): Promise<void>;
    destroy(err?: Error): Promise<void>;
    _dispose(err?: Error): Promise<void>;
    private _handleCommand;
    private _sendCommand;
    private _getOrCreateStream;
    private _sendData;
    private _destroyChannel;
    private _emitStats;
}
//# sourceMappingURL=muxer.d.ts.map