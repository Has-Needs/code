import { Event } from '@dxos/async';
import type { QueryAST } from '@dxos/echo-protocol';
import { SpaceId } from '@dxos/keys';
import { type QueryService } from '@dxos/protocols/proto/dxos/echo/query';
import { type AnyLiveObject } from '../echo-handler';
import { type QuerySourceProvider } from '../hypergraph';
import { type QueryResultEntry, type QuerySource } from '../query';
export type LoadObjectParams = {
    spaceId: SpaceId;
    objectId: string;
    documentId: string;
};
export interface ObjectLoader {
    loadObject(params: LoadObjectParams): Promise<AnyLiveObject<any> | undefined>;
}
export type IndexQueryProviderParams = {
    service: QueryService;
    objectLoader: ObjectLoader;
};
export declare class IndexQuerySourceProvider implements QuerySourceProvider {
    private readonly _params;
    constructor(_params: IndexQueryProviderParams);
    create(): QuerySource;
}
export type IndexQuerySourceParams = {
    service: QueryService;
    objectLoader: ObjectLoader;
};
/**
 * Runs queries against an index.
 */
export declare class IndexQuerySource implements QuerySource {
    private readonly _params;
    changed: Event<void>;
    private _query?;
    private _results?;
    private _stream?;
    constructor(_params: IndexQuerySourceParams);
    open(): void;
    close(): void;
    getResults(): QueryResultEntry[];
    run(query: QueryAST.Query): Promise<QueryResultEntry[]>;
    update(query: QueryAST.Query): void;
    private _queryIndex;
    private _filterMapResult;
    private _closeStream;
}
//# sourceMappingURL=index-query-source-provider.d.ts.map