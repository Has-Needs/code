import { Schema } from 'effect';
import { FieldSortType, JsonPath, JsonSchemaType, QueryType } from '@dxos/echo-schema';
export declare const FieldSchema: Schema.mutable<Schema.Struct<{
    id: typeof Schema.String;
    path: Schema.Schema<JsonPath, JsonPath, never>;
    visible: Schema.optional<typeof Schema.Boolean>;
    size: Schema.optional<typeof Schema.Number>;
    referencePath: Schema.optional<Schema.Schema<JsonPath, JsonPath, never>>;
}>>;
export type FieldType = Schema.Schema.Type<typeof FieldSchema>;
declare const ViewTypeV1_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    name: Schema.SchemaClass<string, string, never>;
    query: Schema.mutable<Schema.Struct<{
        type: Schema.optional<typeof Schema.String>;
        sort: Schema.optional<Schema.Array$<Schema.Schema<FieldSortType, FieldSortType, never>>>;
    }>>;
    schema: Schema.optional<Schema.Schema<JsonSchemaType, JsonSchemaType, never>>;
    fields: Schema.mutable<Schema.Array$<Schema.mutable<Schema.Struct<{
        id: typeof Schema.String;
        path: Schema.Schema<JsonPath, JsonPath, never>;
        visible: Schema.optional<typeof Schema.Boolean>;
        size: Schema.optional<typeof Schema.Number>;
        referencePath: Schema.optional<Schema.Schema<JsonPath, JsonPath, never>>;
    }>>>>;
    metadata: Schema.optional<Schema.mutable<Schema.Record$<typeof Schema.String, typeof Schema.Any>>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    name: Schema.SchemaClass<string, string, never>;
    query: Schema.mutable<Schema.Struct<{
        type: Schema.optional<typeof Schema.String>;
        sort: Schema.optional<Schema.Array$<Schema.Schema<FieldSortType, FieldSortType, never>>>;
    }>>;
    schema: Schema.optional<Schema.Schema<JsonSchemaType, JsonSchemaType, never>>;
    fields: Schema.mutable<Schema.Array$<Schema.mutable<Schema.Struct<{
        id: typeof Schema.String;
        path: Schema.Schema<JsonPath, JsonPath, never>;
        visible: Schema.optional<typeof Schema.Boolean>;
        size: Schema.optional<typeof Schema.Number>;
        referencePath: Schema.optional<Schema.Schema<JsonPath, JsonPath, never>>;
    }>>>>;
    metadata: Schema.optional<Schema.mutable<Schema.Record$<typeof Schema.String, typeof Schema.Any>>>;
}>>;
export declare class ViewTypeV1 extends ViewTypeV1_base {
}
declare const ViewTypeV2_base: import("@dxos/echo-schema").TypedObjectPrototype<import("@dxos/echo-schema").TypedObjectFields<{
    name: Schema.SchemaClass<string, string, never>;
    query: Schema.Schema<QueryType, QueryType, never>;
    schema: Schema.optional<Schema.Schema<JsonSchemaType, JsonSchemaType, never>>;
    fields: Schema.mutable<Schema.Array$<Schema.mutable<Schema.Struct<{
        id: typeof Schema.String;
        path: Schema.Schema<JsonPath, JsonPath, never>;
        visible: Schema.optional<typeof Schema.Boolean>;
        size: Schema.optional<typeof Schema.Number>;
        referencePath: Schema.optional<Schema.Schema<JsonPath, JsonPath, never>>;
    }>>>>;
    metadata: Schema.optional<Schema.mutable<Schema.Record$<typeof Schema.String, typeof Schema.Any>>>;
}, import("@dxos/echo-schema").TypedObjectOptions>, Schema.Struct.Encoded<{
    name: Schema.SchemaClass<string, string, never>;
    query: Schema.Schema<QueryType, QueryType, never>;
    schema: Schema.optional<Schema.Schema<JsonSchemaType, JsonSchemaType, never>>;
    fields: Schema.mutable<Schema.Array$<Schema.mutable<Schema.Struct<{
        id: typeof Schema.String;
        path: Schema.Schema<JsonPath, JsonPath, never>;
        visible: Schema.optional<typeof Schema.Boolean>;
        size: Schema.optional<typeof Schema.Number>;
        referencePath: Schema.optional<Schema.Schema<JsonPath, JsonPath, never>>;
    }>>>>;
    metadata: Schema.optional<Schema.mutable<Schema.Record$<typeof Schema.String, typeof Schema.Any>>>;
}>>;
export declare class ViewTypeV2 extends ViewTypeV2_base {
}
export declare const ViewTypeV1ToV2: import("./object-migration").ObjectMigration;
export {};
//# sourceMappingURL=object-migration.test.d.ts.map