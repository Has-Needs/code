import { type RpcPort } from '@dxos/rpc';
export type IFramePortOptions = {
    channel: string;
    iframe?: HTMLIFrameElement;
    origin?: string;
    onOrigin?: (origin: string) => void;
};
/**
 * Create a RPC port with an iframe over window messaging.
 * @param options.channel Identifier for sent/recieved messages.
 * @param options.iframe Instance of the iframe if sending to child.
 * @param options.origin Origin of the destination window.
 * @param options.onOrigin Callback triggered when origin of destination window is verified.
 * @returns RPC port for messaging.
 */
export declare const createIFramePort: ({ channel, iframe, origin, onOrigin }: IFramePortOptions) => RpcPort;
export type CreateIFrameOptions = {
    hidden?: boolean;
    allow?: string;
};
/**
 * Create a hidden iframe and insert it into the DOM.
 * If an element with the same id already exists it will be returned instead.
 * @param source Source of the iframe.
 * @param id DOM id of the iframe.
 * @returns The created iframe.
 */
export declare const createIFrame: (source: string, id: string, { hidden, allow }?: CreateIFrameOptions) => HTMLIFrameElement;
//# sourceMappingURL=iframe.d.ts.map