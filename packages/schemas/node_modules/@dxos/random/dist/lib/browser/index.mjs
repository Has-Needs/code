import "@dxos/node-std/globals";

// packages/common/random/src/index.ts
export * from "@ngneat/falso";

// packages/common/random/src/faker.ts
import { rand, randChanceBoolean, randCompanyName, randEmail, randFirstName, randFloat, randFullName, randHexaDecimal, randImg, randNumber as randNumber2, randParagraph, randProductName, randRecentDate, randSentence, randUrl, randUuid, randWord, seed } from "@ngneat/falso";
import { idEmoji, idHue } from "@dxos/util";

// packages/common/random/src/data.ts
var airports = [
  {
    name: "Atlanta",
    code: "ATL",
    location: [
      -84.4277,
      33.6407
    ]
  },
  {
    name: "Dubai",
    code: "DXB",
    location: [
      55.3644,
      25.2532
    ]
  },
  {
    name: "Dallas",
    code: "DFW",
    location: [
      -97.0403,
      32.8998
    ]
  },
  {
    name: "London",
    code: "LHR",
    location: [
      -0.4543,
      51.47
    ]
  },
  {
    name: "Tokyo",
    code: "HND",
    location: [
      139.7811,
      35.5494
    ]
  },
  {
    name: "Denver",
    code: "DEN",
    location: [
      -104.6737,
      39.8561
    ]
  },
  {
    name: "Istanbul",
    code: "IST",
    location: [
      28.8153,
      41.2753
    ]
  },
  {
    name: "Los Angeles",
    code: "LAX",
    location: [
      -118.4085,
      33.9416
    ]
  },
  {
    name: "Paris",
    code: "CDG",
    location: [
      2.55,
      49.0097
    ]
  },
  {
    name: "Guangzhou",
    code: "CAN",
    location: [
      113.2971,
      23.3924
    ]
  },
  {
    name: "Frankfurt",
    code: "FRA",
    location: [
      8.5706,
      50.0333
    ]
  },
  {
    name: "Delhi",
    code: "DEL",
    location: [
      77.1031,
      28.5562
    ]
  },
  {
    name: "Singapore",
    code: "SIN",
    location: [
      103.994,
      1.3644
    ]
  },
  {
    name: "Amsterdam",
    code: "AMS",
    location: [
      4.7639,
      52.3105
    ]
  },
  {
    name: "Seoul",
    code: "ICN",
    location: [
      126.4505,
      37.4602
    ]
  },
  {
    name: "Jakarta",
    code: "CGK",
    location: [
      106.6559,
      -6.1256
    ]
  },
  {
    name: "Bangkok",
    code: "BKK",
    location: [
      100.7501,
      13.6899
    ]
  },
  {
    name: "Hong Kong",
    code: "HKG",
    location: [
      113.9185,
      22.308
    ]
  },
  {
    name: "Madrid",
    code: "MAD",
    location: [
      -3.5676,
      40.4936
    ]
  },
  {
    name: "San Francisco",
    code: "SFO",
    location: [
      -122.379,
      37.6213
    ]
  },
  {
    name: "New York",
    code: "JFK",
    location: [
      -73.7781,
      40.6413
    ]
  },
  {
    name: "Chicago",
    code: "ORD",
    location: [
      -87.9048,
      41.9742
    ]
  },
  {
    name: "Shanghai",
    code: "PVG",
    location: [
      121.8083,
      31.1434
    ]
  },
  {
    name: "Beijing",
    code: "PEK",
    location: [
      116.4074,
      39.9042
    ]
  },
  {
    name: "Miami",
    code: "MIA",
    location: [
      -80.2906,
      25.7959
    ]
  },
  {
    name: "Houston",
    code: "IAH",
    location: [
      -95.3414,
      29.9844
    ]
  },
  {
    name: "Munich",
    code: "MUC",
    location: [
      11.7861,
      48.3538
    ]
  },
  {
    name: "Toronto",
    code: "YYZ",
    location: [
      -79.6306,
      43.6777
    ]
  },
  {
    name: "Sydney",
    code: "SYD",
    location: [
      151.1799,
      -33.9399
    ]
  },
  {
    name: "Melbourne",
    code: "MEL",
    location: [
      144.843,
      -37.6733
    ]
  },
  {
    name: "Rome",
    code: "FCO",
    location: [
      12.2508,
      41.8003
    ]
  },
  {
    name: "Barcelona",
    code: "BCN",
    location: [
      2.0759,
      41.2974
    ]
  },
  {
    name: "Kuala Lumpur",
    code: "KUL",
    location: [
      101.7099,
      2.7456
    ]
  },
  {
    name: "Doha",
    code: "DOH",
    location: [
      51.6136,
      25.2731
    ]
  },
  {
    name: "Vienna",
    code: "VIE",
    location: [
      16.5697,
      48.1103
    ]
  },
  {
    name: "Zurich",
    code: "ZRH",
    location: [
      8.5492,
      47.4583
    ]
  },
  {
    name: "Brussels",
    code: "BRU",
    location: [
      4.4844,
      50.901
    ]
  },
  {
    name: "Copenhagen",
    code: "CPH",
    location: [
      12.6508,
      55.6181
    ]
  },
  {
    name: "Oslo",
    code: "OSL",
    location: [
      11.1004,
      60.1939
    ]
  },
  {
    name: "Stockholm",
    code: "ARN",
    location: [
      17.9186,
      59.6519
    ]
  },
  {
    name: "Helsinki",
    code: "HEL",
    location: [
      24.9633,
      60.3172
    ]
  },
  {
    name: "Lisbon",
    code: "LIS",
    location: [
      -9.1359,
      38.7742
    ]
  },
  {
    name: "Athens",
    code: "ATH",
    location: [
      23.9445,
      37.9364
    ]
  },
  {
    name: "Warsaw",
    code: "WAW",
    location: [
      20.9671,
      52.1657
    ]
  },
  {
    name: "Budapest",
    code: "BUD",
    location: [
      19.261,
      47.433
    ]
  },
  {
    name: "Prague",
    code: "PRG",
    location: [
      14.2632,
      50.1008
    ]
  },
  {
    name: "Moscow",
    code: "SVO",
    location: [
      37.4146,
      55.9726
    ]
  },
  {
    name: "Dubai",
    code: "DXB",
    location: [
      55.3644,
      25.2532
    ]
  }
];
var icons = [
  "ph--air-traffic-control--regular",
  "ph--asterisk--regular",
  "ph--atom--regular",
  "ph--basketball--regular",
  "ph--butterfly--regular",
  "ph--cactus--regular",
  "ph--cake--regular",
  "ph--calendar-dots--regular",
  "ph--campfire--regular",
  "ph--command--regular",
  "ph--confetti--regular",
  "ph--detective--regular",
  "ph--disco-ball--regular",
  "ph--dna--regular",
  "ph--factory--regular",
  "ph--flag-banner-fold--regular",
  "ph--flask--regular",
  "ph--flower-lotus--regular",
  "ph--flying-saucer--regular",
  "ph--game-controller--regular",
  "ph--gavel--regular",
  "ph--gift--regular",
  "ph--guitar--regular",
  "ph--hamburger--regular",
  "ph--handshake--regular",
  "ph--heart--regular",
  "ph--lightbulb--regular",
  "ph--lock--regular",
  "ph--martini--regular",
  "ph--medal-military--regular",
  "ph--moped-front--regular",
  "ph--office-chair--regular",
  "ph--paint-brush-household--regular",
  "ph--peace--regular",
  "ph--person-simple-hike--regular",
  "ph--piggy-bank--regular",
  "ph--potted-plant--regular",
  "ph--radioactive--regular",
  "ph--rocket-launch--regular",
  "ph--shield-star--regular",
  "ph--shopping-cart--regular",
  "ph--stethoscope--regular",
  "ph--student--regular",
  "ph--sun--regular",
  "ph--tote--regular",
  "ph--tree--regular",
  "ph--users-three--regular",
  "ph--yin-yang--regular"
];

// packages/common/random/src/util.ts
import { randNumber } from "@ngneat/falso";
var toRange = (range, min = 0) => typeof range === "number" ? {
  min,
  max: range
} : range;
var getCount = (range) => typeof range === "number" ? range : randNumber(range);
var multiple = (fn, n) => {
  return Array.from({
    length: n
  }).map((_, i) => fn(i));
};
var uniqueArray = (values, n) => {
  if (Array.isArray(values)) {
    const results = [];
    const selection = Array.from(new Set(values));
    for (let i = 0; i < n; i++) {
      if (selection.length === 0) {
        break;
      }
      results.push(selection.splice(Math.floor(Math.random() * selection.length), 1)[0]);
    }
    return results;
  } else {
    const results = /* @__PURE__ */ new Set();
    while (results.size < n) {
      results.add(values());
    }
    return Array.from(results);
  }
};

// packages/common/random/src/faker.ts
var faker = {
  //
  // Util
  //
  seed: (value) => seed(String(value)),
  helpers: {
    arrayElement: (a) => rand(a),
    multiple: (f, { count }) => multiple(f, typeof count === "number" ? count : getCount(count)),
    uniqueArray: (f, n) => uniqueArray(f, n),
    randomSubset: (array, count) => {
      const length = count === void 0 ? Math.floor(Math.random() * (array.length + 1)) : Math.min(typeof count === "number" ? count : getCount(count), array.length);
      if (length === 0) {
        return [];
      }
      return uniqueArray(() => rand(array), length);
    }
  },
  //
  // Type
  //
  number: {
    float: (range) => randFloat(range ? toRange(range) : void 0),
    int: (range) => randNumber2(range ? toRange(range) : void 0)
  },
  datatype: {
    boolean: (p) => randChanceBoolean({
      chanceTrue: p?.probability ?? 0.5
    })
  },
  date: {
    recent: () => randRecentDate(),
    iso8601: () => randRecentDate().toISOString()
  },
  image: {
    url: () => randImg()
  },
  //
  // Text
  //
  lorem: {
    word: () => randWord(),
    words: (n = 1) => randWord({
      length: getCount(n)
    }).join(" "),
    sentence: (n = 1) => {
      if (n) {
        const text = randWord({
          length: getCount(n)
        }).join(" ");
        return text.charAt(0).toUpperCase() + text.slice(1) + ".";
      }
      return randSentence();
    },
    sentences: (n = 1) => randSentence({
      length: getCount(n)
    }).join(" "),
    paragraph: (n = 1) => {
      if (n) {
        return randSentence({
          length: getCount(n)
        }).join(" ");
      }
      return randParagraph();
    },
    paragraphs: (n = 1) => randParagraph({
      length: getCount(n)
    }).join("\n")
  },
  //
  // String
  //
  string: {
    hexadecimal: (l) => randHexaDecimal(l).join(""),
    uuid: () => randUuid()
  },
  //
  // Custom
  //
  internet: {
    email: () => randEmail(),
    url: () => randUrl()
  },
  person: {
    firstName: () => randFirstName(),
    fullName: () => randFullName()
  },
  company: {
    name: () => randCompanyName()
  },
  commerce: {
    productName: () => randProductName()
  },
  geo: {
    airport: () => rand(airports),
    location: () => rand(airports).location
  },
  email: {},
  properties: {
    emoji: () => rand(idEmoji),
    hue: () => rand(idHue),
    icon: () => rand(icons)
  }
};
export {
  faker
};
//# sourceMappingURL=index.mjs.map
