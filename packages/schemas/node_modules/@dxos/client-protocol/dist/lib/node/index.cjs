"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var node_exports = {};
__export(node_exports, {
  AUTHENTICATION_CODE_LENGTH: () => AUTHENTICATION_CODE_LENGTH,
  AUTH_TIMEOUT: () => AUTH_TIMEOUT,
  AuthenticatingInvitation: () => AuthenticatingInvitation,
  CREATE_SPACE_TIMEOUT: () => CREATE_SPACE_TIMEOUT,
  CancellableInvitation: () => CancellableInvitation,
  ClientServicesProviderResource: () => ClientServicesProviderResource,
  DEFAULT_CLIENT_CHANNEL: () => DEFAULT_CLIENT_CHANNEL,
  DEFAULT_INTERNAL_CHANNEL: () => DEFAULT_INTERNAL_CHANNEL,
  DEFAULT_SHELL_CHANNEL: () => DEFAULT_SHELL_CHANNEL,
  DEFAULT_VAULT_URL: () => DEFAULT_VAULT_URL,
  DEFAULT_WORKER_BROADCAST_CHANNEL: () => DEFAULT_WORKER_BROADCAST_CHANNEL,
  DX_CACHE: () => DX_CACHE,
  DX_CONFIG: () => DX_CONFIG,
  DX_DATA: () => DX_DATA,
  DX_RUNTIME: () => DX_RUNTIME,
  DX_STATE: () => DX_STATE,
  ENV_DX_CONFIG: () => ENV_DX_CONFIG,
  ENV_DX_NO_AGENT: () => ENV_DX_NO_AGENT,
  ENV_DX_PROFILE: () => ENV_DX_PROFILE,
  ENV_DX_PROFILE_DEFAULT: () => ENV_DX_PROFILE_DEFAULT,
  EXPECTED_CONFIG_VERSION: () => EXPECTED_CONFIG_VERSION,
  INVITATION_TIMEOUT: () => INVITATION_TIMEOUT,
  InvitationEncoder: () => InvitationEncoder,
  LOAD_CONTROL_FEEDS_TIMEOUT: () => LOAD_CONTROL_FEEDS_TIMEOUT,
  LOAD_PROPERTIES_TIMEOUT: () => LOAD_PROPERTIES_TIMEOUT,
  PROXY_CONNECTION_TIMEOUT: () => PROXY_CONNECTION_TIMEOUT,
  PropertiesType: () => PropertiesType,
  RESOURCE_LOCK_TIMEOUT: () => RESOURCE_LOCK_TIMEOUT,
  STATUS_TIMEOUT: () => STATUS_TIMEOUT,
  TYPE_PROPERTIES: () => TYPE_PROPERTIES,
  appServiceBundle: () => appServiceBundle,
  clientServiceBundle: () => clientServiceBundle,
  defaultConfig: () => defaultConfig,
  getExpirationTime: () => getExpirationTime,
  getProfilePath: () => getProfilePath,
  iframeServiceBundle: () => iframeServiceBundle,
  shellServiceBundle: () => shellServiceBundle,
  workerServiceBundle: () => workerServiceBundle,
  wrapObservable: () => wrapObservable
});
module.exports = __toCommonJS(node_exports);
var import_base_x = __toESM(require("base-x"));
var import_proto = require("@dxos/protocols/proto");
var import_services = require("@dxos/protocols/proto/dxos/client/services");
var import_async = require("@dxos/async");
var import_invariant = require("@dxos/invariant");
var import_services2 = require("@dxos/protocols/proto/dxos/client/services");
var import_proto2 = require("@dxos/protocols/proto");
var import_rpc = require("@dxos/rpc");
var import_effect = require("effect");
var import_echo = require("@dxos/echo");
var import_echo_schema = require("@dxos/echo-schema");
var ClientServicesProviderResource = Symbol.for("dxos.resource.ClientServices");
var DEFAULT_INTERNAL_CHANNEL = "dxos:vault";
var DEFAULT_CLIENT_CHANNEL = "dxos:app";
var DEFAULT_SHELL_CHANNEL = "dxos:shell";
var DEFAULT_WORKER_BROADCAST_CHANNEL = "dxos:shared-worker";
var DEFAULT_VAULT_URL = "https://halo.dxos.org/vault.html";
var EXPECTED_CONFIG_VERSION = 1;
var defaultConfig = {
  version: 1
};
var HOME = typeof process !== "undefined" ? process?.env?.HOME ?? "" : "";
var getProfilePath = (root, profile, file = void 0) => `${root}/profile/${profile}` + (file ? `/${file}` : "");
var DX_CONFIG = `${HOME}/.config/dx`;
var DX_CACHE = `${HOME}/.cache/dx`;
var DX_DATA = `${HOME}/.local/share/dx`;
var DX_STATE = `${HOME}/.local/state/dx`;
var DX_RUNTIME = "/tmp/dx/run";
var ENV_DX_CONFIG = "DX_CONFIG";
var ENV_DX_NO_AGENT = "DX_NO_AGENT";
var ENV_DX_PROFILE = "DX_PROFILE";
var ENV_DX_PROFILE_DEFAULT = "default";
var base62 = (0, import_base_x.default)("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
var codec = import_proto.schema.getCodecForType("dxos.client.services.Invitation");
var InvitationEncoder = class {
  static decode(text) {
    const decodedInvitation = codec.decode(base62.decode(text));
    if (decodedInvitation.type === import_services.Invitation.Type.MULTIUSE) {
      decodedInvitation.type = import_services.Invitation.Type.INTERACTIVE;
      decodedInvitation.multiUse = true;
    }
    return decodedInvitation;
  }
  static encode(invitation) {
    return base62.encode(codec.encode({
      invitationId: invitation.invitationId,
      type: invitation.type,
      kind: invitation.kind,
      authMethod: invitation.authMethod,
      swarmKey: invitation.swarmKey,
      state: invitation.state,
      timeout: invitation.timeout,
      guestKeypair: invitation.guestKeypair,
      spaceId: invitation.spaceId,
      lifetime: invitation.lifetime,
      created: invitation.created,
      // TODO(wittjosiah): Make these optional to encode for greater privacy.
      ...invitation.spaceKey ? {
        spaceKey: invitation.spaceKey
      } : {},
      ...invitation.target ? {
        target: invitation.target
      } : {}
    }));
  }
};
var __dxlog_file = "/home/runner/work/dxos/dxos/packages/sdk/client-protocol/src/invitations/invitations.ts";
var AUTHENTICATION_CODE_LENGTH = 6;
var INVITATION_TIMEOUT = 3 * 6e4;
var CancellableInvitation = class extends import_async.MulticastObservable {
  constructor({ subscriber, initialInvitation, onCancel }) {
    super(subscriber, initialInvitation);
    this._onCancel = onCancel;
  }
  cancel() {
    return this._onCancel();
  }
  get expired() {
    const expiration = getExpirationTime(this.get());
    return expiration && expiration.getTime() < Date.now();
  }
  get expiry() {
    return getExpirationTime(this.get());
  }
};
var AuthenticatingInvitation = class extends CancellableInvitation {
  constructor({ subscriber, initialInvitation, onCancel, onAuthenticate }) {
    super({
      subscriber,
      initialInvitation,
      onCancel
    });
    this._onAuthenticate = onAuthenticate;
  }
  async authenticate(authCode) {
    return this._onAuthenticate(authCode);
  }
};
var wrapObservable = async (observable) => {
  return new Promise((resolve, reject) => {
    const subscription = observable.subscribe((invitation) => {
      (0, import_invariant.invariant)(invitation?.state === import_services2.Invitation.State.SUCCESS, void 0, {
        F: __dxlog_file,
        L: 90,
        S: void 0,
        A: [
          "invitation?.state === Invitation.State.SUCCESS",
          ""
        ]
      });
      subscription.unsubscribe();
      resolve(invitation);
    }, (err) => {
      subscription.unsubscribe();
      reject(err);
    });
  });
};
var getExpirationTime = (invitation) => {
  if (!(invitation.created && invitation.lifetime)) {
    return;
  }
  return new Date(invitation.created.getTime() + invitation.lifetime * 1e3);
};
var clientServiceBundle = (0, import_rpc.createServiceBundle)({
  SystemService: import_proto2.schema.getService("dxos.client.services.SystemService"),
  NetworkService: import_proto2.schema.getService("dxos.client.services.NetworkService"),
  LoggingService: import_proto2.schema.getService("dxos.client.services.LoggingService"),
  IdentityService: import_proto2.schema.getService("dxos.client.services.IdentityService"),
  QueryService: import_proto2.schema.getService("dxos.echo.query.QueryService"),
  InvitationsService: import_proto2.schema.getService("dxos.client.services.InvitationsService"),
  DevicesService: import_proto2.schema.getService("dxos.client.services.DevicesService"),
  SpacesService: import_proto2.schema.getService("dxos.client.services.SpacesService"),
  DataService: import_proto2.schema.getService("dxos.echo.service.DataService"),
  ContactsService: import_proto2.schema.getService("dxos.client.services.ContactsService"),
  EdgeAgentService: import_proto2.schema.getService("dxos.client.services.EdgeAgentService"),
  // Agent-only.
  FunctionRegistryService: import_proto2.schema.getService("dxos.agent.functions.FunctionRegistryService"),
  // TODO(burdon): Deprecated.
  DevtoolsHost: import_proto2.schema.getService("dxos.devtools.host.DevtoolsHost"),
  TracingService: import_proto2.schema.getService("dxos.tracing.TracingService")
});
var iframeServiceBundle = {
  BridgeService: import_proto2.schema.getService("dxos.mesh.bridge.BridgeService")
};
var workerServiceBundle = {
  WorkerService: import_proto2.schema.getService("dxos.iframe.WorkerService")
};
var appServiceBundle = {
  AppService: import_proto2.schema.getService("dxos.iframe.AppService")
};
var shellServiceBundle = {
  ShellService: import_proto2.schema.getService("dxos.iframe.ShellService")
};
var PROXY_CONNECTION_TIMEOUT = 3e4;
var AUTH_TIMEOUT = 3e4;
var STATUS_TIMEOUT = 1e4;
var RESOURCE_LOCK_TIMEOUT = 3e3;
var LOAD_PROPERTIES_TIMEOUT = 3e3;
var CREATE_SPACE_TIMEOUT = 5e3;
var LOAD_CONTROL_FEEDS_TIMEOUT = 3e3;
var TYPE_PROPERTIES = "dxos.org/type/Properties";
var PropertiesType = class extends (0, import_echo_schema.TypedObject)({
  typename: TYPE_PROPERTIES,
  version: "0.1.0"
})({
  name: import_effect.Schema.optional(import_effect.Schema.String),
  // TODO(wittjosiah): Make generic?
  hue: import_effect.Schema.optional(import_effect.Schema.String),
  icon: import_effect.Schema.optional(import_effect.Schema.String),
  invocationTraceQueue: import_effect.Schema.optional(import_echo.Type.Ref(import_echo.Type.Expando))
}, {
  record: true
}) {
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AUTHENTICATION_CODE_LENGTH,
  AUTH_TIMEOUT,
  AuthenticatingInvitation,
  CREATE_SPACE_TIMEOUT,
  CancellableInvitation,
  ClientServicesProviderResource,
  DEFAULT_CLIENT_CHANNEL,
  DEFAULT_INTERNAL_CHANNEL,
  DEFAULT_SHELL_CHANNEL,
  DEFAULT_VAULT_URL,
  DEFAULT_WORKER_BROADCAST_CHANNEL,
  DX_CACHE,
  DX_CONFIG,
  DX_DATA,
  DX_RUNTIME,
  DX_STATE,
  ENV_DX_CONFIG,
  ENV_DX_NO_AGENT,
  ENV_DX_PROFILE,
  ENV_DX_PROFILE_DEFAULT,
  EXPECTED_CONFIG_VERSION,
  INVITATION_TIMEOUT,
  InvitationEncoder,
  LOAD_CONTROL_FEEDS_TIMEOUT,
  LOAD_PROPERTIES_TIMEOUT,
  PROXY_CONNECTION_TIMEOUT,
  PropertiesType,
  RESOURCE_LOCK_TIMEOUT,
  STATUS_TIMEOUT,
  TYPE_PROPERTIES,
  appServiceBundle,
  clientServiceBundle,
  defaultConfig,
  getExpirationTime,
  getProfilePath,
  iframeServiceBundle,
  shellServiceBundle,
  workerServiceBundle,
  wrapObservable
});
//# sourceMappingURL=index.cjs.map
