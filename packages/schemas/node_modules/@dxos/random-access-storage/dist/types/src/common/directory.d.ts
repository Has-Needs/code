import { type File } from './file';
import { type StorageType } from './storage';
export type DirectoryParams = {
    type: StorageType;
    path: string;
    list: (path: string) => Promise<string[]>;
    getOrCreateFile: (path: string, filename: string, opts?: any) => File;
    remove: () => Promise<void>;
    onFlush?: () => Promise<void>;
};
/**
 * Wraps a directory in the storage file system.
 */
export declare class Directory {
    readonly type: StorageType;
    readonly path: string;
    private readonly _list;
    private readonly _getOrCreateFile;
    private readonly _remove;
    private readonly _onFlush?;
    constructor({ type, path, list, getOrCreateFile, remove, onFlush }: DirectoryParams);
    toString(): string;
    /**
     * Create a new sub-directory.
     */
    createDirectory(path: string): Directory;
    /**
     * Get all files in the current directory.
     */
    list(): Promise<string[]>;
    /**
     * Get or create a new file.
     */
    getOrCreateFile(filename: string, opts?: any): File;
    flush(): Promise<void>;
    /**
     * Close and delete all files in the directory and all its sub-directories.
     */
    delete(): Promise<void>;
}
//# sourceMappingURL=directory.d.ts.map