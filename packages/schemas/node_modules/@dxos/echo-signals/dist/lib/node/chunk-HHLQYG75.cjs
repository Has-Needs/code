"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_HHLQYG75_exports = {};
__export(chunk_HHLQYG75_exports, {
  compositeRuntime: () => compositeRuntime,
  registerSignalsRuntime: () => registerSignalsRuntime,
  runtimeList: () => runtimeList
});
module.exports = __toCommonJS(chunk_HHLQYG75_exports);
var runtimeList = [];
var runtimeUsed = false;
var registerSignalsRuntime = (runtime) => {
  if (runtimeUsed) {
  }
  runtimeList.push(runtime);
};
var CompositeSignal = class {
  constructor(_signals, debugInfo = void 0) {
    this._signals = _signals;
    this.debugInfo = debugInfo;
  }
  notifyRead() {
    for (const signal of this._signals) {
      signal.notifyRead();
    }
  }
  notifyWrite() {
    for (const signal of this._signals) {
      signal.notifyWrite();
    }
  }
  toString() {
    return "CompositeSignal";
  }
};
var CompositeRuntime = class {
  batch(cb) {
    runtimeUsed = true;
    const callBatchRecursively = (index) => {
      if (index >= runtimeList.length) {
        return cb();
      } else {
        return runtimeList[index].batch(() => callBatchRecursively(index + 1));
      }
    };
    return callBatchRecursively(0);
  }
  createSignal(debugInfo) {
    runtimeUsed = true;
    return new CompositeSignal(runtimeList.map((runtime) => runtime.createSignal(debugInfo)), debugInfo);
  }
  untracked(cb) {
    runtimeUsed = true;
    const callUntrackedRecursively = (index) => {
      if (index >= runtimeList.length) {
        return cb();
      } else {
        return runtimeList[index].untracked(() => callUntrackedRecursively(index + 1));
      }
    };
    return callUntrackedRecursively(0);
  }
};
var compositeRuntime = new CompositeRuntime();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compositeRuntime,
  registerSignalsRuntime,
  runtimeList
});
//# sourceMappingURL=chunk-HHLQYG75.cjs.map
