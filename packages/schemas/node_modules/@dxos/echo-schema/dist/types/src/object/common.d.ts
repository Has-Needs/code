import { Schema } from 'effect';
export type TypedObjectOptions = {
    partial?: true;
    record?: true;
};
/**
 *
 */
type SimplifiedSchemaFields<SchemaFields extends Schema.Struct.Fields, Options extends TypedObjectOptions> = Options['partial'] extends boolean ? Schema.SimplifyMutable<Partial<Schema.Struct.Type<SchemaFields>>> : Schema.SimplifyMutable<Schema.Struct.Type<SchemaFields>>;
/**
 *
 */
export type TypedObjectFields<SchemaFields extends Schema.Struct.Fields, Options extends TypedObjectOptions> = SimplifiedSchemaFields<SchemaFields, Options> & {
    id: string;
} & (Options['record'] extends boolean ? Schema.SimplifyMutable<Schema.IndexSignature.Type<Schema.IndexSignature.Records>> : {});
export declare const makeTypedEntityClass: (typename: string, version: string, baseSchema: Schema.Schema.AnyNoContext) => Schema.SchemaClass<any>;
export {};
//# sourceMappingURL=common.d.ts.map