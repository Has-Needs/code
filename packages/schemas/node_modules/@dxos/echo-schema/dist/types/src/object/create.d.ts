import { type Schema } from 'effect';
import { EntityKindId } from './model';
type CreateData<T> = T extends {
    id: string;
} ? Omit<T, 'id' | typeof EntityKindId> & {
    id?: string;
} : T;
/**
 * Creates a new object instance from a schema and data, without signal reactivity.
 * This static version creates plain JavaScript objects that are not reactive/observable.
 * For reactive objects that automatically update UI when changed, use the regular live() function.
 *
 * @param schema - The Effect schema that defines the object's structure and type, piped into EchoObject
 * @param data - The data to initialize the object with. The id and @type fields are handled automatically.
 * @returns A new non-reactive object instance conforming to the schema
 * @throws {Error} If the schema is not an object schema
 * @throws {TypeError} If data contains an @type field
 *
 * @example
 * ```ts
 * const Contact = Schema.Struct({
 *   name: Schema.String,
 *   email: Schema.String,
 * }).pipe(Type.Obj({
 *   typename: 'example.com/type/Contact',
 *   version: '0.1.0',
 * }))
 *
 * // Creates a non-reactive contact object
 * const contact = create(Contact, {
 *   name: "John",
 *   email: "john@example.com",
 * })
 * ```
 */
export declare const create: <S extends Schema.Schema.AnyNoContext>(schema: S, data: CreateData<Schema.Schema.Type<S>>) => CreateData<Schema.Schema.Type<S>> & {
    id: string;
};
export {};
//# sourceMappingURL=create.d.ts.map