import { SchemaAST, type JSONSchema } from 'effect';
import { type JsonSchemaType } from '../json-schema';
export type ScalarType = JSONSchema.JsonSchema7Object | JSONSchema.JsonSchema7String | JSONSchema.JsonSchema7Number | JSONSchema.JsonSchema7Boolean | JSONSchema.JsonSchema7Ref;
export declare enum TypeEnum {
    Array = "array",// TODO(burdon): Remove?
    Object = "object",
    String = "string",
    Number = "number",
    Boolean = "boolean",
    Ref = "ref"
}
export declare const getTypeEnum: (property: JsonSchemaType) => TypeEnum | undefined;
/**
 * https://json-schema.org/understanding-json-schema/reference/schema
 * https://json-schema.org/understanding-json-schema/reference/string#built-in-formats
 */
export declare const FormatAnnotationId: unique symbol;
export declare const FormatAnnotation: import("..").AnnotationHelper<FormatEnum>;
export declare const getFormatAnnotation: (node: SchemaAST.AST) => FormatEnum | undefined;
export declare enum FormatEnum {
    None = "none",
    String = "string",
    Number = "number",
    Boolean = "boolean",
    Ref = "ref",
    DID = "did",// Users, etc.
    DXN = "dxn",
    Email = "email",
    Formula = "formula",// Spreadsheet formula.
    Hostname = "hostname",
    JSON = "json",
    Markdown = "markdown",
    Regex = "regex",
    SingleSelect = "single-select",
    MultiSelect = "multi-select",
    URL = "url",
    UUID = "uuid",
    Currency = "currency",
    Integer = "integer",
    Percent = "percent",
    Timestamp = "timestamp",
    DateTime = "date-time",
    Date = "date",
    Time = "time",
    Duration = "duration",
    GeoPoint = "latlng"
}
export declare const FormatEnums: FormatEnum[];
export declare const PropertyKind: {
    type: typeof TypeEnum;
    format: typeof FormatEnum;
};
/**
 * Default formats
 */
export declare const typeToFormat: Partial<Record<TypeEnum, FormatEnum>>;
/**
 * Map of format to type.
 */
export declare const formatToType: Record<FormatEnum, TypeEnum>;
/**
 * Allowed value options for select.
 */
export declare const OptionsAnnotationId: unique symbol;
export declare const getOptionsAnnotation: (node: SchemaAST.AST) => OptionsAnnotationType[] | undefined;
export type OptionsAnnotationType = string | number;
//# sourceMappingURL=types.d.ts.map