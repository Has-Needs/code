import { Resource } from '@dxos/context';
export type PersistentLifecycleParams<T> = {
    /**
     * Create connection.
     * If promise resolves successfully, connection is considered established.
     */
    start: () => Promise<T | undefined>;
    /**
     * Reset connection to initial state.
     */
    stop: (state: T) => Promise<void>;
    /**
     * Called after successful start.
     */
    onRestart?: () => Promise<void>;
    /**
     * Maximum delay between restartion attempts.
     * Default: 5000ms
     */
    maxRestartDelay?: number;
};
/**
 * Handles restarts (e.g. persists connection).
 * Restarts are scheduled with exponential backoff.
 */
export declare class PersistentLifecycle<T> extends Resource {
    private readonly _start;
    private readonly _stop;
    private readonly _onRestart?;
    private readonly _maxRestartDelay;
    private _currentState;
    private _restartTask?;
    private _restartAfter;
    constructor({ start, stop, onRestart, maxRestartDelay }: PersistentLifecycleParams<T>);
    get state(): T | undefined;
    protected _open(): Promise<void>;
    protected _close(): Promise<void>;
    private _restart;
    private _stopCurrentState;
    /**
     * Scheduling restart should be done from outside.
     */
    scheduleRestart(): Promise<void>;
}
//# sourceMappingURL=persistent-lifecycle.d.ts.map