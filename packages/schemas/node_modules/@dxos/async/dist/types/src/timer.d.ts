import { type ReadOnlyEvent } from './events';
export type TimerOptions = {
    count: number;
    interval: number;
    jitter?: number;
};
export type TimerCallback = (i: number) => Promise<boolean | void>;
/**
 * Manages callback invocations at a interval with a possible jitter.
 * Note: The interval excludes the running time of the callback.
 */
export declare class Timer {
    private readonly _callback;
    private readonly _state;
    private _timer?;
    private _count;
    constructor(_callback: TimerCallback);
    get state(): ReadOnlyEvent<boolean>;
    get running(): boolean;
    start(options: TimerOptions, cb?: () => void): this;
    stop(): this;
}
//# sourceMappingURL=timer.d.ts.map