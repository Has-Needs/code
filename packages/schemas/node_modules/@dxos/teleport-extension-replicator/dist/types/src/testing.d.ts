import { type FeedOptions, FeedStore } from '@dxos/feed-store';
import { Keyring } from '@dxos/keyring';
import { PublicKey } from '@dxos/keys';
import { Teleport } from '@dxos/teleport';
import { ReplicatorExtension } from './replicator-extension';
export declare class TestBuilder {
    createAgent(): TestAgent;
}
export declare class TestAgent {
    storage: import("@dxos/random-access-storage").Storage;
    keyring: Keyring;
    feedStore: FeedStore<{}>;
    createWriteFeed(numBlocks?: number): Promise<import("@dxos/feed-store").FeedWrapper<{}>>;
    createReadFeed(key: PublicKey, opts?: FeedOptions): Promise<import("@dxos/feed-store").FeedWrapper<{}>>;
}
/**
 * Simulates two peers connected via P2P network.
 */
export declare const createStreamPair: () => Promise<{
    peer1: Teleport;
    peer2: Teleport;
}>;
/**
 * Two peers with replicator extensions pre-registered.
 */
export declare const createReplicatorPair: () => Promise<{
    replicator1: ReplicatorExtension;
    replicator2: ReplicatorExtension;
}>;
//# sourceMappingURL=testing.d.ts.map