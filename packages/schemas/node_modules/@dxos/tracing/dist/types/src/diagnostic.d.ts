import { type TraceDiagnosticParams, type TraceDiagnostic } from './api';
export declare const DIAGNOSTICS_TIMEOUT = 10000;
export type DiagnosticMetadata = {
    id: string;
    instanceId: string;
    instanceTag: string | null;
    name: string;
};
export type DiagnosticsRequest = {
    id: string;
    instanceId?: string;
    instanceTag?: string | null;
};
export type DiagnosticsData = {
    id: string;
    instanceId: string;
    data: any;
    error?: string;
};
export declare class TraceDiagnosticImpl implements TraceDiagnostic {
    id: string;
    fetch: () => any;
    name: string;
    private readonly _onUnregister;
    constructor(id: string, fetch: () => any, name: string, _onUnregister: () => void);
    unregister(): void;
}
export declare class DiagnosticsManager {
    readonly instanceId: string;
    readonly registry: Map<string, TraceDiagnosticImpl>;
    private _instanceTag;
    get instanceTag(): string | null;
    setInstanceTag(tag: string): void;
    registerDiagnostic(params: TraceDiagnosticParams<any>): TraceDiagnostic;
    list(): DiagnosticMetadata[];
    fetch(request: DiagnosticsRequest): Promise<DiagnosticsData>;
}
//# sourceMappingURL=diagnostic.d.ts.map