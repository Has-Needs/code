import { type LogProcessor } from './context';
/**
 * Standard levels.
 */
export declare enum LogLevel {
    TRACE = 5,
    DEBUG = 10,
    VERBOSE = 11,
    INFO = 12,
    WARN = 13,
    ERROR = 14
}
export declare const levels: {
    [index: string]: LogLevel;
};
export declare const shortLevelName: {
    5: string;
    10: string;
    11: string;
    12: string;
    13: string;
    14: string;
};
export declare enum LogProcessorType {
    CONSOLE = "console",
    BROWSER = "browser",
    DEBUG = "debug"
}
/**
 * Individual filter condition.
 */
export type LogFilter = {
    level: LogLevel;
    pattern?: string;
};
/**
 * Options to set inline or load from the YML file.
 */
export type LogOptions = {
    file?: string;
    filter?: string | string[] | LogLevel;
    captureFilter?: string | string[] | LogLevel;
    depth?: number;
    processor?: string | LogProcessorType;
    formatter?: {
        column: number;
        timestamp: boolean;
        timestampFirst: boolean;
    };
    prefix?: string;
};
/**
 * Runtime config.
 */
export interface LogConfig {
    options: LogOptions;
    filters?: LogFilter[];
    captureFilters?: LogFilter[];
    processors: LogProcessor[];
    prefix?: string;
}
//# sourceMappingURL=config.d.ts.map